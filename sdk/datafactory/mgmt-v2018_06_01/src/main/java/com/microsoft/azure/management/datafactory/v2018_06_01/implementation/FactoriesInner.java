/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datafactory.v2018_06_01.FactoryRepoUpdate;
import com.microsoft.azure.management.datafactory.v2018_06_01.GitHubAccessTokenRequest;
import com.microsoft.azure.management.datafactory.v2018_06_01.UserAccessPolicy;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Factories.
 */
public class FactoriesInner implements InnerSupportsListing<FactoryInner> {
    /** The Retrofit service to perform REST calls. */
    private FactoriesService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of FactoriesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FactoriesInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(FactoriesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Factories to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FactoriesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/factories")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories configureFactoryRepo" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/configureFactoryRepo")
        Observable<Response<ResponseBody>> configureFactoryRepo(@Path("subscriptionId") String subscriptionId, @Path("locationId") String locationId, @Query("api-version") String apiVersion, @Body FactoryRepoUpdate factoryRepoUpdate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories getGitHubAccessToken" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken")
        Observable<Response<ResponseBody>> getGitHubAccessToken(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body GitHubAccessTokenRequest gitHubAccessTokenRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories getDataPlaneAccess" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess")
        Observable<Response<ResponseBody>> getDataPlaneAccess(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body UserAccessPolicy policy, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Factories listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists factories under the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FactoryInner&gt; object if successful.
     */
    public PagedList<FactoryInner> list() {
        ServiceResponse<Page<FactoryInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<FactoryInner>(response.body()) {
            @Override
            public Page<FactoryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FactoryInner>> listAsync(final ListOperationCallback<FactoryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<Page<FactoryInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<FactoryInner>>, Page<FactoryInner>>() {
                @Override
                public Page<FactoryInner> call(ServiceResponse<Page<FactoryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<FactoryInner>>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(ServiceResponse<Page<FactoryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FactoryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FactoryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FactoryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FactoryInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FactoryInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FactoryInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates a factory's repo information.
     *
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FactoryInner object if successful.
     */
    public FactoryInner configureFactoryRepo(String locationId, FactoryRepoUpdate factoryRepoUpdate) {
        return configureFactoryRepoWithServiceResponseAsync(locationId, factoryRepoUpdate).toBlocking().single().body();
    }

    /**
     * Updates a factory's repo information.
     *
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FactoryInner> configureFactoryRepoAsync(String locationId, FactoryRepoUpdate factoryRepoUpdate, final ServiceCallback<FactoryInner> serviceCallback) {
        return ServiceFuture.fromResponse(configureFactoryRepoWithServiceResponseAsync(locationId, factoryRepoUpdate), serviceCallback);
    }

    /**
     * Updates a factory's repo information.
     *
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactoryInner object
     */
    public Observable<FactoryInner> configureFactoryRepoAsync(String locationId, FactoryRepoUpdate factoryRepoUpdate) {
        return configureFactoryRepoWithServiceResponseAsync(locationId, factoryRepoUpdate).map(new Func1<ServiceResponse<FactoryInner>, FactoryInner>() {
            @Override
            public FactoryInner call(ServiceResponse<FactoryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a factory's repo information.
     *
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactoryInner object
     */
    public Observable<ServiceResponse<FactoryInner>> configureFactoryRepoWithServiceResponseAsync(String locationId, FactoryRepoUpdate factoryRepoUpdate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (locationId == null) {
            throw new IllegalArgumentException("Parameter locationId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (factoryRepoUpdate == null) {
            throw new IllegalArgumentException("Parameter factoryRepoUpdate is required and cannot be null.");
        }
        Validator.validate(factoryRepoUpdate);
        return service.configureFactoryRepo(this.client.subscriptionId(), locationId, this.client.apiVersion(), factoryRepoUpdate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FactoryInner>>>() {
                @Override
                public Observable<ServiceResponse<FactoryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FactoryInner> clientResponse = configureFactoryRepoDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FactoryInner> configureFactoryRepoDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FactoryInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FactoryInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists factories.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FactoryInner&gt; object if successful.
     */
    public PagedList<FactoryInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<FactoryInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<FactoryInner>(response.body()) {
            @Override
            public Page<FactoryInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists factories.
     *
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FactoryInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<FactoryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists factories.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<Page<FactoryInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<FactoryInner>>, Page<FactoryInner>>() {
                @Override
                public Page<FactoryInner> call(ServiceResponse<Page<FactoryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists factories.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<FactoryInner>>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(ServiceResponse<Page<FactoryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists factories.
     *
    ServiceResponse<PageImpl<FactoryInner>> * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FactoryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FactoryInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FactoryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FactoryInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FactoryInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FactoryInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get GitHub Access Token.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GitHubAccessTokenResponseInner object if successful.
     */
    public GitHubAccessTokenResponseInner getGitHubAccessToken(String resourceGroupName, String factoryName, GitHubAccessTokenRequest gitHubAccessTokenRequest) {
        return getGitHubAccessTokenWithServiceResponseAsync(resourceGroupName, factoryName, gitHubAccessTokenRequest).toBlocking().single().body();
    }

    /**
     * Get GitHub Access Token.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GitHubAccessTokenResponseInner> getGitHubAccessTokenAsync(String resourceGroupName, String factoryName, GitHubAccessTokenRequest gitHubAccessTokenRequest, final ServiceCallback<GitHubAccessTokenResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getGitHubAccessTokenWithServiceResponseAsync(resourceGroupName, factoryName, gitHubAccessTokenRequest), serviceCallback);
    }

    /**
     * Get GitHub Access Token.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GitHubAccessTokenResponseInner object
     */
    public Observable<GitHubAccessTokenResponseInner> getGitHubAccessTokenAsync(String resourceGroupName, String factoryName, GitHubAccessTokenRequest gitHubAccessTokenRequest) {
        return getGitHubAccessTokenWithServiceResponseAsync(resourceGroupName, factoryName, gitHubAccessTokenRequest).map(new Func1<ServiceResponse<GitHubAccessTokenResponseInner>, GitHubAccessTokenResponseInner>() {
            @Override
            public GitHubAccessTokenResponseInner call(ServiceResponse<GitHubAccessTokenResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get GitHub Access Token.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GitHubAccessTokenResponseInner object
     */
    public Observable<ServiceResponse<GitHubAccessTokenResponseInner>> getGitHubAccessTokenWithServiceResponseAsync(String resourceGroupName, String factoryName, GitHubAccessTokenRequest gitHubAccessTokenRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (gitHubAccessTokenRequest == null) {
            throw new IllegalArgumentException("Parameter gitHubAccessTokenRequest is required and cannot be null.");
        }
        Validator.validate(gitHubAccessTokenRequest);
        return service.getGitHubAccessToken(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), gitHubAccessTokenRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GitHubAccessTokenResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<GitHubAccessTokenResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GitHubAccessTokenResponseInner> clientResponse = getGitHubAccessTokenDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GitHubAccessTokenResponseInner> getGitHubAccessTokenDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GitHubAccessTokenResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GitHubAccessTokenResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get Data Plane access.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccessPolicyResponseInner object if successful.
     */
    public AccessPolicyResponseInner getDataPlaneAccess(String resourceGroupName, String factoryName, UserAccessPolicy policy) {
        return getDataPlaneAccessWithServiceResponseAsync(resourceGroupName, factoryName, policy).toBlocking().single().body();
    }

    /**
     * Get Data Plane access.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccessPolicyResponseInner> getDataPlaneAccessAsync(String resourceGroupName, String factoryName, UserAccessPolicy policy, final ServiceCallback<AccessPolicyResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getDataPlaneAccessWithServiceResponseAsync(resourceGroupName, factoryName, policy), serviceCallback);
    }

    /**
     * Get Data Plane access.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccessPolicyResponseInner object
     */
    public Observable<AccessPolicyResponseInner> getDataPlaneAccessAsync(String resourceGroupName, String factoryName, UserAccessPolicy policy) {
        return getDataPlaneAccessWithServiceResponseAsync(resourceGroupName, factoryName, policy).map(new Func1<ServiceResponse<AccessPolicyResponseInner>, AccessPolicyResponseInner>() {
            @Override
            public AccessPolicyResponseInner call(ServiceResponse<AccessPolicyResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Data Plane access.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccessPolicyResponseInner object
     */
    public Observable<ServiceResponse<AccessPolicyResponseInner>> getDataPlaneAccessWithServiceResponseAsync(String resourceGroupName, String factoryName, UserAccessPolicy policy) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (policy == null) {
            throw new IllegalArgumentException("Parameter policy is required and cannot be null.");
        }
        Validator.validate(policy);
        return service.getDataPlaneAccess(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), policy, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccessPolicyResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<AccessPolicyResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccessPolicyResponseInner> clientResponse = getDataPlaneAccessDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccessPolicyResponseInner> getDataPlaneAccessDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccessPolicyResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccessPolicyResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FactoryInner&gt; object if successful.
     */
    public PagedList<FactoryInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<FactoryInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<FactoryInner>(response.body()) {
            @Override
            public Page<FactoryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FactoryInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<FactoryInner>> serviceFuture, final ListOperationCallback<FactoryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<Page<FactoryInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<FactoryInner>>, Page<FactoryInner>>() {
                @Override
                public Page<FactoryInner> call(ServiceResponse<Page<FactoryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists factories under the specified subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<FactoryInner>>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(ServiceResponse<Page<FactoryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists factories under the specified subscription.
     *
    ServiceResponse<PageImpl<FactoryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FactoryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FactoryInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FactoryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FactoryInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FactoryInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FactoryInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists factories.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FactoryInner&gt; object if successful.
     */
    public PagedList<FactoryInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<FactoryInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<FactoryInner>(response.body()) {
            @Override
            public Page<FactoryInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists factories.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FactoryInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<FactoryInner>> serviceFuture, final ListOperationCallback<FactoryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists factories.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<Page<FactoryInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<FactoryInner>>, Page<FactoryInner>>() {
                @Override
                public Page<FactoryInner> call(ServiceResponse<Page<FactoryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists factories.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FactoryInner&gt; object
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<FactoryInner>>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(ServiceResponse<Page<FactoryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists factories.
     *
    ServiceResponse<PageImpl<FactoryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FactoryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FactoryInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FactoryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FactoryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FactoryInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FactoryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FactoryInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FactoryInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FactoryInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
