/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.datafactory.v2018_06_01.Factories;
import com.microsoft.azure.management.datafactory.v2018_06_01.Factory;
import rx.Observable;
import rx.Completable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datafactory.v2018_06_01.GitHubAccessTokenResponse;
import com.microsoft.azure.management.datafactory.v2018_06_01.AccessPolicyResponse;
import com.microsoft.azure.management.datafactory.v2018_06_01.GitHubAccessTokenRequest;
import com.microsoft.azure.management.datafactory.v2018_06_01.UserAccessPolicy;
import com.microsoft.azure.management.datafactory.v2018_06_01.FactoryRepoUpdate;

class FactoriesImpl extends GroupableResourcesCoreImpl<Factory, FactoryImpl, FactoryInner, FactoriesInner, DataFactoryManager>  implements Factories {
    protected FactoriesImpl(DataFactoryManager manager) {
        super(manager.inner().factories(), manager);
    }

    @Override
    protected Observable<FactoryInner> getInnerAsync(String resourceGroupName, String name) {
        return null; // NOP Retrieve by resource group not supported
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        FactoriesInner client = this.inner();
        return Completable.error(new Throwable("Delete by RG not supported for this resource")); // NOP Delete by RG not supported
    }

    @Override
    public PagedList<Factory> listByResourceGroup(String resourceGroupName) {
        FactoriesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<Factory> listByResourceGroupAsync(String resourceGroupName) {
        FactoriesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<FactoryInner>, Iterable<FactoryInner>>() {
            @Override
            public Iterable<FactoryInner> call(Page<FactoryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FactoryInner, Factory>() {
            @Override
            public Factory call(FactoryInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<Factory> list() {
        FactoriesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<Factory> listAsync() {
        FactoriesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<FactoryInner>, Iterable<FactoryInner>>() {
            @Override
            public Iterable<FactoryInner> call(Page<FactoryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FactoryInner, Factory>() {
            @Override
            public Factory call(FactoryInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<GitHubAccessTokenResponse> getGitHubAccessTokenAsync(String resourceGroupName, String factoryName, GitHubAccessTokenRequest gitHubAccessTokenRequest) {
        FactoriesInner client = this.inner();
        return client.getGitHubAccessTokenAsync(resourceGroupName, factoryName, gitHubAccessTokenRequest)
        .map(new Func1<GitHubAccessTokenResponseInner, GitHubAccessTokenResponse>() {
            @Override
            public GitHubAccessTokenResponse call(GitHubAccessTokenResponseInner inner) {
                return new GitHubAccessTokenResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AccessPolicyResponse> getDataPlaneAccessAsync(String resourceGroupName, String factoryName, UserAccessPolicy policy) {
        FactoriesInner client = this.inner();
        return client.getDataPlaneAccessAsync(resourceGroupName, factoryName, policy)
        .map(new Func1<AccessPolicyResponseInner, AccessPolicyResponse>() {
            @Override
            public AccessPolicyResponse call(AccessPolicyResponseInner inner) {
                return new AccessPolicyResponseImpl(inner, manager());
            }
        });
    }

    @Override
    protected FactoryImpl wrapModel(FactoryInner inner) {
        return  new FactoryImpl(inner.name(), inner, manager());
    }

    @Override
    protected FactoryImpl wrapModel(String name) {
        return null; // Model is not creatable
    }

    @Override
    public Observable<Factory> configureFactoryRepoAsync(String locationId, FactoryRepoUpdate factoryRepoUpdate) {
        FactoriesInner client = this.inner();
        return client.configureFactoryRepoAsync(locationId, factoryRepoUpdate)
        .map(new Func1<FactoryInner, Factory>() {
            @Override
            public Factory call(FactoryInner inner) {
                return new FactoryImpl(inner.name(), inner, manager());
            }
        });
    }

}
