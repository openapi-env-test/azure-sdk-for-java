// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The details of Advisor Score. */
@Fluent
public final class ScoreEntity {
    /*
     * The date score was calculated.
     */
    @JsonProperty(value = "date")
    private String date;

    /*
     * The percentage score.
     */
    @JsonProperty(value = "score")
    private Float score;

    /*
     * The consumption units for the score.
     */
    @JsonProperty(value = "consumptionUnits")
    private Float consumptionUnits;

    /*
     * The number of impacted resources.
     */
    @JsonProperty(value = "impactedResourceCount")
    private Float impactedResourceCount;

    /*
     * The potential percentage increase in overall score at subscription level
     * once all recommendations in this scope are implemented.
     */
    @JsonProperty(value = "potentialScoreIncrease")
    private Float potentialScoreIncrease;

    /*
     * The count of impacted categories.
     */
    @JsonProperty(value = "categoryCount", access = JsonProperty.Access.WRITE_ONLY)
    private Float categoryCount;

    /**
     * Get the date property: The date score was calculated.
     *
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: The date score was calculated.
     *
     * @param date the date value to set.
     * @return the ScoreEntity object itself.
     */
    public ScoreEntity withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the score property: The percentage score.
     *
     * @return the score value.
     */
    public Float score() {
        return this.score;
    }

    /**
     * Set the score property: The percentage score.
     *
     * @param score the score value to set.
     * @return the ScoreEntity object itself.
     */
    public ScoreEntity withScore(Float score) {
        this.score = score;
        return this;
    }

    /**
     * Get the consumptionUnits property: The consumption units for the score.
     *
     * @return the consumptionUnits value.
     */
    public Float consumptionUnits() {
        return this.consumptionUnits;
    }

    /**
     * Set the consumptionUnits property: The consumption units for the score.
     *
     * @param consumptionUnits the consumptionUnits value to set.
     * @return the ScoreEntity object itself.
     */
    public ScoreEntity withConsumptionUnits(Float consumptionUnits) {
        this.consumptionUnits = consumptionUnits;
        return this;
    }

    /**
     * Get the impactedResourceCount property: The number of impacted resources.
     *
     * @return the impactedResourceCount value.
     */
    public Float impactedResourceCount() {
        return this.impactedResourceCount;
    }

    /**
     * Set the impactedResourceCount property: The number of impacted resources.
     *
     * @param impactedResourceCount the impactedResourceCount value to set.
     * @return the ScoreEntity object itself.
     */
    public ScoreEntity withImpactedResourceCount(Float impactedResourceCount) {
        this.impactedResourceCount = impactedResourceCount;
        return this;
    }

    /**
     * Get the potentialScoreIncrease property: The potential percentage increase in overall score at subscription level
     * once all recommendations in this scope are implemented.
     *
     * @return the potentialScoreIncrease value.
     */
    public Float potentialScoreIncrease() {
        return this.potentialScoreIncrease;
    }

    /**
     * Set the potentialScoreIncrease property: The potential percentage increase in overall score at subscription level
     * once all recommendations in this scope are implemented.
     *
     * @param potentialScoreIncrease the potentialScoreIncrease value to set.
     * @return the ScoreEntity object itself.
     */
    public ScoreEntity withPotentialScoreIncrease(Float potentialScoreIncrease) {
        this.potentialScoreIncrease = potentialScoreIncrease;
        return this;
    }

    /**
     * Get the categoryCount property: The count of impacted categories.
     *
     * @return the categoryCount value.
     */
    public Float categoryCount() {
        return this.categoryCount;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
