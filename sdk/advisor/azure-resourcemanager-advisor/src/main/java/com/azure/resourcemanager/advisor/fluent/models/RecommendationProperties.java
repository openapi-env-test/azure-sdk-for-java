// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.advisor.models.Category;
import com.azure.resourcemanager.advisor.models.Impact;
import com.azure.resourcemanager.advisor.models.Risk;
import com.azure.resourcemanager.advisor.models.ShortDescription;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** The properties of the recommendation. */
@Fluent
public final class RecommendationProperties {
    /*
     * The category of the recommendation.
     */
    @JsonProperty(value = "category")
    private Category category;

    /*
     * The business impact of the recommendation.
     */
    @JsonProperty(value = "impact")
    private Impact impact;

    /*
     * The resource type identified by Advisor.
     */
    @JsonProperty(value = "impactedField")
    private String impactedField;

    /*
     * The resource identified by Advisor.
     */
    @JsonProperty(value = "impactedValue")
    private String impactedValue;

    /*
     * The most recent time that Advisor checked the validity of the
     * recommendation.
     */
    @JsonProperty(value = "lastUpdated")
    private OffsetDateTime lastUpdated;

    /*
     * The recommendation metadata.
     */
    @JsonProperty(value = "metadata")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> metadata;

    /*
     * The recommendation-type GUID.
     */
    @JsonProperty(value = "recommendationTypeId")
    private String recommendationTypeId;

    /*
     * The potential risk of not implementing the recommendation.
     */
    @JsonProperty(value = "risk")
    private Risk risk;

    /*
     * A summary of the recommendation.
     */
    @JsonProperty(value = "shortDescription")
    private ShortDescription shortDescription;

    /**
     * Get the category property: The category of the recommendation.
     *
     * @return the category value.
     */
    public Category category() {
        return this.category;
    }

    /**
     * Set the category property: The category of the recommendation.
     *
     * @param category the category value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withCategory(Category category) {
        this.category = category;
        return this;
    }

    /**
     * Get the impact property: The business impact of the recommendation.
     *
     * @return the impact value.
     */
    public Impact impact() {
        return this.impact;
    }

    /**
     * Set the impact property: The business impact of the recommendation.
     *
     * @param impact the impact value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withImpact(Impact impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get the impactedField property: The resource type identified by Advisor.
     *
     * @return the impactedField value.
     */
    public String impactedField() {
        return this.impactedField;
    }

    /**
     * Set the impactedField property: The resource type identified by Advisor.
     *
     * @param impactedField the impactedField value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withImpactedField(String impactedField) {
        this.impactedField = impactedField;
        return this;
    }

    /**
     * Get the impactedValue property: The resource identified by Advisor.
     *
     * @return the impactedValue value.
     */
    public String impactedValue() {
        return this.impactedValue;
    }

    /**
     * Set the impactedValue property: The resource identified by Advisor.
     *
     * @param impactedValue the impactedValue value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withImpactedValue(String impactedValue) {
        this.impactedValue = impactedValue;
        return this;
    }

    /**
     * Get the lastUpdated property: The most recent time that Advisor checked the validity of the recommendation.
     *
     * @return the lastUpdated value.
     */
    public OffsetDateTime lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Set the lastUpdated property: The most recent time that Advisor checked the validity of the recommendation.
     *
     * @param lastUpdated the lastUpdated value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }

    /**
     * Get the metadata property: The recommendation metadata.
     *
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The recommendation metadata.
     *
     * @param metadata the metadata value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the recommendationTypeId property: The recommendation-type GUID.
     *
     * @return the recommendationTypeId value.
     */
    public String recommendationTypeId() {
        return this.recommendationTypeId;
    }

    /**
     * Set the recommendationTypeId property: The recommendation-type GUID.
     *
     * @param recommendationTypeId the recommendationTypeId value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withRecommendationTypeId(String recommendationTypeId) {
        this.recommendationTypeId = recommendationTypeId;
        return this;
    }

    /**
     * Get the risk property: The potential risk of not implementing the recommendation.
     *
     * @return the risk value.
     */
    public Risk risk() {
        return this.risk;
    }

    /**
     * Set the risk property: The potential risk of not implementing the recommendation.
     *
     * @param risk the risk value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withRisk(Risk risk) {
        this.risk = risk;
        return this;
    }

    /**
     * Get the shortDescription property: A summary of the recommendation.
     *
     * @return the shortDescription value.
     */
    public ShortDescription shortDescription() {
        return this.shortDescription;
    }

    /**
     * Set the shortDescription property: A summary of the recommendation.
     *
     * @param shortDescription the shortDescription value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withShortDescription(ShortDescription shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shortDescription() != null) {
            shortDescription().validate();
        }
    }
}
