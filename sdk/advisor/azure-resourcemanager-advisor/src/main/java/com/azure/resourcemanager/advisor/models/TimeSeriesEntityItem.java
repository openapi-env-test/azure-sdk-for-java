// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The data from different aggregation levels. */
@Fluent
public final class TimeSeriesEntityItem {
    /*
     * The aggregation level of the score.
     */
    @JsonProperty(value = "aggregationLevel")
    private TimeSeriesEntityItemAggregationLevel aggregationLevel;

    /*
     * The past score data
     */
    @JsonProperty(value = "scoreHistory")
    private List<ScoreEntity> scoreHistory;

    /**
     * Get the aggregationLevel property: The aggregation level of the score.
     *
     * @return the aggregationLevel value.
     */
    public TimeSeriesEntityItemAggregationLevel aggregationLevel() {
        return this.aggregationLevel;
    }

    /**
     * Set the aggregationLevel property: The aggregation level of the score.
     *
     * @param aggregationLevel the aggregationLevel value to set.
     * @return the TimeSeriesEntityItem object itself.
     */
    public TimeSeriesEntityItem withAggregationLevel(TimeSeriesEntityItemAggregationLevel aggregationLevel) {
        this.aggregationLevel = aggregationLevel;
        return this;
    }

    /**
     * Get the scoreHistory property: The past score data.
     *
     * @return the scoreHistory value.
     */
    public List<ScoreEntity> scoreHistory() {
        return this.scoreHistory;
    }

    /**
     * Set the scoreHistory property: The past score data.
     *
     * @param scoreHistory the scoreHistory value to set.
     * @return the TimeSeriesEntityItem object itself.
     */
    public TimeSeriesEntityItem withScoreHistory(List<ScoreEntity> scoreHistory) {
        this.scoreHistory = scoreHistory;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scoreHistory() != null) {
            scoreHistory().forEach(e -> e.validate());
        }
    }
}
