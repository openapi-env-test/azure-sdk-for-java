// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.scanning.generated;

import com.azure.analytics.purview.scanning.ClassificationRulesClient;
import com.azure.analytics.purview.scanning.ClassificationRulesClientBuilder;
import com.azure.analytics.purview.scanning.DataSourcesClient;
import com.azure.analytics.purview.scanning.DataSourcesClientBuilder;
import com.azure.analytics.purview.scanning.FiltersClient;
import com.azure.analytics.purview.scanning.FiltersClientBuilder;
import com.azure.analytics.purview.scanning.KeyVaultConnectionsClient;
import com.azure.analytics.purview.scanning.KeyVaultConnectionsClientBuilder;
import com.azure.analytics.purview.scanning.MetadataPolicyClient;
import com.azure.analytics.purview.scanning.MetadataPolicyClientBuilder;
import com.azure.analytics.purview.scanning.MetadataRolesClient;
import com.azure.analytics.purview.scanning.MetadataRolesClientBuilder;
import com.azure.analytics.purview.scanning.ScanResultClient;
import com.azure.analytics.purview.scanning.ScanResultClientBuilder;
import com.azure.analytics.purview.scanning.ScanRulesetsClient;
import com.azure.analytics.purview.scanning.ScanRulesetsClientBuilder;
import com.azure.analytics.purview.scanning.ScansClient;
import com.azure.analytics.purview.scanning.ScansClientBuilder;
import com.azure.analytics.purview.scanning.SystemScanRulesetsClient;
import com.azure.analytics.purview.scanning.SystemScanRulesetsClientBuilder;
import com.azure.analytics.purview.scanning.TriggersClient;
import com.azure.analytics.purview.scanning.TriggersClientBuilder;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class PurviewMetadataPolicyClientTestBase extends TestBase {
    protected KeyVaultConnectionsClient keyVaultConnectionsClient;

    protected ClassificationRulesClient classificationRulesClient;

    protected DataSourcesClient dataSourcesClient;

    protected FiltersClient filtersClient;

    protected ScansClient scansClient;

    protected ScanResultClient scanResultClient;

    protected ScanRulesetsClient scanRulesetsClient;

    protected SystemScanRulesetsClient systemScanRulesetsClient;

    protected TriggersClient triggersClient;

    protected MetadataRolesClient metadataRolesClient;

    protected MetadataPolicyClient metadataPolicyClient;

    @Override
    protected void beforeTest() {
        KeyVaultConnectionsClientBuilder keyVaultConnectionsClientbuilder =
                new KeyVaultConnectionsClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            keyVaultConnectionsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            keyVaultConnectionsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            keyVaultConnectionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        keyVaultConnectionsClient = keyVaultConnectionsClientbuilder.buildClient();

        ClassificationRulesClientBuilder classificationRulesClientbuilder =
                new ClassificationRulesClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            classificationRulesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            classificationRulesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            classificationRulesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        classificationRulesClient = classificationRulesClientbuilder.buildClient();

        DataSourcesClientBuilder dataSourcesClientbuilder =
                new DataSourcesClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            dataSourcesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            dataSourcesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            dataSourcesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        dataSourcesClient = dataSourcesClientbuilder.buildClient();

        FiltersClientBuilder filtersClientbuilder =
                new FiltersClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            filtersClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            filtersClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            filtersClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        filtersClient = filtersClientbuilder.buildClient();

        ScansClientBuilder scansClientbuilder =
                new ScansClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            scansClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            scansClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            scansClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        scansClient = scansClientbuilder.buildClient();

        ScanResultClientBuilder scanResultClientbuilder =
                new ScanResultClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            scanResultClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            scanResultClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            scanResultClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        scanResultClient = scanResultClientbuilder.buildClient();

        ScanRulesetsClientBuilder scanRulesetsClientbuilder =
                new ScanRulesetsClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            scanRulesetsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            scanRulesetsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            scanRulesetsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        scanRulesetsClient = scanRulesetsClientbuilder.buildClient();

        SystemScanRulesetsClientBuilder systemScanRulesetsClientbuilder =
                new SystemScanRulesetsClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            systemScanRulesetsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            systemScanRulesetsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            systemScanRulesetsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        systemScanRulesetsClient = systemScanRulesetsClientbuilder.buildClient();

        TriggersClientBuilder triggersClientbuilder =
                new TriggersClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            triggersClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            triggersClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            triggersClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        triggersClient = triggersClientbuilder.buildClient();

        MetadataRolesClientBuilder metadataRolesClientbuilder =
                new MetadataRolesClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            metadataRolesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            metadataRolesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            metadataRolesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        metadataRolesClient = metadataRolesClientbuilder.buildClient();

        MetadataPolicyClientBuilder metadataPolicyClientbuilder =
                new MetadataPolicyClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            metadataPolicyClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            metadataPolicyClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            metadataPolicyClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        metadataPolicyClient = metadataPolicyClientbuilder.buildClient();
    }
}
