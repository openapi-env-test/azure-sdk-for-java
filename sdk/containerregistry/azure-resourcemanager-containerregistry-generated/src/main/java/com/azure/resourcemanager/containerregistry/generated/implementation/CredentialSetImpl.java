// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.CredentialSetInner;
import com.azure.resourcemanager.containerregistry.generated.models.AuthCredential;
import com.azure.resourcemanager.containerregistry.generated.models.CredentialSet;
import com.azure.resourcemanager.containerregistry.generated.models.CredentialSetUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.IdentityProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class CredentialSetImpl implements CredentialSet, CredentialSet.Definition, CredentialSet.Update {
    private CredentialSetInner innerObject;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public IdentityProperties identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String loginServer() {
        return this.innerModel().loginServer();
    }

    public List<AuthCredential> authCredentials() {
        List<AuthCredential> inner = this.innerModel().authCredentials();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime creationDate() {
        return this.innerModel().creationDate();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CredentialSetInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String credentialSetName;

    private CredentialSetUpdateParameters updateCredentialSetUpdateParameters;

    public CredentialSetImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public CredentialSet create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .create(resourceGroupName, registryName, credentialSetName, this.innerModel(), Context.NONE);
        return this;
    }

    public CredentialSet create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .create(resourceGroupName, registryName, credentialSetName, this.innerModel(), context);
        return this;
    }

    CredentialSetImpl(
        String name, com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = new CredentialSetInner();
        this.serviceManager = serviceManager;
        this.credentialSetName = name;
    }

    public CredentialSetImpl update() {
        this.updateCredentialSetUpdateParameters = new CredentialSetUpdateParameters();
        return this;
    }

    public CredentialSet apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .update(
                    resourceGroupName,
                    registryName,
                    credentialSetName,
                    updateCredentialSetUpdateParameters,
                    Context.NONE);
        return this;
    }

    public CredentialSet apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .update(
                    resourceGroupName, registryName, credentialSetName, updateCredentialSetUpdateParameters, context);
        return this;
    }

    CredentialSetImpl(
        CredentialSetInner innerObject,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.credentialSetName = Utils.getValueFromIdByName(innerObject.id(), "credentialSets");
    }

    public CredentialSet refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .getWithResponse(resourceGroupName, registryName, credentialSetName, Context.NONE)
                .getValue();
        return this;
    }

    public CredentialSet refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCredentialSets()
                .getWithResponse(resourceGroupName, registryName, credentialSetName, context)
                .getValue();
        return this;
    }

    public CredentialSetImpl withIdentity(IdentityProperties identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateCredentialSetUpdateParameters.withIdentity(identity);
            return this;
        }
    }

    public CredentialSetImpl withLoginServer(String loginServer) {
        this.innerModel().withLoginServer(loginServer);
        return this;
    }

    public CredentialSetImpl withAuthCredentials(List<AuthCredential> authCredentials) {
        if (isInCreateMode()) {
            this.innerModel().withAuthCredentials(authCredentials);
            return this;
        } else {
            this.updateCredentialSetUpdateParameters.withAuthCredentials(authCredentials);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
