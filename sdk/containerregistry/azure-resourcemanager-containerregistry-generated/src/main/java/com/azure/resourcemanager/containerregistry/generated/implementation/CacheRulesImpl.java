// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.CacheRulesClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.CacheRuleInner;
import com.azure.resourcemanager.containerregistry.generated.models.CacheRule;
import com.azure.resourcemanager.containerregistry.generated.models.CacheRules;

public final class CacheRulesImpl implements CacheRules {
    private static final ClientLogger LOGGER = new ClientLogger(CacheRulesImpl.class);

    private final CacheRulesClient innerClient;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public CacheRulesImpl(
        CacheRulesClient innerClient,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CacheRule> list(String resourceGroupName, String registryName) {
        PagedIterable<CacheRuleInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return Utils.mapPage(inner, inner1 -> new CacheRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<CacheRule> list(String resourceGroupName, String registryName, Context context) {
        PagedIterable<CacheRuleInner> inner = this.serviceClient().list(resourceGroupName, registryName, context);
        return Utils.mapPage(inner, inner1 -> new CacheRuleImpl(inner1, this.manager()));
    }

    public Response<CacheRule> getWithResponse(
        String resourceGroupName, String registryName, String cacheRuleName, Context context) {
        Response<CacheRuleInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, registryName, cacheRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CacheRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CacheRule get(String resourceGroupName, String registryName, String cacheRuleName) {
        CacheRuleInner inner = this.serviceClient().get(resourceGroupName, registryName, cacheRuleName);
        if (inner != null) {
            return new CacheRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String cacheRuleName) {
        this.serviceClient().delete(resourceGroupName, registryName, cacheRuleName);
    }

    public void delete(String resourceGroupName, String registryName, String cacheRuleName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, cacheRuleName, context);
    }

    public CacheRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String cacheRuleName = Utils.getValueFromIdByName(id, "cacheRules");
        if (cacheRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'cacheRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, cacheRuleName, Context.NONE).getValue();
    }

    public Response<CacheRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String cacheRuleName = Utils.getValueFromIdByName(id, "cacheRules");
        if (cacheRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'cacheRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, cacheRuleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String cacheRuleName = Utils.getValueFromIdByName(id, "cacheRules");
        if (cacheRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'cacheRules'.", id)));
        }
        this.delete(resourceGroupName, registryName, cacheRuleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String cacheRuleName = Utils.getValueFromIdByName(id, "cacheRules");
        if (cacheRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'cacheRules'.", id)));
        }
        this.delete(resourceGroupName, registryName, cacheRuleName, context);
    }

    private CacheRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    public CacheRuleImpl define(String name) {
        return new CacheRuleImpl(name, this.manager());
    }
}
