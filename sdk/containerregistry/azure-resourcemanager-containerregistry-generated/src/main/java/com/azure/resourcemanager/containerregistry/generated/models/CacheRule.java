// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.CacheRuleInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of CacheRule. */
public interface CacheRule {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the credentialSetResourceId property: The ARM resource ID of the credential store which is associated with
     * the cache rule.
     *
     * @return the credentialSetResourceId value.
     */
    String credentialSetResourceId();

    /**
     * Gets the sourceRepository property: Source repository pulled from upstream.
     *
     * @return the sourceRepository value.
     */
    String sourceRepository();

    /**
     * Gets the targetRepository property: Target repository specified in docker pull command. Eg: docker pull
     * myregistry.azurecr.io/{targetRepository}:{tag}.
     *
     * @return the targetRepository value.
     */
    String targetRepository();

    /**
     * Gets the creationDate property: The creation date of the cache rule.
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.containerregistry.generated.fluent.models.CacheRuleInner object.
     *
     * @return the inner object.
     */
    CacheRuleInner innerModel();

    /** The entirety of the CacheRule definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The CacheRule definition stages. */
    interface DefinitionStages {
        /** The first stage of the CacheRule definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the CacheRule definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, registryName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param registryName The name of the container registry.
             * @return the next definition stage.
             */
            WithCreate withExistingRegistry(String resourceGroupName, String registryName);
        }
        /**
         * The stage of the CacheRule definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithCredentialSetResourceId,
                DefinitionStages.WithSourceRepository,
                DefinitionStages.WithTargetRepository {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            CacheRule create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CacheRule create(Context context);
        }
        /** The stage of the CacheRule definition allowing to specify credentialSetResourceId. */
        interface WithCredentialSetResourceId {
            /**
             * Specifies the credentialSetResourceId property: The ARM resource ID of the credential store which is
             * associated with the cache rule..
             *
             * @param credentialSetResourceId The ARM resource ID of the credential store which is associated with the
             *     cache rule.
             * @return the next definition stage.
             */
            WithCreate withCredentialSetResourceId(String credentialSetResourceId);
        }
        /** The stage of the CacheRule definition allowing to specify sourceRepository. */
        interface WithSourceRepository {
            /**
             * Specifies the sourceRepository property: Source repository pulled from upstream..
             *
             * @param sourceRepository Source repository pulled from upstream.
             * @return the next definition stage.
             */
            WithCreate withSourceRepository(String sourceRepository);
        }
        /** The stage of the CacheRule definition allowing to specify targetRepository. */
        interface WithTargetRepository {
            /**
             * Specifies the targetRepository property: Target repository specified in docker pull command. Eg: docker
             * pull myregistry.azurecr.io/{targetRepository}:{tag}.
             *
             * @param targetRepository Target repository specified in docker pull command. Eg: docker pull
             *     myregistry.azurecr.io/{targetRepository}:{tag}.
             * @return the next definition stage.
             */
            WithCreate withTargetRepository(String targetRepository);
        }
    }
    /**
     * Begins update for the CacheRule resource.
     *
     * @return the stage of resource update.
     */
    CacheRule.Update update();

    /** The template for CacheRule update. */
    interface Update extends UpdateStages.WithCredentialSetResourceId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        CacheRule apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        CacheRule apply(Context context);
    }
    /** The CacheRule update stages. */
    interface UpdateStages {
        /** The stage of the CacheRule update allowing to specify credentialSetResourceId. */
        interface WithCredentialSetResourceId {
            /**
             * Specifies the credentialSetResourceId property: The ARM resource ID of the credential store which is
             * associated with the Cache rule..
             *
             * @param credentialSetResourceId The ARM resource ID of the credential store which is associated with the
             *     Cache rule.
             * @return the next definition stage.
             */
            Update withCredentialSetResourceId(String credentialSetResourceId);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    CacheRule refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CacheRule refresh(Context context);
}
