// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.singularity.fluent.models.ModelResourceDescriptionInner;
import com.azure.resourcemanager.singularity.models.ModelResourcePatchDescription;

/** An instance of this class provides access to all the operations defined in ModelsClient. */
public interface ModelsClient {
    /**
     * Creates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ModelResourceDescriptionInner>, ModelResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName, String accountName, String modelName, ModelResourceDescriptionInner body);

    /**
     * Creates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ModelResourceDescriptionInner>, ModelResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourceDescriptionInner body,
        Context context);

    /**
     * Creates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ModelResourceDescriptionInner createOrUpdate(
        String resourceGroupName, String accountName, String modelName, ModelResourceDescriptionInner body);

    /**
     * Creates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ModelResourceDescriptionInner createOrUpdate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourceDescriptionInner body,
        Context context);

    /**
     * Updates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ModelResourceDescriptionInner>, ModelResourceDescriptionInner> beginUpdate(
        String resourceGroupName, String accountName, String modelName, ModelResourcePatchDescription body);

    /**
     * Updates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ModelResourceDescriptionInner>, ModelResourceDescriptionInner> beginUpdate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourcePatchDescription body,
        Context context);

    /**
     * Updates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ModelResourceDescriptionInner update(
        String resourceGroupName, String accountName, String modelName, ModelResourcePatchDescription body);

    /**
     * Updates a model resource with the specified name, description and properties. If a model with the same name
     * exists, then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a model resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ModelResourceDescriptionInner update(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourcePatchDescription body,
        Context context);

    /**
     * Gets the information about the model resource with the given name. The information include the description and
     * other properties of the model.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the model resource with the given name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ModelResourceDescriptionInner get(String resourceGroupName, String accountName, String modelName);

    /**
     * Gets the information about the model resource with the given name. The information include the description and
     * other properties of the model.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the model resource with the given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ModelResourceDescriptionInner> getWithResponse(
        String resourceGroupName, String accountName, String modelName, Context context);

    /**
     * Deletes the model resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, String modelName);

    /**
     * Deletes the model resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String modelName, Context context);

    /**
     * Deletes the model resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String modelName);

    /**
     * Deletes the model resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String modelName, Context context);

    /**
     * Gets the information about all the model resources in a given account. The information include the description
     * and other properties of the model.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the model resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ModelResourceDescriptionInner> listByAccount(String resourceGroupName, String accountName);

    /**
     * Gets the information about all the model resources in a given account. The information include the description
     * and other properties of the model.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the model resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ModelResourceDescriptionInner> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context);

    /**
     * Checks if the model resource properties are valid.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginValidate(
        String resourceGroupName, String accountName, String modelName, ModelResourceDescriptionInner body);

    /**
     * Checks if the model resource properties are valid.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginValidate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourceDescriptionInner body,
        Context context);

    /**
     * Checks if the model resource properties are valid.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void validate(String resourceGroupName, String accountName, String modelName, ModelResourceDescriptionInner body);

    /**
     * Checks if the model resource properties are valid.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param modelName The name of the Singularity model.
     * @param body Singularity model information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void validate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourceDescriptionInner body,
        Context context);
}
