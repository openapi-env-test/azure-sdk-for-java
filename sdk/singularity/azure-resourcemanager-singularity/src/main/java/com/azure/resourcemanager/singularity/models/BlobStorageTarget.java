// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The BlobStorageTarget model. */
@Fluent
public final class BlobStorageTarget {
    /*
     * Storage container endpoint (e.g.
     * https://<account>.blob.core.windows.net/<container>
     */
    @JsonProperty(value = "containerEndpoint", required = true)
    private String containerEndpoint;

    /*
     * Optional model blob name within container for FPGA inferencing
     * deployments.
     */
    @JsonProperty(value = "blobName")
    private String blobName;

    /*
     * SAS token to use for authentication.
     */
    @JsonProperty(value = "sasToken")
    private String sasToken;

    /*
     * User assigned managed identity resource ID to use for authentication.
     */
    @JsonProperty(value = "userAssignedIdentity")
    private String userAssignedIdentity;

    /**
     * Get the containerEndpoint property: Storage container endpoint (e.g.
     * https://&lt;account&gt;.blob.core.windows.net/&lt;container&gt;.
     *
     * @return the containerEndpoint value.
     */
    public String containerEndpoint() {
        return this.containerEndpoint;
    }

    /**
     * Set the containerEndpoint property: Storage container endpoint (e.g.
     * https://&lt;account&gt;.blob.core.windows.net/&lt;container&gt;.
     *
     * @param containerEndpoint the containerEndpoint value to set.
     * @return the BlobStorageTarget object itself.
     */
    public BlobStorageTarget withContainerEndpoint(String containerEndpoint) {
        this.containerEndpoint = containerEndpoint;
        return this;
    }

    /**
     * Get the blobName property: Optional model blob name within container for FPGA inferencing deployments.
     *
     * @return the blobName value.
     */
    public String blobName() {
        return this.blobName;
    }

    /**
     * Set the blobName property: Optional model blob name within container for FPGA inferencing deployments.
     *
     * @param blobName the blobName value to set.
     * @return the BlobStorageTarget object itself.
     */
    public BlobStorageTarget withBlobName(String blobName) {
        this.blobName = blobName;
        return this;
    }

    /**
     * Get the sasToken property: SAS token to use for authentication.
     *
     * @return the sasToken value.
     */
    public String sasToken() {
        return this.sasToken;
    }

    /**
     * Set the sasToken property: SAS token to use for authentication.
     *
     * @param sasToken the sasToken value to set.
     * @return the BlobStorageTarget object itself.
     */
    public BlobStorageTarget withSasToken(String sasToken) {
        this.sasToken = sasToken;
        return this;
    }

    /**
     * Get the userAssignedIdentity property: User assigned managed identity resource ID to use for authentication.
     *
     * @return the userAssignedIdentity value.
     */
    public String userAssignedIdentity() {
        return this.userAssignedIdentity;
    }

    /**
     * Set the userAssignedIdentity property: User assigned managed identity resource ID to use for authentication.
     *
     * @param userAssignedIdentity the userAssignedIdentity value to set.
     * @return the BlobStorageTarget object itself.
     */
    public BlobStorageTarget withUserAssignedIdentity(String userAssignedIdentity) {
        this.userAssignedIdentity = userAssignedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerEndpoint() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property containerEndpoint in model BlobStorageTarget"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BlobStorageTarget.class);
}
