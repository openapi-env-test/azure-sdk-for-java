// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes all properties which can be updated for a Singularity Model resource. */
@Fluent
public class ModelPatchProperties {
    /*
     * Collection of placement policies to use for placement of this model
     * version.
     */
    @JsonProperty(value = "placementPolicies")
    private List<PlacementPolicy> placementPolicies;

    /*
     * User-friendly description of the model.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * Get the placementPolicies property: Collection of placement policies to use for placement of this model version.
     *
     * @return the placementPolicies value.
     */
    public List<PlacementPolicy> placementPolicies() {
        return this.placementPolicies;
    }

    /**
     * Set the placementPolicies property: Collection of placement policies to use for placement of this model version.
     *
     * @param placementPolicies the placementPolicies value to set.
     * @return the ModelPatchProperties object itself.
     */
    public ModelPatchProperties withPlacementPolicies(List<PlacementPolicy> placementPolicies) {
        this.placementPolicies = placementPolicies;
        return this;
    }

    /**
     * Get the description property: User-friendly description of the model.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User-friendly description of the model.
     *
     * @param description the description value to set.
     * @return the ModelPatchProperties object itself.
     */
    public ModelPatchProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (placementPolicies() != null) {
            placementPolicies().forEach(e -> e.validate());
        }
    }
}
