// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Describes the properties of a storage cache resource backed by NFS. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("NFS")
@Fluent
public final class NfsStorageCacheProperties extends StorageCachePropertiesBase {
    /*
     * Optional storage capacity to allocate.
     */
    @JsonProperty(value = "capacityInGiB")
    private Integer capacityInGiB;

    /**
     * Get the capacityInGiB property: Optional storage capacity to allocate.
     *
     * @return the capacityInGiB value.
     */
    public Integer capacityInGiB() {
        return this.capacityInGiB;
    }

    /**
     * Set the capacityInGiB property: Optional storage capacity to allocate.
     *
     * @param capacityInGiB the capacityInGiB value to set.
     * @return the NfsStorageCacheProperties object itself.
     */
    public NfsStorageCacheProperties withCapacityInGiB(Integer capacityInGiB) {
        this.capacityInGiB = capacityInGiB;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NfsStorageCacheProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NfsStorageCacheProperties withRegion(String region) {
        super.withRegion(region);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NfsStorageCacheProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NfsStorageCacheProperties withStatus(StorageCacheStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
