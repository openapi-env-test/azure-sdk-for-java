// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes the properties of a model resource. */
@Fluent
public class ModelResourceProperties {
    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState")
    private ProvisioningState provisioningState;

    /*
     * Group policy name associated with the model.
     */
    @JsonProperty(value = "groupPolicyName")
    private String groupPolicyName;

    /*
     * The inferenceMode property.
     */
    @JsonProperty(value = "inferenceMode")
    private InferenceMode inferenceMode;

    /*
     * The slaTier property.
     */
    @JsonProperty(value = "slaTier")
    private SlaTier slaTier;

    /*
     * Describes the location of a storage source and how it will be accessed.
     */
    @JsonProperty(value = "packageLocation", required = true)
    private StorageLocation packageLocation;

    /*
     * Describes a network resource reference.
     */
    @JsonProperty(value = "networkResourceRef")
    private NetworkReference networkResourceRef;

    /*
     * Describes the scale policy of resource. This serves as the data parallel
     * dimension for 3D parallelism (viz., data, pipeline and model
     * parallelism).There are two modes of scaling:1. Discrete: Resource can be
     * only be scaled to a specific instance count(s) specified by the
     * "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be
     * scaled to any instance count specified by the range ("min", "max").
     */
    @JsonProperty(value = "scalePolicy", required = true)
    private ScalePolicyV2 scalePolicy;

    /*
     * Describes the partitioning settings of the model. Models can be
     * partitioned for scalability (when a model is too large to fit on a
     * single device) and/or throughput.
     */
    @JsonProperty(value = "partitioningSetting")
    private ModelPartitioningSetting partitioningSetting;

    /*
     * The specification for the instance type for instantiating the model. For
     * AOT compiled model this property specifies the settings for the instance
     * types where the model partitions needs to be instantiated as specified
     * by the ModelPlacementSetting. For JIT compiled model this property
     * specifies the list of instance types on which the model partitions can
     * be instantiated.
     */
    @JsonProperty(value = "instanceTypeSettings", required = true)
    private List<InstanceTypeSetting> instanceTypeSettings;

    /*
     * Collection of geographic locations where the model is deployed.
     */
    @JsonProperty(value = "locations")
    private List<ModelLocation> locations;

    /*
     * Global endpoints of the model that allow accessing the model across
     * geographic locations.
     */
    @JsonProperty(value = "endpoints", access = JsonProperty.Access.WRITE_ONLY)
    private List<Endpoint> endpoints;

    /*
     * This type describes the Compilation Policy of the model for training /
     * inferencing.
     */
    @JsonProperty(value = "compilationPolicy")
    private CompilationPolicyBase compilationPolicy;

    /*
     * Describes the model probe setting.
     */
    @JsonProperty(value = "modelProbeSetting")
    private ModelProbeSetting modelProbeSetting;

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioningState property.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the groupPolicyName property: Group policy name associated with the model.
     *
     * @return the groupPolicyName value.
     */
    public String groupPolicyName() {
        return this.groupPolicyName;
    }

    /**
     * Set the groupPolicyName property: Group policy name associated with the model.
     *
     * @param groupPolicyName the groupPolicyName value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withGroupPolicyName(String groupPolicyName) {
        this.groupPolicyName = groupPolicyName;
        return this;
    }

    /**
     * Get the inferenceMode property: The inferenceMode property.
     *
     * @return the inferenceMode value.
     */
    public InferenceMode inferenceMode() {
        return this.inferenceMode;
    }

    /**
     * Set the inferenceMode property: The inferenceMode property.
     *
     * @param inferenceMode the inferenceMode value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withInferenceMode(InferenceMode inferenceMode) {
        this.inferenceMode = inferenceMode;
        return this;
    }

    /**
     * Get the slaTier property: The slaTier property.
     *
     * @return the slaTier value.
     */
    public SlaTier slaTier() {
        return this.slaTier;
    }

    /**
     * Set the slaTier property: The slaTier property.
     *
     * @param slaTier the slaTier value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withSlaTier(SlaTier slaTier) {
        this.slaTier = slaTier;
        return this;
    }

    /**
     * Get the packageLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @return the packageLocation value.
     */
    public StorageLocation packageLocation() {
        return this.packageLocation;
    }

    /**
     * Set the packageLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @param packageLocation the packageLocation value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withPackageLocation(StorageLocation packageLocation) {
        this.packageLocation = packageLocation;
        return this;
    }

    /**
     * Get the networkResourceRef property: Describes a network resource reference.
     *
     * @return the networkResourceRef value.
     */
    public NetworkReference networkResourceRef() {
        return this.networkResourceRef;
    }

    /**
     * Set the networkResourceRef property: Describes a network resource reference.
     *
     * @param networkResourceRef the networkResourceRef value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withNetworkResourceRef(NetworkReference networkResourceRef) {
        this.networkResourceRef = networkResourceRef;
        return this;
    }

    /**
     * Get the scalePolicy property: Describes the scale policy of resource. This serves as the data parallel dimension
     * for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete:
     * Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8,
     * 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max").
     *
     * @return the scalePolicy value.
     */
    public ScalePolicyV2 scalePolicy() {
        return this.scalePolicy;
    }

    /**
     * Set the scalePolicy property: Describes the scale policy of resource. This serves as the data parallel dimension
     * for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete:
     * Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8,
     * 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max").
     *
     * @param scalePolicy the scalePolicy value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withScalePolicy(ScalePolicyV2 scalePolicy) {
        this.scalePolicy = scalePolicy;
        return this;
    }

    /**
     * Get the partitioningSetting property: Describes the partitioning settings of the model. Models can be partitioned
     * for scalability (when a model is too large to fit on a single device) and/or throughput.
     *
     * @return the partitioningSetting value.
     */
    public ModelPartitioningSetting partitioningSetting() {
        return this.partitioningSetting;
    }

    /**
     * Set the partitioningSetting property: Describes the partitioning settings of the model. Models can be partitioned
     * for scalability (when a model is too large to fit on a single device) and/or throughput.
     *
     * @param partitioningSetting the partitioningSetting value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withPartitioningSetting(ModelPartitioningSetting partitioningSetting) {
        this.partitioningSetting = partitioningSetting;
        return this;
    }

    /**
     * Get the instanceTypeSettings property: The specification for the instance type for instantiating the model. For
     * AOT compiled model this property specifies the settings for the instance types where the model partitions needs
     * to be instantiated as specified by the ModelPlacementSetting. For JIT compiled model this property specifies the
     * list of instance types on which the model partitions can be instantiated.
     *
     * @return the instanceTypeSettings value.
     */
    public List<InstanceTypeSetting> instanceTypeSettings() {
        return this.instanceTypeSettings;
    }

    /**
     * Set the instanceTypeSettings property: The specification for the instance type for instantiating the model. For
     * AOT compiled model this property specifies the settings for the instance types where the model partitions needs
     * to be instantiated as specified by the ModelPlacementSetting. For JIT compiled model this property specifies the
     * list of instance types on which the model partitions can be instantiated.
     *
     * @param instanceTypeSettings the instanceTypeSettings value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withInstanceTypeSettings(List<InstanceTypeSetting> instanceTypeSettings) {
        this.instanceTypeSettings = instanceTypeSettings;
        return this;
    }

    /**
     * Get the locations property: Collection of geographic locations where the model is deployed.
     *
     * @return the locations value.
     */
    public List<ModelLocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: Collection of geographic locations where the model is deployed.
     *
     * @param locations the locations value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withLocations(List<ModelLocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the endpoints property: Global endpoints of the model that allow accessing the model across geographic
     * locations.
     *
     * @return the endpoints value.
     */
    public List<Endpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Get the compilationPolicy property: This type describes the Compilation Policy of the model for training /
     * inferencing.
     *
     * @return the compilationPolicy value.
     */
    public CompilationPolicyBase compilationPolicy() {
        return this.compilationPolicy;
    }

    /**
     * Set the compilationPolicy property: This type describes the Compilation Policy of the model for training /
     * inferencing.
     *
     * @param compilationPolicy the compilationPolicy value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withCompilationPolicy(CompilationPolicyBase compilationPolicy) {
        this.compilationPolicy = compilationPolicy;
        return this;
    }

    /**
     * Get the modelProbeSetting property: Describes the model probe setting.
     *
     * @return the modelProbeSetting value.
     */
    public ModelProbeSetting modelProbeSetting() {
        return this.modelProbeSetting;
    }

    /**
     * Set the modelProbeSetting property: Describes the model probe setting.
     *
     * @param modelProbeSetting the modelProbeSetting value to set.
     * @return the ModelResourceProperties object itself.
     */
    public ModelResourceProperties withModelProbeSetting(ModelProbeSetting modelProbeSetting) {
        this.modelProbeSetting = modelProbeSetting;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageLocation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property packageLocation in model ModelResourceProperties"));
        } else {
            packageLocation().validate();
        }
        if (networkResourceRef() != null) {
            networkResourceRef().validate();
        }
        if (scalePolicy() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property scalePolicy in model ModelResourceProperties"));
        } else {
            scalePolicy().validate();
        }
        if (partitioningSetting() != null) {
            partitioningSetting().validate();
        }
        if (instanceTypeSettings() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property instanceTypeSettings in model ModelResourceProperties"));
        } else {
            instanceTypeSettings().forEach(e -> e.validate());
        }
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (compilationPolicy() != null) {
            compilationPolicy().validate();
        }
        if (modelProbeSetting() != null) {
            modelProbeSetting().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelResourceProperties.class);
}
