// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data,
 * pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a
 * specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be
 * scaled to any instance count specified by the range ("min", "max").
 */
@Fluent
public final class ScalePolicyV2 {
    /*
     * The minimum instance count of the resource.
     */
    @JsonProperty(value = "min")
    private Integer min;

    /*
     * Maximum instance count of the resource.
     */
    @JsonProperty(value = "max")
    private Integer max;

    /*
     * Set of valid instance counts that the resource can be scaled to e.g.,
     * [2,4,8,16]. This is required for discrete scaling.
     */
    @JsonProperty(value = "scaleSet")
    private List<Integer> scaleSet;

    /**
     * Get the min property: The minimum instance count of the resource.
     *
     * @return the min value.
     */
    public Integer min() {
        return this.min;
    }

    /**
     * Set the min property: The minimum instance count of the resource.
     *
     * @param min the min value to set.
     * @return the ScalePolicyV2 object itself.
     */
    public ScalePolicyV2 withMin(Integer min) {
        this.min = min;
        return this;
    }

    /**
     * Get the max property: Maximum instance count of the resource.
     *
     * @return the max value.
     */
    public Integer max() {
        return this.max;
    }

    /**
     * Set the max property: Maximum instance count of the resource.
     *
     * @param max the max value to set.
     * @return the ScalePolicyV2 object itself.
     */
    public ScalePolicyV2 withMax(Integer max) {
        this.max = max;
        return this;
    }

    /**
     * Get the scaleSet property: Set of valid instance counts that the resource can be scaled to e.g., [2,4,8,16]. This
     * is required for discrete scaling.
     *
     * @return the scaleSet value.
     */
    public List<Integer> scaleSet() {
        return this.scaleSet;
    }

    /**
     * Set the scaleSet property: Set of valid instance counts that the resource can be scaled to e.g., [2,4,8,16]. This
     * is required for discrete scaling.
     *
     * @param scaleSet the scaleSet value to set.
     * @return the ScalePolicyV2 object itself.
     */
    public ScalePolicyV2 withScaleSet(List<Integer> scaleSet) {
        this.scaleSet = scaleSet;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
