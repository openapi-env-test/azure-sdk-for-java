// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;

/** Resource collection API of Jobs. */
public interface Jobs {
    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name.
     */
    JobResourceDescription get(String resourceGroupName, String accountName, String jobName);

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response}.
     */
    Response<JobResourceDescription> getWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String jobName);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve(String resourceGroupName, String accountName, String jobName);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken(String resourceGroupName, String accountName, String jobName);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context);

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription renewKey(String resourceGroupName, String accountName, String jobName);

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response}.
     */
    Response<JobSasTokenDescription> renewKeyWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend(String resourceGroupName, String accountName, String jobName);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(String resourceGroupName, String accountName, String jobName);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(String resourceGroupName, String accountName, String jobName);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<JobResourceDescription> listByAccount(String resourceGroupName, String accountName);

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<JobResourceDescription> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove(String resourceGroupName, String accountName, String jobName);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response}.
     */
    JobResourceDescription getById(String id);

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response}.
     */
    Response<JobResourceDescription> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new JobResourceDescription resource.
     *
     * @param name resource name.
     * @return the first stage of the new JobResourceDescription definition.
     */
    JobResourceDescription.DefinitionStages.Blank define(String name);
}
