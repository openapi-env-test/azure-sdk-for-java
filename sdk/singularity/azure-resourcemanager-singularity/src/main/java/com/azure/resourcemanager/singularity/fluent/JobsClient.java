// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;
import com.azure.resourcemanager.singularity.models.JobResourcePatchDescription;
import com.azure.resourcemanager.singularity.models.JobUserActionDescription;

/** An instance of this class provides access to all the operations defined in JobsClient. */
public interface JobsClient {
    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body);

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context);

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobResourceDescriptionInner createOrUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body);

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobResourceDescriptionInner createOrUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context);

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body);

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context);

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobResourceDescriptionInner update(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body);

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobResourceDescriptionInner update(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context);

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobResourceDescriptionInner get(String resourceGroupName, String accountName, String jobName);

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<JobResourceDescriptionInner> getWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, String jobName);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String jobName);

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginApprove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginApprove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void approve(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void approve(String resourceGroupName, String accountName, String jobName);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void approve(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobSasTokenDescriptionInner createSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobSasTokenDescriptionInner createSasToken(String resourceGroupName, String accountName, String jobName);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobSasTokenDescriptionInner createSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context);

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    JobSasTokenDescriptionInner renewKey(String resourceGroupName, String accountName, String jobName);

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<JobSasTokenDescriptionInner> renewKeyWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginSuspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginSuspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void suspend(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void suspend(String resourceGroupName, String accountName, String jobName);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void suspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginResume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginResume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resume(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resume(String resourceGroupName, String accountName, String jobName);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String accountName, String jobName);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JobResourceDescriptionInner> listByAccount(String resourceGroupName, String accountName);

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<JobResourceDescriptionInner> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRemove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void remove(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void remove(String resourceGroupName, String accountName, String jobName);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void remove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context);
}
