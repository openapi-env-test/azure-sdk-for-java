// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Describes the settings of the probe. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "kind",
    defaultImpl = ProbeSetting.class)
@JsonTypeName("ProbeSetting")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Exec", value = ExecProbeSetting.class),
    @JsonSubTypes.Type(name = "Http", value = HttpProbeSetting.class)
})
@Fluent
public class ProbeSetting {
    /*
     * The initial delay in seconds to start executing the probe after the
     * container has started.
     */
    @JsonProperty(value = "initialDelayInSeconds")
    private Integer initialDelayInSeconds;

    /*
     * Minimum consecutive successes for the probe to be considered successful
     * after having failed.
     */
    @JsonProperty(value = "successThreshold")
    private Integer successThreshold;

    /*
     * Number of consecutive failures for the probe after which the container
     * is restarted.
     */
    @JsonProperty(value = "failureThreshold")
    private Integer failureThreshold;

    /*
     * The period in seconds to specify the frequency of the probe.
     */
    @JsonProperty(value = "frequencyInSeconds")
    private Integer frequencyInSeconds;

    /*
     * The period in seconds after which we consider the probe as failed, if it
     * hasn't finished successfully.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Integer timeoutInSeconds;

    /**
     * Get the initialDelayInSeconds property: The initial delay in seconds to start executing the probe after the
     * container has started.
     *
     * @return the initialDelayInSeconds value.
     */
    public Integer initialDelayInSeconds() {
        return this.initialDelayInSeconds;
    }

    /**
     * Set the initialDelayInSeconds property: The initial delay in seconds to start executing the probe after the
     * container has started.
     *
     * @param initialDelayInSeconds the initialDelayInSeconds value to set.
     * @return the ProbeSetting object itself.
     */
    public ProbeSetting withInitialDelayInSeconds(Integer initialDelayInSeconds) {
        this.initialDelayInSeconds = initialDelayInSeconds;
        return this;
    }

    /**
     * Get the successThreshold property: Minimum consecutive successes for the probe to be considered successful after
     * having failed.
     *
     * @return the successThreshold value.
     */
    public Integer successThreshold() {
        return this.successThreshold;
    }

    /**
     * Set the successThreshold property: Minimum consecutive successes for the probe to be considered successful after
     * having failed.
     *
     * @param successThreshold the successThreshold value to set.
     * @return the ProbeSetting object itself.
     */
    public ProbeSetting withSuccessThreshold(Integer successThreshold) {
        this.successThreshold = successThreshold;
        return this;
    }

    /**
     * Get the failureThreshold property: Number of consecutive failures for the probe after which the container is
     * restarted.
     *
     * @return the failureThreshold value.
     */
    public Integer failureThreshold() {
        return this.failureThreshold;
    }

    /**
     * Set the failureThreshold property: Number of consecutive failures for the probe after which the container is
     * restarted.
     *
     * @param failureThreshold the failureThreshold value to set.
     * @return the ProbeSetting object itself.
     */
    public ProbeSetting withFailureThreshold(Integer failureThreshold) {
        this.failureThreshold = failureThreshold;
        return this;
    }

    /**
     * Get the frequencyInSeconds property: The period in seconds to specify the frequency of the probe.
     *
     * @return the frequencyInSeconds value.
     */
    public Integer frequencyInSeconds() {
        return this.frequencyInSeconds;
    }

    /**
     * Set the frequencyInSeconds property: The period in seconds to specify the frequency of the probe.
     *
     * @param frequencyInSeconds the frequencyInSeconds value to set.
     * @return the ProbeSetting object itself.
     */
    public ProbeSetting withFrequencyInSeconds(Integer frequencyInSeconds) {
        this.frequencyInSeconds = frequencyInSeconds;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The period in seconds after which we consider the probe as failed, if it
     * hasn't finished successfully.
     *
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The period in seconds after which we consider the probe as failed, if it
     * hasn't finished successfully.
     *
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the ProbeSetting object itself.
     */
    public ProbeSetting withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
