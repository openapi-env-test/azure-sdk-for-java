// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.singularity.models.CompilationPolicyBase;
import com.azure.resourcemanager.singularity.models.InferenceMode;
import com.azure.resourcemanager.singularity.models.InstanceTypeSetting;
import com.azure.resourcemanager.singularity.models.ModelLocation;
import com.azure.resourcemanager.singularity.models.ModelPartitioningSetting;
import com.azure.resourcemanager.singularity.models.ModelProbeSetting;
import com.azure.resourcemanager.singularity.models.ModelResourceProperties;
import com.azure.resourcemanager.singularity.models.NetworkReference;
import com.azure.resourcemanager.singularity.models.ProvisioningState;
import com.azure.resourcemanager.singularity.models.ScalePolicyV2;
import com.azure.resourcemanager.singularity.models.SlaTier;
import com.azure.resourcemanager.singularity.models.StorageLocation;
import java.util.List;

/** The ModelResourceDescriptionProperties model. */
@Fluent
public final class ModelResourceDescriptionProperties extends ModelResourceProperties {
    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withGroupPolicyName(String groupPolicyName) {
        super.withGroupPolicyName(groupPolicyName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withInferenceMode(InferenceMode inferenceMode) {
        super.withInferenceMode(inferenceMode);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withSlaTier(SlaTier slaTier) {
        super.withSlaTier(slaTier);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withPackageLocation(StorageLocation packageLocation) {
        super.withPackageLocation(packageLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withNetworkResourceRef(NetworkReference networkResourceRef) {
        super.withNetworkResourceRef(networkResourceRef);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withScalePolicy(ScalePolicyV2 scalePolicy) {
        super.withScalePolicy(scalePolicy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withPartitioningSetting(ModelPartitioningSetting partitioningSetting) {
        super.withPartitioningSetting(partitioningSetting);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withInstanceTypeSettings(List<InstanceTypeSetting> instanceTypeSettings) {
        super.withInstanceTypeSettings(instanceTypeSettings);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withLocations(List<ModelLocation> locations) {
        super.withLocations(locations);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withCompilationPolicy(CompilationPolicyBase compilationPolicy) {
        super.withCompilationPolicy(compilationPolicy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelResourceDescriptionProperties withModelProbeSetting(ModelProbeSetting modelProbeSetting) {
        super.withModelProbeSetting(modelProbeSetting);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
