// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.singularity.fluent.ModelsClient;
import com.azure.resourcemanager.singularity.fluent.models.ModelResourceDescriptionInner;
import com.azure.resourcemanager.singularity.models.ModelResourceDescription;
import com.azure.resourcemanager.singularity.models.Models;

public final class ModelsImpl implements Models {
    private static final ClientLogger LOGGER = new ClientLogger(ModelsImpl.class);

    private final ModelsClient innerClient;

    private final com.azure.resourcemanager.singularity.SingularityManager serviceManager;

    public ModelsImpl(
        ModelsClient innerClient, com.azure.resourcemanager.singularity.SingularityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ModelResourceDescription get(String resourceGroupName, String accountName, String modelName) {
        ModelResourceDescriptionInner inner = this.serviceClient().get(resourceGroupName, accountName, modelName);
        if (inner != null) {
            return new ModelResourceDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ModelResourceDescription> getWithResponse(
        String resourceGroupName, String accountName, String modelName, Context context) {
        Response<ModelResourceDescriptionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, accountName, modelName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ModelResourceDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String modelName) {
        this.serviceClient().delete(resourceGroupName, accountName, modelName);
    }

    public void delete(String resourceGroupName, String accountName, String modelName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, modelName, context);
    }

    public PagedIterable<ModelResourceDescription> listByAccount(String resourceGroupName, String accountName) {
        PagedIterable<ModelResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName);
        return Utils.mapPage(inner, inner1 -> new ModelResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<ModelResourceDescription> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        PagedIterable<ModelResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new ModelResourceDescriptionImpl(inner1, this.manager()));
    }

    public void validate(
        String resourceGroupName, String accountName, String modelName, ModelResourceDescriptionInner body) {
        this.serviceClient().validate(resourceGroupName, accountName, modelName, body);
    }

    public void validate(
        String resourceGroupName,
        String accountName,
        String modelName,
        ModelResourceDescriptionInner body,
        Context context) {
        this.serviceClient().validate(resourceGroupName, accountName, modelName, body, context);
    }

    public ModelResourceDescription getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String modelName = Utils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, modelName, Context.NONE).getValue();
    }

    public Response<ModelResourceDescription> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String modelName = Utils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, modelName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String modelName = Utils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        this.delete(resourceGroupName, accountName, modelName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String modelName = Utils.getValueFromIdByName(id, "models");
        if (modelName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        this.delete(resourceGroupName, accountName, modelName, context);
    }

    private ModelsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.singularity.SingularityManager manager() {
        return this.serviceManager;
    }

    public ModelResourceDescriptionImpl define(String name) {
        return new ModelResourceDescriptionImpl(name, this.manager());
    }
}
