// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Describes the settings of container. */
@Fluent
public final class ContainerSetting {
    /*
     * Describes the container image for the job resource.
     */
    @JsonProperty(value = "image")
    private ContainerImageBase image;

    /*
     * Environment variables.
     */
    @JsonProperty(value = "environmentVariables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environmentVariables;

    /*
     * Describes container's entry-point.
     */
    @JsonProperty(value = "setupEntryPoint")
    private ContainerEntryPoint setupEntryPoint;

    /*
     * Describes container's entry-point.
     */
    @JsonProperty(value = "mainEntryPoint")
    private ContainerEntryPoint mainEntryPoint;

    /*
     * Describes container's entry-point.
     */
    @JsonProperty(value = "cleanupEntryPoint")
    private ContainerEntryPoint cleanupEntryPoint;

    /*
     * Describes the settings of the probe.
     */
    @JsonProperty(value = "livenessProbeSetting")
    private ProbeSetting livenessProbeSetting;

    /**
     * Get the image property: Describes the container image for the job resource.
     *
     * @return the image value.
     */
    public ContainerImageBase image() {
        return this.image;
    }

    /**
     * Set the image property: Describes the container image for the job resource.
     *
     * @param image the image value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withImage(ContainerImageBase image) {
        this.image = image;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the setupEntryPoint property: Describes container's entry-point.
     *
     * @return the setupEntryPoint value.
     */
    public ContainerEntryPoint setupEntryPoint() {
        return this.setupEntryPoint;
    }

    /**
     * Set the setupEntryPoint property: Describes container's entry-point.
     *
     * @param setupEntryPoint the setupEntryPoint value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withSetupEntryPoint(ContainerEntryPoint setupEntryPoint) {
        this.setupEntryPoint = setupEntryPoint;
        return this;
    }

    /**
     * Get the mainEntryPoint property: Describes container's entry-point.
     *
     * @return the mainEntryPoint value.
     */
    public ContainerEntryPoint mainEntryPoint() {
        return this.mainEntryPoint;
    }

    /**
     * Set the mainEntryPoint property: Describes container's entry-point.
     *
     * @param mainEntryPoint the mainEntryPoint value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withMainEntryPoint(ContainerEntryPoint mainEntryPoint) {
        this.mainEntryPoint = mainEntryPoint;
        return this;
    }

    /**
     * Get the cleanupEntryPoint property: Describes container's entry-point.
     *
     * @return the cleanupEntryPoint value.
     */
    public ContainerEntryPoint cleanupEntryPoint() {
        return this.cleanupEntryPoint;
    }

    /**
     * Set the cleanupEntryPoint property: Describes container's entry-point.
     *
     * @param cleanupEntryPoint the cleanupEntryPoint value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withCleanupEntryPoint(ContainerEntryPoint cleanupEntryPoint) {
        this.cleanupEntryPoint = cleanupEntryPoint;
        return this;
    }

    /**
     * Get the livenessProbeSetting property: Describes the settings of the probe.
     *
     * @return the livenessProbeSetting value.
     */
    public ProbeSetting livenessProbeSetting() {
        return this.livenessProbeSetting;
    }

    /**
     * Set the livenessProbeSetting property: Describes the settings of the probe.
     *
     * @param livenessProbeSetting the livenessProbeSetting value to set.
     * @return the ContainerSetting object itself.
     */
    public ContainerSetting withLivenessProbeSetting(ProbeSetting livenessProbeSetting) {
        this.livenessProbeSetting = livenessProbeSetting;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (image() != null) {
            image().validate();
        }
        if (setupEntryPoint() != null) {
            setupEntryPoint().validate();
        }
        if (mainEntryPoint() != null) {
            mainEntryPoint().validate();
        }
        if (cleanupEntryPoint() != null) {
            cleanupEntryPoint().validate();
        }
        if (livenessProbeSetting() != null) {
            livenessProbeSetting().validate();
        }
    }
}
