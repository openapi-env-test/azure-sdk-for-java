// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;
import com.azure.resourcemanager.singularity.models.JobResourceDescription;
import com.azure.resourcemanager.singularity.models.JobResourcePatchDescription;
import com.azure.resourcemanager.singularity.models.JobSasTokenDescription;
import com.azure.resourcemanager.singularity.models.JobUserActionDescription;
import com.azure.resourcemanager.singularity.models.ResourceIdentity;
import com.azure.resourcemanager.singularity.models.ResourceSystemData;
import java.util.Collections;
import java.util.Map;

public final class JobResourceDescriptionImpl
    implements JobResourceDescription, JobResourceDescription.Definition, JobResourceDescription.Update {
    private JobResourceDescriptionInner innerObject;

    private final com.azure.resourcemanager.singularity.SingularityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ResourceIdentity identity() {
        return this.innerModel().identity();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ResourceSystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public JobResourceDescriptionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.singularity.SingularityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String jobName;

    private JobResourcePatchDescription updateBody;

    public JobResourceDescriptionImpl withExistingAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    public JobResourceDescription create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .createOrUpdate(resourceGroupName, accountName, jobName, this.innerModel(), Context.NONE);
        return this;
    }

    public JobResourceDescription create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .createOrUpdate(resourceGroupName, accountName, jobName, this.innerModel(), context);
        return this;
    }

    JobResourceDescriptionImpl(String name, com.azure.resourcemanager.singularity.SingularityManager serviceManager) {
        this.innerObject = new JobResourceDescriptionInner();
        this.serviceManager = serviceManager;
        this.jobName = name;
    }

    public JobResourceDescriptionImpl update() {
        this.updateBody = new JobResourcePatchDescription();
        return this;
    }

    public JobResourceDescription apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .update(resourceGroupName, accountName, jobName, updateBody, Context.NONE);
        return this;
    }

    public JobResourceDescription apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .update(resourceGroupName, accountName, jobName, updateBody, context);
        return this;
    }

    JobResourceDescriptionImpl(
        JobResourceDescriptionInner innerObject,
        com.azure.resourcemanager.singularity.SingularityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourcegroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "accounts");
        this.jobName = Utils.getValueFromIdByName(innerObject.id(), "jobs");
    }

    public JobResourceDescription refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .getWithResponse(resourceGroupName, accountName, jobName, Context.NONE)
                .getValue();
        return this;
    }

    public JobResourceDescription refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobs()
                .getWithResponse(resourceGroupName, accountName, jobName, context)
                .getValue();
        return this;
    }

    public void approve(JobUserActionDescription body) {
        serviceManager.jobs().approve(resourceGroupName, accountName, jobName, body);
    }

    public void approve() {
        serviceManager.jobs().approve(resourceGroupName, accountName, jobName);
    }

    public void approve(JobUserActionDescription body, Context context) {
        serviceManager.jobs().approve(resourceGroupName, accountName, jobName, body, context);
    }

    public JobSasTokenDescription createSasToken(JobSasTokenDescriptionInner body) {
        return serviceManager.jobs().createSasToken(resourceGroupName, accountName, jobName, body);
    }

    public JobSasTokenDescription createSasToken() {
        return serviceManager.jobs().createSasToken(resourceGroupName, accountName, jobName);
    }

    public JobSasTokenDescription createSasToken(JobSasTokenDescriptionInner body, Context context) {
        return serviceManager.jobs().createSasToken(resourceGroupName, accountName, jobName, body, context);
    }

    public JobSasTokenDescription renewKey() {
        return serviceManager.jobs().renewKey(resourceGroupName, accountName, jobName);
    }

    public Response<JobSasTokenDescription> renewKeyWithResponse(Context context) {
        return serviceManager.jobs().renewKeyWithResponse(resourceGroupName, accountName, jobName, context);
    }

    public void suspend(JobUserActionDescription body) {
        serviceManager.jobs().suspend(resourceGroupName, accountName, jobName, body);
    }

    public void suspend() {
        serviceManager.jobs().suspend(resourceGroupName, accountName, jobName);
    }

    public void suspend(JobUserActionDescription body, Context context) {
        serviceManager.jobs().suspend(resourceGroupName, accountName, jobName, body, context);
    }

    public void resume(JobUserActionDescription body) {
        serviceManager.jobs().resume(resourceGroupName, accountName, jobName, body);
    }

    public void resume() {
        serviceManager.jobs().resume(resourceGroupName, accountName, jobName);
    }

    public void resume(JobUserActionDescription body, Context context) {
        serviceManager.jobs().resume(resourceGroupName, accountName, jobName, body, context);
    }

    public void cancel(JobUserActionDescription body) {
        serviceManager.jobs().cancel(resourceGroupName, accountName, jobName, body);
    }

    public void cancel() {
        serviceManager.jobs().cancel(resourceGroupName, accountName, jobName);
    }

    public void cancel(JobUserActionDescription body, Context context) {
        serviceManager.jobs().cancel(resourceGroupName, accountName, jobName, body, context);
    }

    public void remove(JobUserActionDescription body) {
        serviceManager.jobs().remove(resourceGroupName, accountName, jobName, body);
    }

    public void remove() {
        serviceManager.jobs().remove(resourceGroupName, accountName, jobName);
    }

    public void remove(JobUserActionDescription body, Context context) {
        serviceManager.jobs().remove(resourceGroupName, accountName, jobName, body, context);
    }

    public JobResourceDescriptionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public JobResourceDescriptionImpl withIdentity(ResourceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public JobResourceDescriptionImpl withSystemData(ResourceSystemData systemData) {
        if (isInCreateMode()) {
            this.innerModel().withSystemData(systemData);
            return this;
        } else {
            this.updateBody.withSystemData(systemData);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
