// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Describes the partitioning settings of the model. Models can be partitioned for scalability (when a model is too
 * large to fit on a single device) and/or throughput.
 */
@Fluent
public final class ModelPartitioningSetting {
    /*
     * Specifies the pipeline-parallelism dimension of the model.
     */
    @JsonProperty(value = "pipelinePartitionCount")
    private Integer pipelinePartitionCount;

    /*
     * Specifies the model-parallelism dimension of the model.
     */
    @JsonProperty(value = "tensorPartitionCount")
    private Integer tensorPartitionCount;

    /*
     * The list of information about model partitions.
     */
    @JsonProperty(value = "partitions")
    private List<ModelPartition> partitions;

    /**
     * Get the pipelinePartitionCount property: Specifies the pipeline-parallelism dimension of the model.
     *
     * @return the pipelinePartitionCount value.
     */
    public Integer pipelinePartitionCount() {
        return this.pipelinePartitionCount;
    }

    /**
     * Set the pipelinePartitionCount property: Specifies the pipeline-parallelism dimension of the model.
     *
     * @param pipelinePartitionCount the pipelinePartitionCount value to set.
     * @return the ModelPartitioningSetting object itself.
     */
    public ModelPartitioningSetting withPipelinePartitionCount(Integer pipelinePartitionCount) {
        this.pipelinePartitionCount = pipelinePartitionCount;
        return this;
    }

    /**
     * Get the tensorPartitionCount property: Specifies the model-parallelism dimension of the model.
     *
     * @return the tensorPartitionCount value.
     */
    public Integer tensorPartitionCount() {
        return this.tensorPartitionCount;
    }

    /**
     * Set the tensorPartitionCount property: Specifies the model-parallelism dimension of the model.
     *
     * @param tensorPartitionCount the tensorPartitionCount value to set.
     * @return the ModelPartitioningSetting object itself.
     */
    public ModelPartitioningSetting withTensorPartitionCount(Integer tensorPartitionCount) {
        this.tensorPartitionCount = tensorPartitionCount;
        return this;
    }

    /**
     * Get the partitions property: The list of information about model partitions.
     *
     * @return the partitions value.
     */
    public List<ModelPartition> partitions() {
        return this.partitions;
    }

    /**
     * Set the partitions property: The list of information about model partitions.
     *
     * @param partitions the partitions value to set.
     * @return the ModelPartitioningSetting object itself.
     */
    public ModelPartitioningSetting withPartitions(List<ModelPartition> partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partitions() != null) {
            partitions().forEach(e -> e.validate());
        }
    }
}
