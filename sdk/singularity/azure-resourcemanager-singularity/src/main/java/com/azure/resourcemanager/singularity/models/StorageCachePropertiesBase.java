// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Describes the properties of a storage cache resource. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "kind",
    defaultImpl = StorageCachePropertiesBase.class)
@JsonTypeName("StorageCachePropertiesBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Blob", value = BlobStorageCacheProperties.class),
    @JsonSubTypes.Type(name = "NFS", value = NfsStorageCacheProperties.class),
    @JsonSubTypes.Type(name = "ADLS", value = AdlsStorageCacheProperties.class)
})
@Fluent
public class StorageCachePropertiesBase {
    /*
     * Description of the storage cache resource.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Optional region for managed storage resources (if any).
     */
    @JsonProperty(value = "region")
    private String region;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState")
    private ProvisioningState provisioningState;

    /*
     * The status property.
     */
    @JsonProperty(value = "status")
    private StorageCacheStatus status;

    /*
     * Default mount path that will be used within a job or model if none is
     * specified.
     */
    @JsonProperty(value = "defaultMountPath", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultMountPath;

    /**
     * Get the description property: Description of the storage cache resource.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the storage cache resource.
     *
     * @param description the description value to set.
     * @return the StorageCachePropertiesBase object itself.
     */
    public StorageCachePropertiesBase withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the region property: Optional region for managed storage resources (if any).
     *
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Optional region for managed storage resources (if any).
     *
     * @param region the region value to set.
     * @return the StorageCachePropertiesBase object itself.
     */
    public StorageCachePropertiesBase withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioningState property.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the StorageCachePropertiesBase object itself.
     */
    public StorageCachePropertiesBase withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    public StorageCacheStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     *
     * @param status the status value to set.
     * @return the StorageCachePropertiesBase object itself.
     */
    public StorageCachePropertiesBase withStatus(StorageCacheStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the defaultMountPath property: Default mount path that will be used within a job or model if none is
     * specified.
     *
     * @return the defaultMountPath value.
     */
    public String defaultMountPath() {
        return this.defaultMountPath;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
