// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.singularity.fluent.JobsClient;
import com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;
import com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException;
import com.azure.resourcemanager.singularity.models.JobResourceDescriptionList;
import com.azure.resourcemanager.singularity.models.JobResourcePatchDescription;
import com.azure.resourcemanager.singularity.models.JobUserActionDescription;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in JobsClient. */
public final class JobsClientImpl implements JobsClient {
    /** The proxy service used to perform REST calls. */
    private final JobsService service;

    /** The service client containing this operation class. */
    private final SingularityManagementClientImpl client;

    /**
     * Initializes an instance of JobsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobsClientImpl(SingularityManagementClientImpl client) {
        this.service = RestProxy.create(JobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SingularityManagementClientJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SingularityManagemen")
    private interface JobsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobResourceDescriptionInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobResourcePatchDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<JobResourceDescriptionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/approve")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> approve(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobUserActionDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/createsastoken")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> createSasToken(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobSasTokenDescriptionInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/renewkey")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<JobSasTokenDescriptionInner>> renewKey(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/suspend")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> suspend(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobUserActionDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/resume")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> resume(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobUserActionDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/cancel")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> cancel(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobUserActionDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<JobResourceDescriptionList>> listByAccount(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @QueryParam(value = "continuationToken", encoded = true) String continuationToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity"
                + "/accounts/{accountName}/jobs/{jobName}/remove")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<Flux<ByteBuffer>>> remove(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam(value = "resourceGroupName", encoded = true) String resourceGroupName,
            @PathParam(value = "accountName", encoded = true) String accountName,
            @PathParam(value = "jobName", encoded = true) String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobUserActionDescription body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<JobResourceDescriptionList>> listByAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<JobResourceDescriptionInner, JobResourceDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobResourceDescriptionInner.class,
                JobResourceDescriptionInner.class,
                this.client.getContext());
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<JobResourceDescriptionInner, JobResourceDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobResourceDescriptionInner.class,
                JobResourceDescriptionInner.class,
                context);
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body) {
        return beginCreateOrUpdateAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginCreateOrUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceDescriptionInner> createOrUpdateAsync(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body) {
        return beginCreateOrUpdateAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceDescriptionInner> createOrUpdateAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceDescriptionInner createOrUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourceDescriptionInner body) {
        return createOrUpdateAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Creates a job resource with the specified name, description and properties. If a job with the same name exists,
     * then it is updated with the specified description and properties.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceDescriptionInner createOrUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourceDescriptionInner body,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdateAsync(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<JobResourceDescriptionInner, JobResourceDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobResourceDescriptionInner.class,
                JobResourceDescriptionInner.class,
                this.client.getContext());
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdateAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<JobResourceDescriptionInner, JobResourceDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobResourceDescriptionInner.class,
                JobResourceDescriptionInner.class,
                context);
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdate(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body) {
        return beginUpdateAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobResourceDescriptionInner>, JobResourceDescriptionInner> beginUpdate(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context) {
        return beginUpdateAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceDescriptionInner> updateAsync(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body) {
        return beginUpdateAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceDescriptionInner> updateAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context) {
        return beginUpdateAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceDescriptionInner update(
        String resourceGroupName, String accountName, String jobName, JobResourcePatchDescription body) {
        return updateAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
     * the specified properties. If a job doesn't exist, then a no-content exception will be thrown.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a job resource in Singularity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceDescriptionInner update(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobResourcePatchDescription body,
        Context context) {
        return updateAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobResourceDescriptionInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobResourceDescriptionInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobResourceDescriptionInner> getAsync(String resourceGroupName, String accountName, String jobName) {
        return getWithResponseAsync(resourceGroupName, accountName, jobName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobResourceDescriptionInner get(String resourceGroupName, String accountName, String jobName) {
        return getAsync(resourceGroupName, accountName, jobName).block();
    }

    /**
     * Gets the information about the job resource with the given name. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the job resource with the given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobResourceDescriptionInner> getWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context) {
        return getWithResponseAsync(resourceGroupName, accountName, jobName, context).block();
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String accountName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String accountName, String jobName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, accountName, jobName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String accountName, String jobName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, accountName, jobName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String jobName) {
        return beginDeleteAsync(resourceGroupName, accountName, jobName).getSyncPoller();
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String jobName, Context context) {
        return beginDeleteAsync(resourceGroupName, accountName, jobName, context).getSyncPoller();
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String accountName, String jobName) {
        return beginDeleteAsync(resourceGroupName, accountName, jobName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String accountName, String jobName, Context context) {
        return beginDeleteAsync(resourceGroupName, accountName, jobName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String accountName, String jobName) {
        deleteAsync(resourceGroupName, accountName, jobName).block();
    }

    /**
     * Deletes the job resource identified by the name.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String accountName, String jobName, Context context) {
        deleteAsync(resourceGroupName, accountName, jobName, context).block();
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approveWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .approve(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approveWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .approve(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginApproveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = approveWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginApproveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            approveWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginApprove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginApproveAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginApprove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginApproveAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> approveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginApproveAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> approveAsync(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        return beginApproveAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> approveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginApproveAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void approve(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        approveAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void approve(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        approveAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void approve(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        approveAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createSasTokenWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createSasToken(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createSasTokenWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createSasToken(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasTokenAsync(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createSasTokenWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<JobSasTokenDescriptionInner, JobSasTokenDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobSasTokenDescriptionInner.class,
                JobSasTokenDescriptionInner.class,
                this.client.getContext());
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasTokenAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createSasTokenWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<JobSasTokenDescriptionInner, JobSasTokenDescriptionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                JobSasTokenDescriptionInner.class,
                JobSasTokenDescriptionInner.class,
                context);
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        return beginCreateSasTokenAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a Shared Access Signature (SAS) Token for Singularity
     *     Jobs.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JobSasTokenDescriptionInner>, JobSasTokenDescriptionInner> beginCreateSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        return beginCreateSasTokenAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobSasTokenDescriptionInner> createSasTokenAsync(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        return beginCreateSasTokenAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobSasTokenDescriptionInner> createSasTokenAsync(
        String resourceGroupName, String accountName, String jobName) {
        final JobSasTokenDescriptionInner body = null;
        return beginCreateSasTokenAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobSasTokenDescriptionInner> createSasTokenAsync(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        return beginCreateSasTokenAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobSasTokenDescriptionInner createSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        return createSasTokenAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobSasTokenDescriptionInner createSasToken(String resourceGroupName, String accountName, String jobName) {
        final JobSasTokenDescriptionInner body = null;
        return createSasTokenAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobSasTokenDescriptionInner createSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        return createSasTokenAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobSasTokenDescriptionInner>> renewKeyWithResponseAsync(
        String resourceGroupName, String accountName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .renewKey(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobSasTokenDescriptionInner>> renewKeyWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .renewKey(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobSasTokenDescriptionInner> renewKeyAsync(
        String resourceGroupName, String accountName, String jobName) {
        return renewKeyWithResponseAsync(resourceGroupName, accountName, jobName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobSasTokenDescriptionInner renewKey(String resourceGroupName, String accountName, String jobName) {
        return renewKeyAsync(resourceGroupName, accountName, jobName).block();
    }

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobSasTokenDescriptionInner> renewKeyWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context) {
        return renewKeyWithResponseAsync(resourceGroupName, accountName, jobName, context).block();
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> suspendWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .suspend(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> suspendWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .suspend(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginSuspendAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = suspendWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginSuspendAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            suspendWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginSuspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginSuspendAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginSuspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginSuspendAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> suspendAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginSuspendAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> suspendAsync(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        return beginSuspendAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> suspendAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginSuspendAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void suspend(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        suspendAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void suspend(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        suspendAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void suspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        suspendAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resume(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .resume(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginResumeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = resumeWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginResumeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            resumeWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginResume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginResumeAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginResume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginResumeAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resumeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginResumeAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resumeAsync(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        return beginResumeAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resumeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginResumeAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resume(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        resumeAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resume(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        resumeAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        resumeAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .cancel(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .cancel(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = cancelWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            cancelWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginCancelAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginCancelAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginCancelAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        return beginCancelAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginCancelAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        cancelAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        cancelAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        cancelAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobResourceDescriptionInner>> listByAccountSinglePageAsync(
        String resourceGroupName, String accountName, String continuationToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByAccount(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            continuationToken,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<JobResourceDescriptionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobResourceDescriptionInner>> listByAccountSinglePageAsync(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByAccount(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                continuationToken,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobResourceDescriptionInner> listByAccountAsync(
        String resourceGroupName, String accountName, String continuationToken) {
        return new PagedFlux<>(
            () -> listByAccountSinglePageAsync(resourceGroupName, accountName, continuationToken),
            nextLink -> listByAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobResourceDescriptionInner> listByAccountAsync(String resourceGroupName, String accountName) {
        final String continuationToken = null;
        return new PagedFlux<>(
            () -> listByAccountSinglePageAsync(resourceGroupName, accountName, continuationToken),
            nextLink -> listByAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobResourceDescriptionInner> listByAccountAsync(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        return new PagedFlux<>(
            () -> listByAccountSinglePageAsync(resourceGroupName, accountName, continuationToken, context),
            nextLink -> listByAccountNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobResourceDescriptionInner> listByAccount(String resourceGroupName, String accountName) {
        final String continuationToken = null;
        return new PagedIterable<>(listByAccountAsync(resourceGroupName, accountName, continuationToken));
    }

    /**
     * Gets the information about all the job resources in a given account. The information include the description and
     * other properties of the job.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param continuationToken The continuationToken parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about all the job resources in a given account as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobResourceDescriptionInner> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        return new PagedIterable<>(listByAccountAsync(resourceGroupName, accountName, continuationToken, context));
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> removeWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .remove(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            jobName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> removeWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .remove(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                jobName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRemoveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        Mono<Response<Flux<ByteBuffer>>> mono = removeWithResponseAsync(resourceGroupName, accountName, jobName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRemoveAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            removeWithResponseAsync(resourceGroupName, accountName, jobName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRemove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginRemoveAsync(resourceGroupName, accountName, jobName, body).getSyncPoller();
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRemove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginRemoveAsync(resourceGroupName, accountName, jobName, body, context).getSyncPoller();
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> removeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        return beginRemoveAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> removeAsync(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        return beginRemoveAsync(resourceGroupName, accountName, jobName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> removeAsync(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        return beginRemoveAsync(resourceGroupName, accountName, jobName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void remove(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        removeAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void remove(String resourceGroupName, String accountName, String jobName) {
        final JobUserActionDescription body = null;
        removeAsync(resourceGroupName, accountName, jobName, body).block();
    }

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param accountName The name of the Singularity account.
     * @param jobName The name of the Singularity job.
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void remove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        removeAsync(resourceGroupName, accountName, jobName, body, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of Job resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobResourceDescriptionInner>> listByAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobResourceDescriptionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of Job resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobResourceDescriptionInner>> listByAccountNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByAccountNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
