// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.singularity.fluent.JobsClient;
import com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;
import com.azure.resourcemanager.singularity.models.JobResourceDescription;
import com.azure.resourcemanager.singularity.models.JobSasTokenDescription;
import com.azure.resourcemanager.singularity.models.JobUserActionDescription;
import com.azure.resourcemanager.singularity.models.Jobs;

public final class JobsImpl implements Jobs {
    private static final ClientLogger LOGGER = new ClientLogger(JobsImpl.class);

    private final JobsClient innerClient;

    private final com.azure.resourcemanager.singularity.SingularityManager serviceManager;

    public JobsImpl(JobsClient innerClient, com.azure.resourcemanager.singularity.SingularityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public JobResourceDescription get(String resourceGroupName, String accountName, String jobName) {
        JobResourceDescriptionInner inner = this.serviceClient().get(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new JobResourceDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<JobResourceDescription> getWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context) {
        Response<JobResourceDescriptionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobResourceDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().delete(resourceGroupName, accountName, jobName);
    }

    public void delete(String resourceGroupName, String accountName, String jobName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, jobName, context);
    }

    public void approve(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        this.serviceClient().approve(resourceGroupName, accountName, jobName, body);
    }

    public void approve(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().approve(resourceGroupName, accountName, jobName);
    }

    public void approve(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        this.serviceClient().approve(resourceGroupName, accountName, jobName, body, context);
    }

    public JobSasTokenDescription createSasToken(
        String resourceGroupName, String accountName, String jobName, JobSasTokenDescriptionInner body) {
        JobSasTokenDescriptionInner inner =
            this.serviceClient().createSasToken(resourceGroupName, accountName, jobName, body);
        if (inner != null) {
            return new JobSasTokenDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobSasTokenDescription createSasToken(String resourceGroupName, String accountName, String jobName) {
        JobSasTokenDescriptionInner inner =
            this.serviceClient().createSasToken(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new JobSasTokenDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobSasTokenDescription createSasToken(
        String resourceGroupName,
        String accountName,
        String jobName,
        JobSasTokenDescriptionInner body,
        Context context) {
        JobSasTokenDescriptionInner inner =
            this.serviceClient().createSasToken(resourceGroupName, accountName, jobName, body, context);
        if (inner != null) {
            return new JobSasTokenDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobSasTokenDescription renewKey(String resourceGroupName, String accountName, String jobName) {
        JobSasTokenDescriptionInner inner = this.serviceClient().renewKey(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new JobSasTokenDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<JobSasTokenDescription> renewKeyWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context) {
        Response<JobSasTokenDescriptionInner> inner =
            this.serviceClient().renewKeyWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobSasTokenDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void suspend(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        this.serviceClient().suspend(resourceGroupName, accountName, jobName, body);
    }

    public void suspend(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().suspend(resourceGroupName, accountName, jobName);
    }

    public void suspend(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        this.serviceClient().suspend(resourceGroupName, accountName, jobName, body, context);
    }

    public void resume(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        this.serviceClient().resume(resourceGroupName, accountName, jobName, body);
    }

    public void resume(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().resume(resourceGroupName, accountName, jobName);
    }

    public void resume(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        this.serviceClient().resume(resourceGroupName, accountName, jobName, body, context);
    }

    public void cancel(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        this.serviceClient().cancel(resourceGroupName, accountName, jobName, body);
    }

    public void cancel(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().cancel(resourceGroupName, accountName, jobName);
    }

    public void cancel(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        this.serviceClient().cancel(resourceGroupName, accountName, jobName, body, context);
    }

    public PagedIterable<JobResourceDescription> listByAccount(String resourceGroupName, String accountName) {
        PagedIterable<JobResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName);
        return Utils.mapPage(inner, inner1 -> new JobResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<JobResourceDescription> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        PagedIterable<JobResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new JobResourceDescriptionImpl(inner1, this.manager()));
    }

    public void remove(String resourceGroupName, String accountName, String jobName, JobUserActionDescription body) {
        this.serviceClient().remove(resourceGroupName, accountName, jobName, body);
    }

    public void remove(String resourceGroupName, String accountName, String jobName) {
        this.serviceClient().remove(resourceGroupName, accountName, jobName);
    }

    public void remove(
        String resourceGroupName, String accountName, String jobName, JobUserActionDescription body, Context context) {
        this.serviceClient().remove(resourceGroupName, accountName, jobName, body, context);
    }

    public JobResourceDescription getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, jobName, Context.NONE).getValue();
    }

    public Response<JobResourceDescription> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, jobName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        this.delete(resourceGroupName, accountName, jobName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        this.delete(resourceGroupName, accountName, jobName, context);
    }

    private JobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.singularity.SingularityManager manager() {
        return this.serviceManager;
    }

    public JobResourceDescriptionImpl define(String name) {
        return new JobResourceDescriptionImpl(name, this.manager());
    }
}
