// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.singularity.models.CheckpointPolicy;
import com.azure.resourcemanager.singularity.models.ContainerImageBase;
import com.azure.resourcemanager.singularity.models.JobResourceProperties;
import com.azure.resourcemanager.singularity.models.JobStatus;
import com.azure.resourcemanager.singularity.models.NetworkReference;
import com.azure.resourcemanager.singularity.models.PlacementPolicy;
import com.azure.resourcemanager.singularity.models.ProvisioningState;
import com.azure.resourcemanager.singularity.models.SchedulingPriority;
import com.azure.resourcemanager.singularity.models.SlaTier;
import com.azure.resourcemanager.singularity.models.StorageLocation;
import java.util.List;
import java.util.Map;

/** The JobResourceDescriptionProperties model. */
@Fluent
public final class JobResourceDescriptionProperties extends JobResourceProperties {
    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withPlacementPolicies(List<PlacementPolicy> placementPolicies) {
        super.withPlacementPolicies(placementPolicies);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withSlaTier(SlaTier slaTier) {
        super.withSlaTier(slaTier);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withSchedulingPriority(SchedulingPriority schedulingPriority) {
        super.withSchedulingPriority(schedulingPriority);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withDataLocation(List<StorageLocation> dataLocation) {
        super.withDataLocation(dataLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withCodeLocation(StorageLocation codeLocation) {
        super.withCodeLocation(codeLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withOutputLocation(StorageLocation outputLocation) {
        super.withOutputLocation(outputLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withNetworkResourceRef(NetworkReference networkResourceRef) {
        super.withNetworkResourceRef(networkResourceRef);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withContainerImage(ContainerImageBase containerImage) {
        super.withContainerImage(containerImage);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withGroupPolicyName(String groupPolicyName) {
        super.withGroupPolicyName(groupPolicyName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withCheckpointPolicy(CheckpointPolicy checkpointPolicy) {
        super.withCheckpointPolicy(checkpointPolicy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withMaxJobExecutionTime(Double maxJobExecutionTime) {
        super.withMaxJobExecutionTime(maxJobExecutionTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withSuspendOnIdleTime(Double suspendOnIdleTime) {
        super.withSuspendOnIdleTime(suspendOnIdleTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withProgram(String program) {
        super.withProgram(program);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withProgramArgs(String programArgs) {
        super.withProgramArgs(programArgs);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withTensorBoardLogDirectory(String tensorBoardLogDirectory) {
        super.withTensorBoardLogDirectory(tensorBoardLogDirectory);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withStatus(JobStatus status) {
        super.withStatus(status);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobResourceDescriptionProperties withEnvironmentVariables(Map<String, String> environmentVariables) {
        super.withEnvironmentVariables(environmentVariables);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
