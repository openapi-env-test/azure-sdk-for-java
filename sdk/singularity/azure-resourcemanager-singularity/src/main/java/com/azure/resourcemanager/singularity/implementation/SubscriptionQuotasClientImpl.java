// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.singularity.fluent.SubscriptionQuotasClient;
import com.azure.resourcemanager.singularity.fluent.models.InstanceTypeSeriesQuotaListInner;
import com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SubscriptionQuotasClient. */
public final class SubscriptionQuotasClientImpl implements SubscriptionQuotasClient {
    /** The proxy service used to perform REST calls. */
    private final SubscriptionQuotasService service;

    /** The service client containing this operation class. */
    private final SingularityManagementClientImpl client;

    /**
     * Initializes an instance of SubscriptionQuotasClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SubscriptionQuotasClientImpl(SingularityManagementClientImpl client) {
        this.service =
            RestProxy.create(SubscriptionQuotasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SingularityManagementClientSubscriptionQuotas to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SingularityManagemen")
    private interface SubscriptionQuotasService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Singularity/quotas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorModelPropertiesException.class)
        Mono<Response<InstanceTypeSeriesQuotaListInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam(value = "ownerSubscriptionId", encoded = true) String ownerSubscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @param ownerSubscriptionId Subscription id that uniquely identify a Microsoft Azure subscription. The owner
     *     subscription id is sent as a query parameter when subscription for the request is different from the
     *     subscription ID of the URI.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InstanceTypeSeriesQuotaListInner>> getWithResponseAsync(String ownerSubscriptionId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            ownerSubscriptionId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @param ownerSubscriptionId Subscription id that uniquely identify a Microsoft Azure subscription. The owner
     *     subscription id is sent as a query parameter when subscription for the request is different from the
     *     subscription ID of the URI.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InstanceTypeSeriesQuotaListInner>> getWithResponseAsync(
        String ownerSubscriptionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                ownerSubscriptionId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @param ownerSubscriptionId Subscription id that uniquely identify a Microsoft Azure subscription. The owner
     *     subscription id is sent as a query parameter when subscription for the request is different from the
     *     subscription ID of the URI.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InstanceTypeSeriesQuotaListInner> getAsync(String ownerSubscriptionId) {
        return getWithResponseAsync(ownerSubscriptionId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InstanceTypeSeriesQuotaListInner> getAsync() {
        final String ownerSubscriptionId = null;
        return getWithResponseAsync(ownerSubscriptionId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InstanceTypeSeriesQuotaListInner get() {
        final String ownerSubscriptionId = null;
        return getAsync(ownerSubscriptionId).block();
    }

    /**
     * Gets the information about the subscriptions quota resource with the given subscriptionId. The information
     * includes subscription level quota allocation and usage for each InstanceTypeSeries and SLA tier.
     *
     * @param ownerSubscriptionId Subscription id that uniquely identify a Microsoft Azure subscription. The owner
     *     subscription id is sent as a query parameter when subscription for the request is different from the
     *     subscription ID of the URI.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorModelPropertiesException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the subscriptions quota resource with the given subscriptionId along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InstanceTypeSeriesQuotaListInner> getWithResponse(String ownerSubscriptionId, Context context) {
        return getWithResponseAsync(ownerSubscriptionId, context).block();
    }
}
