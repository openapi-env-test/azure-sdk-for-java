// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner;
import com.azure.resourcemanager.singularity.fluent.models.JobSasTokenDescriptionInner;
import java.util.Map;

/** An immutable client-side representation of JobResourceDescription. */
public interface JobResourceDescription {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the identity property: The identity property.
     *
     * @return the identity value.
     */
    ResourceIdentity identity();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The systemData property.
     *
     * @return the systemData value.
     */
    ResourceSystemData systemData();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.singularity.fluent.models.JobResourceDescriptionInner object.
     *
     * @return the inner object.
     */
    JobResourceDescriptionInner innerModel();

    /** The entirety of the JobResourceDescription definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The JobResourceDescription definition stages. */
    interface DefinitionStages {
        /** The first stage of the JobResourceDescription definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the JobResourceDescription definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group within the user's subscription.
             * @param accountName The name of the Singularity account.
             * @return the next definition stage.
             */
            WithCreate withExistingAccount(String resourceGroupName, String accountName);
        }
        /**
         * The stage of the JobResourceDescription definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithIdentity, DefinitionStages.WithSystemData {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            JobResourceDescription create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            JobResourceDescription create(Context context);
        }
        /** The stage of the JobResourceDescription definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the JobResourceDescription definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity property..
             *
             * @param identity The identity property.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ResourceIdentity identity);
        }
        /** The stage of the JobResourceDescription definition allowing to specify systemData. */
        interface WithSystemData {
            /**
             * Specifies the systemData property: The systemData property..
             *
             * @param systemData The systemData property.
             * @return the next definition stage.
             */
            WithCreate withSystemData(ResourceSystemData systemData);
        }
    }
    /**
     * Begins update for the JobResourceDescription resource.
     *
     * @return the stage of resource update.
     */
    JobResourceDescription.Update update();

    /** The template for JobResourceDescription update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithSystemData {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        JobResourceDescription apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        JobResourceDescription apply(Context context);
    }
    /** The JobResourceDescription update stages. */
    interface UpdateStages {
        /** The stage of the JobResourceDescription update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the JobResourceDescription update allowing to specify systemData. */
        interface WithSystemData {
            /**
             * Specifies the systemData property: The systemData property..
             *
             * @param systemData The systemData property.
             * @return the next definition stage.
             */
            Update withSystemData(ResourceSystemData systemData);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    JobResourceDescription refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    JobResourceDescription refresh(Context context);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve(JobUserActionDescription body);

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve();

    /**
     * This action can be used by the account admin to approve a job manually, which is otherwise blocked by
     * insufficient user-level quota (represented by Group Policy).
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approve(JobUserActionDescription body, Context context);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken(JobSasTokenDescriptionInner body);

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken();

    /**
     * Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
     * specified in the description.
     *
     * @param body Singularity job Shared Access Signature (SAS) token information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription createSasToken(JobSasTokenDescriptionInner body, Context context);

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs.
     */
    JobSasTokenDescription renewKey();

    /**
     * Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
     * prior to key rotation.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a Shared Access Signature (SAS) Token for Singularity Jobs along with {@link Response}.
     */
    Response<JobSasTokenDescription> renewKeyWithResponse(Context context);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend(JobUserActionDescription body);

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend();

    /**
     * Suspending a job will stop the current execution and release any resources and quota reservations. The job will
     * remain in the Suspended state until resumed or deleted.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void suspend(JobUserActionDescription body, Context context);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(JobUserActionDescription body);

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume();

    /**
     * Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
     * execution.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(JobUserActionDescription body, Context context);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(JobUserActionDescription body);

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel();

    /**
     * Cancel the job operation without deleting the resource.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(JobUserActionDescription body, Context context);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove(JobUserActionDescription body);

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove();

    /**
     * Remove job operation is used to delete a job that is associated with a group policy.
     *
     * @param body Describes properties for the user action of Singularity jobs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.singularity.models.ErrorModelPropertiesException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void remove(JobUserActionDescription body, Context context);
}
