// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Describes probe settings based on executing a program. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("Exec")
@Fluent
public final class ExecProbeSetting extends ProbeSetting {
    /*
     * Program to be executed for the probe.
     */
    @JsonProperty(value = "program", required = true)
    private String program;

    /*
     * Arguments passed into the Program.
     */
    @JsonProperty(value = "programArgs")
    private String programArgs;

    /**
     * Get the program property: Program to be executed for the probe.
     *
     * @return the program value.
     */
    public String program() {
        return this.program;
    }

    /**
     * Set the program property: Program to be executed for the probe.
     *
     * @param program the program value to set.
     * @return the ExecProbeSetting object itself.
     */
    public ExecProbeSetting withProgram(String program) {
        this.program = program;
        return this;
    }

    /**
     * Get the programArgs property: Arguments passed into the Program.
     *
     * @return the programArgs value.
     */
    public String programArgs() {
        return this.programArgs;
    }

    /**
     * Set the programArgs property: Arguments passed into the Program.
     *
     * @param programArgs the programArgs value to set.
     * @return the ExecProbeSetting object itself.
     */
    public ExecProbeSetting withProgramArgs(String programArgs) {
        this.programArgs = programArgs;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExecProbeSetting withInitialDelayInSeconds(Integer initialDelayInSeconds) {
        super.withInitialDelayInSeconds(initialDelayInSeconds);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExecProbeSetting withSuccessThreshold(Integer successThreshold) {
        super.withSuccessThreshold(successThreshold);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExecProbeSetting withFailureThreshold(Integer failureThreshold) {
        super.withFailureThreshold(failureThreshold);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExecProbeSetting withFrequencyInSeconds(Integer frequencyInSeconds) {
        super.withFrequencyInSeconds(frequencyInSeconds);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExecProbeSetting withTimeoutInSeconds(Integer timeoutInSeconds) {
        super.withTimeoutInSeconds(timeoutInSeconds);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (program() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property program in model ExecProbeSetting"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExecProbeSetting.class);
}
