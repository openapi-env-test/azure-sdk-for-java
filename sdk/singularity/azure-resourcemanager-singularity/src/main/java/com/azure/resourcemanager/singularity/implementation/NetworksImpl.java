// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.singularity.fluent.NetworksClient;
import com.azure.resourcemanager.singularity.fluent.models.NetworkResourceDescriptionInner;
import com.azure.resourcemanager.singularity.models.NetworkResourceDescription;
import com.azure.resourcemanager.singularity.models.Networks;

public final class NetworksImpl implements Networks {
    private static final ClientLogger LOGGER = new ClientLogger(NetworksImpl.class);

    private final NetworksClient innerClient;

    private final com.azure.resourcemanager.singularity.SingularityManager serviceManager;

    public NetworksImpl(
        NetworksClient innerClient, com.azure.resourcemanager.singularity.SingularityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public NetworkResourceDescription get(String resourceGroupName, String accountName, String networkResourceName) {
        NetworkResourceDescriptionInner inner =
            this.serviceClient().get(resourceGroupName, accountName, networkResourceName);
        if (inner != null) {
            return new NetworkResourceDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkResourceDescription> getWithResponse(
        String resourceGroupName, String accountName, String networkResourceName, Context context) {
        Response<NetworkResourceDescriptionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, accountName, networkResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkResourceDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String networkResourceName) {
        this.serviceClient().delete(resourceGroupName, accountName, networkResourceName);
    }

    public void delete(String resourceGroupName, String accountName, String networkResourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, networkResourceName, context);
    }

    public PagedIterable<NetworkResourceDescription> listByAccount(String resourceGroupName, String accountName) {
        PagedIterable<NetworkResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName);
        return Utils.mapPage(inner, inner1 -> new NetworkResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkResourceDescription> listByAccount(
        String resourceGroupName, String accountName, String continuationToken, Context context) {
        PagedIterable<NetworkResourceDescriptionInner> inner =
            this.serviceClient().listByAccount(resourceGroupName, accountName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new NetworkResourceDescriptionImpl(inner1, this.manager()));
    }

    public NetworkResourceDescription getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String networkResourceName = Utils.getValueFromIdByName(id, "networks");
        if (networkResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, networkResourceName, Context.NONE).getValue();
    }

    public Response<NetworkResourceDescription> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String networkResourceName = Utils.getValueFromIdByName(id, "networks");
        if (networkResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, networkResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String networkResourceName = Utils.getValueFromIdByName(id, "networks");
        if (networkResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networks'.", id)));
        }
        this.delete(resourceGroupName, accountName, networkResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String networkResourceName = Utils.getValueFromIdByName(id, "networks");
        if (networkResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networks'.", id)));
        }
        this.delete(resourceGroupName, accountName, networkResourceName, context);
    }

    private NetworksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.singularity.SingularityManager manager() {
        return this.serviceManager;
    }

    public NetworkResourceDescriptionImpl define(String name) {
        return new NetworkResourceDescriptionImpl(name, this.manager());
    }
}
