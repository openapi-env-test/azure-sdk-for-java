// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Describes the properties of a job resource. */
@Fluent
public class JobResourceProperties {
    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState")
    private ProvisioningState provisioningState;

    /*
     * System generated globally unique id for the job. This property is read
     * only.
     */
    @JsonProperty(value = "jobId", access = JsonProperty.Access.WRITE_ONLY)
    private String jobId;

    /*
     * Collection of placement policies to use for the training job.
     */
    @JsonProperty(value = "placementPolicies", required = true)
    private List<PlacementPolicy> placementPolicies;

    /*
     * The slaTier property.
     */
    @JsonProperty(value = "slaTier")
    private SlaTier slaTier;

    /*
     * The schedulingPriority property.
     */
    @JsonProperty(value = "schedulingPriority")
    private SchedulingPriority schedulingPriority;

    /*
     * Job input data location.
     */
    @JsonProperty(value = "dataLocation")
    private List<StorageLocation> dataLocation;

    /*
     * Describes the location of a storage source and how it will be accessed.
     */
    @JsonProperty(value = "codeLocation")
    private StorageLocation codeLocation;

    /*
     * Describes the location of a storage source and how it will be accessed.
     */
    @JsonProperty(value = "outputLocation")
    private StorageLocation outputLocation;

    /*
     * Describes a network resource reference.
     */
    @JsonProperty(value = "networkResourceRef")
    private NetworkReference networkResourceRef;

    /*
     * Describes the container image for the job resource.
     */
    @JsonProperty(value = "containerImage", required = true)
    private ContainerImageBase containerImage;

    /*
     * Group policy name associated with the training job.
     */
    @JsonProperty(value = "groupPolicyName")
    private String groupPolicyName;

    /*
     * Describes the checkpointing policy for job
     */
    @JsonProperty(value = "checkpointPolicy")
    private CheckpointPolicy checkpointPolicy;

    /*
     * Maximum execution time for a training job in the account (in hours).
     */
    @JsonProperty(value = "maxJobExecutionTime")
    private Double maxJobExecutionTime;

    /*
     * Minimum idle time before job gets automatically suspended (in hours).
     */
    @JsonProperty(value = "suspendOnIdleTime")
    private Double suspendOnIdleTime;

    /*
     * The entry script for your Job in the codeLocation. For interactive jobs,
     * specify null.
     */
    @JsonProperty(value = "program")
    private String program;

    /*
     * Command line arguments to be passed to the program.
     */
    @JsonProperty(value = "programArgs")
    private String programArgs;

    /*
     * The directory which TensorBoard will be configured to use as the log
     * directory.
     */
    @JsonProperty(value = "tensorBoardLogDirectory")
    private String tensorBoardLogDirectory;

    /*
     * The status property.
     */
    @JsonProperty(value = "status")
    private JobStatus status;

    /*
     * User-friendly description of the job.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Gives additional information about the current status of the job.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * Url to access Jupyter notebook endpoint of the job.
     */
    @JsonProperty(value = "notebookEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String notebookEndpoint;

    /*
     * Url to access TensorBoard endpoint of the job.
     */
    @JsonProperty(value = "tensorBoardEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String tensorBoardEndpoint;

    /*
     * Url to access Grafana endpoint of the job.
     */
    @JsonProperty(value = "grafanaEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String grafanaEndpoint;

    /*
     * Url to access logs of the job.
     */
    @JsonProperty(value = "jobLogsEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String jobLogsEndpoint;

    /*
     * User specified job environment variables.
     */
    @JsonProperty(value = "environmentVariables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environmentVariables;

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioningState property.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the jobId property: System generated globally unique id for the job. This property is read only.
     *
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Get the placementPolicies property: Collection of placement policies to use for the training job.
     *
     * @return the placementPolicies value.
     */
    public List<PlacementPolicy> placementPolicies() {
        return this.placementPolicies;
    }

    /**
     * Set the placementPolicies property: Collection of placement policies to use for the training job.
     *
     * @param placementPolicies the placementPolicies value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withPlacementPolicies(List<PlacementPolicy> placementPolicies) {
        this.placementPolicies = placementPolicies;
        return this;
    }

    /**
     * Get the slaTier property: The slaTier property.
     *
     * @return the slaTier value.
     */
    public SlaTier slaTier() {
        return this.slaTier;
    }

    /**
     * Set the slaTier property: The slaTier property.
     *
     * @param slaTier the slaTier value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withSlaTier(SlaTier slaTier) {
        this.slaTier = slaTier;
        return this;
    }

    /**
     * Get the schedulingPriority property: The schedulingPriority property.
     *
     * @return the schedulingPriority value.
     */
    public SchedulingPriority schedulingPriority() {
        return this.schedulingPriority;
    }

    /**
     * Set the schedulingPriority property: The schedulingPriority property.
     *
     * @param schedulingPriority the schedulingPriority value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withSchedulingPriority(SchedulingPriority schedulingPriority) {
        this.schedulingPriority = schedulingPriority;
        return this;
    }

    /**
     * Get the dataLocation property: Job input data location.
     *
     * @return the dataLocation value.
     */
    public List<StorageLocation> dataLocation() {
        return this.dataLocation;
    }

    /**
     * Set the dataLocation property: Job input data location.
     *
     * @param dataLocation the dataLocation value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withDataLocation(List<StorageLocation> dataLocation) {
        this.dataLocation = dataLocation;
        return this;
    }

    /**
     * Get the codeLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @return the codeLocation value.
     */
    public StorageLocation codeLocation() {
        return this.codeLocation;
    }

    /**
     * Set the codeLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @param codeLocation the codeLocation value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withCodeLocation(StorageLocation codeLocation) {
        this.codeLocation = codeLocation;
        return this;
    }

    /**
     * Get the outputLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @return the outputLocation value.
     */
    public StorageLocation outputLocation() {
        return this.outputLocation;
    }

    /**
     * Set the outputLocation property: Describes the location of a storage source and how it will be accessed.
     *
     * @param outputLocation the outputLocation value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withOutputLocation(StorageLocation outputLocation) {
        this.outputLocation = outputLocation;
        return this;
    }

    /**
     * Get the networkResourceRef property: Describes a network resource reference.
     *
     * @return the networkResourceRef value.
     */
    public NetworkReference networkResourceRef() {
        return this.networkResourceRef;
    }

    /**
     * Set the networkResourceRef property: Describes a network resource reference.
     *
     * @param networkResourceRef the networkResourceRef value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withNetworkResourceRef(NetworkReference networkResourceRef) {
        this.networkResourceRef = networkResourceRef;
        return this;
    }

    /**
     * Get the containerImage property: Describes the container image for the job resource.
     *
     * @return the containerImage value.
     */
    public ContainerImageBase containerImage() {
        return this.containerImage;
    }

    /**
     * Set the containerImage property: Describes the container image for the job resource.
     *
     * @param containerImage the containerImage value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withContainerImage(ContainerImageBase containerImage) {
        this.containerImage = containerImage;
        return this;
    }

    /**
     * Get the groupPolicyName property: Group policy name associated with the training job.
     *
     * @return the groupPolicyName value.
     */
    public String groupPolicyName() {
        return this.groupPolicyName;
    }

    /**
     * Set the groupPolicyName property: Group policy name associated with the training job.
     *
     * @param groupPolicyName the groupPolicyName value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withGroupPolicyName(String groupPolicyName) {
        this.groupPolicyName = groupPolicyName;
        return this;
    }

    /**
     * Get the checkpointPolicy property: Describes the checkpointing policy for job.
     *
     * @return the checkpointPolicy value.
     */
    public CheckpointPolicy checkpointPolicy() {
        return this.checkpointPolicy;
    }

    /**
     * Set the checkpointPolicy property: Describes the checkpointing policy for job.
     *
     * @param checkpointPolicy the checkpointPolicy value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withCheckpointPolicy(CheckpointPolicy checkpointPolicy) {
        this.checkpointPolicy = checkpointPolicy;
        return this;
    }

    /**
     * Get the maxJobExecutionTime property: Maximum execution time for a training job in the account (in hours).
     *
     * @return the maxJobExecutionTime value.
     */
    public Double maxJobExecutionTime() {
        return this.maxJobExecutionTime;
    }

    /**
     * Set the maxJobExecutionTime property: Maximum execution time for a training job in the account (in hours).
     *
     * @param maxJobExecutionTime the maxJobExecutionTime value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withMaxJobExecutionTime(Double maxJobExecutionTime) {
        this.maxJobExecutionTime = maxJobExecutionTime;
        return this;
    }

    /**
     * Get the suspendOnIdleTime property: Minimum idle time before job gets automatically suspended (in hours).
     *
     * @return the suspendOnIdleTime value.
     */
    public Double suspendOnIdleTime() {
        return this.suspendOnIdleTime;
    }

    /**
     * Set the suspendOnIdleTime property: Minimum idle time before job gets automatically suspended (in hours).
     *
     * @param suspendOnIdleTime the suspendOnIdleTime value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withSuspendOnIdleTime(Double suspendOnIdleTime) {
        this.suspendOnIdleTime = suspendOnIdleTime;
        return this;
    }

    /**
     * Get the program property: The entry script for your Job in the codeLocation. For interactive jobs, specify null.
     *
     * @return the program value.
     */
    public String program() {
        return this.program;
    }

    /**
     * Set the program property: The entry script for your Job in the codeLocation. For interactive jobs, specify null.
     *
     * @param program the program value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withProgram(String program) {
        this.program = program;
        return this;
    }

    /**
     * Get the programArgs property: Command line arguments to be passed to the program.
     *
     * @return the programArgs value.
     */
    public String programArgs() {
        return this.programArgs;
    }

    /**
     * Set the programArgs property: Command line arguments to be passed to the program.
     *
     * @param programArgs the programArgs value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withProgramArgs(String programArgs) {
        this.programArgs = programArgs;
        return this;
    }

    /**
     * Get the tensorBoardLogDirectory property: The directory which TensorBoard will be configured to use as the log
     * directory.
     *
     * @return the tensorBoardLogDirectory value.
     */
    public String tensorBoardLogDirectory() {
        return this.tensorBoardLogDirectory;
    }

    /**
     * Set the tensorBoardLogDirectory property: The directory which TensorBoard will be configured to use as the log
     * directory.
     *
     * @param tensorBoardLogDirectory the tensorBoardLogDirectory value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withTensorBoardLogDirectory(String tensorBoardLogDirectory) {
        this.tensorBoardLogDirectory = tensorBoardLogDirectory;
        return this;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     *
     * @param status the status value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the description property: User-friendly description of the job.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User-friendly description of the job.
     *
     * @param description the description value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the job.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the notebookEndpoint property: Url to access Jupyter notebook endpoint of the job.
     *
     * @return the notebookEndpoint value.
     */
    public String notebookEndpoint() {
        return this.notebookEndpoint;
    }

    /**
     * Get the tensorBoardEndpoint property: Url to access TensorBoard endpoint of the job.
     *
     * @return the tensorBoardEndpoint value.
     */
    public String tensorBoardEndpoint() {
        return this.tensorBoardEndpoint;
    }

    /**
     * Get the grafanaEndpoint property: Url to access Grafana endpoint of the job.
     *
     * @return the grafanaEndpoint value.
     */
    public String grafanaEndpoint() {
        return this.grafanaEndpoint;
    }

    /**
     * Get the jobLogsEndpoint property: Url to access logs of the job.
     *
     * @return the jobLogsEndpoint value.
     */
    public String jobLogsEndpoint() {
        return this.jobLogsEndpoint;
    }

    /**
     * Get the environmentVariables property: User specified job environment variables.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: User specified job environment variables.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (placementPolicies() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property placementPolicies in model JobResourceProperties"));
        } else {
            placementPolicies().forEach(e -> e.validate());
        }
        if (dataLocation() != null) {
            dataLocation().forEach(e -> e.validate());
        }
        if (codeLocation() != null) {
            codeLocation().validate();
        }
        if (outputLocation() != null) {
            outputLocation().validate();
        }
        if (networkResourceRef() != null) {
            networkResourceRef().validate();
        }
        if (containerImage() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property containerImage in model JobResourceProperties"));
        } else {
            containerImage().validate();
        }
        if (checkpointPolicy() != null) {
            checkpointPolicy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobResourceProperties.class);
}
