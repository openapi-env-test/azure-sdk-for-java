// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes properties of a model resource for a given geographic location. */
@Fluent
public final class ModelLocation {
    /*
     * Name of the geographic location.
     */
    @JsonProperty(value = "location", required = true)
    private String location;

    /*
     * The status property.
     */
    @JsonProperty(value = "status")
    private ModelStatus status;

    /*
     * Gives additional information about the current status of the model in
     * this location.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * Error code of the model in this location.
     */
    @JsonProperty(value = "errorCode", access = JsonProperty.Access.WRITE_ONLY)
    private String errorCode;

    /*
     * Describes the scale policy of resource. This serves as the data parallel
     * dimension for 3D parallelism (viz., data, pipeline and model
     * parallelism).There are two modes of scaling:1. Discrete: Resource can be
     * only be scaled to a specific instance count(s) specified by the
     * "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be
     * scaled to any instance count specified by the range ("min", "max").
     */
    @JsonProperty(value = "scalePolicy")
    private ScalePolicyV2 scalePolicy;

    /*
     * Endpoints of the model in this location.
     */
    @JsonProperty(value = "endpoints", access = JsonProperty.Access.WRITE_ONLY)
    private List<Endpoint> endpoints;

    /*
     * Current instance count of the model in this location
     */
    @JsonProperty(value = "currentInstanceCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer currentInstanceCount;

    /**
     * Get the location property: Name of the geographic location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Name of the geographic location.
     *
     * @param location the location value to set.
     * @return the ModelLocation object itself.
     */
    public ModelLocation withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    public ModelStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     *
     * @param status the status value to set.
     * @return the ModelLocation object itself.
     */
    public ModelLocation withStatus(ModelStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the model in this
     * location.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the errorCode property: Error code of the model in this location.
     *
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Get the scalePolicy property: Describes the scale policy of resource. This serves as the data parallel dimension
     * for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete:
     * Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8,
     * 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max").
     *
     * @return the scalePolicy value.
     */
    public ScalePolicyV2 scalePolicy() {
        return this.scalePolicy;
    }

    /**
     * Set the scalePolicy property: Describes the scale policy of resource. This serves as the data parallel dimension
     * for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete:
     * Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8,
     * 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max").
     *
     * @param scalePolicy the scalePolicy value to set.
     * @return the ModelLocation object itself.
     */
    public ModelLocation withScalePolicy(ScalePolicyV2 scalePolicy) {
        this.scalePolicy = scalePolicy;
        return this;
    }

    /**
     * Get the endpoints property: Endpoints of the model in this location.
     *
     * @return the endpoints value.
     */
    public List<Endpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Get the currentInstanceCount property: Current instance count of the model in this location.
     *
     * @return the currentInstanceCount value.
     */
    public Integer currentInstanceCount() {
        return this.currentInstanceCount;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property location in model ModelLocation"));
        }
        if (scalePolicy() != null) {
            scalePolicy().validate();
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelLocation.class);
}
