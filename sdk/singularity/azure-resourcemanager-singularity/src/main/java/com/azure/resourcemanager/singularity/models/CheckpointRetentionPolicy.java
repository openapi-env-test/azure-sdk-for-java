// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;

/** Describes the checkpointing retention policy for job. */
@Fluent
public final class CheckpointRetentionPolicy {
    /*
     * The mode property.
     */
    @JsonProperty(value = "mode", required = true)
    private CheckpointRetentionMode mode;

    /*
     * Minimum elapsed duration before deleting checkpoint. The value should be
     * in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
     */
    @JsonProperty(value = "ttl")
    private Duration ttl;

    /*
     * Maximum storage size for checkpoint files to retain. Checkpoint files
     * will be purged in FIFO manner.
     */
    @JsonProperty(value = "maxStorage")
    private Integer maxStorage;

    /**
     * Get the mode property: The mode property.
     *
     * @return the mode value.
     */
    public CheckpointRetentionMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The mode property.
     *
     * @param mode the mode value to set.
     * @return the CheckpointRetentionPolicy object itself.
     */
    public CheckpointRetentionPolicy withMode(CheckpointRetentionMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the ttl property: Minimum elapsed duration before deleting checkpoint. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).
     *
     * @return the ttl value.
     */
    public Duration ttl() {
        return this.ttl;
    }

    /**
     * Set the ttl property: Minimum elapsed duration before deleting checkpoint. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).
     *
     * @param ttl the ttl value to set.
     * @return the CheckpointRetentionPolicy object itself.
     */
    public CheckpointRetentionPolicy withTtl(Duration ttl) {
        this.ttl = ttl;
        return this;
    }

    /**
     * Get the maxStorage property: Maximum storage size for checkpoint files to retain. Checkpoint files will be purged
     * in FIFO manner.
     *
     * @return the maxStorage value.
     */
    public Integer maxStorage() {
        return this.maxStorage;
    }

    /**
     * Set the maxStorage property: Maximum storage size for checkpoint files to retain. Checkpoint files will be purged
     * in FIFO manner.
     *
     * @param maxStorage the maxStorage value to set.
     * @return the CheckpointRetentionPolicy object itself.
     */
    public CheckpointRetentionPolicy withMaxStorage(Integer maxStorage) {
        this.maxStorage = maxStorage;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mode() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property mode in model CheckpointRetentionPolicy"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CheckpointRetentionPolicy.class);
}
