// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes all properties which can be updated for a Singularity account resource. */
@Fluent
public class AccountPatchProperties {
    /*
     * User-friendly description of an account.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Describes the properties of idle resources handling policy.
     */
    @JsonProperty(value = "idleResourcesHandlingPolicy")
    private IdleResourcesHandlingPolicy idleResourcesHandlingPolicy;

    /*
     * The collection of account locations.
     */
    @JsonProperty(value = "locations")
    private List<AccountLocation> locations;

    /*
     * Describes the network settings for the account.
     */
    @JsonProperty(value = "networkSettings")
    private NetworkSettings networkSettings;

    /**
     * Get the description property: User-friendly description of an account.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User-friendly description of an account.
     *
     * @param description the description value to set.
     * @return the AccountPatchProperties object itself.
     */
    public AccountPatchProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the idleResourcesHandlingPolicy property: Describes the properties of idle resources handling policy.
     *
     * @return the idleResourcesHandlingPolicy value.
     */
    public IdleResourcesHandlingPolicy idleResourcesHandlingPolicy() {
        return this.idleResourcesHandlingPolicy;
    }

    /**
     * Set the idleResourcesHandlingPolicy property: Describes the properties of idle resources handling policy.
     *
     * @param idleResourcesHandlingPolicy the idleResourcesHandlingPolicy value to set.
     * @return the AccountPatchProperties object itself.
     */
    public AccountPatchProperties withIdleResourcesHandlingPolicy(
        IdleResourcesHandlingPolicy idleResourcesHandlingPolicy) {
        this.idleResourcesHandlingPolicy = idleResourcesHandlingPolicy;
        return this;
    }

    /**
     * Get the locations property: The collection of account locations.
     *
     * @return the locations value.
     */
    public List<AccountLocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The collection of account locations.
     *
     * @param locations the locations value to set.
     * @return the AccountPatchProperties object itself.
     */
    public AccountPatchProperties withLocations(List<AccountLocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the networkSettings property: Describes the network settings for the account.
     *
     * @return the networkSettings value.
     */
    public NetworkSettings networkSettings() {
        return this.networkSettings;
    }

    /**
     * Set the networkSettings property: Describes the network settings for the account.
     *
     * @param networkSettings the networkSettings value to set.
     * @return the AccountPatchProperties object itself.
     */
    public AccountPatchProperties withNetworkSettings(NetworkSettings networkSettings) {
        this.networkSettings = networkSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (idleResourcesHandlingPolicy() != null) {
            idleResourcesHandlingPolicy().validate();
        }
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
        if (networkSettings() != null) {
            networkSettings().validate();
        }
    }
}
