// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.singularity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes a partition of a model. A model consists of one or more partitions (in the tensor and pipeline parallel
 * dimensions). A partition is scoped and mapped onto a device.
 */
@Fluent
public final class ModelPartition {
    /*
     * Index of pipeline partition.
     */
    @JsonProperty(value = "pipelinePartitionIndex", required = true)
    private int pipelinePartitionIndex;

    /*
     * Index of tensor partition.
     */
    @JsonProperty(value = "tensorPartitionIndex", required = true)
    private int tensorPartitionIndex;

    /*
     * Path in modelPackageLocation where package for this model partition is
     * located.
     */
    @JsonProperty(value = "packagePath")
    private String packagePath;

    /*
     * Describes placement of a model partition on a device.
     */
    @JsonProperty(value = "partitionPlacement", required = true)
    private ModelPartitionPlacement partitionPlacement;

    /**
     * Get the pipelinePartitionIndex property: Index of pipeline partition.
     *
     * @return the pipelinePartitionIndex value.
     */
    public int pipelinePartitionIndex() {
        return this.pipelinePartitionIndex;
    }

    /**
     * Set the pipelinePartitionIndex property: Index of pipeline partition.
     *
     * @param pipelinePartitionIndex the pipelinePartitionIndex value to set.
     * @return the ModelPartition object itself.
     */
    public ModelPartition withPipelinePartitionIndex(int pipelinePartitionIndex) {
        this.pipelinePartitionIndex = pipelinePartitionIndex;
        return this;
    }

    /**
     * Get the tensorPartitionIndex property: Index of tensor partition.
     *
     * @return the tensorPartitionIndex value.
     */
    public int tensorPartitionIndex() {
        return this.tensorPartitionIndex;
    }

    /**
     * Set the tensorPartitionIndex property: Index of tensor partition.
     *
     * @param tensorPartitionIndex the tensorPartitionIndex value to set.
     * @return the ModelPartition object itself.
     */
    public ModelPartition withTensorPartitionIndex(int tensorPartitionIndex) {
        this.tensorPartitionIndex = tensorPartitionIndex;
        return this;
    }

    /**
     * Get the packagePath property: Path in modelPackageLocation where package for this model partition is located.
     *
     * @return the packagePath value.
     */
    public String packagePath() {
        return this.packagePath;
    }

    /**
     * Set the packagePath property: Path in modelPackageLocation where package for this model partition is located.
     *
     * @param packagePath the packagePath value to set.
     * @return the ModelPartition object itself.
     */
    public ModelPartition withPackagePath(String packagePath) {
        this.packagePath = packagePath;
        return this;
    }

    /**
     * Get the partitionPlacement property: Describes placement of a model partition on a device.
     *
     * @return the partitionPlacement value.
     */
    public ModelPartitionPlacement partitionPlacement() {
        return this.partitionPlacement;
    }

    /**
     * Set the partitionPlacement property: Describes placement of a model partition on a device.
     *
     * @param partitionPlacement the partitionPlacement value to set.
     * @return the ModelPartition object itself.
     */
    public ModelPartition withPartitionPlacement(ModelPartitionPlacement partitionPlacement) {
        this.partitionPlacement = partitionPlacement;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partitionPlacement() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property partitionPlacement in model ModelPartition"));
        } else {
            partitionPlacement().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelPartition.class);
}
