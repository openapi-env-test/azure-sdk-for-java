// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.policyinsights.fluent.PolicyStatesClient;
import com.azure.resourcemanager.policyinsights.fluent.models.PolicyStateInner;
import com.azure.resourcemanager.policyinsights.fluent.models.SummarizeResultsInner;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesQueryResults;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesSummaryResourceType;
import java.nio.ByteBuffer;
import java.time.OffsetDateTime;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PolicyStatesClient. */
public final class PolicyStatesClientImpl implements PolicyStatesClient {
    /** The proxy service used to perform REST calls. */
    private final PolicyStatesService service;

    /** The service client containing this operation class. */
    private final PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyStatesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PolicyStatesClientImpl(PolicyInsightsClientImpl client) {
        this.service =
            RestProxy.create(PolicyStatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyInsightsClientPolicyStates to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PolicyInsightsClient")
    private interface PolicyStatesService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers"
                + "/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForManagementGroup(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("managementGroupsNamespace") String managementGroupsNamespace,
            @PathParam("managementGroupName") String managementGroupName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers"
                + "/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForManagementGroup(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("managementGroupsNamespace") String managementGroupsNamespace,
            @PathParam("managementGroupName") String managementGroupName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}"
                + "/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForSubscription(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForSubscription(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights"
                + "/policyStates/{policyStatesResource}/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights"
                + "/policyStates/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResource(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$expand") String expand,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForResource(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> triggerSubscriptionEvaluation(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights"
                + "/policyStates/latest/triggerEvaluation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> triggerResourceGroupEvaluation(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions"
                + "/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}"
                + "/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForPolicySetDefinition(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policySetDefinitionName") String policySetDefinitionName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions"
                + "/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForPolicySetDefinition(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policySetDefinitionName") String policySetDefinitionName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions"
                + "/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}"
                + "/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForPolicyDefinition(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyDefinitionName") String policyDefinitionName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions"
                + "/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForPolicyDefinition(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyDefinitionName") String policyDefinitionName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments"
                + "/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}"
                + "/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForSubscriptionLevelPolicyAssignment(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments"
                + "/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForSubscriptionLevelPolicyAssignment(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}"
                + "/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesResource}/queryResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResourceGroupLevelPolicyAssignment(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesResource") PolicyStatesResource policyStatesResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$orderby") String orderBy,
            @QueryParam("$select") String select,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @QueryParam("$apply") String apply,
            @QueryParam("$skiptoken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}"
                + "/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates"
                + "/{policyStatesSummaryResource}/summarize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SummarizeResultsInner>> summarizeForResourceGroupLevelPolicyAssignment(
            @HostParam("$host") String endpoint,
            @PathParam("policyStatesSummaryResource") PolicyStatesSummaryResourceType policyStatesSummaryResource,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("authorizationNamespace") String authorizationNamespace,
            @PathParam("policyAssignmentName") String policyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$from") OffsetDateTime from,
            @QueryParam("$to") OffsetDateTime to,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForManagementGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForSubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForPolicySetDefinitionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForPolicyDefinitionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForSubscriptionLevelPolicyAssignmentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PolicyStatesQueryResults>> listQueryResultsForResourceGroupLevelPolicyAssignmentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForManagementGroupSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String managementGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForManagementGroup(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            managementGroupsNamespace,
                            managementGroupName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForManagementGroupSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String managementGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForManagementGroup(
                this.client.getEndpoint(),
                policyStatesResource,
                managementGroupsNamespace,
                managementGroupName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForManagementGroupAsync(
        PolicyStatesResource policyStatesResource,
        String managementGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForManagementGroupSinglePageAsync(
                    policyStatesResource,
                    managementGroupName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForManagementGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForManagementGroupAsync(
        PolicyStatesResource policyStatesResource, String managementGroupName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForManagementGroupSinglePageAsync(
                    policyStatesResource,
                    managementGroupName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForManagementGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForManagementGroupAsync(
        PolicyStatesResource policyStatesResource,
        String managementGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForManagementGroupSinglePageAsync(
                    policyStatesResource,
                    managementGroupName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForManagementGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForManagementGroup(
        PolicyStatesResource policyStatesResource, String managementGroupName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForManagementGroupAsync(
                policyStatesResource, managementGroupName, top, orderBy, select, from, to, filter, apply, skipToken));
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForManagementGroup(
        PolicyStatesResource policyStatesResource,
        String managementGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForManagementGroupAsync(
                policyStatesResource,
                managementGroupName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForManagementGroupWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String managementGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForManagementGroup(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            managementGroupsNamespace,
                            managementGroupName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForManagementGroupWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String managementGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForManagementGroup(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                managementGroupsNamespace,
                managementGroupName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForManagementGroupAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String managementGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForManagementGroupWithResponseAsync(
                policyStatesSummaryResource, managementGroupName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForManagementGroupAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String managementGroupName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForManagementGroupWithResponseAsync(
                policyStatesSummaryResource, managementGroupName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForManagementGroup(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String managementGroupName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForManagementGroupAsync(policyStatesSummaryResource, managementGroupName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param managementGroupName Management group name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForManagementGroupWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String managementGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForManagementGroupWithResponseAsync(
                policyStatesSummaryResource, managementGroupName, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForSubscription(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForSubscription(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionAsync(
        PolicyStatesResource policyStatesResource,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionSinglePageAsync(
                    policyStatesResource, top, orderBy, select, from, to, filter, apply, skipToken),
            nextLink -> listQueryResultsForSubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionAsync(
        PolicyStatesResource policyStatesResource) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionSinglePageAsync(
                    policyStatesResource, top, orderBy, select, from, to, filter, apply, skipToken),
            nextLink -> listQueryResultsForSubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionAsync(
        PolicyStatesResource policyStatesResource,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionSinglePageAsync(
                    policyStatesResource, top, orderBy, select, from, to, filter, apply, skipToken, context),
            nextLink -> listQueryResultsForSubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForSubscription(PolicyStatesResource policyStatesResource) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForSubscriptionAsync(
                policyStatesResource, top, orderBy, select, from, to, filter, apply, skipToken));
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForSubscription(
        PolicyStatesResource policyStatesResource,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForSubscriptionAsync(
                policyStatesResource, top, orderBy, select, from, to, filter, apply, skipToken, context));
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForSubscriptionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForSubscription(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForSubscriptionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForSubscription(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForSubscriptionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForSubscriptionWithResponseAsync(policyStatesSummaryResource, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForSubscriptionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForSubscriptionWithResponseAsync(policyStatesSummaryResource, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForSubscription(PolicyStatesSummaryResourceType policyStatesSummaryResource) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForSubscriptionAsync(policyStatesSummaryResource, top, from, to, filter).block();
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForSubscriptionWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForSubscriptionWithResponseAsync(policyStatesSummaryResource, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForResourceGroup(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResourceGroup(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                resourceGroupName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupSinglePageAsync(
                    policyStatesResource, resourceGroupName, top, orderBy, select, from, to, filter, apply, skipToken),
            nextLink -> listQueryResultsForResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupAsync(
        PolicyStatesResource policyStatesResource, String resourceGroupName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupSinglePageAsync(
                    policyStatesResource, resourceGroupName, top, orderBy, select, from, to, filter, apply, skipToken),
            nextLink -> listQueryResultsForResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupSinglePageAsync(
                    policyStatesResource,
                    resourceGroupName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResourceGroup(
        PolicyStatesResource policyStatesResource, String resourceGroupName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForResourceGroupAsync(
                policyStatesResource, resourceGroupName, top, orderBy, select, from, to, filter, apply, skipToken));
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResourceGroup(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForResourceGroupAsync(
                policyStatesResource,
                resourceGroupName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceGroupWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForResourceGroup(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceGroupWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForResourceGroup(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                resourceGroupName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceGroupAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForResourceGroupWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceGroupAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String resourceGroupName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceGroupWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForResourceGroup(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String resourceGroupName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceGroupAsync(policyStatesSummaryResource, resourceGroupName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForResourceGroupWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForResourceGroupWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param expand The $expand query parameter. For example, to expand components use $expand=components.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceId,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String expand,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForResource(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            resourceId,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            expand,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param expand The $expand query parameter. For example, to expand components use $expand=components.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceId,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String expand,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResource(
                this.client.getEndpoint(),
                policyStatesResource,
                resourceId,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                expand,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param expand The $expand query parameter. For example, to expand components use $expand=components.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceAsync(
        PolicyStatesResource policyStatesResource,
        String resourceId,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String expand,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceSinglePageAsync(
                    policyStatesResource, resourceId, top, orderBy, select, from, to, filter, apply, expand, skipToken),
            nextLink -> listQueryResultsForResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceAsync(
        PolicyStatesResource policyStatesResource, String resourceId) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String expand = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceSinglePageAsync(
                    policyStatesResource, resourceId, top, orderBy, select, from, to, filter, apply, expand, skipToken),
            nextLink -> listQueryResultsForResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param expand The $expand query parameter. For example, to expand components use $expand=components.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceAsync(
        PolicyStatesResource policyStatesResource,
        String resourceId,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String expand,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceSinglePageAsync(
                    policyStatesResource,
                    resourceId,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    expand,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResource(
        PolicyStatesResource policyStatesResource, String resourceId) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String expand = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForResourceAsync(
                policyStatesResource, resourceId, top, orderBy, select, from, to, filter, apply, expand, skipToken));
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param expand The $expand query parameter. For example, to expand components use $expand=components.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResource(
        PolicyStatesResource policyStatesResource,
        String resourceId,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String expand,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForResourceAsync(
                policyStatesResource,
                resourceId,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                expand,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceId,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForResource(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            resourceId,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceId,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForResource(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                resourceId,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceId,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForResourceWithResponseAsync(policyStatesSummaryResource, resourceId, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String resourceId) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceWithResponseAsync(policyStatesSummaryResource, resourceId, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForResource(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String resourceId) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceAsync(policyStatesSummaryResource, resourceId, top, from, to, filter).block();
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForResourceWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceId,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForResourceWithResponseAsync(
                policyStatesSummaryResource, resourceId, top, from, to, filter, context)
            .block();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerSubscriptionEvaluationWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .triggerSubscriptionEvaluation(
                            this.client.getEndpoint(), this.client.getSubscriptionId(), apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerSubscriptionEvaluationWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .triggerSubscriptionEvaluation(
                this.client.getEndpoint(), this.client.getSubscriptionId(), apiVersion, accept, context);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginTriggerSubscriptionEvaluationAsync() {
        Mono<Response<Flux<ByteBuffer>>> mono = triggerSubscriptionEvaluationWithResponseAsync();
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginTriggerSubscriptionEvaluationAsync(Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = triggerSubscriptionEvaluationWithResponseAsync(context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginTriggerSubscriptionEvaluation() {
        return beginTriggerSubscriptionEvaluationAsync().getSyncPoller();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginTriggerSubscriptionEvaluation(Context context) {
        return beginTriggerSubscriptionEvaluationAsync(context).getSyncPoller();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerSubscriptionEvaluationAsync() {
        return beginTriggerSubscriptionEvaluationAsync().last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerSubscriptionEvaluationAsync(Context context) {
        return beginTriggerSubscriptionEvaluationAsync(context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerSubscriptionEvaluation() {
        triggerSubscriptionEvaluationAsync().block();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerSubscriptionEvaluation(Context context) {
        triggerSubscriptionEvaluationAsync(context).block();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerResourceGroupEvaluationWithResponseAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .triggerResourceGroupEvaluation(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerResourceGroupEvaluationWithResponseAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .triggerResourceGroupEvaluation(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginTriggerResourceGroupEvaluationAsync(String resourceGroupName) {
        Mono<Response<Flux<ByteBuffer>>> mono = triggerResourceGroupEvaluationWithResponseAsync(resourceGroupName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginTriggerResourceGroupEvaluationAsync(
        String resourceGroupName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            triggerResourceGroupEvaluationWithResponseAsync(resourceGroupName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginTriggerResourceGroupEvaluation(String resourceGroupName) {
        return beginTriggerResourceGroupEvaluationAsync(resourceGroupName).getSyncPoller();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginTriggerResourceGroupEvaluation(
        String resourceGroupName, Context context) {
        return beginTriggerResourceGroupEvaluationAsync(resourceGroupName, context).getSyncPoller();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerResourceGroupEvaluationAsync(String resourceGroupName) {
        return beginTriggerResourceGroupEvaluationAsync(resourceGroupName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerResourceGroupEvaluationAsync(String resourceGroupName, Context context) {
        return beginTriggerResourceGroupEvaluationAsync(resourceGroupName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerResourceGroupEvaluation(String resourceGroupName) {
        triggerResourceGroupEvaluationAsync(resourceGroupName).block();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerResourceGroupEvaluation(String resourceGroupName, Context context) {
        triggerResourceGroupEvaluationAsync(resourceGroupName, context).block();
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicySetDefinitionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policySetDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policySetDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForPolicySetDefinition(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policySetDefinitionName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicySetDefinitionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policySetDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policySetDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForPolicySetDefinition(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policySetDefinitionName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicySetDefinitionAsync(
        PolicyStatesResource policyStatesResource,
        String policySetDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicySetDefinitionSinglePageAsync(
                    policyStatesResource,
                    policySetDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicySetDefinitionAsync(
        PolicyStatesResource policyStatesResource, String policySetDefinitionName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicySetDefinitionSinglePageAsync(
                    policyStatesResource,
                    policySetDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicySetDefinitionAsync(
        PolicyStatesResource policyStatesResource,
        String policySetDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicySetDefinitionSinglePageAsync(
                    policyStatesResource,
                    policySetDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForPolicySetDefinition(
        PolicyStatesResource policyStatesResource, String policySetDefinitionName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForPolicySetDefinitionAsync(
                policyStatesResource,
                policySetDefinitionName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken));
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForPolicySetDefinition(
        PolicyStatesResource policyStatesResource,
        String policySetDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForPolicySetDefinitionAsync(
                policyStatesResource,
                policySetDefinitionName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForPolicySetDefinitionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policySetDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policySetDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForPolicySetDefinition(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policySetDefinitionName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForPolicySetDefinitionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policySetDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policySetDefinitionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForPolicySetDefinition(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policySetDefinitionName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policySetDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForPolicySetDefinitionWithResponseAsync(
                policyStatesSummaryResource, policySetDefinitionName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policySetDefinitionName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForPolicySetDefinitionWithResponseAsync(
                policyStatesSummaryResource, policySetDefinitionName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForPolicySetDefinition(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policySetDefinitionName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForPolicySetDefinitionAsync(
                policyStatesSummaryResource, policySetDefinitionName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policySetDefinitionName Policy set definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForPolicySetDefinitionWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policySetDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForPolicySetDefinitionWithResponseAsync(
                policyStatesSummaryResource, policySetDefinitionName, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicyDefinitionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policyDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForPolicyDefinition(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policyDefinitionName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicyDefinitionSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policyDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForPolicyDefinition(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policyDefinitionName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicyDefinitionAsync(
        PolicyStatesResource policyStatesResource,
        String policyDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicyDefinitionSinglePageAsync(
                    policyStatesResource,
                    policyDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicyDefinitionAsync(
        PolicyStatesResource policyStatesResource, String policyDefinitionName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicyDefinitionSinglePageAsync(
                    policyStatesResource,
                    policyDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForPolicyDefinitionAsync(
        PolicyStatesResource policyStatesResource,
        String policyDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForPolicyDefinitionSinglePageAsync(
                    policyStatesResource,
                    policyDefinitionName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForPolicyDefinition(
        PolicyStatesResource policyStatesResource, String policyDefinitionName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForPolicyDefinitionAsync(
                policyStatesResource, policyDefinitionName, top, orderBy, select, from, to, filter, apply, skipToken));
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForPolicyDefinition(
        PolicyStatesResource policyStatesResource,
        String policyDefinitionName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForPolicyDefinitionAsync(
                policyStatesResource,
                policyDefinitionName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForPolicyDefinitionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForPolicyDefinition(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policyDefinitionName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForPolicyDefinitionWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForPolicyDefinition(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policyDefinitionName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForPolicyDefinitionWithResponseAsync(
                policyStatesSummaryResource, policyDefinitionName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policyDefinitionName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForPolicyDefinitionWithResponseAsync(
                policyStatesSummaryResource, policyDefinitionName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForPolicyDefinition(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policyDefinitionName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForPolicyDefinitionAsync(
                policyStatesSummaryResource, policyDefinitionName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyDefinitionName Policy definition name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForPolicyDefinitionWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyDefinitionName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForPolicyDefinitionWithResponseAsync(
                policyStatesSummaryResource, policyDefinitionName, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForSubscriptionLevelPolicyAssignment(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policyAssignmentName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForSubscriptionLevelPolicyAssignment(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policyAssignmentName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource, String policyAssignmentName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignment(
        PolicyStatesResource policyStatesResource, String policyAssignmentName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(
                policyStatesResource, policyAssignmentName, top, orderBy, select, from, to, filter, apply, skipToken));
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignment(
        PolicyStatesResource policyStatesResource,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(
                policyStatesResource,
                policyAssignmentName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForSubscriptionLevelPolicyAssignmentWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForSubscriptionLevelPolicyAssignment(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            authorizationNamespace,
                            policyAssignmentName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForSubscriptionLevelPolicyAssignmentWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForSubscriptionLevelPolicyAssignment(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                authorizationNamespace,
                policyAssignmentName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, policyAssignmentName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policyAssignmentName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForSubscriptionLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, policyAssignmentName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForSubscriptionLevelPolicyAssignment(
        PolicyStatesSummaryResourceType policyStatesSummaryResource, String policyAssignmentName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForSubscriptionLevelPolicyAssignmentAsync(
                policyStatesSummaryResource, policyAssignmentName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, policyAssignmentName, top, from, to, filter, context)
            .block();
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForResourceGroupLevelPolicyAssignment(
                            this.client.getEndpoint(),
                            policyStatesResource,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            authorizationNamespace,
                            policyAssignmentName,
                            apiVersion,
                            top,
                            orderBy,
                            select,
                            from,
                            to,
                            filter,
                            apply,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResourceGroupLevelPolicyAssignment(
                this.client.getEndpoint(),
                policyStatesResource,
                this.client.getSubscriptionId(),
                resourceGroupName,
                authorizationNamespace,
                policyAssignmentName,
                apiVersion,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    resourceGroupName,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource, String resourceGroupName, String policyAssignmentName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    resourceGroupName,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken),
            nextLink -> listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextLink));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(
                    policyStatesResource,
                    resourceGroupName,
                    policyAssignmentName,
                    top,
                    orderBy,
                    select,
                    from,
                    to,
                    filter,
                    apply,
                    skipToken,
                    context),
            nextLink -> listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextLink, context));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignment(
        PolicyStatesResource policyStatesResource, String resourceGroupName, String policyAssignmentName) {
        final Integer top = null;
        final String orderBy = null;
        final String select = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        final String apply = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(
                policyStatesResource,
                resourceGroupName,
                policyAssignmentName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken));
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range,
     *     'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param orderBy Ordering expression using OData notation. One or more comma-separated column names with an
     *     optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
     * @param select Select expression using OData notation. Limits the columns on each record to just those requested,
     *     e.g. "$select=PolicyAssignmentId, ResourceId".
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param apply OData apply expression for aggregations.
     * @param skipToken Skiptoken is only provided if a previous response returned a partial result as a part of
     *     nextLink element.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignment(
        PolicyStatesResource policyStatesResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        String orderBy,
        String select,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        String apply,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(
                policyStatesResource,
                resourceGroupName,
                policyAssignmentName,
                top,
                orderBy,
                select,
                from,
                to,
                filter,
                apply,
                skipToken,
                context));
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceGroupLevelPolicyAssignmentWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .summarizeForResourceGroupLevelPolicyAssignment(
                            this.client.getEndpoint(),
                            policyStatesSummaryResource,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            authorizationNamespace,
                            policyAssignmentName,
                            apiVersion,
                            top,
                            from,
                            to,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SummarizeResultsInner>> summarizeForResourceGroupLevelPolicyAssignmentWithResponseAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (policyStatesSummaryResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter policyStatesSummaryResource is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (policyAssignmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null."));
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .summarizeForResourceGroupLevelPolicyAssignment(
                this.client.getEndpoint(),
                policyStatesSummaryResource,
                this.client.getSubscriptionId(),
                resourceGroupName,
                authorizationNamespace,
                policyAssignmentName,
                apiVersion,
                top,
                from,
                to,
                filter,
                accept,
                context);
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, policyAssignmentName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceGroupLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, policyAssignmentName, top, from, to, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SummarizeResultsInner summarizeForResourceGroupLevelPolicyAssignment(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName) {
        final Integer top = null;
        final OffsetDateTime from = null;
        final OffsetDateTime to = null;
        final String filter = null;
        return summarizeForResourceGroupLevelPolicyAssignmentAsync(
                policyStatesSummaryResource, resourceGroupName, policyAssignmentName, top, from, to, filter)
            .block();
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In
     *     a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param policyAssignmentName Policy assignment name.
     * @param top Maximum number of records to return.
     * @param from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified,
     *     the service uses ($to - 1-day).
     * @param to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the
     *     service uses request time.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summarize action results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentWithResponse(
        PolicyStatesSummaryResourceType policyStatesSummaryResource,
        String resourceGroupName,
        String policyAssignmentName,
        Integer top,
        OffsetDateTime from,
        OffsetDateTime to,
        String filter,
        Context context) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithResponseAsync(
                policyStatesSummaryResource, resourceGroupName, policyAssignmentName, top, from, to, filter, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForManagementGroupNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForManagementGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForManagementGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForManagementGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listQueryResultsForSubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForSubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForSubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listQueryResultsForResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listQueryResultsForResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForResourceNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForPolicySetDefinitionNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForPolicySetDefinitionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicyDefinitionNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForPolicyDefinitionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>> listQueryResultsForPolicyDefinitionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForPolicyDefinitionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>>
        listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForSubscriptionLevelPolicyAssignmentNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>>
        listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForSubscriptionLevelPolicyAssignmentNext(
                nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>>
        listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listQueryResultsForResourceGroupLevelPolicyAssignmentNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PolicyStateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query results along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PolicyStateInner>>
        listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listQueryResultsForResourceGroupLevelPolicyAssignmentNext(
                nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }
}
