// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Cross-Origin-Resource-Sharing policy. */
@Fluent
public final class CorsPolicy {
    /*
     * allowed origins
     */
    @JsonProperty(value = "allowedOrigins", required = true)
    private List<String> allowedOrigins;

    /*
     * allowed HTTP methods
     */
    @JsonProperty(value = "allowedMethods")
    private List<String> allowedMethods;

    /*
     * allowed HTTP headers
     */
    @JsonProperty(value = "allowedHeaders")
    private List<String> allowedHeaders;

    /*
     * expose HTTP headers
     */
    @JsonProperty(value = "exposeHeaders")
    private List<String> exposeHeaders;

    /*
     * max time client can cache the result
     */
    @JsonProperty(value = "maxAge")
    private Integer maxAge;

    /*
     * allow credential or not
     */
    @JsonProperty(value = "allowCredentials")
    private Boolean allowCredentials;

    /** Creates an instance of CorsPolicy class. */
    public CorsPolicy() {
    }

    /**
     * Get the allowedOrigins property: allowed origins.
     *
     * @return the allowedOrigins value.
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Set the allowedOrigins property: allowed origins.
     *
     * @param allowedOrigins the allowedOrigins value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withAllowedOrigins(List<String> allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
        return this;
    }

    /**
     * Get the allowedMethods property: allowed HTTP methods.
     *
     * @return the allowedMethods value.
     */
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Set the allowedMethods property: allowed HTTP methods.
     *
     * @param allowedMethods the allowedMethods value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withAllowedMethods(List<String> allowedMethods) {
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * Get the allowedHeaders property: allowed HTTP headers.
     *
     * @return the allowedHeaders value.
     */
    public List<String> allowedHeaders() {
        return this.allowedHeaders;
    }

    /**
     * Set the allowedHeaders property: allowed HTTP headers.
     *
     * @param allowedHeaders the allowedHeaders value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withAllowedHeaders(List<String> allowedHeaders) {
        this.allowedHeaders = allowedHeaders;
        return this;
    }

    /**
     * Get the exposeHeaders property: expose HTTP headers.
     *
     * @return the exposeHeaders value.
     */
    public List<String> exposeHeaders() {
        return this.exposeHeaders;
    }

    /**
     * Set the exposeHeaders property: expose HTTP headers.
     *
     * @param exposeHeaders the exposeHeaders value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withExposeHeaders(List<String> exposeHeaders) {
        this.exposeHeaders = exposeHeaders;
        return this;
    }

    /**
     * Get the maxAge property: max time client can cache the result.
     *
     * @return the maxAge value.
     */
    public Integer maxAge() {
        return this.maxAge;
    }

    /**
     * Set the maxAge property: max time client can cache the result.
     *
     * @param maxAge the maxAge value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withMaxAge(Integer maxAge) {
        this.maxAge = maxAge;
        return this;
    }

    /**
     * Get the allowCredentials property: allow credential or not.
     *
     * @return the allowCredentials value.
     */
    public Boolean allowCredentials() {
        return this.allowCredentials;
    }

    /**
     * Set the allowCredentials property: allow credential or not.
     *
     * @param allowCredentials the allowCredentials value to set.
     * @return the CorsPolicy object itself.
     */
    public CorsPolicy withAllowCredentials(Boolean allowCredentials) {
        this.allowCredentials = allowCredentials;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (allowedOrigins() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property allowedOrigins in model CorsPolicy"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CorsPolicy.class);
}
