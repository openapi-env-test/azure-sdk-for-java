/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2019_08_09_preview.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.management.avs.v20190809preview.VMWareDatastoreBackings;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.avs.v20190809preview.models.ApiErrorException;
import com.microsoft.azure.management.avs.v20190809preview.models.VMWareDatastoreBacking;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in VMWareDatastoreBackings.
 */
public class VMWareDatastoreBackingsImpl implements VMWareDatastoreBackings {
    /** The Retrofit service to perform REST calls. */
    private VMWareDatastoreBackingsService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of VMWareDatastoreBackingsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VMWareDatastoreBackingsImpl(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(VMWareDatastoreBackingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for VMWareDatastoreBackings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VMWareDatastoreBackingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20190809preview.VMWareDatastoreBackings create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/vmwareDatastoreBackings/{vmwareDatastoreBackingName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("clusterName") String clusterName, @Path("vmwareDatastoreBackingName") String vmwareDatastoreBackingName, @Header("backingType") String backingType, @Header("readBlockSize") long readBlockSize, @Header("writeBlockSize") long writeBlockSize, @Header("storageIP") String storageIP, @Header("storageFilePath") String storageFilePath, @Header("storageVolumeName") String storageVolumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20190809preview.VMWareDatastoreBackings beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/vmwareDatastoreBackings/{vmwareDatastoreBackingName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("clusterName") String clusterName, @Path("vmwareDatastoreBackingName") String vmwareDatastoreBackingName, @Header("backingType") String backingType, @Header("readBlockSize") long readBlockSize, @Header("writeBlockSize") long writeBlockSize, @Header("storageIP") String storageIP, @Header("storageFilePath") String storageFilePath, @Header("storageVolumeName") String storageVolumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VMWareDatastoreBacking object if successful.
     */
    public VMWareDatastoreBacking create(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        return createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName).toBlocking().last().body();
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VMWareDatastoreBacking> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName, final ServiceCallback<VMWareDatastoreBacking> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName), serviceCallback);
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VMWareDatastoreBacking> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        return createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName).map(new Func1<ServiceResponse<VMWareDatastoreBacking>, VMWareDatastoreBacking>() {
            @Override
            public VMWareDatastoreBacking call(ServiceResponse<VMWareDatastoreBacking> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VMWareDatastoreBacking>> createWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (vmwareDatastoreBackingName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreBackingName is required and cannot be null.");
        }
        if (backingType == null) {
            throw new IllegalArgumentException("Parameter backingType is required and cannot be null.");
        }
        if (storageIP == null) {
            throw new IllegalArgumentException("Parameter storageIP is required and cannot be null.");
        }
        if (storageFilePath == null) {
            throw new IllegalArgumentException("Parameter storageFilePath is required and cannot be null.");
        }
        if (storageVolumeName == null) {
            throw new IllegalArgumentException("Parameter storageVolumeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VMWareDatastoreBacking>() { }.getType());
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VMWareDatastoreBacking object if successful.
     */
    public VMWareDatastoreBacking beginCreate(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName).toBlocking().single().body();
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VMWareDatastoreBacking> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName, final ServiceCallback<VMWareDatastoreBacking> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName), serviceCallback);
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VMWareDatastoreBacking object
     */
    public Observable<VMWareDatastoreBacking> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName).map(new Func1<ServiceResponse<VMWareDatastoreBacking>, VMWareDatastoreBacking>() {
            @Override
            public VMWareDatastoreBacking call(ServiceResponse<VMWareDatastoreBacking> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a datastore backing for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param backingType The type or protocol of the datastore backing, like NFSv3 or iSCSI
     * @param readBlockSize Block size for data read
     * @param writeBlockSize Block size for data write
     * @param storageIP IP address of device hosting storage
     * @param storageFilePath A unique file path for the volume. Used when creating mount targets
     * @param storageVolumeName Volume name of remote storage
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VMWareDatastoreBacking object
     */
    public Observable<ServiceResponse<VMWareDatastoreBacking>> beginCreateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String backingType, long readBlockSize, long writeBlockSize, String storageIP, String storageFilePath, String storageVolumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (vmwareDatastoreBackingName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreBackingName is required and cannot be null.");
        }
        if (backingType == null) {
            throw new IllegalArgumentException("Parameter backingType is required and cannot be null.");
        }
        if (storageIP == null) {
            throw new IllegalArgumentException("Parameter storageIP is required and cannot be null.");
        }
        if (storageFilePath == null) {
            throw new IllegalArgumentException("Parameter storageFilePath is required and cannot be null.");
        }
        if (storageVolumeName == null) {
            throw new IllegalArgumentException("Parameter storageVolumeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, backingType, readBlockSize, writeBlockSize, storageIP, storageFilePath, storageVolumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VMWareDatastoreBacking>>>() {
                @Override
                public Observable<ServiceResponse<VMWareDatastoreBacking>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VMWareDatastoreBacking> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VMWareDatastoreBacking> beginCreateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VMWareDatastoreBacking, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VMWareDatastoreBacking>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
