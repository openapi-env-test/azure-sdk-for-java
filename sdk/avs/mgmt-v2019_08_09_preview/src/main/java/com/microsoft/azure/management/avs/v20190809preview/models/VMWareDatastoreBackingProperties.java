/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2019_08_09_preview.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of a datastore backing.
 */
public class VMWareDatastoreBackingProperties {
    /**
     * The type or protocol of the datastore backing. Possible values include:
     * 'NFSv3', 'iSCSI'.
     */
    @JsonProperty(value = "backingType", access = JsonProperty.Access.WRITE_ONLY)
    private DatastoreBackingType backingType;

    /**
     * Block size for data read.
     */
    @JsonProperty(value = "readBlockSize", access = JsonProperty.Access.WRITE_ONLY)
    private Long readBlockSize;

    /**
     * Block size for data write.
     */
    @JsonProperty(value = "writeBlockSize", access = JsonProperty.Access.WRITE_ONLY)
    private Long writeBlockSize;

    /**
     * IP address of device hosting storage.
     */
    @JsonProperty(value = "storageIP", access = JsonProperty.Access.WRITE_ONLY)
    private String storageIP;

    /**
     * A unique file path for the volume. Used when creating mount targets.
     */
    @JsonProperty(value = "storageFilePath", access = JsonProperty.Access.WRITE_ONLY)
    private String storageFilePath;

    /**
     * Volume name of remote storage.
     */
    @JsonProperty(value = "storageVolumeName", access = JsonProperty.Access.WRITE_ONLY)
    private String storageVolumeName;

    /**
     * The state of the datastore backing provisioning. Possible values
     * include: 'Succeeded', 'Failed'.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DatastoreBackingProvisioningState provisioningState;

    /**
     * Get the type or protocol of the datastore backing. Possible values include: 'NFSv3', 'iSCSI'.
     *
     * @return the backingType value
     */
    public DatastoreBackingType backingType() {
        return this.backingType;
    }

    /**
     * Get block size for data read.
     *
     * @return the readBlockSize value
     */
    public Long readBlockSize() {
        return this.readBlockSize;
    }

    /**
     * Get block size for data write.
     *
     * @return the writeBlockSize value
     */
    public Long writeBlockSize() {
        return this.writeBlockSize;
    }

    /**
     * Get iP address of device hosting storage.
     *
     * @return the storageIP value
     */
    public String storageIP() {
        return this.storageIP;
    }

    /**
     * Get a unique file path for the volume. Used when creating mount targets.
     *
     * @return the storageFilePath value
     */
    public String storageFilePath() {
        return this.storageFilePath;
    }

    /**
     * Get volume name of remote storage.
     *
     * @return the storageVolumeName value
     */
    public String storageVolumeName() {
        return this.storageVolumeName;
    }

    /**
     * Get the state of the datastore backing provisioning. Possible values include: 'Succeeded', 'Failed'.
     *
     * @return the provisioningState value
     */
    public DatastoreBackingProvisioningState provisioningState() {
        return this.provisioningState;
    }

}
