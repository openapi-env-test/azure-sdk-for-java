/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2019_08_09_preview.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.management.avs.v20190809preview.VMWareDatastores;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.avs.v20190809preview.models.ApiErrorException;
import com.microsoft.azure.management.avs.v20190809preview.models.VMWareDatastore;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in VMWareDatastores.
 */
public class VMWareDatastoresImpl implements VMWareDatastores {
    /** The Retrofit service to perform REST calls. */
    private VMWareDatastoresService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of VMWareDatastoresImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VMWareDatastoresImpl(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(VMWareDatastoresService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for VMWareDatastores to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VMWareDatastoresService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20190809preview.VMWareDatastores create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/vmwareDatastoreBackings/{vmwareDatastoreBackingName}/vmwareDatastores/{vmwareDatastoreName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("clusterName") String clusterName, @Path("vmwareDatastoreBackingName") String vmwareDatastoreBackingName, @Path("vmwareDatastoreName") String vmwareDatastoreName, @Header("dataStoreSize") double dataStoreSize, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20190809preview.VMWareDatastores beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/vmwareDatastoreBackings/{vmwareDatastoreBackingName}/vmwareDatastores/{vmwareDatastoreName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("clusterName") String clusterName, @Path("vmwareDatastoreBackingName") String vmwareDatastoreBackingName, @Path("vmwareDatastoreName") String vmwareDatastoreName, @Header("dataStoreSize") double dataStoreSize, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VMWareDatastore object if successful.
     */
    public VMWareDatastore create(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        return createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize).toBlocking().last().body();
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VMWareDatastore> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize, final ServiceCallback<VMWareDatastore> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize), serviceCallback);
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VMWareDatastore> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        return createWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize).map(new Func1<ServiceResponse<VMWareDatastore>, VMWareDatastore>() {
            @Override
            public VMWareDatastore call(ServiceResponse<VMWareDatastore> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VMWareDatastore>> createWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (vmwareDatastoreBackingName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreBackingName is required and cannot be null.");
        }
        if (vmwareDatastoreName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VMWareDatastore>() { }.getType());
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VMWareDatastore object if successful.
     */
    public VMWareDatastore beginCreate(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize).toBlocking().single().body();
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VMWareDatastore> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize, final ServiceCallback<VMWareDatastore> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize), serviceCallback);
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VMWareDatastore object
     */
    public Observable<VMWareDatastore> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize).map(new Func1<ServiceResponse<VMWareDatastore>, VMWareDatastore>() {
            @Override
            public VMWareDatastore call(ServiceResponse<VMWareDatastore> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param dataStoreSize Size of the data store (in GB).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VMWareDatastore object
     */
    public Observable<ServiceResponse<VMWareDatastore>> beginCreateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, double dataStoreSize) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (vmwareDatastoreBackingName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreBackingName is required and cannot be null.");
        }
        if (vmwareDatastoreName == null) {
            throw new IllegalArgumentException("Parameter vmwareDatastoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName, dataStoreSize, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VMWareDatastore>>>() {
                @Override
                public Observable<ServiceResponse<VMWareDatastore>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VMWareDatastore> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VMWareDatastore> beginCreateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VMWareDatastore, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VMWareDatastore>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
