// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.msi.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.msi.generated.fluent.models.FederatedIdentityCredentialInner;
import java.net.URL;
import java.util.List;

/** An immutable client-side representation of FederatedIdentityCredential. */
public interface FederatedIdentityCredential {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the issuer property: The URL of the issuer to be trusted.
     *
     * @return the issuer value.
     */
    URL issuer();

    /**
     * Gets the subject property: The identifier of the external identity.
     *
     * @return the subject value.
     */
    String subject();

    /**
     * Gets the audiences property: The list of audiences that can appear in the issued token.
     *
     * @return the audiences value.
     */
    List<String> audiences();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.msi.generated.fluent.models.FederatedIdentityCredentialInner object.
     *
     * @return the inner object.
     */
    FederatedIdentityCredentialInner innerModel();

    /** The entirety of the FederatedIdentityCredential definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The FederatedIdentityCredential definition stages. */
    interface DefinitionStages {
        /** The first stage of the FederatedIdentityCredential definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the FederatedIdentityCredential definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param resourceName The name of the identity resource.
             * @return the next definition stage.
             */
            WithCreate withExistingUserAssignedIdentity(String resourceGroupName, String resourceName);
        }
        /**
         * The stage of the FederatedIdentityCredential definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithIssuer, DefinitionStages.WithSubject, DefinitionStages.WithAudiences {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            FederatedIdentityCredential create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FederatedIdentityCredential create(Context context);
        }
        /** The stage of the FederatedIdentityCredential definition allowing to specify issuer. */
        interface WithIssuer {
            /**
             * Specifies the issuer property: The URL of the issuer to be trusted..
             *
             * @param issuer The URL of the issuer to be trusted.
             * @return the next definition stage.
             */
            WithCreate withIssuer(URL issuer);
        }
        /** The stage of the FederatedIdentityCredential definition allowing to specify subject. */
        interface WithSubject {
            /**
             * Specifies the subject property: The identifier of the external identity..
             *
             * @param subject The identifier of the external identity.
             * @return the next definition stage.
             */
            WithCreate withSubject(String subject);
        }
        /** The stage of the FederatedIdentityCredential definition allowing to specify audiences. */
        interface WithAudiences {
            /**
             * Specifies the audiences property: The list of audiences that can appear in the issued token..
             *
             * @param audiences The list of audiences that can appear in the issued token.
             * @return the next definition stage.
             */
            WithCreate withAudiences(List<String> audiences);
        }
    }
    /**
     * Begins update for the FederatedIdentityCredential resource.
     *
     * @return the stage of resource update.
     */
    FederatedIdentityCredential.Update update();

    /** The template for FederatedIdentityCredential update. */
    interface Update extends UpdateStages.WithIssuer, UpdateStages.WithSubject, UpdateStages.WithAudiences {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        FederatedIdentityCredential apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        FederatedIdentityCredential apply(Context context);
    }
    /** The FederatedIdentityCredential update stages. */
    interface UpdateStages {
        /** The stage of the FederatedIdentityCredential update allowing to specify issuer. */
        interface WithIssuer {
            /**
             * Specifies the issuer property: The URL of the issuer to be trusted..
             *
             * @param issuer The URL of the issuer to be trusted.
             * @return the next definition stage.
             */
            Update withIssuer(URL issuer);
        }
        /** The stage of the FederatedIdentityCredential update allowing to specify subject. */
        interface WithSubject {
            /**
             * Specifies the subject property: The identifier of the external identity..
             *
             * @param subject The identifier of the external identity.
             * @return the next definition stage.
             */
            Update withSubject(String subject);
        }
        /** The stage of the FederatedIdentityCredential update allowing to specify audiences. */
        interface WithAudiences {
            /**
             * Specifies the audiences property: The list of audiences that can appear in the issued token..
             *
             * @param audiences The list of audiences that can appear in the issued token.
             * @return the next definition stage.
             */
            Update withAudiences(List<String> audiences);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    FederatedIdentityCredential refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FederatedIdentityCredential refresh(Context context);
}
