// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.msi.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.msi.generated.fluent.FederatedIdentityCredentialsClient;
import com.azure.resourcemanager.msi.generated.fluent.models.FederatedIdentityCredentialInner;
import com.azure.resourcemanager.msi.generated.models.FederatedIdentityCredential;
import com.azure.resourcemanager.msi.generated.models.FederatedIdentityCredentials;

public final class FederatedIdentityCredentialsImpl implements FederatedIdentityCredentials {
    private static final ClientLogger LOGGER = new ClientLogger(FederatedIdentityCredentialsImpl.class);

    private final FederatedIdentityCredentialsClient innerClient;

    private final com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager serviceManager;

    public FederatedIdentityCredentialsImpl(
        FederatedIdentityCredentialsClient innerClient,
        com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FederatedIdentityCredential> list(String resourceGroupName, String resourceName) {
        PagedIterable<FederatedIdentityCredentialInner> inner =
            this.serviceClient().list(resourceGroupName, resourceName);
        return Utils.mapPage(inner, inner1 -> new FederatedIdentityCredentialImpl(inner1, this.manager()));
    }

    public PagedIterable<FederatedIdentityCredential> list(
        String resourceGroupName, String resourceName, Integer top, String skiptoken, Context context) {
        PagedIterable<FederatedIdentityCredentialInner> inner =
            this.serviceClient().list(resourceGroupName, resourceName, top, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new FederatedIdentityCredentialImpl(inner1, this.manager()));
    }

    public Response<FederatedIdentityCredential> getWithResponse(
        String resourceGroupName,
        String resourceName,
        String federatedIdentityCredentialResourceName,
        Context context) {
        Response<FederatedIdentityCredentialInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FederatedIdentityCredentialImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FederatedIdentityCredential get(
        String resourceGroupName, String resourceName, String federatedIdentityCredentialResourceName) {
        FederatedIdentityCredentialInner inner =
            this.serviceClient().get(resourceGroupName, resourceName, federatedIdentityCredentialResourceName);
        if (inner != null) {
            return new FederatedIdentityCredentialImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String resourceName,
        String federatedIdentityCredentialResourceName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, context);
    }

    public void delete(String resourceGroupName, String resourceName, String federatedIdentityCredentialResourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName, federatedIdentityCredentialResourceName);
    }

    public FederatedIdentityCredential getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        String federatedIdentityCredentialResourceName = Utils.getValueFromIdByName(id, "federatedIdentityCredentials");
        if (federatedIdentityCredentialResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'federatedIdentityCredentials'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, Context.NONE)
            .getValue();
    }

    public Response<FederatedIdentityCredential> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        String federatedIdentityCredentialResourceName = Utils.getValueFromIdByName(id, "federatedIdentityCredentials");
        if (federatedIdentityCredentialResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'federatedIdentityCredentials'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        String federatedIdentityCredentialResourceName = Utils.getValueFromIdByName(id, "federatedIdentityCredentials");
        if (federatedIdentityCredentialResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'federatedIdentityCredentials'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        String federatedIdentityCredentialResourceName = Utils.getValueFromIdByName(id, "federatedIdentityCredentials");
        if (federatedIdentityCredentialResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'federatedIdentityCredentials'.",
                                id)));
        }
        return this
            .deleteWithResponse(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, context);
    }

    private FederatedIdentityCredentialsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager manager() {
        return this.serviceManager;
    }

    public FederatedIdentityCredentialImpl define(String name) {
        return new FederatedIdentityCredentialImpl(name, this.manager());
    }
}
