// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.msi.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.msi.generated.fluent.UserAssignedIdentitiesClient;
import com.azure.resourcemanager.msi.generated.fluent.models.IdentityInner;
import com.azure.resourcemanager.msi.generated.models.Identity;
import com.azure.resourcemanager.msi.generated.models.UserAssignedIdentities;

public final class UserAssignedIdentitiesImpl implements UserAssignedIdentities {
    private static final ClientLogger LOGGER = new ClientLogger(UserAssignedIdentitiesImpl.class);

    private final UserAssignedIdentitiesClient innerClient;

    private final com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager serviceManager;

    public UserAssignedIdentitiesImpl(
        UserAssignedIdentitiesClient innerClient,
        com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Identity> list() {
        PagedIterable<IdentityInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new IdentityImpl(inner1, this.manager()));
    }

    public PagedIterable<Identity> list(Context context) {
        PagedIterable<IdentityInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new IdentityImpl(inner1, this.manager()));
    }

    public PagedIterable<Identity> listByResourceGroup(String resourceGroupName) {
        PagedIterable<IdentityInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new IdentityImpl(inner1, this.manager()));
    }

    public PagedIterable<Identity> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<IdentityInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new IdentityImpl(inner1, this.manager()));
    }

    public Response<Identity> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        Response<IdentityInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IdentityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Identity getByResourceGroup(String resourceGroupName, String resourceName) {
        IdentityInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceName);
        if (inner != null) {
            return new IdentityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, resourceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName);
    }

    public Identity getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE).getValue();
    }

    public Response<Identity> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "userAssignedIdentities");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'userAssignedIdentities'.",
                                id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    private UserAssignedIdentitiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.msi.generated.ManagedServiceIdentityManager manager() {
        return this.serviceManager;
    }

    public IdentityImpl define(String name) {
        return new IdentityImpl(name, this.manager());
    }
}
