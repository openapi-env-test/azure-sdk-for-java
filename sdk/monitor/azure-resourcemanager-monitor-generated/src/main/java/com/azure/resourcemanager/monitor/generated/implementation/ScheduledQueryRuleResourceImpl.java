// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.generated.fluent.models.ScheduledQueryRuleResourceInner;
import com.azure.resourcemanager.monitor.generated.models.Actions;
import com.azure.resourcemanager.monitor.generated.models.AlertSeverity;
import com.azure.resourcemanager.monitor.generated.models.Identity;
import com.azure.resourcemanager.monitor.generated.models.Kind;
import com.azure.resourcemanager.monitor.generated.models.PublicNetworkAccess;
import com.azure.resourcemanager.monitor.generated.models.RuleResolveConfiguration;
import com.azure.resourcemanager.monitor.generated.models.ScheduledQueryRuleCriteria;
import com.azure.resourcemanager.monitor.generated.models.ScheduledQueryRuleResource;
import com.azure.resourcemanager.monitor.generated.models.ScheduledQueryRuleResourcePatch;
import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ScheduledQueryRuleResourceImpl
    implements ScheduledQueryRuleResource, ScheduledQueryRuleResource.Definition, ScheduledQueryRuleResource.Update {
    private ScheduledQueryRuleResourceInner innerObject;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public Kind kind() {
        return this.innerModel().kind();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String createdWithApiVersion() {
        return this.innerModel().createdWithApiVersion();
    }

    public Boolean isLegacyLogAnalyticsRule() {
        return this.innerModel().isLegacyLogAnalyticsRule();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public AlertSeverity severity() {
        return this.innerModel().severity();
    }

    public Boolean enabled() {
        return this.innerModel().enabled();
    }

    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public List<String> scopes() {
        List<String> inner = this.innerModel().scopes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Duration evaluationFrequency() {
        return this.innerModel().evaluationFrequency();
    }

    public Duration windowSize() {
        return this.innerModel().windowSize();
    }

    public Duration overrideQueryTimeRange() {
        return this.innerModel().overrideQueryTimeRange();
    }

    public List<String> targetResourceTypes() {
        List<String> inner = this.innerModel().targetResourceTypes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ScheduledQueryRuleCriteria criteria() {
        return this.innerModel().criteria();
    }

    public Duration muteActionsDuration() {
        return this.innerModel().muteActionsDuration();
    }

    public Actions actions() {
        return this.innerModel().actions();
    }

    public Boolean isWorkspaceAlertsStorageConfigured() {
        return this.innerModel().isWorkspaceAlertsStorageConfigured();
    }

    public Boolean checkWorkspaceAlertsStorageConfigured() {
        return this.innerModel().checkWorkspaceAlertsStorageConfigured();
    }

    public Boolean skipQueryValidation() {
        return this.innerModel().skipQueryValidation();
    }

    public Boolean autoMitigate() {
        return this.innerModel().autoMitigate();
    }

    public RuleResolveConfiguration ruleResolveConfiguration() {
        return this.innerModel().ruleResolveConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ScheduledQueryRuleResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String ruleName;

    private ScheduledQueryRuleResourcePatch updateParameters;

    public ScheduledQueryRuleResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ScheduledQueryRuleResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .createOrUpdateWithResponse(resourceGroupName, ruleName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ScheduledQueryRuleResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .createOrUpdateWithResponse(resourceGroupName, ruleName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ScheduledQueryRuleResourceImpl(
        String name, com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = new ScheduledQueryRuleResourceInner();
        this.serviceManager = serviceManager;
        this.ruleName = name;
    }

    public ScheduledQueryRuleResourceImpl update() {
        this.updateParameters = new ScheduledQueryRuleResourcePatch();
        return this;
    }

    public ScheduledQueryRuleResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .updateWithResponse(resourceGroupName, ruleName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public ScheduledQueryRuleResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .updateWithResponse(resourceGroupName, ruleName, updateParameters, context)
                .getValue();
        return this;
    }

    ScheduledQueryRuleResourceImpl(
        ScheduledQueryRuleResourceInner innerObject,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.ruleName = Utils.getValueFromIdByName(innerObject.id(), "scheduledQueryRules");
    }

    public ScheduledQueryRuleResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .getByResourceGroupWithResponse(resourceGroupName, ruleName, Context.NONE)
                .getValue();
        return this;
    }

    public ScheduledQueryRuleResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScheduledQueryRules()
                .getByResourceGroupWithResponse(resourceGroupName, ruleName, context)
                .getValue();
        return this;
    }

    public ScheduledQueryRuleResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ScheduledQueryRuleResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ScheduledQueryRuleResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withKind(Kind kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ScheduledQueryRuleResourceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateParameters.withDescription(description);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.innerModel().withDisplayName(displayName);
            return this;
        } else {
            this.updateParameters.withDisplayName(displayName);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withSeverity(AlertSeverity severity) {
        if (isInCreateMode()) {
            this.innerModel().withSeverity(severity);
            return this;
        } else {
            this.updateParameters.withSeverity(severity);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withEnabled(Boolean enabled) {
        if (isInCreateMode()) {
            this.innerModel().withEnabled(enabled);
            return this;
        } else {
            this.updateParameters.withEnabled(enabled);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (isInCreateMode()) {
            this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
            return this;
        } else {
            this.updateParameters.withPublicNetworkAccess(publicNetworkAccess);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withScopes(List<String> scopes) {
        if (isInCreateMode()) {
            this.innerModel().withScopes(scopes);
            return this;
        } else {
            this.updateParameters.withScopes(scopes);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withEvaluationFrequency(Duration evaluationFrequency) {
        if (isInCreateMode()) {
            this.innerModel().withEvaluationFrequency(evaluationFrequency);
            return this;
        } else {
            this.updateParameters.withEvaluationFrequency(evaluationFrequency);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withWindowSize(Duration windowSize) {
        if (isInCreateMode()) {
            this.innerModel().withWindowSize(windowSize);
            return this;
        } else {
            this.updateParameters.withWindowSize(windowSize);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withOverrideQueryTimeRange(Duration overrideQueryTimeRange) {
        if (isInCreateMode()) {
            this.innerModel().withOverrideQueryTimeRange(overrideQueryTimeRange);
            return this;
        } else {
            this.updateParameters.withOverrideQueryTimeRange(overrideQueryTimeRange);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withTargetResourceTypes(List<String> targetResourceTypes) {
        if (isInCreateMode()) {
            this.innerModel().withTargetResourceTypes(targetResourceTypes);
            return this;
        } else {
            this.updateParameters.withTargetResourceTypes(targetResourceTypes);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withCriteria(ScheduledQueryRuleCriteria criteria) {
        if (isInCreateMode()) {
            this.innerModel().withCriteria(criteria);
            return this;
        } else {
            this.updateParameters.withCriteria(criteria);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withMuteActionsDuration(Duration muteActionsDuration) {
        if (isInCreateMode()) {
            this.innerModel().withMuteActionsDuration(muteActionsDuration);
            return this;
        } else {
            this.updateParameters.withMuteActionsDuration(muteActionsDuration);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withActions(Actions actions) {
        if (isInCreateMode()) {
            this.innerModel().withActions(actions);
            return this;
        } else {
            this.updateParameters.withActions(actions);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withCheckWorkspaceAlertsStorageConfigured(
        Boolean checkWorkspaceAlertsStorageConfigured) {
        if (isInCreateMode()) {
            this.innerModel().withCheckWorkspaceAlertsStorageConfigured(checkWorkspaceAlertsStorageConfigured);
            return this;
        } else {
            this.updateParameters.withCheckWorkspaceAlertsStorageConfigured(checkWorkspaceAlertsStorageConfigured);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withSkipQueryValidation(Boolean skipQueryValidation) {
        if (isInCreateMode()) {
            this.innerModel().withSkipQueryValidation(skipQueryValidation);
            return this;
        } else {
            this.updateParameters.withSkipQueryValidation(skipQueryValidation);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withAutoMitigate(Boolean autoMitigate) {
        if (isInCreateMode()) {
            this.innerModel().withAutoMitigate(autoMitigate);
            return this;
        } else {
            this.updateParameters.withAutoMitigate(autoMitigate);
            return this;
        }
    }

    public ScheduledQueryRuleResourceImpl withRuleResolveConfiguration(
        RuleResolveConfiguration ruleResolveConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withRuleResolveConfiguration(ruleResolveConfiguration);
            return this;
        } else {
            this.updateParameters.withRuleResolveConfiguration(ruleResolveConfiguration);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
