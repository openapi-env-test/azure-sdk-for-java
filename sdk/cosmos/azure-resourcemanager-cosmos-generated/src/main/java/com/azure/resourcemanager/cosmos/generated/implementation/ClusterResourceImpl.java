// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.CosmosDBManager;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ClusterResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.ClusterNodeStatus;
import com.azure.resourcemanager.cosmos.generated.models.ClusterResource;
import com.azure.resourcemanager.cosmos.generated.models.ClusterResourceProperties;
import com.azure.resourcemanager.cosmos.generated.models.ManagedServiceIdentity;
import com.azure.resourcemanager.cosmos.generated.models.RepairPostBody;
import java.util.Collections;
import java.util.Map;

public final class ClusterResourceImpl implements ClusterResource, ClusterResource.Definition, ClusterResource.Update {
    private ClusterResourceInner innerObject;

    private final CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public ClusterResourceProperties properties() {
        return this.innerModel().properties();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ClusterResourceInner innerModel() {
        return this.innerObject;
    }

    private CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    public ClusterResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ClusterResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .createUpdate(resourceGroupName, clusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public ClusterResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .createUpdate(resourceGroupName, clusterName, this.innerModel(), context);
        return this;
    }

    ClusterResourceImpl(String name, CosmosDBManager serviceManager) {
        this.innerObject = new ClusterResourceInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
    }

    public ClusterResourceImpl update() {
        return this;
    }

    public ClusterResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .update(resourceGroupName, clusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public ClusterResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .update(resourceGroupName, clusterName, this.innerModel(), context);
        return this;
    }

    ClusterResourceImpl(ClusterResourceInner innerObject, CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "cassandraClusters");
    }

    public ClusterResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
                .getValue();
        return this;
    }

    public ClusterResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
                .getValue();
        return this;
    }

    public void requestRepair(RepairPostBody body) {
        serviceManager.cassandraClusters().requestRepair(resourceGroupName, clusterName, body);
    }

    public void requestRepair(RepairPostBody body, Context context) {
        serviceManager.cassandraClusters().requestRepair(resourceGroupName, clusterName, body, context);
    }

    public ClusterNodeStatus fetchNodeStatus() {
        return serviceManager.cassandraClusters().fetchNodeStatus(resourceGroupName, clusterName);
    }

    public ClusterNodeStatus fetchNodeStatus(Context context) {
        return serviceManager.cassandraClusters().fetchNodeStatus(resourceGroupName, clusterName, context);
    }

    public ClusterResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterResourceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ClusterResourceImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ClusterResourceImpl withProperties(ClusterResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
