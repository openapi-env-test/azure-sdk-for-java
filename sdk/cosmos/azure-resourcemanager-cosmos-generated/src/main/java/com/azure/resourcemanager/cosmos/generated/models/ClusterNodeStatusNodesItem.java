// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The ClusterNodeStatusNodesItem model. */
@Fluent
public final class ClusterNodeStatusNodesItem {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ClusterNodeStatusNodesItem.class);

    /*
     * The Cassandra data center this node resides in.
     */
    @JsonProperty(value = "datacenter")
    private String datacenter;

    /*
     * Indicates whether the node is functioning or not.
     */
    @JsonProperty(value = "status")
    private NodeStatus status;

    /*
     * The state of the node in relation to the cluster.
     */
    @JsonProperty(value = "state")
    private NodeState state;

    /*
     * The node's URL.
     */
    @JsonProperty(value = "address")
    private String address;

    /*
     * The amount of file system data in the data directory (e.g., 47.66 KB),
     * excluding all content in the snapshots subdirectories. Because all
     * SSTable data files are included, any data that is not cleaned up (such
     * as TTL-expired cell or tombstoned data) is counted.
     */
    @JsonProperty(value = "load")
    private String load;

    /*
     * List of tokens.
     */
    @JsonProperty(value = "tokens")
    private List<String> tokens;

    /*
     * The percentage of the data owned by the node per datacenter times the
     * replication factor (e.g., 33.3, or null if the data is not available).
     * For example, a node can own 33% of the ring, but shows 100% if the
     * replication factor is 3. For non-system keyspaces, the endpoint
     * percentage ownership information is shown.
     */
    @JsonProperty(value = "owns")
    private Double owns;

    /*
     * The network ID of the node.
     */
    @JsonProperty(value = "hostId")
    private String hostId;

    /*
     * The rack this node is part of.
     */
    @JsonProperty(value = "rack")
    private String rack;

    /**
     * Get the datacenter property: The Cassandra data center this node resides in.
     *
     * @return the datacenter value.
     */
    public String datacenter() {
        return this.datacenter;
    }

    /**
     * Set the datacenter property: The Cassandra data center this node resides in.
     *
     * @param datacenter the datacenter value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withDatacenter(String datacenter) {
        this.datacenter = datacenter;
        return this;
    }

    /**
     * Get the status property: Indicates whether the node is functioning or not.
     *
     * @return the status value.
     */
    public NodeStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Indicates whether the node is functioning or not.
     *
     * @param status the status value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withStatus(NodeStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the state property: The state of the node in relation to the cluster.
     *
     * @return the state value.
     */
    public NodeState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the node in relation to the cluster.
     *
     * @param state the state value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withState(NodeState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the address property: The node's URL.
     *
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: The node's URL.
     *
     * @param address the address value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the load property: The amount of file system data in the data directory (e.g., 47.66 KB), excluding all
     * content in the snapshots subdirectories. Because all SSTable data files are included, any data that is not
     * cleaned up (such as TTL-expired cell or tombstoned data) is counted.
     *
     * @return the load value.
     */
    public String load() {
        return this.load;
    }

    /**
     * Set the load property: The amount of file system data in the data directory (e.g., 47.66 KB), excluding all
     * content in the snapshots subdirectories. Because all SSTable data files are included, any data that is not
     * cleaned up (such as TTL-expired cell or tombstoned data) is counted.
     *
     * @param load the load value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withLoad(String load) {
        this.load = load;
        return this;
    }

    /**
     * Get the tokens property: List of tokens.
     *
     * @return the tokens value.
     */
    public List<String> tokens() {
        return this.tokens;
    }

    /**
     * Set the tokens property: List of tokens.
     *
     * @param tokens the tokens value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withTokens(List<String> tokens) {
        this.tokens = tokens;
        return this;
    }

    /**
     * Get the owns property: The percentage of the data owned by the node per datacenter times the replication factor
     * (e.g., 33.3, or null if the data is not available). For example, a node can own 33% of the ring, but shows 100%
     * if the replication factor is 3. For non-system keyspaces, the endpoint percentage ownership information is shown.
     *
     * @return the owns value.
     */
    public Double owns() {
        return this.owns;
    }

    /**
     * Set the owns property: The percentage of the data owned by the node per datacenter times the replication factor
     * (e.g., 33.3, or null if the data is not available). For example, a node can own 33% of the ring, but shows 100%
     * if the replication factor is 3. For non-system keyspaces, the endpoint percentage ownership information is shown.
     *
     * @param owns the owns value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withOwns(Double owns) {
        this.owns = owns;
        return this;
    }

    /**
     * Get the hostId property: The network ID of the node.
     *
     * @return the hostId value.
     */
    public String hostId() {
        return this.hostId;
    }

    /**
     * Set the hostId property: The network ID of the node.
     *
     * @param hostId the hostId value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }

    /**
     * Get the rack property: The rack this node is part of.
     *
     * @return the rack value.
     */
    public String rack() {
        return this.rack;
    }

    /**
     * Set the rack property: The rack this node is part of.
     *
     * @param rack the rack value to set.
     * @return the ClusterNodeStatusNodesItem object itself.
     */
    public ClusterNodeStatusNodesItem withRack(String rack) {
        this.rack = rack;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
