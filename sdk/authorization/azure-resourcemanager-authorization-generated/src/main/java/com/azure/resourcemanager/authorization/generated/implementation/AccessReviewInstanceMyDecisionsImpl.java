// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.AuthorizationManager;
import com.azure.resourcemanager.authorization.generated.fluent.AccessReviewInstanceMyDecisionsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewDecisionInner;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewDecision;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewDecisionProperties;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceMyDecisions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AccessReviewInstanceMyDecisionsImpl implements AccessReviewInstanceMyDecisions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AccessReviewInstanceMyDecisionsImpl.class);

    private final AccessReviewInstanceMyDecisionsClient innerClient;

    private final AuthorizationManager serviceManager;

    public AccessReviewInstanceMyDecisionsImpl(
        AccessReviewInstanceMyDecisionsClient innerClient, AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AccessReviewDecision> list(String scheduleDefinitionId, String id) {
        PagedIterable<AccessReviewDecisionInner> inner = this.serviceClient().list(scheduleDefinitionId, id);
        return inner.mapPage(inner1 -> new AccessReviewDecisionImpl(inner1, this.manager()));
    }

    public PagedIterable<AccessReviewDecision> list(String scheduleDefinitionId, String id, Context context) {
        PagedIterable<AccessReviewDecisionInner> inner = this.serviceClient().list(scheduleDefinitionId, id, context);
        return inner.mapPage(inner1 -> new AccessReviewDecisionImpl(inner1, this.manager()));
    }

    public AccessReviewDecision getById(String scheduleDefinitionId, String id, String decisionId) {
        AccessReviewDecisionInner inner = this.serviceClient().getById(scheduleDefinitionId, id, decisionId);
        if (inner != null) {
            return new AccessReviewDecisionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewDecision> getByIdWithResponse(
        String scheduleDefinitionId, String id, String decisionId, Context context) {
        Response<AccessReviewDecisionInner> inner =
            this.serviceClient().getByIdWithResponse(scheduleDefinitionId, id, decisionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewDecisionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AccessReviewDecision patch(
        String scheduleDefinitionId, String id, String decisionId, AccessReviewDecisionProperties properties) {
        AccessReviewDecisionInner inner = this.serviceClient().patch(scheduleDefinitionId, id, decisionId, properties);
        if (inner != null) {
            return new AccessReviewDecisionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewDecision> patchWithResponse(
        String scheduleDefinitionId,
        String id,
        String decisionId,
        AccessReviewDecisionProperties properties,
        Context context) {
        Response<AccessReviewDecisionInner> inner =
            this.serviceClient().patchWithResponse(scheduleDefinitionId, id, decisionId, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewDecisionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private AccessReviewInstanceMyDecisionsClient serviceClient() {
        return this.innerClient;
    }

    private AuthorizationManager manager() {
        return this.serviceManager;
    }
}
