// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewActorIdentityType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewReviewer;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionReviewersType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScopePrincipalType;
import com.azure.resourcemanager.authorization.generated.models.DefaultDecisionType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Access Review Schedule Definition. */
@JsonFlatten
@Fluent
public class AccessReviewScheduleDefinitionInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AccessReviewScheduleDefinitionInner.class);

    /*
     * The display name for the schedule definition.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /*
     * This read-only field specifies the status of an accessReview.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScheduleDefinitionStatus status;

    /*
     * The description provided by the access review creator and visible to
     * admins.
     */
    @JsonProperty(value = "properties.descriptionForAdmins")
    private String descriptionForAdmins;

    /*
     * The description provided by the access review creator to be shown to
     * reviewers.
     */
    @JsonProperty(value = "properties.descriptionForReviewers")
    private String descriptionForReviewers;

    /*
     * This is the collection of reviewers.
     */
    @JsonProperty(value = "properties.reviewers")
    private List<AccessReviewReviewer> reviewers;

    /*
     * This field specifies the type of reviewers for a review. Usually for a
     * review, reviewers are explicitly assigned. However, in some cases, the
     * reviewers may not be assigned and instead be chosen dynamically. For
     * example managers review or self review.
     */
    @JsonProperty(value = "properties.reviewersType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScheduleDefinitionReviewersType reviewersType;

    /*
     * This is the collection of instances returned when one does an expand on
     * it.
     */
    @JsonProperty(value = "properties.instances")
    private List<AccessReviewInstanceInner> instances;

    /*
     * ResourceId in which this review is getting created
     */
    @JsonProperty(value = "properties.scope.resourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceId;

    /*
     * This is used to indicate the role being reviewed
     */
    @JsonProperty(value = "properties.scope.roleDefinitionId", access = JsonProperty.Access.WRITE_ONLY)
    private String roleDefinitionId;

    /*
     * The identity type user/servicePrincipal to review
     */
    @JsonProperty(value = "properties.scope.principalType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScopePrincipalType principalTypePropertiesScopePrincipalType;

    /*
     * Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     */
    @JsonProperty(value = "properties.settings.mailNotificationsEnabled")
    private Boolean mailNotificationsEnabled;

    /*
     * Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     */
    @JsonProperty(value = "properties.settings.reminderNotificationsEnabled")
    private Boolean reminderNotificationsEnabled;

    /*
     * Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     */
    @JsonProperty(value = "properties.settings.defaultDecisionEnabled")
    private Boolean defaultDecisionEnabled;

    /*
     * Flag to indicate whether the reviewer is required to pass justification
     * when recording a decision.
     */
    @JsonProperty(value = "properties.settings.justificationRequiredOnApproval")
    private Boolean justificationRequiredOnApproval;

    /*
     * This specifies the behavior for the autoReview feature when an access
     * review completes.
     */
    @JsonProperty(value = "properties.settings.defaultDecision")
    private DefaultDecisionType defaultDecision;

    /*
     * Flag to indicate whether auto-apply capability, to automatically change
     * the target object access resource, is enabled. If not enabled, a user
     * must, after the review completes, apply the access review.
     */
    @JsonProperty(value = "properties.settings.autoApplyDecisionsEnabled")
    private Boolean autoApplyDecisionsEnabled;

    /*
     * Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     */
    @JsonProperty(value = "properties.settings.recommendationsEnabled")
    private Boolean recommendationsEnabled;

    /*
     * The duration in days for an instance.
     */
    @JsonProperty(value = "properties.settings.instanceDurationInDays")
    private Integer instanceDurationInDays;

    /*
     * The recurrence range type. The possible values are: endDate, noEnd,
     * numbered.
     */
    @JsonProperty(value = "properties.settings.recurrence.range.type")
    private AccessReviewRecurrenceRangeType typePropertiesSettingsRecurrenceRangeType;

    /*
     * The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     */
    @JsonProperty(value = "properties.settings.recurrence.range.numberOfOccurrences")
    private Integer numberOfOccurrences;

    /*
     * The DateTime when the review is scheduled to be start. This could be a
     * date in the future. Required on create.
     */
    @JsonProperty(value = "properties.settings.recurrence.range.startDate")
    private OffsetDateTime startDate;

    /*
     * The DateTime when the review is scheduled to end. Required if type is
     * endDate
     */
    @JsonProperty(value = "properties.settings.recurrence.range.endDate")
    private OffsetDateTime endDate;

    /*
     * The recurrence type : weekly, monthly, etc.
     */
    @JsonProperty(value = "properties.settings.recurrence.pattern.type")
    private AccessReviewRecurrencePatternType typePropertiesSettingsRecurrencePatternType;

    /*
     * The interval for recurrence. For a quarterly review, the interval is 3
     * for type : absoluteMonthly.
     */
    @JsonProperty(value = "properties.settings.recurrence.pattern.interval")
    private Integer interval;

    /*
     * The identity id
     */
    @JsonProperty(value = "properties.createdBy.principalId", access = JsonProperty.Access.WRITE_ONLY)
    private String principalId;

    /*
     * The identity type : user/servicePrincipal
     */
    @JsonProperty(value = "properties.createdBy.principalType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentityType principalTypePropertiesCreatedByPrincipalType;

    /*
     * The identity display name
     */
    @JsonProperty(value = "properties.createdBy.principalName", access = JsonProperty.Access.WRITE_ONLY)
    private String principalName;

    /*
     * The user principal name(if valid)
     */
    @JsonProperty(value = "properties.createdBy.userPrincipalName", access = JsonProperty.Access.WRITE_ONLY)
    private String userPrincipalName;

    /**
     * Get the displayName property: The display name for the schedule definition.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the schedule definition.
     *
     * @param displayName the displayName value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the status property: This read-only field specifies the status of an accessReview.
     *
     * @return the status value.
     */
    public AccessReviewScheduleDefinitionStatus status() {
        return this.status;
    }

    /**
     * Get the descriptionForAdmins property: The description provided by the access review creator and visible to
     * admins.
     *
     * @return the descriptionForAdmins value.
     */
    public String descriptionForAdmins() {
        return this.descriptionForAdmins;
    }

    /**
     * Set the descriptionForAdmins property: The description provided by the access review creator and visible to
     * admins.
     *
     * @param descriptionForAdmins the descriptionForAdmins value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withDescriptionForAdmins(String descriptionForAdmins) {
        this.descriptionForAdmins = descriptionForAdmins;
        return this;
    }

    /**
     * Get the descriptionForReviewers property: The description provided by the access review creator to be shown to
     * reviewers.
     *
     * @return the descriptionForReviewers value.
     */
    public String descriptionForReviewers() {
        return this.descriptionForReviewers;
    }

    /**
     * Set the descriptionForReviewers property: The description provided by the access review creator to be shown to
     * reviewers.
     *
     * @param descriptionForReviewers the descriptionForReviewers value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withDescriptionForReviewers(String descriptionForReviewers) {
        this.descriptionForReviewers = descriptionForReviewers;
        return this;
    }

    /**
     * Get the reviewers property: This is the collection of reviewers.
     *
     * @return the reviewers value.
     */
    public List<AccessReviewReviewer> reviewers() {
        return this.reviewers;
    }

    /**
     * Set the reviewers property: This is the collection of reviewers.
     *
     * @param reviewers the reviewers value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withReviewers(List<AccessReviewReviewer> reviewers) {
        this.reviewers = reviewers;
        return this;
    }

    /**
     * Get the reviewersType property: This field specifies the type of reviewers for a review. Usually for a review,
     * reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
     * chosen dynamically. For example managers review or self review.
     *
     * @return the reviewersType value.
     */
    public AccessReviewScheduleDefinitionReviewersType reviewersType() {
        return this.reviewersType;
    }

    /**
     * Get the instances property: This is the collection of instances returned when one does an expand on it.
     *
     * @return the instances value.
     */
    public List<AccessReviewInstanceInner> instances() {
        return this.instances;
    }

    /**
     * Set the instances property: This is the collection of instances returned when one does an expand on it.
     *
     * @param instances the instances value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withInstances(List<AccessReviewInstanceInner> instances) {
        this.instances = instances;
        return this;
    }

    /**
     * Get the resourceId property: ResourceId in which this review is getting created.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the roleDefinitionId property: This is used to indicate the role being reviewed.
     *
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Get the principalTypePropertiesScopePrincipalType property: The identity type user/servicePrincipal to review.
     *
     * @return the principalTypePropertiesScopePrincipalType value.
     */
    public AccessReviewScopePrincipalType principalTypePropertiesScopePrincipalType() {
        return this.principalTypePropertiesScopePrincipalType;
    }

    /**
     * Get the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @return the mailNotificationsEnabled value.
     */
    public Boolean mailNotificationsEnabled() {
        return this.mailNotificationsEnabled;
    }

    /**
     * Set the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @param mailNotificationsEnabled the mailNotificationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withMailNotificationsEnabled(Boolean mailNotificationsEnabled) {
        this.mailNotificationsEnabled = mailNotificationsEnabled;
        return this;
    }

    /**
     * Get the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @return the reminderNotificationsEnabled value.
     */
    public Boolean reminderNotificationsEnabled() {
        return this.reminderNotificationsEnabled;
    }

    /**
     * Set the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @param reminderNotificationsEnabled the reminderNotificationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withReminderNotificationsEnabled(Boolean reminderNotificationsEnabled) {
        this.reminderNotificationsEnabled = reminderNotificationsEnabled;
        return this;
    }

    /**
     * Get the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @return the defaultDecisionEnabled value.
     */
    public Boolean defaultDecisionEnabled() {
        return this.defaultDecisionEnabled;
    }

    /**
     * Set the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @param defaultDecisionEnabled the defaultDecisionEnabled value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withDefaultDecisionEnabled(Boolean defaultDecisionEnabled) {
        this.defaultDecisionEnabled = defaultDecisionEnabled;
        return this;
    }

    /**
     * Get the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @return the justificationRequiredOnApproval value.
     */
    public Boolean justificationRequiredOnApproval() {
        return this.justificationRequiredOnApproval;
    }

    /**
     * Set the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @param justificationRequiredOnApproval the justificationRequiredOnApproval value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withJustificationRequiredOnApproval(
        Boolean justificationRequiredOnApproval) {
        this.justificationRequiredOnApproval = justificationRequiredOnApproval;
        return this;
    }

    /**
     * Get the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @return the defaultDecision value.
     */
    public DefaultDecisionType defaultDecision() {
        return this.defaultDecision;
    }

    /**
     * Set the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @param defaultDecision the defaultDecision value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withDefaultDecision(DefaultDecisionType defaultDecision) {
        this.defaultDecision = defaultDecision;
        return this;
    }

    /**
     * Get the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @return the autoApplyDecisionsEnabled value.
     */
    public Boolean autoApplyDecisionsEnabled() {
        return this.autoApplyDecisionsEnabled;
    }

    /**
     * Set the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @param autoApplyDecisionsEnabled the autoApplyDecisionsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled) {
        this.autoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
        return this;
    }

    /**
     * Get the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @return the recommendationsEnabled value.
     */
    public Boolean recommendationsEnabled() {
        return this.recommendationsEnabled;
    }

    /**
     * Set the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @param recommendationsEnabled the recommendationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withRecommendationsEnabled(Boolean recommendationsEnabled) {
        this.recommendationsEnabled = recommendationsEnabled;
        return this;
    }

    /**
     * Get the instanceDurationInDays property: The duration in days for an instance.
     *
     * @return the instanceDurationInDays value.
     */
    public Integer instanceDurationInDays() {
        return this.instanceDurationInDays;
    }

    /**
     * Set the instanceDurationInDays property: The duration in days for an instance.
     *
     * @param instanceDurationInDays the instanceDurationInDays value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withInstanceDurationInDays(Integer instanceDurationInDays) {
        this.instanceDurationInDays = instanceDurationInDays;
        return this;
    }

    /**
     * Get the typePropertiesSettingsRecurrenceRangeType property: The recurrence range type. The possible values are:
     * endDate, noEnd, numbered.
     *
     * @return the typePropertiesSettingsRecurrenceRangeType value.
     */
    public AccessReviewRecurrenceRangeType typePropertiesSettingsRecurrenceRangeType() {
        return this.typePropertiesSettingsRecurrenceRangeType;
    }

    /**
     * Set the typePropertiesSettingsRecurrenceRangeType property: The recurrence range type. The possible values are:
     * endDate, noEnd, numbered.
     *
     * @param typePropertiesSettingsRecurrenceRangeType the typePropertiesSettingsRecurrenceRangeType value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withTypePropertiesSettingsRecurrenceRangeType(
        AccessReviewRecurrenceRangeType typePropertiesSettingsRecurrenceRangeType) {
        this.typePropertiesSettingsRecurrenceRangeType = typePropertiesSettingsRecurrenceRangeType;
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.numberOfOccurrences;
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withNumberOfOccurrences(Integer numberOfOccurrences) {
        this.numberOfOccurrences = numberOfOccurrences;
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.startDate;
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @param startDate the startDate value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @param endDate the endDate value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get the typePropertiesSettingsRecurrencePatternType property: The recurrence type : weekly, monthly, etc.
     *
     * @return the typePropertiesSettingsRecurrencePatternType value.
     */
    public AccessReviewRecurrencePatternType typePropertiesSettingsRecurrencePatternType() {
        return this.typePropertiesSettingsRecurrencePatternType;
    }

    /**
     * Set the typePropertiesSettingsRecurrencePatternType property: The recurrence type : weekly, monthly, etc.
     *
     * @param typePropertiesSettingsRecurrencePatternType the typePropertiesSettingsRecurrencePatternType value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withTypePropertiesSettingsRecurrencePatternType(
        AccessReviewRecurrencePatternType typePropertiesSettingsRecurrencePatternType) {
        this.typePropertiesSettingsRecurrencePatternType = typePropertiesSettingsRecurrencePatternType;
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @param interval the interval value to set.
     * @return the AccessReviewScheduleDefinitionInner object itself.
     */
    public AccessReviewScheduleDefinitionInner withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the principalTypePropertiesCreatedByPrincipalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalTypePropertiesCreatedByPrincipalType value.
     */
    public AccessReviewActorIdentityType principalTypePropertiesCreatedByPrincipalType() {
        return this.principalTypePropertiesCreatedByPrincipalType;
    }

    /**
     * Get the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    public String principalName() {
        return this.principalName;
    }

    /**
     * Get the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reviewers() != null) {
            reviewers().forEach(e -> e.validate());
        }
        if (instances() != null) {
            instances().forEach(e -> e.validate());
        }
    }
}
