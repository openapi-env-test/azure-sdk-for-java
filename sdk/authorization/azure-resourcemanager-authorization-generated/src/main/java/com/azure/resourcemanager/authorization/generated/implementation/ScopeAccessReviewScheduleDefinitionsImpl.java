// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.ScopeAccessReviewScheduleDefinitionsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionInner;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionProperties;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinition;
import com.azure.resourcemanager.authorization.generated.models.ScopeAccessReviewScheduleDefinitions;

public final class ScopeAccessReviewScheduleDefinitionsImpl implements ScopeAccessReviewScheduleDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(ScopeAccessReviewScheduleDefinitionsImpl.class);

    private final ScopeAccessReviewScheduleDefinitionsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public ScopeAccessReviewScheduleDefinitionsImpl(
        ScopeAccessReviewScheduleDefinitionsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AccessReviewScheduleDefinition> list(String scope) {
        PagedIterable<AccessReviewScheduleDefinitionInner> inner = this.serviceClient().list(scope);
        return Utils.mapPage(inner, inner1 -> new AccessReviewScheduleDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<AccessReviewScheduleDefinition> list(String scope, String filter, Context context) {
        PagedIterable<AccessReviewScheduleDefinitionInner> inner = this.serviceClient().list(scope, filter, context);
        return Utils.mapPage(inner, inner1 -> new AccessReviewScheduleDefinitionImpl(inner1, this.manager()));
    }

    public AccessReviewScheduleDefinition getById(String scope, String scheduleDefinitionId) {
        AccessReviewScheduleDefinitionInner inner = this.serviceClient().getById(scope, scheduleDefinitionId);
        if (inner != null) {
            return new AccessReviewScheduleDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewScheduleDefinition> getByIdWithResponse(
        String scope, String scheduleDefinitionId, Context context) {
        Response<AccessReviewScheduleDefinitionInner> inner =
            this.serviceClient().getByIdWithResponse(scope, scheduleDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewScheduleDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteById(String scope, String scheduleDefinitionId) {
        this.serviceClient().deleteById(scope, scheduleDefinitionId);
    }

    public Response<Void> deleteByIdWithResponse(String scope, String scheduleDefinitionId, Context context) {
        return this.serviceClient().deleteByIdWithResponse(scope, scheduleDefinitionId, context);
    }

    public AccessReviewScheduleDefinition createOrUpdateById(
        String scope, String scheduleDefinitionId, AccessReviewScheduleDefinitionProperties properties) {
        AccessReviewScheduleDefinitionInner inner =
            this.serviceClient().createOrUpdateById(scope, scheduleDefinitionId, properties);
        if (inner != null) {
            return new AccessReviewScheduleDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewScheduleDefinition> createOrUpdateByIdWithResponse(
        String scope,
        String scheduleDefinitionId,
        AccessReviewScheduleDefinitionProperties properties,
        Context context) {
        Response<AccessReviewScheduleDefinitionInner> inner =
            this.serviceClient().createOrUpdateByIdWithResponse(scope, scheduleDefinitionId, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewScheduleDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void stop(String scope, String scheduleDefinitionId) {
        this.serviceClient().stop(scope, scheduleDefinitionId);
    }

    public Response<Void> stopWithResponse(String scope, String scheduleDefinitionId, Context context) {
        return this.serviceClient().stopWithResponse(scope, scheduleDefinitionId, context);
    }

    private ScopeAccessReviewScheduleDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
