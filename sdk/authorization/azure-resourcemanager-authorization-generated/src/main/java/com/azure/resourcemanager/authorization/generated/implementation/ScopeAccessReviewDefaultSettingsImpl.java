// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.ScopeAccessReviewDefaultSettingsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewDefaultSettingsInner;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleSettings;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewDefaultSettings;
import com.azure.resourcemanager.authorization.generated.models.ScopeAccessReviewDefaultSettings;

public final class ScopeAccessReviewDefaultSettingsImpl implements ScopeAccessReviewDefaultSettings {
    private static final ClientLogger LOGGER = new ClientLogger(ScopeAccessReviewDefaultSettingsImpl.class);

    private final ScopeAccessReviewDefaultSettingsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public ScopeAccessReviewDefaultSettingsImpl(
        ScopeAccessReviewDefaultSettingsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AccessReviewDefaultSettings get(String scope) {
        AccessReviewDefaultSettingsInner inner = this.serviceClient().get(scope);
        if (inner != null) {
            return new AccessReviewDefaultSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewDefaultSettings> getWithResponse(String scope, Context context) {
        Response<AccessReviewDefaultSettingsInner> inner = this.serviceClient().getWithResponse(scope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewDefaultSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AccessReviewDefaultSettings put(String scope, AccessReviewScheduleSettings properties) {
        AccessReviewDefaultSettingsInner inner = this.serviceClient().put(scope, properties);
        if (inner != null) {
            return new AccessReviewDefaultSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewDefaultSettings> putWithResponse(
        String scope, AccessReviewScheduleSettings properties, Context context) {
        Response<AccessReviewDefaultSettingsInner> inner =
            this.serviceClient().putWithResponse(scope, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewDefaultSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ScopeAccessReviewDefaultSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
