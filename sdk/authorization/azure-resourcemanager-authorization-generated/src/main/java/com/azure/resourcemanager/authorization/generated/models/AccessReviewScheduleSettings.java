// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Settings of an Access Review. */
@JsonFlatten
@Fluent
public class AccessReviewScheduleSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AccessReviewScheduleSettings.class);

    /*
     * Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     */
    @JsonProperty(value = "mailNotificationsEnabled")
    private Boolean mailNotificationsEnabled;

    /*
     * Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     */
    @JsonProperty(value = "reminderNotificationsEnabled")
    private Boolean reminderNotificationsEnabled;

    /*
     * Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     */
    @JsonProperty(value = "defaultDecisionEnabled")
    private Boolean defaultDecisionEnabled;

    /*
     * Flag to indicate whether the reviewer is required to pass justification
     * when recording a decision.
     */
    @JsonProperty(value = "justificationRequiredOnApproval")
    private Boolean justificationRequiredOnApproval;

    /*
     * This specifies the behavior for the autoReview feature when an access
     * review completes.
     */
    @JsonProperty(value = "defaultDecision")
    private DefaultDecisionType defaultDecision;

    /*
     * Flag to indicate whether auto-apply capability, to automatically change
     * the target object access resource, is enabled. If not enabled, a user
     * must, after the review completes, apply the access review.
     */
    @JsonProperty(value = "autoApplyDecisionsEnabled")
    private Boolean autoApplyDecisionsEnabled;

    /*
     * Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     */
    @JsonProperty(value = "recommendationsEnabled")
    private Boolean recommendationsEnabled;

    /*
     * The duration in days for an instance.
     */
    @JsonProperty(value = "instanceDurationInDays")
    private Integer instanceDurationInDays;

    /*
     * The recurrence range type. The possible values are: endDate, noEnd,
     * numbered.
     */
    @JsonProperty(value = "recurrence.range.type")
    private AccessReviewRecurrenceRangeType typeRecurrenceRangeType;

    /*
     * The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     */
    @JsonProperty(value = "recurrence.range.numberOfOccurrences")
    private Integer numberOfOccurrences;

    /*
     * The DateTime when the review is scheduled to be start. This could be a
     * date in the future. Required on create.
     */
    @JsonProperty(value = "recurrence.range.startDate")
    private OffsetDateTime startDate;

    /*
     * The DateTime when the review is scheduled to end. Required if type is
     * endDate
     */
    @JsonProperty(value = "recurrence.range.endDate")
    private OffsetDateTime endDate;

    /*
     * The recurrence type : weekly, monthly, etc.
     */
    @JsonProperty(value = "recurrence.pattern.type")
    private AccessReviewRecurrencePatternType typeRecurrencePatternType;

    /*
     * The interval for recurrence. For a quarterly review, the interval is 3
     * for type : absoluteMonthly.
     */
    @JsonProperty(value = "recurrence.pattern.interval")
    private Integer interval;

    /**
     * Get the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @return the mailNotificationsEnabled value.
     */
    public Boolean mailNotificationsEnabled() {
        return this.mailNotificationsEnabled;
    }

    /**
     * Set the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @param mailNotificationsEnabled the mailNotificationsEnabled value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withMailNotificationsEnabled(Boolean mailNotificationsEnabled) {
        this.mailNotificationsEnabled = mailNotificationsEnabled;
        return this;
    }

    /**
     * Get the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @return the reminderNotificationsEnabled value.
     */
    public Boolean reminderNotificationsEnabled() {
        return this.reminderNotificationsEnabled;
    }

    /**
     * Set the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @param reminderNotificationsEnabled the reminderNotificationsEnabled value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withReminderNotificationsEnabled(Boolean reminderNotificationsEnabled) {
        this.reminderNotificationsEnabled = reminderNotificationsEnabled;
        return this;
    }

    /**
     * Get the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @return the defaultDecisionEnabled value.
     */
    public Boolean defaultDecisionEnabled() {
        return this.defaultDecisionEnabled;
    }

    /**
     * Set the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @param defaultDecisionEnabled the defaultDecisionEnabled value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withDefaultDecisionEnabled(Boolean defaultDecisionEnabled) {
        this.defaultDecisionEnabled = defaultDecisionEnabled;
        return this;
    }

    /**
     * Get the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @return the justificationRequiredOnApproval value.
     */
    public Boolean justificationRequiredOnApproval() {
        return this.justificationRequiredOnApproval;
    }

    /**
     * Set the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @param justificationRequiredOnApproval the justificationRequiredOnApproval value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withJustificationRequiredOnApproval(Boolean justificationRequiredOnApproval) {
        this.justificationRequiredOnApproval = justificationRequiredOnApproval;
        return this;
    }

    /**
     * Get the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @return the defaultDecision value.
     */
    public DefaultDecisionType defaultDecision() {
        return this.defaultDecision;
    }

    /**
     * Set the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @param defaultDecision the defaultDecision value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withDefaultDecision(DefaultDecisionType defaultDecision) {
        this.defaultDecision = defaultDecision;
        return this;
    }

    /**
     * Get the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @return the autoApplyDecisionsEnabled value.
     */
    public Boolean autoApplyDecisionsEnabled() {
        return this.autoApplyDecisionsEnabled;
    }

    /**
     * Set the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @param autoApplyDecisionsEnabled the autoApplyDecisionsEnabled value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled) {
        this.autoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
        return this;
    }

    /**
     * Get the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @return the recommendationsEnabled value.
     */
    public Boolean recommendationsEnabled() {
        return this.recommendationsEnabled;
    }

    /**
     * Set the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @param recommendationsEnabled the recommendationsEnabled value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withRecommendationsEnabled(Boolean recommendationsEnabled) {
        this.recommendationsEnabled = recommendationsEnabled;
        return this;
    }

    /**
     * Get the instanceDurationInDays property: The duration in days for an instance.
     *
     * @return the instanceDurationInDays value.
     */
    public Integer instanceDurationInDays() {
        return this.instanceDurationInDays;
    }

    /**
     * Set the instanceDurationInDays property: The duration in days for an instance.
     *
     * @param instanceDurationInDays the instanceDurationInDays value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withInstanceDurationInDays(Integer instanceDurationInDays) {
        this.instanceDurationInDays = instanceDurationInDays;
        return this;
    }

    /**
     * Get the typeRecurrenceRangeType property: The recurrence range type. The possible values are: endDate, noEnd,
     * numbered.
     *
     * @return the typeRecurrenceRangeType value.
     */
    public AccessReviewRecurrenceRangeType typeRecurrenceRangeType() {
        return this.typeRecurrenceRangeType;
    }

    /**
     * Set the typeRecurrenceRangeType property: The recurrence range type. The possible values are: endDate, noEnd,
     * numbered.
     *
     * @param typeRecurrenceRangeType the typeRecurrenceRangeType value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withTypeRecurrenceRangeType(
        AccessReviewRecurrenceRangeType typeRecurrenceRangeType) {
        this.typeRecurrenceRangeType = typeRecurrenceRangeType;
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.numberOfOccurrences;
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withNumberOfOccurrences(Integer numberOfOccurrences) {
        this.numberOfOccurrences = numberOfOccurrences;
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.startDate;
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @param startDate the startDate value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @param endDate the endDate value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get the typeRecurrencePatternType property: The recurrence type : weekly, monthly, etc.
     *
     * @return the typeRecurrencePatternType value.
     */
    public AccessReviewRecurrencePatternType typeRecurrencePatternType() {
        return this.typeRecurrencePatternType;
    }

    /**
     * Set the typeRecurrencePatternType property: The recurrence type : weekly, monthly, etc.
     *
     * @param typeRecurrencePatternType the typeRecurrencePatternType value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withTypeRecurrencePatternType(
        AccessReviewRecurrencePatternType typeRecurrencePatternType) {
        this.typeRecurrencePatternType = typeRecurrencePatternType;
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @param interval the interval value to set.
     * @return the AccessReviewScheduleSettings object itself.
     */
    public AccessReviewScheduleSettings withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
