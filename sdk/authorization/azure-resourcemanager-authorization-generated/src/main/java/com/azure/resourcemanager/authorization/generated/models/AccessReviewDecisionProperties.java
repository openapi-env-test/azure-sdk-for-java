// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Approval Step. */
@JsonFlatten
@Fluent
public class AccessReviewDecisionProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AccessReviewDecisionProperties.class);

    /*
     * The feature- generated recommendation shown to the reviewer.
     */
    @JsonProperty(value = "recommendation", access = JsonProperty.Access.WRITE_ONLY)
    private AccessRecommendationType recommendation;

    /*
     * The decision on the approval step. This value is initially set to
     * NotReviewed. Approvers can take action of Approve/Deny
     */
    @JsonProperty(value = "decision")
    private AccessReviewResult decision;

    /*
     * Justification provided by approvers for their action
     */
    @JsonProperty(value = "justification")
    private String justification;

    /*
     * Date Time when a decision was taken.
     */
    @JsonProperty(value = "reviewedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime reviewedDateTime;

    /*
     * The outcome of applying the decision.
     */
    @JsonProperty(value = "applyResult", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewApplyResult applyResult;

    /*
     * The date and time when the review decision was applied.
     */
    @JsonProperty(value = "appliedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime appliedDateTime;

    /*
     * The identity id
     */
    @JsonProperty(value = "appliedBy.principalId", access = JsonProperty.Access.WRITE_ONLY)
    private String principalIdAppliedByPrincipalId;

    /*
     * The identity type : user/servicePrincipal
     */
    @JsonProperty(value = "appliedBy.principalType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentityType principalTypeAppliedByPrincipalType;

    /*
     * The identity display name
     */
    @JsonProperty(value = "appliedBy.principalName", access = JsonProperty.Access.WRITE_ONLY)
    private String principalNameAppliedByPrincipalName;

    /*
     * The user principal name(if valid)
     */
    @JsonProperty(value = "appliedBy.userPrincipalName", access = JsonProperty.Access.WRITE_ONLY)
    private String userPrincipalNameAppliedByUserPrincipalName;

    /*
     * The identity id
     */
    @JsonProperty(value = "reviewedBy.principalId", access = JsonProperty.Access.WRITE_ONLY)
    private String principalIdReviewedByPrincipalId;

    /*
     * The identity type : user/servicePrincipal
     */
    @JsonProperty(value = "reviewedBy.principalType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentityType principalTypeReviewedByPrincipalType;

    /*
     * The identity display name
     */
    @JsonProperty(value = "reviewedBy.principalName", access = JsonProperty.Access.WRITE_ONLY)
    private String principalNameReviewedByPrincipalName;

    /*
     * The user principal name(if valid)
     */
    @JsonProperty(value = "reviewedBy.userPrincipalName", access = JsonProperty.Access.WRITE_ONLY)
    private String userPrincipalNameReviewedByUserPrincipalName;

    /**
     * Get the recommendation property: The feature- generated recommendation shown to the reviewer.
     *
     * @return the recommendation value.
     */
    public AccessRecommendationType recommendation() {
        return this.recommendation;
    }

    /**
     * Get the decision property: The decision on the approval step. This value is initially set to NotReviewed.
     * Approvers can take action of Approve/Deny.
     *
     * @return the decision value.
     */
    public AccessReviewResult decision() {
        return this.decision;
    }

    /**
     * Set the decision property: The decision on the approval step. This value is initially set to NotReviewed.
     * Approvers can take action of Approve/Deny.
     *
     * @param decision the decision value to set.
     * @return the AccessReviewDecisionProperties object itself.
     */
    public AccessReviewDecisionProperties withDecision(AccessReviewResult decision) {
        this.decision = decision;
        return this;
    }

    /**
     * Get the justification property: Justification provided by approvers for their action.
     *
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification provided by approvers for their action.
     *
     * @param justification the justification value to set.
     * @return the AccessReviewDecisionProperties object itself.
     */
    public AccessReviewDecisionProperties withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Get the reviewedDateTime property: Date Time when a decision was taken.
     *
     * @return the reviewedDateTime value.
     */
    public OffsetDateTime reviewedDateTime() {
        return this.reviewedDateTime;
    }

    /**
     * Get the applyResult property: The outcome of applying the decision.
     *
     * @return the applyResult value.
     */
    public AccessReviewApplyResult applyResult() {
        return this.applyResult;
    }

    /**
     * Get the appliedDateTime property: The date and time when the review decision was applied.
     *
     * @return the appliedDateTime value.
     */
    public OffsetDateTime appliedDateTime() {
        return this.appliedDateTime;
    }

    /**
     * Get the principalIdAppliedByPrincipalId property: The identity id.
     *
     * @return the principalIdAppliedByPrincipalId value.
     */
    public String principalIdAppliedByPrincipalId() {
        return this.principalIdAppliedByPrincipalId;
    }

    /**
     * Get the principalTypeAppliedByPrincipalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalTypeAppliedByPrincipalType value.
     */
    public AccessReviewActorIdentityType principalTypeAppliedByPrincipalType() {
        return this.principalTypeAppliedByPrincipalType;
    }

    /**
     * Get the principalNameAppliedByPrincipalName property: The identity display name.
     *
     * @return the principalNameAppliedByPrincipalName value.
     */
    public String principalNameAppliedByPrincipalName() {
        return this.principalNameAppliedByPrincipalName;
    }

    /**
     * Get the userPrincipalNameAppliedByUserPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalNameAppliedByUserPrincipalName value.
     */
    public String userPrincipalNameAppliedByUserPrincipalName() {
        return this.userPrincipalNameAppliedByUserPrincipalName;
    }

    /**
     * Get the principalIdReviewedByPrincipalId property: The identity id.
     *
     * @return the principalIdReviewedByPrincipalId value.
     */
    public String principalIdReviewedByPrincipalId() {
        return this.principalIdReviewedByPrincipalId;
    }

    /**
     * Get the principalTypeReviewedByPrincipalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalTypeReviewedByPrincipalType value.
     */
    public AccessReviewActorIdentityType principalTypeReviewedByPrincipalType() {
        return this.principalTypeReviewedByPrincipalType;
    }

    /**
     * Get the principalNameReviewedByPrincipalName property: The identity display name.
     *
     * @return the principalNameReviewedByPrincipalName value.
     */
    public String principalNameReviewedByPrincipalName() {
        return this.principalNameReviewedByPrincipalName;
    }

    /**
     * Get the userPrincipalNameReviewedByUserPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalNameReviewedByUserPrincipalName value.
     */
    public String userPrincipalNameReviewedByUserPrincipalName() {
        return this.userPrincipalNameReviewedByUserPrincipalName;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
