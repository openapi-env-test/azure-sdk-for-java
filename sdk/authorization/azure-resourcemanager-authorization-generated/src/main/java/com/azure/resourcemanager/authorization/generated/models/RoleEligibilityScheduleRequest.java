// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleEligibilityScheduleRequestInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of RoleEligibilityScheduleRequest. */
public interface RoleEligibilityScheduleRequest {
    /**
     * Gets the id property: The role eligibility schedule request ID.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The role eligibility schedule request name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The role eligibility schedule request type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the scope property: The role eligibility schedule request scope.
     *
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the roleDefinitionId property: The role definition ID.
     *
     * @return the roleDefinitionId value.
     */
    String roleDefinitionId();

    /**
     * Gets the principalId property: The principal ID.
     *
     * @return the principalId value.
     */
    String principalId();

    /**
     * Gets the principalType property: The principal type of the assigned principal ID.
     *
     * @return the principalType value.
     */
    PrincipalType principalType();

    /**
     * Gets the requestType property: The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign
     * etc.
     *
     * @return the requestType value.
     */
    RequestType requestType();

    /**
     * Gets the status property: The status of the role eligibility schedule request.
     *
     * @return the status value.
     */
    Status status();

    /**
     * Gets the approvalId property: The approvalId of the role eligibility schedule request.
     *
     * @return the approvalId value.
     */
    String approvalId();

    /**
     * Gets the scheduleInfo property: Schedule info of the role eligibility schedule.
     *
     * @return the scheduleInfo value.
     */
    RoleEligibilityScheduleRequestPropertiesScheduleInfo scheduleInfo();

    /**
     * Gets the targetRoleEligibilityScheduleId property: The resultant role eligibility schedule id or the role
     * eligibility schedule id being updated.
     *
     * @return the targetRoleEligibilityScheduleId value.
     */
    String targetRoleEligibilityScheduleId();

    /**
     * Gets the targetRoleEligibilityScheduleInstanceId property: The role eligibility schedule instance id being
     * updated.
     *
     * @return the targetRoleEligibilityScheduleInstanceId value.
     */
    String targetRoleEligibilityScheduleInstanceId();

    /**
     * Gets the justification property: Justification for the role eligibility.
     *
     * @return the justification value.
     */
    String justification();

    /**
     * Gets the ticketInfo property: Ticket Info of the role eligibility.
     *
     * @return the ticketInfo value.
     */
    RoleEligibilityScheduleRequestPropertiesTicketInfo ticketInfo();

    /**
     * Gets the condition property: The conditions on the role assignment. This limits the resources it can be assigned
     * to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
     * StringEqualsIgnoreCase 'foo_storage_container'.
     *
     * @return the condition value.
     */
    String condition();

    /**
     * Gets the conditionVersion property: Version of the condition. Currently accepted value is '2.0'.
     *
     * @return the conditionVersion value.
     */
    String conditionVersion();

    /**
     * Gets the createdOn property: DateTime when role eligibility schedule request was created.
     *
     * @return the createdOn value.
     */
    OffsetDateTime createdOn();

    /**
     * Gets the requestorId property: Id of the user who created this request.
     *
     * @return the requestorId value.
     */
    String requestorId();

    /**
     * Gets the expandedProperties property: Additional properties of principal, scope and role definition.
     *
     * @return the expandedProperties value.
     */
    ExpandedProperties expandedProperties();

    /**
     * Gets the inner
     * com.azure.resourcemanager.authorization.generated.fluent.models.RoleEligibilityScheduleRequestInner object.
     *
     * @return the inner object.
     */
    RoleEligibilityScheduleRequestInner innerModel();

    /** The entirety of the RoleEligibilityScheduleRequest definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }
    /** The RoleEligibilityScheduleRequest definition stages. */
    interface DefinitionStages {
        /** The first stage of the RoleEligibilityScheduleRequest definition. */
        interface Blank extends WithScope {
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify parent resource. */
        interface WithScope {
            /**
             * Specifies scope.
             *
             * @param scope The scope of the role eligibility schedule request to create. The scope can be any REST
             *     resource instance. For example, use
             *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
             *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
             *     for a resource group, and
             *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
             *     for a resource.
             * @return the next definition stage.
             */
            WithCreate withExistingScope(String scope);
        }
        /**
         * The stage of the RoleEligibilityScheduleRequest definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithRoleDefinitionId,
                DefinitionStages.WithPrincipalId,
                DefinitionStages.WithRequestType,
                DefinitionStages.WithScheduleInfo,
                DefinitionStages.WithTargetRoleEligibilityScheduleId,
                DefinitionStages.WithTargetRoleEligibilityScheduleInstanceId,
                DefinitionStages.WithJustification,
                DefinitionStages.WithTicketInfo,
                DefinitionStages.WithCondition,
                DefinitionStages.WithConditionVersion {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            RoleEligibilityScheduleRequest create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            RoleEligibilityScheduleRequest create(Context context);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify roleDefinitionId. */
        interface WithRoleDefinitionId {
            /**
             * Specifies the roleDefinitionId property: The role definition ID..
             *
             * @param roleDefinitionId The role definition ID.
             * @return the next definition stage.
             */
            WithCreate withRoleDefinitionId(String roleDefinitionId);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify principalId. */
        interface WithPrincipalId {
            /**
             * Specifies the principalId property: The principal ID..
             *
             * @param principalId The principal ID.
             * @return the next definition stage.
             */
            WithCreate withPrincipalId(String principalId);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify requestType. */
        interface WithRequestType {
            /**
             * Specifies the requestType property: The type of the role assignment schedule request. Eg: SelfActivate,
             * AdminAssign etc.
             *
             * @param requestType The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc.
             * @return the next definition stage.
             */
            WithCreate withRequestType(RequestType requestType);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify scheduleInfo. */
        interface WithScheduleInfo {
            /**
             * Specifies the scheduleInfo property: Schedule info of the role eligibility schedule.
             *
             * @param scheduleInfo Schedule info of the role eligibility schedule.
             * @return the next definition stage.
             */
            WithCreate withScheduleInfo(RoleEligibilityScheduleRequestPropertiesScheduleInfo scheduleInfo);
        }
        /**
         * The stage of the RoleEligibilityScheduleRequest definition allowing to specify
         * targetRoleEligibilityScheduleId.
         */
        interface WithTargetRoleEligibilityScheduleId {
            /**
             * Specifies the targetRoleEligibilityScheduleId property: The resultant role eligibility schedule id or the
             * role eligibility schedule id being updated.
             *
             * @param targetRoleEligibilityScheduleId The resultant role eligibility schedule id or the role eligibility
             *     schedule id being updated.
             * @return the next definition stage.
             */
            WithCreate withTargetRoleEligibilityScheduleId(String targetRoleEligibilityScheduleId);
        }
        /**
         * The stage of the RoleEligibilityScheduleRequest definition allowing to specify
         * targetRoleEligibilityScheduleInstanceId.
         */
        interface WithTargetRoleEligibilityScheduleInstanceId {
            /**
             * Specifies the targetRoleEligibilityScheduleInstanceId property: The role eligibility schedule instance id
             * being updated.
             *
             * @param targetRoleEligibilityScheduleInstanceId The role eligibility schedule instance id being updated.
             * @return the next definition stage.
             */
            WithCreate withTargetRoleEligibilityScheduleInstanceId(String targetRoleEligibilityScheduleInstanceId);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify justification. */
        interface WithJustification {
            /**
             * Specifies the justification property: Justification for the role eligibility.
             *
             * @param justification Justification for the role eligibility.
             * @return the next definition stage.
             */
            WithCreate withJustification(String justification);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify ticketInfo. */
        interface WithTicketInfo {
            /**
             * Specifies the ticketInfo property: Ticket Info of the role eligibility.
             *
             * @param ticketInfo Ticket Info of the role eligibility.
             * @return the next definition stage.
             */
            WithCreate withTicketInfo(RoleEligibilityScheduleRequestPropertiesTicketInfo ticketInfo);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify condition. */
        interface WithCondition {
            /**
             * Specifies the condition property: The conditions on the role assignment. This limits the resources it can
             * be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
             * StringEqualsIgnoreCase 'foo_storage_container'.
             *
             * @param condition The conditions on the role assignment. This limits the resources it can be assigned to.
             *     e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
             *     StringEqualsIgnoreCase 'foo_storage_container'.
             * @return the next definition stage.
             */
            WithCreate withCondition(String condition);
        }
        /** The stage of the RoleEligibilityScheduleRequest definition allowing to specify conditionVersion. */
        interface WithConditionVersion {
            /**
             * Specifies the conditionVersion property: Version of the condition. Currently accepted value is '2.0'.
             *
             * @param conditionVersion Version of the condition. Currently accepted value is '2.0'.
             * @return the next definition stage.
             */
            WithCreate withConditionVersion(String conditionVersion);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    RoleEligibilityScheduleRequest refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    RoleEligibilityScheduleRequest refresh(Context context);

    /**
     * Cancels a pending role eligibility schedule request.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel();

    /**
     * Cancels a pending role eligibility schedule request.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> cancelWithResponse(Context context);

    /**
     * Validates a new role eligibility schedule request.
     *
     * @param parameters Parameters for the role eligibility schedule request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Eligibility schedule request.
     */
    RoleEligibilityScheduleRequest validate(RoleEligibilityScheduleRequestInner parameters);

    /**
     * Validates a new role eligibility schedule request.
     *
     * @param parameters Parameters for the role eligibility schedule request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Eligibility schedule request along with {@link Response}.
     */
    Response<RoleEligibilityScheduleRequest> validateWithResponse(
        RoleEligibilityScheduleRequestInner parameters, Context context);
}
