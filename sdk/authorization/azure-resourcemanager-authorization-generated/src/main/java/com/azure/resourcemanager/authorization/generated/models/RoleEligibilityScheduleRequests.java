// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.RoleEligibilityScheduleRequestInner;

/** Resource collection API of RoleEligibilityScheduleRequests. */
public interface RoleEligibilityScheduleRequests {
    /**
     * Get the specified role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility schedule request.
     * @param roleEligibilityScheduleRequestName The name (guid) of the role eligibility schedule request to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role eligibility schedule request.
     */
    RoleEligibilityScheduleRequest get(String scope, String roleEligibilityScheduleRequestName);

    /**
     * Get the specified role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility schedule request.
     * @param roleEligibilityScheduleRequestName The name (guid) of the role eligibility schedule request to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role eligibility schedule request along with {@link Response}.
     */
    Response<RoleEligibilityScheduleRequest> getWithResponse(
        String scope, String roleEligibilityScheduleRequestName, Context context);

    /**
     * Gets role eligibility schedule requests for a scope.
     *
     * @param scope The scope of the role eligibility schedule requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role eligibility schedule requests for a scope as paginated response with {@link PagedIterable}.
     */
    PagedIterable<RoleEligibilityScheduleRequest> listForScope(String scope);

    /**
     * Gets role eligibility schedule requests for a scope.
     *
     * @param scope The scope of the role eligibility schedule requests.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedule
     *     requests at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedule
     *     requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all
     *     role eligibility schedule requests requested by the current user. Use $filter=asTarget() to return all role
     *     eligibility schedule requests created for the current user. Use $filter=asApprover() to return all role
     *     eligibility schedule requests where the current user is an approver.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role eligibility schedule requests for a scope as paginated response with {@link PagedIterable}.
     */
    PagedIterable<RoleEligibilityScheduleRequest> listForScope(String scope, String filter, Context context);

    /**
     * Cancels a pending role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility request to cancel.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(String scope, String roleEligibilityScheduleRequestName);

    /**
     * Cancels a pending role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility request to cancel.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to cancel.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> cancelWithResponse(String scope, String roleEligibilityScheduleRequestName, Context context);

    /**
     * Validates a new role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility request to validate.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to validate.
     * @param parameters Parameters for the role eligibility schedule request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Eligibility schedule request.
     */
    RoleEligibilityScheduleRequest validate(
        String scope, String roleEligibilityScheduleRequestName, RoleEligibilityScheduleRequestInner parameters);

    /**
     * Validates a new role eligibility schedule request.
     *
     * @param scope The scope of the role eligibility request to validate.
     * @param roleEligibilityScheduleRequestName The name of the role eligibility request to validate.
     * @param parameters Parameters for the role eligibility schedule request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Eligibility schedule request along with {@link Response}.
     */
    Response<RoleEligibilityScheduleRequest> validateWithResponse(
        String scope,
        String roleEligibilityScheduleRequestName,
        RoleEligibilityScheduleRequestInner parameters,
        Context context);

    /**
     * Get the specified role eligibility schedule request.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role eligibility schedule request along with {@link Response}.
     */
    RoleEligibilityScheduleRequest getById(String id);

    /**
     * Get the specified role eligibility schedule request.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role eligibility schedule request along with {@link Response}.
     */
    Response<RoleEligibilityScheduleRequest> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new RoleEligibilityScheduleRequest resource.
     *
     * @param name resource name.
     * @return the first stage of the new RoleEligibilityScheduleRequest definition.
     */
    RoleEligibilityScheduleRequest.DefinitionStages.Blank define(String name);
}
