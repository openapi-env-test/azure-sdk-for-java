// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewInstanceInner;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionInner;
import java.time.OffsetDateTime;
import java.util.List;

/** An immutable client-side representation of AccessReviewScheduleDefinition. */
public interface AccessReviewScheduleDefinition {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the displayName property: The display name for the schedule definition.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the status property: This read-only field specifies the status of an accessReview.
     *
     * @return the status value.
     */
    AccessReviewScheduleDefinitionStatus status();

    /**
     * Gets the descriptionForAdmins property: The description provided by the access review creator and visible to
     * admins.
     *
     * @return the descriptionForAdmins value.
     */
    String descriptionForAdmins();

    /**
     * Gets the descriptionForReviewers property: The description provided by the access review creator to be shown to
     * reviewers.
     *
     * @return the descriptionForReviewers value.
     */
    String descriptionForReviewers();

    /**
     * Gets the reviewers property: This is the collection of reviewers.
     *
     * @return the reviewers value.
     */
    List<AccessReviewReviewer> reviewers();

    /**
     * Gets the reviewersType property: This field specifies the type of reviewers for a review. Usually for a review,
     * reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
     * chosen dynamically. For example managers review or self review.
     *
     * @return the reviewersType value.
     */
    AccessReviewScheduleDefinitionReviewersType reviewersType();

    /**
     * Gets the instances property: This is the collection of instances returned when one does an expand on it.
     *
     * @return the instances value.
     */
    List<AccessReviewInstance> instances();

    /**
     * Gets the resourceId property: ResourceId in which this review is getting created.
     *
     * @return the resourceId value.
     */
    String resourceId();

    /**
     * Gets the roleDefinitionId property: This is used to indicate the role being reviewed.
     *
     * @return the roleDefinitionId value.
     */
    String roleDefinitionId();

    /**
     * Gets the principalTypePropertiesScopePrincipalType property: The identity type user/servicePrincipal to review.
     *
     * @return the principalTypePropertiesScopePrincipalType value.
     */
    AccessReviewScopePrincipalType principalTypePropertiesScopePrincipalType();

    /**
     * Gets the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @return the mailNotificationsEnabled value.
     */
    Boolean mailNotificationsEnabled();

    /**
     * Gets the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @return the reminderNotificationsEnabled value.
     */
    Boolean reminderNotificationsEnabled();

    /**
     * Gets the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @return the defaultDecisionEnabled value.
     */
    Boolean defaultDecisionEnabled();

    /**
     * Gets the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @return the justificationRequiredOnApproval value.
     */
    Boolean justificationRequiredOnApproval();

    /**
     * Gets the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @return the defaultDecision value.
     */
    DefaultDecisionType defaultDecision();

    /**
     * Gets the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @return the autoApplyDecisionsEnabled value.
     */
    Boolean autoApplyDecisionsEnabled();

    /**
     * Gets the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @return the recommendationsEnabled value.
     */
    Boolean recommendationsEnabled();

    /**
     * Gets the instanceDurationInDays property: The duration in days for an instance.
     *
     * @return the instanceDurationInDays value.
     */
    Integer instanceDurationInDays();

    /**
     * Gets the typePropertiesSettingsRecurrenceRangeType property: The recurrence range type. The possible values are:
     * endDate, noEnd, numbered.
     *
     * @return the typePropertiesSettingsRecurrenceRangeType value.
     */
    AccessReviewRecurrenceRangeType typePropertiesSettingsRecurrenceRangeType();

    /**
     * Gets the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @return the numberOfOccurrences value.
     */
    Integer numberOfOccurrences();

    /**
     * Gets the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @return the startDate value.
     */
    OffsetDateTime startDate();

    /**
     * Gets the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @return the endDate value.
     */
    OffsetDateTime endDate();

    /**
     * Gets the typePropertiesSettingsRecurrencePatternType property: The recurrence type : weekly, monthly, etc.
     *
     * @return the typePropertiesSettingsRecurrencePatternType value.
     */
    AccessReviewRecurrencePatternType typePropertiesSettingsRecurrencePatternType();

    /**
     * Gets the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @return the interval value.
     */
    Integer interval();

    /**
     * Gets the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    String principalId();

    /**
     * Gets the principalTypePropertiesCreatedByPrincipalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalTypePropertiesCreatedByPrincipalType value.
     */
    AccessReviewActorIdentityType principalTypePropertiesCreatedByPrincipalType();

    /**
     * Gets the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    String principalName();

    /**
     * Gets the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    String userPrincipalName();

    /**
     * Gets the inner
     * com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionInner object.
     *
     * @return the inner object.
     */
    AccessReviewScheduleDefinitionInner innerModel();

    /** The entirety of the AccessReviewScheduleDefinition definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCreate {
    }
    /** The AccessReviewScheduleDefinition definition stages. */
    interface DefinitionStages {
        /** The first stage of the AccessReviewScheduleDefinition definition. */
        interface Blank extends WithCreate {
        }
        /**
         * The stage of the AccessReviewScheduleDefinition definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithDisplayName,
                DefinitionStages.WithDescriptionForAdmins,
                DefinitionStages.WithDescriptionForReviewers,
                DefinitionStages.WithReviewers,
                DefinitionStages.WithInstances,
                DefinitionStages.WithMailNotificationsEnabled,
                DefinitionStages.WithReminderNotificationsEnabled,
                DefinitionStages.WithDefaultDecisionEnabled,
                DefinitionStages.WithJustificationRequiredOnApproval,
                DefinitionStages.WithDefaultDecision,
                DefinitionStages.WithAutoApplyDecisionsEnabled,
                DefinitionStages.WithRecommendationsEnabled,
                DefinitionStages.WithInstanceDurationInDays,
                DefinitionStages.WithTypeSettingsRecurrenceRangeType,
                DefinitionStages.WithNumberOfOccurrences,
                DefinitionStages.WithStartDate,
                DefinitionStages.WithEndDate,
                DefinitionStages.WithTypeSettingsRecurrencePatternType,
                DefinitionStages.WithInterval {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            AccessReviewScheduleDefinition create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AccessReviewScheduleDefinition create(Context context);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name for the schedule definition..
             *
             * @param displayName The display name for the schedule definition.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify descriptionForAdmins. */
        interface WithDescriptionForAdmins {
            /**
             * Specifies the descriptionForAdmins property: The description provided by the access review creator and
             * visible to admins..
             *
             * @param descriptionForAdmins The description provided by the access review creator and visible to admins.
             * @return the next definition stage.
             */
            WithCreate withDescriptionForAdmins(String descriptionForAdmins);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify descriptionForReviewers. */
        interface WithDescriptionForReviewers {
            /**
             * Specifies the descriptionForReviewers property: The description provided by the access review creator to
             * be shown to reviewers..
             *
             * @param descriptionForReviewers The description provided by the access review creator to be shown to
             *     reviewers.
             * @return the next definition stage.
             */
            WithCreate withDescriptionForReviewers(String descriptionForReviewers);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify reviewers. */
        interface WithReviewers {
            /**
             * Specifies the reviewers property: This is the collection of reviewers..
             *
             * @param reviewers This is the collection of reviewers.
             * @return the next definition stage.
             */
            WithCreate withReviewers(List<AccessReviewReviewer> reviewers);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify instances. */
        interface WithInstances {
            /**
             * Specifies the instances property: This is the collection of instances returned when one does an expand on
             * it..
             *
             * @param instances This is the collection of instances returned when one does an expand on it.
             * @return the next definition stage.
             */
            WithCreate withInstances(List<AccessReviewInstanceInner> instances);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify mailNotificationsEnabled. */
        interface WithMailNotificationsEnabled {
            /**
             * Specifies the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and
             * the review creator is enabled..
             *
             * @param mailNotificationsEnabled Flag to indicate whether sending mails to reviewers and the review
             *     creator is enabled.
             * @return the next definition stage.
             */
            WithCreate withMailNotificationsEnabled(Boolean mailNotificationsEnabled);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition definition allowing to specify reminderNotificationsEnabled.
         */
        interface WithReminderNotificationsEnabled {
            /**
             * Specifies the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to
             * reviewers are enabled..
             *
             * @param reminderNotificationsEnabled Flag to indicate whether sending reminder emails to reviewers are
             *     enabled.
             * @return the next definition stage.
             */
            WithCreate withReminderNotificationsEnabled(Boolean reminderNotificationsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify defaultDecisionEnabled. */
        interface WithDefaultDecisionEnabled {
            /**
             * Specifies the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide
             * a justification when reviewing access..
             *
             * @param defaultDecisionEnabled Flag to indicate whether reviewers are required to provide a justification
             *     when reviewing access.
             * @return the next definition stage.
             */
            WithCreate withDefaultDecisionEnabled(Boolean defaultDecisionEnabled);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition definition allowing to specify
         * justificationRequiredOnApproval.
         */
        interface WithJustificationRequiredOnApproval {
            /**
             * Specifies the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required
             * to pass justification when recording a decision..
             *
             * @param justificationRequiredOnApproval Flag to indicate whether the reviewer is required to pass
             *     justification when recording a decision.
             * @return the next definition stage.
             */
            WithCreate withJustificationRequiredOnApproval(Boolean justificationRequiredOnApproval);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify defaultDecision. */
        interface WithDefaultDecision {
            /**
             * Specifies the defaultDecision property: This specifies the behavior for the autoReview feature when an
             * access review completes..
             *
             * @param defaultDecision This specifies the behavior for the autoReview feature when an access review
             *     completes.
             * @return the next definition stage.
             */
            WithCreate withDefaultDecision(DefaultDecisionType defaultDecision);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify autoApplyDecisionsEnabled. */
        interface WithAutoApplyDecisionsEnabled {
            /**
             * Specifies the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to
             * automatically change the target object access resource, is enabled. If not enabled, a user must, after
             * the review completes, apply the access review..
             *
             * @param autoApplyDecisionsEnabled Flag to indicate whether auto-apply capability, to automatically change
             *     the target object access resource, is enabled. If not enabled, a user must, after the review
             *     completes, apply the access review.
             * @return the next definition stage.
             */
            WithCreate withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify recommendationsEnabled. */
        interface WithRecommendationsEnabled {
            /**
             * Specifies the recommendationsEnabled property: Flag to indicate whether showing recommendations to
             * reviewers is enabled..
             *
             * @param recommendationsEnabled Flag to indicate whether showing recommendations to reviewers is enabled.
             * @return the next definition stage.
             */
            WithCreate withRecommendationsEnabled(Boolean recommendationsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify instanceDurationInDays. */
        interface WithInstanceDurationInDays {
            /**
             * Specifies the instanceDurationInDays property: The duration in days for an instance..
             *
             * @param instanceDurationInDays The duration in days for an instance.
             * @return the next definition stage.
             */
            WithCreate withInstanceDurationInDays(Integer instanceDurationInDays);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition definition allowing to specify
         * typeSettingsRecurrenceRangeType.
         */
        interface WithTypeSettingsRecurrenceRangeType {
            /**
             * Specifies the typeSettingsRecurrenceRangeType property: The recurrence range type. The possible values
             * are: endDate, noEnd, numbered..
             *
             * @param typeSettingsRecurrenceRangeType The recurrence range type. The possible values are: endDate,
             *     noEnd, numbered.
             * @return the next definition stage.
             */
            WithCreate withTypeSettingsRecurrenceRangeType(
                AccessReviewRecurrenceRangeType typeSettingsRecurrenceRangeType);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify numberOfOccurrences. */
        interface WithNumberOfOccurrences {
            /**
             * Specifies the numberOfOccurrences property: The number of times to repeat the access review. Required and
             * must be positive if type is numbered..
             *
             * @param numberOfOccurrences The number of times to repeat the access review. Required and must be positive
             *     if type is numbered.
             * @return the next definition stage.
             */
            WithCreate withNumberOfOccurrences(Integer numberOfOccurrences);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify startDate. */
        interface WithStartDate {
            /**
             * Specifies the startDate property: The DateTime when the review is scheduled to be start. This could be a
             * date in the future. Required on create..
             *
             * @param startDate The DateTime when the review is scheduled to be start. This could be a date in the
             *     future. Required on create.
             * @return the next definition stage.
             */
            WithCreate withStartDate(OffsetDateTime startDate);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify endDate. */
        interface WithEndDate {
            /**
             * Specifies the endDate property: The DateTime when the review is scheduled to end. Required if type is
             * endDate.
             *
             * @param endDate The DateTime when the review is scheduled to end. Required if type is endDate.
             * @return the next definition stage.
             */
            WithCreate withEndDate(OffsetDateTime endDate);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition definition allowing to specify
         * typeSettingsRecurrencePatternType.
         */
        interface WithTypeSettingsRecurrencePatternType {
            /**
             * Specifies the typeSettingsRecurrencePatternType property: The recurrence type : weekly, monthly, etc..
             *
             * @param typeSettingsRecurrencePatternType The recurrence type : weekly, monthly, etc.
             * @return the next definition stage.
             */
            WithCreate withTypeSettingsRecurrencePatternType(
                AccessReviewRecurrencePatternType typeSettingsRecurrencePatternType);
        }
        /** The stage of the AccessReviewScheduleDefinition definition allowing to specify interval. */
        interface WithInterval {
            /**
             * Specifies the interval property: The interval for recurrence. For a quarterly review, the interval is 3
             * for type : absoluteMonthly..
             *
             * @param interval The interval for recurrence. For a quarterly review, the interval is 3 for type :
             *     absoluteMonthly.
             * @return the next definition stage.
             */
            WithCreate withInterval(Integer interval);
        }
    }
    /**
     * Begins update for the AccessReviewScheduleDefinition resource.
     *
     * @return the stage of resource update.
     */
    AccessReviewScheduleDefinition.Update update();

    /** The template for AccessReviewScheduleDefinition update. */
    interface Update
        extends UpdateStages.WithDisplayName,
            UpdateStages.WithDescriptionForAdmins,
            UpdateStages.WithDescriptionForReviewers,
            UpdateStages.WithReviewers,
            UpdateStages.WithInstances,
            UpdateStages.WithMailNotificationsEnabled,
            UpdateStages.WithReminderNotificationsEnabled,
            UpdateStages.WithDefaultDecisionEnabled,
            UpdateStages.WithJustificationRequiredOnApproval,
            UpdateStages.WithDefaultDecision,
            UpdateStages.WithAutoApplyDecisionsEnabled,
            UpdateStages.WithRecommendationsEnabled,
            UpdateStages.WithInstanceDurationInDays,
            UpdateStages.WithTypeSettingsRecurrenceRangeType,
            UpdateStages.WithNumberOfOccurrences,
            UpdateStages.WithStartDate,
            UpdateStages.WithEndDate,
            UpdateStages.WithTypeSettingsRecurrencePatternType,
            UpdateStages.WithInterval {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        AccessReviewScheduleDefinition apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AccessReviewScheduleDefinition apply(Context context);
    }
    /** The AccessReviewScheduleDefinition update stages. */
    interface UpdateStages {
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name for the schedule definition..
             *
             * @param displayName The display name for the schedule definition.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify descriptionForAdmins. */
        interface WithDescriptionForAdmins {
            /**
             * Specifies the descriptionForAdmins property: The description provided by the access review creator and
             * visible to admins..
             *
             * @param descriptionForAdmins The description provided by the access review creator and visible to admins.
             * @return the next definition stage.
             */
            Update withDescriptionForAdmins(String descriptionForAdmins);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify descriptionForReviewers. */
        interface WithDescriptionForReviewers {
            /**
             * Specifies the descriptionForReviewers property: The description provided by the access review creator to
             * be shown to reviewers..
             *
             * @param descriptionForReviewers The description provided by the access review creator to be shown to
             *     reviewers.
             * @return the next definition stage.
             */
            Update withDescriptionForReviewers(String descriptionForReviewers);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify reviewers. */
        interface WithReviewers {
            /**
             * Specifies the reviewers property: This is the collection of reviewers..
             *
             * @param reviewers This is the collection of reviewers.
             * @return the next definition stage.
             */
            Update withReviewers(List<AccessReviewReviewer> reviewers);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify instances. */
        interface WithInstances {
            /**
             * Specifies the instances property: This is the collection of instances returned when one does an expand on
             * it..
             *
             * @param instances This is the collection of instances returned when one does an expand on it.
             * @return the next definition stage.
             */
            Update withInstances(List<AccessReviewInstanceInner> instances);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify mailNotificationsEnabled. */
        interface WithMailNotificationsEnabled {
            /**
             * Specifies the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and
             * the review creator is enabled..
             *
             * @param mailNotificationsEnabled Flag to indicate whether sending mails to reviewers and the review
             *     creator is enabled.
             * @return the next definition stage.
             */
            Update withMailNotificationsEnabled(Boolean mailNotificationsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify reminderNotificationsEnabled. */
        interface WithReminderNotificationsEnabled {
            /**
             * Specifies the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to
             * reviewers are enabled..
             *
             * @param reminderNotificationsEnabled Flag to indicate whether sending reminder emails to reviewers are
             *     enabled.
             * @return the next definition stage.
             */
            Update withReminderNotificationsEnabled(Boolean reminderNotificationsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify defaultDecisionEnabled. */
        interface WithDefaultDecisionEnabled {
            /**
             * Specifies the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide
             * a justification when reviewing access..
             *
             * @param defaultDecisionEnabled Flag to indicate whether reviewers are required to provide a justification
             *     when reviewing access.
             * @return the next definition stage.
             */
            Update withDefaultDecisionEnabled(Boolean defaultDecisionEnabled);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition update allowing to specify justificationRequiredOnApproval.
         */
        interface WithJustificationRequiredOnApproval {
            /**
             * Specifies the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required
             * to pass justification when recording a decision..
             *
             * @param justificationRequiredOnApproval Flag to indicate whether the reviewer is required to pass
             *     justification when recording a decision.
             * @return the next definition stage.
             */
            Update withJustificationRequiredOnApproval(Boolean justificationRequiredOnApproval);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify defaultDecision. */
        interface WithDefaultDecision {
            /**
             * Specifies the defaultDecision property: This specifies the behavior for the autoReview feature when an
             * access review completes..
             *
             * @param defaultDecision This specifies the behavior for the autoReview feature when an access review
             *     completes.
             * @return the next definition stage.
             */
            Update withDefaultDecision(DefaultDecisionType defaultDecision);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify autoApplyDecisionsEnabled. */
        interface WithAutoApplyDecisionsEnabled {
            /**
             * Specifies the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to
             * automatically change the target object access resource, is enabled. If not enabled, a user must, after
             * the review completes, apply the access review..
             *
             * @param autoApplyDecisionsEnabled Flag to indicate whether auto-apply capability, to automatically change
             *     the target object access resource, is enabled. If not enabled, a user must, after the review
             *     completes, apply the access review.
             * @return the next definition stage.
             */
            Update withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify recommendationsEnabled. */
        interface WithRecommendationsEnabled {
            /**
             * Specifies the recommendationsEnabled property: Flag to indicate whether showing recommendations to
             * reviewers is enabled..
             *
             * @param recommendationsEnabled Flag to indicate whether showing recommendations to reviewers is enabled.
             * @return the next definition stage.
             */
            Update withRecommendationsEnabled(Boolean recommendationsEnabled);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify instanceDurationInDays. */
        interface WithInstanceDurationInDays {
            /**
             * Specifies the instanceDurationInDays property: The duration in days for an instance..
             *
             * @param instanceDurationInDays The duration in days for an instance.
             * @return the next definition stage.
             */
            Update withInstanceDurationInDays(Integer instanceDurationInDays);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition update allowing to specify typeSettingsRecurrenceRangeType.
         */
        interface WithTypeSettingsRecurrenceRangeType {
            /**
             * Specifies the typeSettingsRecurrenceRangeType property: The recurrence range type. The possible values
             * are: endDate, noEnd, numbered..
             *
             * @param typeSettingsRecurrenceRangeType The recurrence range type. The possible values are: endDate,
             *     noEnd, numbered.
             * @return the next definition stage.
             */
            Update withTypeSettingsRecurrenceRangeType(AccessReviewRecurrenceRangeType typeSettingsRecurrenceRangeType);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify numberOfOccurrences. */
        interface WithNumberOfOccurrences {
            /**
             * Specifies the numberOfOccurrences property: The number of times to repeat the access review. Required and
             * must be positive if type is numbered..
             *
             * @param numberOfOccurrences The number of times to repeat the access review. Required and must be positive
             *     if type is numbered.
             * @return the next definition stage.
             */
            Update withNumberOfOccurrences(Integer numberOfOccurrences);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify startDate. */
        interface WithStartDate {
            /**
             * Specifies the startDate property: The DateTime when the review is scheduled to be start. This could be a
             * date in the future. Required on create..
             *
             * @param startDate The DateTime when the review is scheduled to be start. This could be a date in the
             *     future. Required on create.
             * @return the next definition stage.
             */
            Update withStartDate(OffsetDateTime startDate);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify endDate. */
        interface WithEndDate {
            /**
             * Specifies the endDate property: The DateTime when the review is scheduled to end. Required if type is
             * endDate.
             *
             * @param endDate The DateTime when the review is scheduled to end. Required if type is endDate.
             * @return the next definition stage.
             */
            Update withEndDate(OffsetDateTime endDate);
        }
        /**
         * The stage of the AccessReviewScheduleDefinition update allowing to specify typeSettingsRecurrencePatternType.
         */
        interface WithTypeSettingsRecurrencePatternType {
            /**
             * Specifies the typeSettingsRecurrencePatternType property: The recurrence type : weekly, monthly, etc..
             *
             * @param typeSettingsRecurrencePatternType The recurrence type : weekly, monthly, etc.
             * @return the next definition stage.
             */
            Update withTypeSettingsRecurrencePatternType(
                AccessReviewRecurrencePatternType typeSettingsRecurrencePatternType);
        }
        /** The stage of the AccessReviewScheduleDefinition update allowing to specify interval. */
        interface WithInterval {
            /**
             * Specifies the interval property: The interval for recurrence. For a quarterly review, the interval is 3
             * for type : absoluteMonthly..
             *
             * @param interval The interval for recurrence. For a quarterly review, the interval is 3 for type :
             *     absoluteMonthly.
             * @return the next definition stage.
             */
            Update withInterval(Integer interval);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    AccessReviewScheduleDefinition refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AccessReviewScheduleDefinition refresh(Context context);

    /**
     * Stop access review definition.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Stop access review definition.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> stopWithResponse(Context context);
}
