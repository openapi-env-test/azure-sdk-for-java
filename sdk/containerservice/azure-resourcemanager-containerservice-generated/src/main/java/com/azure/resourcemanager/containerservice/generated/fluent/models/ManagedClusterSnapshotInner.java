// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.containerservice.generated.models.CreationData;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterPropertiesForSnapshot;
import com.azure.resourcemanager.containerservice.generated.models.SnapshotType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A managed cluster snapshot resource. */
@Fluent
public final class ManagedClusterSnapshotInner extends Resource {
    /*
     * Properties of a managed cluster snapshot.
     */
    @JsonProperty(value = "properties")
    private ManagedClusterSnapshotProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy
     * information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: Properties of a managed cluster snapshot.
     *
     * @return the innerProperties value.
     */
    private ManagedClusterSnapshotProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedClusterSnapshotInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedClusterSnapshotInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the creationData property: CreationData to be used to specify the source resource ID to create this snapshot.
     *
     * @return the creationData value.
     */
    public CreationData creationData() {
        return this.innerProperties() == null ? null : this.innerProperties().creationData();
    }

    /**
     * Set the creationData property: CreationData to be used to specify the source resource ID to create this snapshot.
     *
     * @param creationData the creationData value to set.
     * @return the ManagedClusterSnapshotInner object itself.
     */
    public ManagedClusterSnapshotInner withCreationData(CreationData creationData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedClusterSnapshotProperties();
        }
        this.innerProperties().withCreationData(creationData);
        return this;
    }

    /**
     * Get the snapshotType property: The type of a snapshot. The default is NodePool.
     *
     * @return the snapshotType value.
     */
    public SnapshotType snapshotType() {
        return this.innerProperties() == null ? null : this.innerProperties().snapshotType();
    }

    /**
     * Set the snapshotType property: The type of a snapshot. The default is NodePool.
     *
     * @param snapshotType the snapshotType value to set.
     * @return the ManagedClusterSnapshotInner object itself.
     */
    public ManagedClusterSnapshotInner withSnapshotType(SnapshotType snapshotType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedClusterSnapshotProperties();
        }
        this.innerProperties().withSnapshotType(snapshotType);
        return this;
    }

    /**
     * Get the managedClusterPropertiesReadOnly property: What the properties will be showed when getting managed
     * cluster snapshot. Those properties are read-only.
     *
     * @return the managedClusterPropertiesReadOnly value.
     */
    public ManagedClusterPropertiesForSnapshot managedClusterPropertiesReadOnly() {
        return this.innerProperties() == null ? null : this.innerProperties().managedClusterPropertiesReadOnly();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
