// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Additional context fields for amazon elastic container registry Vulnerability assessment. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "assessedResourceType")
@JsonTypeName("AmazonElasticContainerRegistryVulnerability")
@Immutable
public final class AmazonElasticContainerRegistryVulnerabilityProperties extends AdditionalData {
    /*
     * List of CVEs
     */
    @JsonProperty(value = "cve", access = JsonProperty.Access.WRITE_ONLY)
    private List<Cve> cve;

    /*
     * The tags property.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    private List<Object> tags;

    /*
     * The sub assessment metadata
     */
    @JsonProperty(value = "Metadata", access = JsonProperty.Access.WRITE_ONLY)
    private Object metadata;

    /*
     * Name of the package the vulnerabilities relates too
     */
    @JsonProperty(value = "PackageName", access = JsonProperty.Access.WRITE_ONLY)
    private String packageName;

    /*
     * The version installed
     */
    @JsonProperty(value = "InstalledVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String installedVersion;

    /*
     * Name of the registry which the vulnerable image belongs to
     */
    @JsonProperty(value = "RegistryHost", access = JsonProperty.Access.WRITE_ONLY)
    private String registryHost;

    /*
     * Name of the repository which the vulnerable image belongs to
     */
    @JsonProperty(value = "repositoryName", access = JsonProperty.Access.WRITE_ONLY)
    private String repositoryName;

    /*
     * Digest of the vulnerable image
     */
    @JsonProperty(value = "imageDigest", access = JsonProperty.Access.WRITE_ONLY)
    private String imageDigest;

    /*
     * The vulnerabilities scanner
     */
    @JsonProperty(value = "Scanner", access = JsonProperty.Access.WRITE_ONLY)
    private Object scanner;

    /**
     * Get the cve property: List of CVEs.
     *
     * @return the cve value.
     */
    public List<Cve> cve() {
        return this.cve;
    }

    /**
     * Get the tags property: The tags property.
     *
     * @return the tags value.
     */
    public List<Object> tags() {
        return this.tags;
    }

    /**
     * Get the metadata property: The sub assessment metadata.
     *
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Get the packageName property: Name of the package the vulnerabilities relates too.
     *
     * @return the packageName value.
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * Get the installedVersion property: The version installed.
     *
     * @return the installedVersion value.
     */
    public String installedVersion() {
        return this.installedVersion;
    }

    /**
     * Get the registryHost property: Name of the registry which the vulnerable image belongs to.
     *
     * @return the registryHost value.
     */
    public String registryHost() {
        return this.registryHost;
    }

    /**
     * Get the repositoryName property: Name of the repository which the vulnerable image belongs to.
     *
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Get the imageDigest property: Digest of the vulnerable image.
     *
     * @return the imageDigest value.
     */
    public String imageDigest() {
        return this.imageDigest;
    }

    /**
     * Get the scanner property: The vulnerabilities scanner.
     *
     * @return the scanner value.
     */
    public Object scanner() {
        return this.scanner;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (cve() != null) {
            cve().forEach(e -> e.validate());
        }
    }
}
