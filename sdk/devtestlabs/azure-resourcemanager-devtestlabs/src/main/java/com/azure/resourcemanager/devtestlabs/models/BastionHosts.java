// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of BastionHosts. */
public interface BastionHosts {
    /**
     * List bastionhosts in a given virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains a list of bastionHosts and their properties as paginated response with {@link PagedIterable}.
     */
    PagedIterable<BastionHost> list(String resourceGroupName, String labName, String virtualNetworkName);

    /**
     * List bastionhosts in a given virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param filter The filter to apply to the operation. Example: '$filter=contains(name,'myName')'.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param orderby The ordering expression for the results, using OData notation. Example: '$orderby=name desc'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains a list of bastionHosts and their properties as paginated response with {@link PagedIterable}.
     */
    PagedIterable<BastionHost> list(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String filter,
        Integer top,
        String orderby,
        Context context);

    /**
     * Get bastionhost.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost.
     */
    BastionHost get(String resourceGroupName, String labName, String virtualNetworkName, String name);

    /**
     * Get bastionhost.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost along with {@link Response}.
     */
    Response<BastionHost> getWithResponse(
        String resourceGroupName, String labName, String virtualNetworkName, String name, Context context);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String labName, String virtualNetworkName, String name);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String labName, String virtualNetworkName, String name, Context context);

    /**
     * Get bastionhost.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost along with {@link Response}.
     */
    BastionHost getById(String id);

    /**
     * Get bastionhost.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost along with {@link Response}.
     */
    Response<BastionHost> getByIdWithResponse(String id, Context context);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new BastionHost resource.
     *
     * @param name resource name.
     * @return the first stage of the new BastionHost definition.
     */
    BastionHost.DefinitionStages.Blank define(String name);
}
