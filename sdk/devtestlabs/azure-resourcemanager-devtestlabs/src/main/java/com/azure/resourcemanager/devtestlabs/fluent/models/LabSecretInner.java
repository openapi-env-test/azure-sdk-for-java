// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A shared secret in a lab. */
@Fluent
public final class LabSecretInner extends Resource {
    /*
     * The properties of the resource.
     */
    @JsonProperty(value = "properties", required = true)
    private LabSecretProperties innerProperties = new LabSecretProperties();

    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: The properties of the resource.
     *
     * @return the innerProperties value.
     */
    private LabSecretProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public LabSecretInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabSecretInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the value property: The value of the secret for secret creation.
     *
     * @return the value value.
     */
    public String value() {
        return this.innerProperties() == null ? null : this.innerProperties().value();
    }

    /**
     * Set the value property: The value of the secret for secret creation.
     *
     * @param value the value value to set.
     * @return the LabSecretInner object itself.
     */
    public LabSecretInner withValue(String value) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabSecretProperties();
        }
        this.innerProperties().withValue(value);
        return this;
    }

    /**
     * Get the keyVaultEntry property: The name of the entry in the lab KeyVault.
     *
     * @return the keyVaultEntry value.
     */
    public String keyVaultEntry() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultEntry();
    }

    /**
     * Get the enabledForArtifacts property: Is the secret enabled for use with artifacts?.
     *
     * @return the enabledForArtifacts value.
     */
    public Boolean enabledForArtifacts() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForArtifacts();
    }

    /**
     * Set the enabledForArtifacts property: Is the secret enabled for use with artifacts?.
     *
     * @param enabledForArtifacts the enabledForArtifacts value to set.
     * @return the LabSecretInner object itself.
     */
    public LabSecretInner withEnabledForArtifacts(Boolean enabledForArtifacts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabSecretProperties();
        }
        this.innerProperties().withEnabledForArtifacts(enabledForArtifacts);
        return this;
    }

    /**
     * Get the enabledForVmCreation property: Is the secret enabled for use with creation of VMs?.
     *
     * @return the enabledForVmCreation value.
     */
    public Boolean enabledForVmCreation() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForVmCreation();
    }

    /**
     * Set the enabledForVmCreation property: Is the secret enabled for use with creation of VMs?.
     *
     * @param enabledForVmCreation the enabledForVmCreation value to set.
     * @return the LabSecretInner object itself.
     */
    public LabSecretInner withEnabledForVmCreation(Boolean enabledForVmCreation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabSecretProperties();
        }
        this.innerProperties().withEnabledForVmCreation(enabledForVmCreation);
        return this;
    }

    /**
     * Get the enabledForArmEnvironments property: Is the secret enabled for use with ARM environments?.
     *
     * @return the enabledForArmEnvironments value.
     */
    public Boolean enabledForArmEnvironments() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForArmEnvironments();
    }

    /**
     * Set the enabledForArmEnvironments property: Is the secret enabled for use with ARM environments?.
     *
     * @param enabledForArmEnvironments the enabledForArmEnvironments value to set.
     * @return the LabSecretInner object itself.
     */
    public LabSecretInner withEnabledForArmEnvironments(Boolean enabledForArmEnvironments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabSecretProperties();
        }
        this.innerProperties().withEnabledForArmEnvironments(enabledForArmEnvironments);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueIdentifier();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model LabSecretInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LabSecretInner.class);
}
