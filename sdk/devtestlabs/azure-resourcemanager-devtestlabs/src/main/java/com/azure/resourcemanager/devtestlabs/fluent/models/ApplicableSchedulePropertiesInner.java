// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Properties of a schedules applicable to a virtual machine. */
@Fluent
public final class ApplicableSchedulePropertiesInner {
    /*
     * The auto-shutdown schedule, if one has been set at the lab or lab
     * resource level.
     */
    @JsonProperty(value = "labVmsShutdown")
    private ScheduleInner innerLabVmsShutdown;

    /*
     * The auto-startup schedule, if one has been set at the lab or lab
     * resource level.
     */
    @JsonProperty(value = "labVmsStartup")
    private ScheduleInner innerLabVmsStartup;

    /**
     * Get the innerLabVmsShutdown property: The auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @return the innerLabVmsShutdown value.
     */
    private ScheduleInner innerLabVmsShutdown() {
        return this.innerLabVmsShutdown;
    }

    /**
     * Get the innerLabVmsStartup property: The auto-startup schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @return the innerLabVmsStartup value.
     */
    private ScheduleInner innerLabVmsStartup() {
        return this.innerLabVmsStartup;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().systemData();
    }

    /**
     * Get the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @return the status value.
     */
    public EnableStatus status() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().status();
    }

    /**
     * Set the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @param status the status value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withStatus(EnableStatus status) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withStatus(status);
        return this;
    }

    /**
     * Get the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @return the taskType value.
     */
    public String taskType() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().taskType();
    }

    /**
     * Set the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param taskType the taskType value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTaskType(String taskType) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTaskType(taskType);
        return this;
    }

    /**
     * Get the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @return the timeZoneId value.
     */
    public String timeZoneId() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().timeZoneId();
    }

    /**
     * Set the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @param timeZoneId the timeZoneId value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeZoneId(String timeZoneId) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTimeZoneId(timeZoneId);
        return this;
    }

    /**
     * Get the createdDate property: The creation date of the schedule.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().createdDate();
    }

    /**
     * Get the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().targetResourceId();
    }

    /**
     * Set the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @param targetResourceId the targetResourceId value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTargetResourceId(String targetResourceId) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTargetResourceId(targetResourceId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().uniqueIdentifier();
    }

    /**
     * Get the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @return the weekdays value.
     */
    public List<String> weekdays() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().weekdays();
    }

    /**
     * Set the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @param weekdays the weekdays value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withWeekdays(List<String> weekdays) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withWeekdays(weekdays);
        return this;
    }

    /**
     * Get the time property: The time of the day the schedule will occur.
     *
     * @return the time value.
     */
    public String time() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().time();
    }

    /**
     * Set the time property: The time of the day the schedule will occur.
     *
     * @param time the time value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTime(String time) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTime(time);
        return this;
    }

    /**
     * Get the timeDailyRecurrenceTime property: The time of day the schedule will occur.
     *
     * @return the timeDailyRecurrenceTime value.
     */
    public String timeDailyRecurrenceTime() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().timeDailyRecurrenceTime();
    }

    /**
     * Set the timeDailyRecurrenceTime property: The time of day the schedule will occur.
     *
     * @param timeDailyRecurrenceTime the timeDailyRecurrenceTime value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeDailyRecurrenceTime(String timeDailyRecurrenceTime) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTimeDailyRecurrenceTime(timeDailyRecurrenceTime);
        return this;
    }

    /**
     * Get the minute property: Minutes of the hour the schedule will run.
     *
     * @return the minute value.
     */
    public Integer minute() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().minute();
    }

    /**
     * Set the minute property: Minutes of the hour the schedule will run.
     *
     * @param minute the minute value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withMinute(Integer minute) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withMinute(minute);
        return this;
    }

    /**
     * Get the statusNotificationSettingsStatus property: If notifications are enabled for this schedule (i.e. Enabled,
     * Disabled).
     *
     * @return the statusNotificationSettingsStatus value.
     */
    public EnableStatus statusNotificationSettingsStatus() {
        return this.innerLabVmsShutdown() == null
            ? null
            : this.innerLabVmsShutdown().statusNotificationSettingsStatus();
    }

    /**
     * Set the statusNotificationSettingsStatus property: If notifications are enabled for this schedule (i.e. Enabled,
     * Disabled).
     *
     * @param statusNotificationSettingsStatus the statusNotificationSettingsStatus value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withStatusNotificationSettingsStatus(
        EnableStatus statusNotificationSettingsStatus) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withStatusNotificationSettingsStatus(statusNotificationSettingsStatus);
        return this;
    }

    /**
     * Get the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @return the timeInMinutes value.
     */
    public Integer timeInMinutes() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().timeInMinutes();
    }

    /**
     * Set the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @param timeInMinutes the timeInMinutes value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeInMinutes(Integer timeInMinutes) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTimeInMinutes(timeInMinutes);
        return this;
    }

    /**
     * Get the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @return the webhookUrl value.
     */
    public String webhookUrl() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().webhookUrl();
    }

    /**
     * Set the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @param webhookUrl the webhookUrl value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withWebhookUrl(String webhookUrl) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withWebhookUrl(webhookUrl);
        return this;
    }

    /**
     * Get the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @return the emailRecipient value.
     */
    public String emailRecipient() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().emailRecipient();
    }

    /**
     * Set the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @param emailRecipient the emailRecipient value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withEmailRecipient(String emailRecipient) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withEmailRecipient(emailRecipient);
        return this;
    }

    /**
     * Get the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @return the notificationLocale value.
     */
    public String notificationLocale() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().notificationLocale();
    }

    /**
     * Set the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @param notificationLocale the notificationLocale value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withNotificationLocale(String notificationLocale) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withNotificationLocale(notificationLocale);
        return this;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     *
     * @return the id value.
     */
    public String id() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().id();
    }

    /**
     * Get the name property: The name of the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().name();
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     *
     * @return the type value.
     */
    public String type() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().type();
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().tags();
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTags(Map<String, String> tags) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withTags(tags);
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    public String location() {
        return this.innerLabVmsShutdown() == null ? null : this.innerLabVmsShutdown().location();
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     *
     * @param location the location value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withLocation(String location) {
        if (this.innerLabVmsShutdown() == null) {
            this.innerLabVmsShutdown = new ScheduleInner();
        }
        this.innerLabVmsShutdown().withLocation(location);
        return this;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemDataLabVmsStartupSystemData() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().systemData();
    }

    /**
     * Get the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @return the status value.
     */
    public EnableStatus statusLabVmsStartupStatus() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().status();
    }

    /**
     * Set the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @param status the status value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withStatusLabVmsStartupStatus(EnableStatus status) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withStatus(status);
        return this;
    }

    /**
     * Get the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @return the taskType value.
     */
    public String taskTypeLabVmsStartupTaskType() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().taskType();
    }

    /**
     * Set the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param taskType the taskType value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTaskTypeLabVmsStartupTaskType(String taskType) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTaskType(taskType);
        return this;
    }

    /**
     * Get the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @return the timeZoneId value.
     */
    public String timeZoneIdLabVmsStartupTimeZoneId() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().timeZoneId();
    }

    /**
     * Set the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @param timeZoneId the timeZoneId value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeZoneIdLabVmsStartupTimeZoneId(String timeZoneId) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTimeZoneId(timeZoneId);
        return this;
    }

    /**
     * Get the createdDate property: The creation date of the schedule.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime createdDateLabVmsStartupCreatedDate() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().createdDate();
    }

    /**
     * Get the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @return the targetResourceId value.
     */
    public String targetResourceIdLabVmsStartupTargetResourceId() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().targetResourceId();
    }

    /**
     * Set the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @param targetResourceId the targetResourceId value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTargetResourceIdLabVmsStartupTargetResourceId(
        String targetResourceId) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTargetResourceId(targetResourceId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningStateLabVmsStartupProvisioningState() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifierLabVmsStartupUniqueIdentifier() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().uniqueIdentifier();
    }

    /**
     * Get the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @return the weekdays value.
     */
    public List<String> weekdaysLabVmsStartupWeekdays() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().weekdays();
    }

    /**
     * Set the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @param weekdays the weekdays value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withWeekdaysLabVmsStartupWeekdays(List<String> weekdays) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withWeekdays(weekdays);
        return this;
    }

    /**
     * Get the time property: The time of the day the schedule will occur.
     *
     * @return the time value.
     */
    public String timeLabVmsStartupTime() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().time();
    }

    /**
     * Set the time property: The time of the day the schedule will occur.
     *
     * @param time the time value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeLabVmsStartupTime(String time) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTime(time);
        return this;
    }

    /**
     * Get the timeDailyRecurrenceTime property: The time of day the schedule will occur.
     *
     * @return the timeDailyRecurrenceTime value.
     */
    public String timeDailyRecurrenceTimeLabVmsStartupTimeDailyRecurrenceTime() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().timeDailyRecurrenceTime();
    }

    /**
     * Set the timeDailyRecurrenceTime property: The time of day the schedule will occur.
     *
     * @param timeDailyRecurrenceTime the timeDailyRecurrenceTime value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeDailyRecurrenceTimeLabVmsStartupTimeDailyRecurrenceTime(
        String timeDailyRecurrenceTime) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTimeDailyRecurrenceTime(timeDailyRecurrenceTime);
        return this;
    }

    /**
     * Get the minute property: Minutes of the hour the schedule will run.
     *
     * @return the minute value.
     */
    public Integer minuteLabVmsStartupMinute() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().minute();
    }

    /**
     * Set the minute property: Minutes of the hour the schedule will run.
     *
     * @param minute the minute value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withMinuteLabVmsStartupMinute(Integer minute) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withMinute(minute);
        return this;
    }

    /**
     * Get the statusNotificationSettingsStatus property: If notifications are enabled for this schedule (i.e. Enabled,
     * Disabled).
     *
     * @return the statusNotificationSettingsStatus value.
     */
    public EnableStatus statusNotificationSettingsStatusLabVmsStartupStatusNotificationSettingsStatus() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().statusNotificationSettingsStatus();
    }

    /**
     * Set the statusNotificationSettingsStatus property: If notifications are enabled for this schedule (i.e. Enabled,
     * Disabled).
     *
     * @param statusNotificationSettingsStatus the statusNotificationSettingsStatus value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner
        withStatusNotificationSettingsStatusLabVmsStartupStatusNotificationSettingsStatus(
            EnableStatus statusNotificationSettingsStatus) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withStatusNotificationSettingsStatus(statusNotificationSettingsStatus);
        return this;
    }

    /**
     * Get the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @return the timeInMinutes value.
     */
    public Integer timeInMinutesLabVmsStartupTimeInMinutes() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().timeInMinutes();
    }

    /**
     * Set the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @param timeInMinutes the timeInMinutes value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTimeInMinutesLabVmsStartupTimeInMinutes(Integer timeInMinutes) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTimeInMinutes(timeInMinutes);
        return this;
    }

    /**
     * Get the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @return the webhookUrl value.
     */
    public String webhookUrlLabVmsStartupWebhookUrl() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().webhookUrl();
    }

    /**
     * Set the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @param webhookUrl the webhookUrl value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withWebhookUrlLabVmsStartupWebhookUrl(String webhookUrl) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withWebhookUrl(webhookUrl);
        return this;
    }

    /**
     * Get the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @return the emailRecipient value.
     */
    public String emailRecipientLabVmsStartupEmailRecipient() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().emailRecipient();
    }

    /**
     * Set the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @param emailRecipient the emailRecipient value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withEmailRecipientLabVmsStartupEmailRecipient(String emailRecipient) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withEmailRecipient(emailRecipient);
        return this;
    }

    /**
     * Get the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @return the notificationLocale value.
     */
    public String notificationLocaleLabVmsStartupNotificationLocale() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().notificationLocale();
    }

    /**
     * Set the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @param notificationLocale the notificationLocale value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withNotificationLocaleLabVmsStartupNotificationLocale(
        String notificationLocale) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withNotificationLocale(notificationLocale);
        return this;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     *
     * @return the id value.
     */
    public String idLabVmsStartupId() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().id();
    }

    /**
     * Get the name property: The name of the resource.
     *
     * @return the name value.
     */
    public String nameLabVmsStartupName() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().name();
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     *
     * @return the type value.
     */
    public String typeLabVmsStartupType() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().type();
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tagsLabVmsStartupTags() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().tags();
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withTagsLabVmsStartupTags(Map<String, String> tags) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withTags(tags);
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    public String locationLabVmsStartupLocation() {
        return this.innerLabVmsStartup() == null ? null : this.innerLabVmsStartup().location();
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     *
     * @param location the location value to set.
     * @return the ApplicableSchedulePropertiesInner object itself.
     */
    public ApplicableSchedulePropertiesInner withLocationLabVmsStartupLocation(String location) {
        if (this.innerLabVmsStartup() == null) {
            this.innerLabVmsStartup = new ScheduleInner();
        }
        this.innerLabVmsStartup().withLocation(location);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerLabVmsShutdown() != null) {
            innerLabVmsShutdown().validate();
        }
        if (innerLabVmsStartup() != null) {
            innerLabVmsStartup().validate();
        }
    }
}
