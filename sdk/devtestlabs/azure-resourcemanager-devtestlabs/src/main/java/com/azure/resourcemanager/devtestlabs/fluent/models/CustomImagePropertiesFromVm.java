// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties for creating a custom image from a virtual machine. */
@Fluent
public final class CustomImagePropertiesFromVm {
    /*
     * The source vm identifier.
     */
    @JsonProperty(value = "sourceVmId")
    private String sourceVmId;

    /*
     * The Windows OS information of the VM.
     */
    @JsonProperty(value = "windowsOsInfo")
    private WindowsOsInfo innerWindowsOsInfo;

    /*
     * The Linux OS information of the VM.
     */
    @JsonProperty(value = "linuxOsInfo")
    private LinuxOsInfo innerLinuxOsInfo;

    /**
     * Get the sourceVmId property: The source vm identifier.
     *
     * @return the sourceVmId value.
     */
    public String sourceVmId() {
        return this.sourceVmId;
    }

    /**
     * Set the sourceVmId property: The source vm identifier.
     *
     * @param sourceVmId the sourceVmId value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withSourceVmId(String sourceVmId) {
        this.sourceVmId = sourceVmId;
        return this;
    }

    /**
     * Get the innerWindowsOsInfo property: The Windows OS information of the VM.
     *
     * @return the innerWindowsOsInfo value.
     */
    private WindowsOsInfo innerWindowsOsInfo() {
        return this.innerWindowsOsInfo;
    }

    /**
     * Get the innerLinuxOsInfo property: The Linux OS information of the VM.
     *
     * @return the innerLinuxOsInfo value.
     */
    private LinuxOsInfo innerLinuxOsInfo() {
        return this.innerLinuxOsInfo;
    }

    /**
     * Get the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     *
     * @return the windowsOsState value.
     */
    public WindowsOsState windowsOsState() {
        return this.innerWindowsOsInfo() == null ? null : this.innerWindowsOsInfo().windowsOsState();
    }

    /**
     * Set the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     *
     * @param windowsOsState the windowsOsState value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withWindowsOsState(WindowsOsState windowsOsState) {
        if (this.innerWindowsOsInfo() == null) {
            this.innerWindowsOsInfo = new WindowsOsInfo();
        }
        this.innerWindowsOsInfo().withWindowsOsState(windowsOsState);
        return this;
    }

    /**
     * Get the linuxOsState property: The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested,
     * DeprovisionApplied).
     *
     * @return the linuxOsState value.
     */
    public LinuxOsState linuxOsState() {
        return this.innerLinuxOsInfo() == null ? null : this.innerLinuxOsInfo().linuxOsState();
    }

    /**
     * Set the linuxOsState property: The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested,
     * DeprovisionApplied).
     *
     * @param linuxOsState the linuxOsState value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withLinuxOsState(LinuxOsState linuxOsState) {
        if (this.innerLinuxOsInfo() == null) {
            this.innerLinuxOsInfo = new LinuxOsInfo();
        }
        this.innerLinuxOsInfo().withLinuxOsState(linuxOsState);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerWindowsOsInfo() != null) {
            innerWindowsOsInfo().validate();
        }
        if (innerLinuxOsInfo() != null) {
            innerLinuxOsInfo().validate();
        }
    }
}
