// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devtestlabs.fluent.BastionHostsClient;
import com.azure.resourcemanager.devtestlabs.fluent.models.BastionHostInner;
import com.azure.resourcemanager.devtestlabs.models.BastionHost;
import com.azure.resourcemanager.devtestlabs.models.BastionHosts;

public final class BastionHostsImpl implements BastionHosts {
    private static final ClientLogger LOGGER = new ClientLogger(BastionHostsImpl.class);

    private final BastionHostsClient innerClient;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public BastionHostsImpl(
        BastionHostsClient innerClient, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BastionHost> list(String resourceGroupName, String labName, String virtualNetworkName) {
        PagedIterable<BastionHostInner> inner =
            this.serviceClient().list(resourceGroupName, labName, virtualNetworkName);
        return Utils.mapPage(inner, inner1 -> new BastionHostImpl(inner1, this.manager()));
    }

    public PagedIterable<BastionHost> list(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String filter,
        Integer top,
        String orderby,
        Context context) {
        PagedIterable<BastionHostInner> inner =
            this.serviceClient().list(resourceGroupName, labName, virtualNetworkName, filter, top, orderby, context);
        return Utils.mapPage(inner, inner1 -> new BastionHostImpl(inner1, this.manager()));
    }

    public BastionHost get(String resourceGroupName, String labName, String virtualNetworkName, String name) {
        BastionHostInner inner = this.serviceClient().get(resourceGroupName, labName, virtualNetworkName, name);
        if (inner != null) {
            return new BastionHostImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BastionHost> getWithResponse(
        String resourceGroupName, String labName, String virtualNetworkName, String name, Context context) {
        Response<BastionHostInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, labName, virtualNetworkName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BastionHostImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String labName, String virtualNetworkName, String name) {
        this.serviceClient().delete(resourceGroupName, labName, virtualNetworkName, name);
    }

    public void delete(
        String resourceGroupName, String labName, String virtualNetworkName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, labName, virtualNetworkName, name, context);
    }

    public BastionHost getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualnetworks");
        if (virtualNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualnetworks'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "bastionhosts");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'bastionhosts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, labName, virtualNetworkName, name, Context.NONE).getValue();
    }

    public Response<BastionHost> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualnetworks");
        if (virtualNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualnetworks'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "bastionhosts");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'bastionhosts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, labName, virtualNetworkName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualnetworks");
        if (virtualNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualnetworks'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "bastionhosts");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'bastionhosts'.", id)));
        }
        this.delete(resourceGroupName, labName, virtualNetworkName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String virtualNetworkName = Utils.getValueFromIdByName(id, "virtualnetworks");
        if (virtualNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualnetworks'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "bastionhosts");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'bastionhosts'.", id)));
        }
        this.delete(resourceGroupName, labName, virtualNetworkName, name, context);
    }

    private BastionHostsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    public BastionHostImpl define(String name) {
        return new BastionHostImpl(name, this.manager());
    }
}
