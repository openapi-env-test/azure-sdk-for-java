// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.SharedGalleryInner;
import com.azure.resourcemanager.devtestlabs.models.EnableState;
import com.azure.resourcemanager.devtestlabs.models.SharedGallery;
import com.azure.resourcemanager.devtestlabs.models.SharedGalleryFragment;
import java.util.Collections;
import java.util.Map;

public final class SharedGalleryImpl implements SharedGallery, SharedGallery.Definition, SharedGallery.Update {
    private SharedGalleryInner innerObject;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String galleryId() {
        return this.innerModel().galleryId();
    }

    public EnableState allowAllImages() {
        return this.innerModel().allowAllImages();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SharedGalleryInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labName;

    private String name;

    private SharedGalleryFragment updateSharedGallery;

    public SharedGalleryImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    public SharedGallery create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .createOrUpdateWithResponse(resourceGroupName, labName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SharedGallery create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .createOrUpdateWithResponse(resourceGroupName, labName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    SharedGalleryImpl(String name, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = new SharedGalleryInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public SharedGalleryImpl update() {
        this.updateSharedGallery = new SharedGalleryFragment();
        return this;
    }

    public SharedGallery apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .updateWithResponse(resourceGroupName, labName, name, updateSharedGallery, Context.NONE)
                .getValue();
        return this;
    }

    public SharedGallery apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .updateWithResponse(resourceGroupName, labName, name, updateSharedGallery, context)
                .getValue();
        return this;
    }

    SharedGalleryImpl(
        SharedGalleryInner innerObject, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "sharedgalleries");
    }

    public SharedGallery refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .getWithResponse(resourceGroupName, labName, name, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public SharedGallery refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedGalleries()
                .getWithResponse(resourceGroupName, labName, name, localExpand, context)
                .getValue();
        return this;
    }

    public SharedGalleryImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SharedGalleryImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SharedGalleryImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateSharedGallery.withTags(tags);
            return this;
        }
    }

    public SharedGalleryImpl withGalleryId(String galleryId) {
        this.innerModel().withGalleryId(galleryId);
        return this;
    }

    public SharedGalleryImpl withAllowAllImages(EnableState allowAllImages) {
        this.innerModel().withAllowAllImages(allowAllImages);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
