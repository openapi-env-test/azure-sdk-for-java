// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.devtestlabs.fluent.models.BastionHostInner;
import com.azure.resourcemanager.devtestlabs.models.BastionHostFragment;

/** An instance of this class provides access to all the operations defined in BastionHostsClient. */
public interface BastionHostsClient {
    /**
     * List bastionhosts in a given virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains a list of bastionHosts and their properties as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BastionHostInner> list(String resourceGroupName, String labName, String virtualNetworkName);

    /**
     * List bastionhosts in a given virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param filter The filter to apply to the operation. Example: '$filter=contains(name,'myName')'.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param orderby The ordering expression for the results, using OData notation. Example: '$orderby=name desc'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains a list of bastionHosts and their properties as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BastionHostInner> list(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String filter,
        Integer top,
        String orderby,
        Context context);

    /**
     * Get bastionhost.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BastionHostInner get(String resourceGroupName, String labName, String virtualNetworkName, String name);

    /**
     * Get bastionhost.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bastionhost along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BastionHostInner> getWithResponse(
        String resourceGroupName, String labName, String virtualNetworkName, String name, Context context);

    /**
     * Create or replace an existing bastionHost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Profile of a Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of profile of a Bastion Host.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BastionHostInner>, BastionHostInner> beginCreateOrUpdate(
        String resourceGroupName, String labName, String virtualNetworkName, String name, BastionHostInner bastionHost);

    /**
     * Create or replace an existing bastionHost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Profile of a Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of profile of a Bastion Host.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BastionHostInner>, BastionHostInner> beginCreateOrUpdate(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String name,
        BastionHostInner bastionHost,
        Context context);

    /**
     * Create or replace an existing bastionHost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Profile of a Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return profile of a Bastion Host.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BastionHostInner createOrUpdate(
        String resourceGroupName, String labName, String virtualNetworkName, String name, BastionHostInner bastionHost);

    /**
     * Create or replace an existing bastionHost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Profile of a Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return profile of a Bastion Host.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BastionHostInner createOrUpdate(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String name,
        BastionHostInner bastionHost,
        Context context);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String labName, String virtualNetworkName, String name);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String labName, String virtualNetworkName, String name, Context context);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String labName, String virtualNetworkName, String name);

    /**
     * Delete bastionhost. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String labName, String virtualNetworkName, String name, Context context);

    /**
     * Allows modifying tags of bastionhosts. All other properties will be ignored.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Allows modifying tags of bastionhosts. All other properties will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return profile of a Bastion Host.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BastionHostInner update(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String name,
        BastionHostFragment bastionHost);

    /**
     * Allows modifying tags of bastionhosts. All other properties will be ignored.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualNetworkName The name of the virtual network.
     * @param name The name of the bastionhost.
     * @param bastionHost Allows modifying tags of bastionhosts. All other properties will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return profile of a Bastion Host along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BastionHostInner> updateWithResponse(
        String resourceGroupName,
        String labName,
        String virtualNetworkName,
        String name,
        BastionHostFragment bastionHost,
        Context context);
}
