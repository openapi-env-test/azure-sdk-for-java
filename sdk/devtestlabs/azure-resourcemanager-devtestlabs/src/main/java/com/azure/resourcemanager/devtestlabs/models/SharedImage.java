// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.SharedImageInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of SharedImage. */
public interface SharedImage {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the definitionName property: Shared Image definition name in shared image gallery.
     *
     * @return the definitionName value.
     */
    String definitionName();

    /**
     * Gets the osType property: The operating system of the image.
     *
     * @return the osType value.
     */
    OsType osType();

    /**
     * Gets the imageType property: The type of image in the gallery (generalized or specialized).
     *
     * @return the imageType value.
     */
    ImageType imageType();

    /**
     * Gets the enableState property: Whether or not the image is enabled.
     *
     * @return the enableState value.
     */
    EnableState enableState();

    /**
     * Gets the displayName property: Display name of the image.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the versions property: List of image versions in definition.
     *
     * @return the versions value.
     */
    List<ImageVersionProperties> versions();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.devtestlabs.fluent.models.SharedImageInner object.
     *
     * @return the inner object.
     */
    SharedImageInner innerModel();

    /** The entirety of the SharedImage definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The SharedImage definition stages. */
    interface DefinitionStages {
        /** The first stage of the SharedImage definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the SharedImage definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the SharedImage definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labName, sharedGalleryName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labName The name of the lab.
             * @param sharedGalleryName The name of the shared gallery.
             * @return the next definition stage.
             */
            WithCreate withExistingSharedgallery(String resourceGroupName, String labName, String sharedGalleryName);
        }
        /**
         * The stage of the SharedImage definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithDefinitionName,
                DefinitionStages.WithOsType,
                DefinitionStages.WithImageType,
                DefinitionStages.WithEnableState,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithVersions {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SharedImage create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SharedImage create(Context context);
        }
        /** The stage of the SharedImage definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the SharedImage definition allowing to specify definitionName. */
        interface WithDefinitionName {
            /**
             * Specifies the definitionName property: Shared Image definition name in shared image gallery.
             *
             * @param definitionName Shared Image definition name in shared image gallery.
             * @return the next definition stage.
             */
            WithCreate withDefinitionName(String definitionName);
        }
        /** The stage of the SharedImage definition allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: The operating system of the image.
             *
             * @param osType The operating system of the image.
             * @return the next definition stage.
             */
            WithCreate withOsType(OsType osType);
        }
        /** The stage of the SharedImage definition allowing to specify imageType. */
        interface WithImageType {
            /**
             * Specifies the imageType property: The type of image in the gallery (generalized or specialized).
             *
             * @param imageType The type of image in the gallery (generalized or specialized).
             * @return the next definition stage.
             */
            WithCreate withImageType(ImageType imageType);
        }
        /** The stage of the SharedImage definition allowing to specify enableState. */
        interface WithEnableState {
            /**
             * Specifies the enableState property: Whether or not the image is enabled..
             *
             * @param enableState Whether or not the image is enabled.
             * @return the next definition stage.
             */
            WithCreate withEnableState(EnableState enableState);
        }
        /** The stage of the SharedImage definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: Display name of the image.
             *
             * @param displayName Display name of the image.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the SharedImage definition allowing to specify versions. */
        interface WithVersions {
            /**
             * Specifies the versions property: List of image versions in definition.
             *
             * @param versions List of image versions in definition.
             * @return the next definition stage.
             */
            WithCreate withVersions(List<ImageVersionProperties> versions);
        }
    }
    /**
     * Begins update for the SharedImage resource.
     *
     * @return the stage of resource update.
     */
    SharedImage.Update update();

    /** The template for SharedImage update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SharedImage apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SharedImage apply(Context context);
    }
    /** The SharedImage update stages. */
    interface UpdateStages {
        /** The stage of the SharedImage update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the resource..
             *
             * @param tags The tags of the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SharedImage refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SharedImage refresh(Context context);
}
