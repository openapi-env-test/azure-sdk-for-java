// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.management.SystemData;
import com.azure.resourcemanager.devtestlabs.fluent.models.LabVirtualMachineCreationParameterPropertiesInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of LabVirtualMachineCreationParameterProperties. */
public interface LabVirtualMachineCreationParameterProperties {
    /**
     * Gets the notes property: The notes of the virtual machine.
     *
     * @return the notes value.
     */
    String notes();

    /**
     * Gets the ownerObjectId property: The object identifier of the owner of the virtual machine.
     *
     * @return the ownerObjectId value.
     */
    String ownerObjectId();

    /**
     * Gets the ownerUserPrincipalName property: The user principal name of the virtual machine owner.
     *
     * @return the ownerUserPrincipalName value.
     */
    String ownerUserPrincipalName();

    /**
     * Gets the createdByUserId property: The object identifier of the creator of the virtual machine.
     *
     * @return the createdByUserId value.
     */
    String createdByUserId();

    /**
     * Gets the createdByUser property: The email address of creator of the virtual machine.
     *
     * @return the createdByUser value.
     */
    String createdByUser();

    /**
     * Gets the createdDate property: The creation date of the virtual machine.
     *
     * @return the createdDate value.
     */
    OffsetDateTime createdDate();

    /**
     * Gets the computeId property: The resource identifier (Microsoft.Compute) of the virtual machine.
     *
     * @return the computeId value.
     */
    String computeId();

    /**
     * Gets the customImageId property: The custom image identifier of the virtual machine.
     *
     * @return the customImageId value.
     */
    String customImageId();

    /**
     * Gets the galleryImageVersionId property: The shared gallery image version resource identifier of the virtual
     * machine.
     *
     * @return the galleryImageVersionId value.
     */
    String galleryImageVersionId();

    /**
     * Gets the sharedImageId property: The shared image resource identifier of the virtual machine.
     *
     * @return the sharedImageId value.
     */
    String sharedImageId();

    /**
     * Gets the sharedImageVersion property: The shared image version for the specified shared image Id. Will use latest
     * if not specified.
     *
     * @return the sharedImageVersion value.
     */
    String sharedImageVersion();

    /**
     * Gets the osType property: The OS type of the virtual machine.
     *
     * @return the osType value.
     */
    String osType();

    /**
     * Gets the size property: The size of the virtual machine.
     *
     * @return the size value.
     */
    String size();

    /**
     * Gets the username property: The user name of the virtual machine.
     *
     * @return the username value.
     */
    String username();

    /**
     * Gets the password property: The password of the virtual machine administrator.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the sshKey property: The SSH key of the virtual machine administrator.
     *
     * @return the sshKey value.
     */
    String sshKey();

    /**
     * Gets the isAuthenticationWithSshKey property: Indicates whether this virtual machine uses an SSH key for
     * authentication.
     *
     * @return the isAuthenticationWithSshKey value.
     */
    Boolean isAuthenticationWithSshKey();

    /**
     * Gets the fqdn property: The fully-qualified domain name of the virtual machine.
     *
     * @return the fqdn value.
     */
    String fqdn();

    /**
     * Gets the labSubnetName property: The lab subnet name of the virtual machine.
     *
     * @return the labSubnetName value.
     */
    String labSubnetName();

    /**
     * Gets the labVirtualNetworkId property: The lab virtual network identifier of the virtual machine.
     *
     * @return the labVirtualNetworkId value.
     */
    String labVirtualNetworkId();

    /**
     * Gets the disallowPublicIpAddress property: Indicates whether the virtual machine is to be created without a
     * public IP address.
     *
     * @return the disallowPublicIpAddress value.
     */
    Boolean disallowPublicIpAddress();

    /**
     * Gets the artifacts property: The artifacts to be installed on the virtual machine.
     *
     * @return the artifacts value.
     */
    List<ArtifactInstallProperties> artifacts();

    /**
     * Gets the planId property: The id of the plan associated with the virtual machine image.
     *
     * @return the planId value.
     */
    String planId();

    /**
     * Gets the osDiskSizeGb property: Specifies the size of an empty data disk in gigabytes. This element can be used
     * to overwrite the size of the disk in a virtual machine image.
     *
     * @return the osDiskSizeGb value.
     */
    Integer osDiskSizeGb();

    /**
     * Gets the expirationDate property: The expiration date for VM.
     *
     * @return the expirationDate value.
     */
    OffsetDateTime expirationDate();

    /**
     * Gets the allowClaim property: Indicates whether another user can take ownership of the virtual machine.
     *
     * @return the allowClaim value.
     */
    Boolean allowClaim();

    /**
     * Gets the storageType property: Storage type to use for virtual machine (i.e. Standard, Premium, StandardSSD).
     *
     * @return the storageType value.
     */
    StorageType storageType();

    /**
     * Gets the virtualMachineCreationSource property: Tells source of creation of lab virtual machine. Output property
     * only.
     *
     * @return the virtualMachineCreationSource value.
     */
    VirtualMachineCreationSource virtualMachineCreationSource();

    /**
     * Gets the environmentId property: The resource ID of the environment that contains this virtual machine, if any.
     *
     * @return the environmentId value.
     */
    String environmentId();

    /**
     * Gets the dataDiskParameters property: New or existing data disks to attach to the virtual machine after creation.
     *
     * @return the dataDiskParameters value.
     */
    List<DataDiskProperties> dataDiskParameters();

    /**
     * Gets the scheduleParameters property: Virtual Machine schedules to be created.
     *
     * @return the scheduleParameters value.
     */
    List<ScheduleCreationParameter> scheduleParameters();

    /**
     * Gets the lastKnownPowerState property: Last known compute power state captured in DTL.
     *
     * @return the lastKnownPowerState value.
     */
    String lastKnownPowerState();

    /**
     * Gets the canApplyArtifacts property: Flag to determine if apply artifacts can be triggered at the time of
     * fetching the document.
     *
     * @return the canApplyArtifacts value.
     */
    Boolean canApplyArtifacts();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the instanceCount property: The number of virtual machine instances to create.
     *
     * @return the instanceCount value.
     */
    Integer instanceCount();

    /**
     * Gets the deploymentStatus property: The deployment status of the artifact.
     *
     * @return the deploymentStatus value.
     */
    String deploymentStatus();

    /**
     * Gets the artifactsApplied property: The total count of the artifacts that were successfully applied.
     *
     * @return the artifactsApplied value.
     */
    Integer artifactsApplied();

    /**
     * Gets the totalArtifacts property: The total count of the artifacts that were tentatively applied.
     *
     * @return the totalArtifacts value.
     */
    Integer totalArtifacts();

    /**
     * Gets the offer property: The offer of the gallery image.
     *
     * @return the offer value.
     */
    String offer();

    /**
     * Gets the publisher property: The publisher of the gallery image.
     *
     * @return the publisher value.
     */
    String publisher();

    /**
     * Gets the sku property: The SKU of the gallery image.
     *
     * @return the sku value.
     */
    String sku();

    /**
     * Gets the osTypeGalleryImageReferenceOsType property: The OS type of the gallery image.
     *
     * @return the osTypeGalleryImageReferenceOsType value.
     */
    String osTypeGalleryImageReferenceOsType();

    /**
     * Gets the version property: The version of the gallery image.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the statuses property: Gets the statuses of the virtual machine.
     *
     * @return the statuses value.
     */
    List<ComputeVmInstanceViewStatus> statuses();

    /**
     * Gets the osTypeComputeVmOsType property: Gets the OS type of the virtual machine.
     *
     * @return the osTypeComputeVmOsType value.
     */
    String osTypeComputeVmOsType();

    /**
     * Gets the vmSize property: Gets the size of the virtual machine.
     *
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * Gets the networkInterfaceId property: Gets the network interface ID of the virtual machine.
     *
     * @return the networkInterfaceId value.
     */
    String networkInterfaceId();

    /**
     * Gets the osDiskId property: Gets OS disk blob uri for the virtual machine.
     *
     * @return the osDiskId value.
     */
    String osDiskId();

    /**
     * Gets the dataDiskIds property: Gets data disks blob uri for the virtual machine.
     *
     * @return the dataDiskIds value.
     */
    List<String> dataDiskIds();

    /**
     * Gets the dataDisks property: Gets all data disks attached to the virtual machine.
     *
     * @return the dataDisks value.
     */
    List<ComputeDataDisk> dataDisks();

    /**
     * Gets the virtualNetworkId property: The resource ID of the virtual network.
     *
     * @return the virtualNetworkId value.
     */
    String virtualNetworkId();

    /**
     * Gets the subnetId property: The resource ID of the sub net.
     *
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the publicIpAddressId property: The resource ID of the public IP address.
     *
     * @return the publicIpAddressId value.
     */
    String publicIpAddressId();

    /**
     * Gets the publicIpAddress property: The public IP address.
     *
     * @return the publicIpAddress value.
     */
    String publicIpAddress();

    /**
     * Gets the privateIpAddress property: The private IP address.
     *
     * @return the privateIpAddress value.
     */
    String privateIpAddress();

    /**
     * Gets the dnsName property: The DNS name.
     *
     * @return the dnsName value.
     */
    String dnsName();

    /**
     * Gets the rdpAuthority property: The RdpAuthority property is a server DNS host name or IP address followed by the
     * service port number for RDP (Remote Desktop Protocol).
     *
     * @return the rdpAuthority value.
     */
    String rdpAuthority();

    /**
     * Gets the sshAuthority property: The SshAuthority property is a server DNS host name or IP address followed by the
     * service port number for SSH.
     *
     * @return the sshAuthority value.
     */
    String sshAuthority();

    /**
     * Gets the inboundNatRules property: The incoming NAT rules.
     *
     * @return the inboundNatRules value.
     */
    List<InboundNatRule> inboundNatRules();

    /**
     * Gets the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the systemDataPropertiesSystemData property: The system metadata relating to this resource.
     *
     * @return the systemDataPropertiesSystemData value.
     */
    SystemData systemDataPropertiesSystemData();

    /**
     * Gets the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @return the status value.
     */
    EnableStatus status();

    /**
     * Gets the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @return the taskType value.
     */
    String taskType();

    /**
     * Gets the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @return the timeZoneId value.
     */
    String timeZoneId();

    /**
     * Gets the createdDateApplicableScheduleCreatedDate property: The creation date of the schedule.
     *
     * @return the createdDateApplicableScheduleCreatedDate value.
     */
    OffsetDateTime createdDateApplicableScheduleCreatedDate();

    /**
     * Gets the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @return the targetResourceId value.
     */
    String targetResourceId();

    /**
     * Gets the provisioningStateApplicableScheduleProvisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningStateApplicableScheduleProvisioningState value.
     */
    String provisioningStateApplicableScheduleProvisioningState();

    /**
     * Gets the uniqueIdentifierApplicableScheduleUniqueIdentifier property: The unique immutable identifier of a
     * resource (Guid).
     *
     * @return the uniqueIdentifierApplicableScheduleUniqueIdentifier value.
     */
    String uniqueIdentifierApplicableScheduleUniqueIdentifier();

    /**
     * Gets the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @return the weekdays value.
     */
    List<String> weekdays();

    /**
     * Gets the time property: The time of the day the schedule will occur.
     *
     * @return the time value.
     */
    String time();

    /**
     * Gets the timeDailyRecurrenceTime property: The time of day the schedule will occur.
     *
     * @return the timeDailyRecurrenceTime value.
     */
    String timeDailyRecurrenceTime();

    /**
     * Gets the minute property: Minutes of the hour the schedule will run.
     *
     * @return the minute value.
     */
    Integer minute();

    /**
     * Gets the statusNotificationSettingsStatus property: If notifications are enabled for this schedule (i.e. Enabled,
     * Disabled).
     *
     * @return the statusNotificationSettingsStatus value.
     */
    EnableStatus statusNotificationSettingsStatus();

    /**
     * Gets the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @return the timeInMinutes value.
     */
    Integer timeInMinutes();

    /**
     * Gets the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @return the webhookUrl value.
     */
    String webhookUrl();

    /**
     * Gets the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @return the emailRecipient value.
     */
    String emailRecipient();

    /**
     * Gets the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @return the notificationLocale value.
     */
    String notificationLocale();

    /**
     * Gets the idPropertiesId property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     *
     * @return the idPropertiesId value.
     */
    String idPropertiesId();

    /**
     * Gets the namePropertiesName property: The name of the resource.
     *
     * @return the namePropertiesName value.
     */
    String namePropertiesName();

    /**
     * Gets the typePropertiesType property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     *
     * @return the typePropertiesType value.
     */
    String typePropertiesType();

    /**
     * Gets the tagsPropertiesTags property: Resource tags.
     *
     * @return the tagsPropertiesTags value.
     */
    Map<String, String> tagsPropertiesTags();

    /**
     * Gets the locationPropertiesLocation property: The geo-location where the resource lives.
     *
     * @return the locationPropertiesLocation value.
     */
    String locationPropertiesLocation();

    /**
     * Gets the systemDataLabVmsStartupSystemData property: The system metadata relating to this resource.
     *
     * @return the systemDataLabVmsStartupSystemData value.
     */
    SystemData systemDataLabVmsStartupSystemData();

    /**
     * Gets the statusLabVmsStartupStatus property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @return the statusLabVmsStartupStatus value.
     */
    EnableStatus statusLabVmsStartupStatus();

    /**
     * Gets the taskTypeLabVmsStartupTaskType property: The task type of the schedule (e.g. LabVmsShutdownTask,
     * LabVmAutoStart).
     *
     * @return the taskTypeLabVmsStartupTaskType value.
     */
    String taskTypeLabVmsStartupTaskType();

    /**
     * Gets the timeZoneIdLabVmsStartupTimeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @return the timeZoneIdLabVmsStartupTimeZoneId value.
     */
    String timeZoneIdLabVmsStartupTimeZoneId();

    /**
     * Gets the createdDateLabVmsStartupCreatedDate property: The creation date of the schedule.
     *
     * @return the createdDateLabVmsStartupCreatedDate value.
     */
    OffsetDateTime createdDateLabVmsStartupCreatedDate();

    /**
     * Gets the targetResourceIdLabVmsStartupTargetResourceId property: The resource ID to which the schedule belongs.
     *
     * @return the targetResourceIdLabVmsStartupTargetResourceId value.
     */
    String targetResourceIdLabVmsStartupTargetResourceId();

    /**
     * Gets the provisioningStateLabVmsStartupProvisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningStateLabVmsStartupProvisioningState value.
     */
    String provisioningStateLabVmsStartupProvisioningState();

    /**
     * Gets the uniqueIdentifierLabVmsStartupUniqueIdentifier property: The unique immutable identifier of a resource
     * (Guid).
     *
     * @return the uniqueIdentifierLabVmsStartupUniqueIdentifier value.
     */
    String uniqueIdentifierLabVmsStartupUniqueIdentifier();

    /**
     * Gets the weekdaysLabVmsStartupWeekdays property: The days of the week for which the schedule is set (e.g. Sunday,
     * Monday, Tuesday, etc.).
     *
     * @return the weekdaysLabVmsStartupWeekdays value.
     */
    List<String> weekdaysLabVmsStartupWeekdays();

    /**
     * Gets the timeLabVmsStartupTime property: The time of the day the schedule will occur.
     *
     * @return the timeLabVmsStartupTime value.
     */
    String timeLabVmsStartupTime();

    /**
     * Gets the timeDailyRecurrenceTimeLabVmsStartupTimeDailyRecurrenceTime property: The time of day the schedule will
     * occur.
     *
     * @return the timeDailyRecurrenceTimeLabVmsStartupTimeDailyRecurrenceTime value.
     */
    String timeDailyRecurrenceTimeLabVmsStartupTimeDailyRecurrenceTime();

    /**
     * Gets the minuteLabVmsStartupMinute property: Minutes of the hour the schedule will run.
     *
     * @return the minuteLabVmsStartupMinute value.
     */
    Integer minuteLabVmsStartupMinute();

    /**
     * Gets the statusNotificationSettingsStatusLabVmsStartupStatusNotificationSettingsStatus property: If notifications
     * are enabled for this schedule (i.e. Enabled, Disabled).
     *
     * @return the statusNotificationSettingsStatusLabVmsStartupStatusNotificationSettingsStatus value.
     */
    EnableStatus statusNotificationSettingsStatusLabVmsStartupStatusNotificationSettingsStatus();

    /**
     * Gets the timeInMinutesLabVmsStartupTimeInMinutes property: Time in minutes before event at which notification
     * will be sent.
     *
     * @return the timeInMinutesLabVmsStartupTimeInMinutes value.
     */
    Integer timeInMinutesLabVmsStartupTimeInMinutes();

    /**
     * Gets the webhookUrlLabVmsStartupWebhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @return the webhookUrlLabVmsStartupWebhookUrl value.
     */
    String webhookUrlLabVmsStartupWebhookUrl();

    /**
     * Gets the emailRecipientLabVmsStartupEmailRecipient property: The email recipient to send notifications to (can be
     * a list of semi-colon separated email addresses).
     *
     * @return the emailRecipientLabVmsStartupEmailRecipient value.
     */
    String emailRecipientLabVmsStartupEmailRecipient();

    /**
     * Gets the notificationLocaleLabVmsStartupNotificationLocale property: The locale to use when sending a
     * notification (fallback for unsupported languages is EN).
     *
     * @return the notificationLocaleLabVmsStartupNotificationLocale value.
     */
    String notificationLocaleLabVmsStartupNotificationLocale();

    /**
     * Gets the idLabVmsStartupId property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     *
     * @return the idLabVmsStartupId value.
     */
    String idLabVmsStartupId();

    /**
     * Gets the nameLabVmsStartupName property: The name of the resource.
     *
     * @return the nameLabVmsStartupName value.
     */
    String nameLabVmsStartupName();

    /**
     * Gets the typeLabVmsStartupType property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     *
     * @return the typeLabVmsStartupType value.
     */
    String typeLabVmsStartupType();

    /**
     * Gets the tagsLabVmsStartupTags property: Resource tags.
     *
     * @return the tagsLabVmsStartupTags value.
     */
    Map<String, String> tagsLabVmsStartupTags();

    /**
     * Gets the locationLabVmsStartupLocation property: The geo-location where the resource lives.
     *
     * @return the locationLabVmsStartupLocation value.
     */
    String locationLabVmsStartupLocation();

    /**
     * Gets the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the inner
     * com.azure.resourcemanager.devtestlabs.fluent.models.LabVirtualMachineCreationParameterPropertiesInner object.
     *
     * @return the inner object.
     */
    LabVirtualMachineCreationParameterPropertiesInner innerModel();
}
