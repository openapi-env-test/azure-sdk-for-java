// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Properties of a schedule. */
@Fluent
public final class ScheduleProperties {
    /*
     * The status of the schedule (i.e. Enabled, Disabled)
     */
    @JsonProperty(value = "status")
    private EnableStatus status;

    /*
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     */
    @JsonProperty(value = "taskType")
    private String taskType;

    /*
     * If the schedule will occur only some days of the week, specify the
     * weekly recurrence.
     */
    @JsonProperty(value = "weeklyRecurrence")
    private WeekDetails innerWeeklyRecurrence;

    /*
     * If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     */
    @JsonProperty(value = "dailyRecurrence")
    private DayDetails innerDailyRecurrence;

    /*
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     */
    @JsonProperty(value = "hourlyRecurrence")
    private HourDetails innerHourlyRecurrence;

    /*
     * The time zone ID (e.g. Pacific Standard time).
     */
    @JsonProperty(value = "timeZoneId")
    private String timeZoneId;

    /*
     * Notification settings.
     */
    @JsonProperty(value = "notificationSettings")
    private NotificationSettings innerNotificationSettings;

    /*
     * The creation date of the schedule.
     */
    @JsonProperty(value = "createdDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDate;

    /*
     * The resource ID to which the schedule belongs
     */
    @JsonProperty(value = "targetResourceId")
    private String targetResourceId;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "uniqueIdentifier", access = JsonProperty.Access.WRITE_ONLY)
    private String uniqueIdentifier;

    /**
     * Get the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @return the status value.
     */
    public EnableStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the schedule (i.e. Enabled, Disabled).
     *
     * @param status the status value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withStatus(EnableStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @return the taskType value.
     */
    public String taskType() {
        return this.taskType;
    }

    /**
     * Set the taskType property: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param taskType the taskType value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTaskType(String taskType) {
        this.taskType = taskType;
        return this;
    }

    /**
     * Get the innerWeeklyRecurrence property: If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @return the innerWeeklyRecurrence value.
     */
    private WeekDetails innerWeeklyRecurrence() {
        return this.innerWeeklyRecurrence;
    }

    /**
     * Get the innerDailyRecurrence property: If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @return the innerDailyRecurrence value.
     */
    private DayDetails innerDailyRecurrence() {
        return this.innerDailyRecurrence;
    }

    /**
     * Get the innerHourlyRecurrence property: If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @return the innerHourlyRecurrence value.
     */
    private HourDetails innerHourlyRecurrence() {
        return this.innerHourlyRecurrence;
    }

    /**
     * Get the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @return the timeZoneId value.
     */
    public String timeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Set the timeZoneId property: The time zone ID (e.g. Pacific Standard time).
     *
     * @param timeZoneId the timeZoneId value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
        return this;
    }

    /**
     * Get the innerNotificationSettings property: Notification settings.
     *
     * @return the innerNotificationSettings value.
     */
    private NotificationSettings innerNotificationSettings() {
        return this.innerNotificationSettings;
    }

    /**
     * Get the createdDate property: The creation date of the schedule.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: The resource ID to which the schedule belongs.
     *
     * @param targetResourceId the targetResourceId value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Get the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @return the weekdays value.
     */
    public List<String> weekdays() {
        return this.innerWeeklyRecurrence() == null ? null : this.innerWeeklyRecurrence().weekdays();
    }

    /**
     * Set the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @param weekdays the weekdays value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withWeekdays(List<String> weekdays) {
        if (this.innerWeeklyRecurrence() == null) {
            this.innerWeeklyRecurrence = new WeekDetails();
        }
        this.innerWeeklyRecurrence().withWeekdays(weekdays);
        return this;
    }

    /**
     * Get the time property: The time of the day the schedule will occur.
     *
     * @return the time value.
     */
    public String time() {
        return this.innerWeeklyRecurrence() == null ? null : this.innerWeeklyRecurrence().time();
    }

    /**
     * Set the time property: The time of the day the schedule will occur.
     *
     * @param time the time value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTime(String time) {
        if (this.innerWeeklyRecurrence() == null) {
            this.innerWeeklyRecurrence = new WeekDetails();
        }
        this.innerWeeklyRecurrence().withTime(time);
        return this;
    }

    /**
     * Get the time property: The time of day the schedule will occur.
     *
     * @return the time value.
     */
    public String timeDailyRecurrenceTime() {
        return this.innerDailyRecurrence() == null ? null : this.innerDailyRecurrence().time();
    }

    /**
     * Set the time property: The time of day the schedule will occur.
     *
     * @param time the time value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTimeDailyRecurrenceTime(String time) {
        if (this.innerDailyRecurrence() == null) {
            this.innerDailyRecurrence = new DayDetails();
        }
        this.innerDailyRecurrence().withTime(time);
        return this;
    }

    /**
     * Get the minute property: Minutes of the hour the schedule will run.
     *
     * @return the minute value.
     */
    public Integer minute() {
        return this.innerHourlyRecurrence() == null ? null : this.innerHourlyRecurrence().minute();
    }

    /**
     * Set the minute property: Minutes of the hour the schedule will run.
     *
     * @param minute the minute value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withMinute(Integer minute) {
        if (this.innerHourlyRecurrence() == null) {
            this.innerHourlyRecurrence = new HourDetails();
        }
        this.innerHourlyRecurrence().withMinute(minute);
        return this;
    }

    /**
     * Get the status property: If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     *
     * @return the status value.
     */
    public EnableStatus statusNotificationSettingsStatus() {
        return this.innerNotificationSettings() == null ? null : this.innerNotificationSettings().status();
    }

    /**
     * Set the status property: If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     *
     * @param status the status value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withStatusNotificationSettingsStatus(EnableStatus status) {
        if (this.innerNotificationSettings() == null) {
            this.innerNotificationSettings = new NotificationSettings();
        }
        this.innerNotificationSettings().withStatus(status);
        return this;
    }

    /**
     * Get the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @return the timeInMinutes value.
     */
    public Integer timeInMinutes() {
        return this.innerNotificationSettings() == null ? null : this.innerNotificationSettings().timeInMinutes();
    }

    /**
     * Set the timeInMinutes property: Time in minutes before event at which notification will be sent.
     *
     * @param timeInMinutes the timeInMinutes value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withTimeInMinutes(Integer timeInMinutes) {
        if (this.innerNotificationSettings() == null) {
            this.innerNotificationSettings = new NotificationSettings();
        }
        this.innerNotificationSettings().withTimeInMinutes(timeInMinutes);
        return this;
    }

    /**
     * Get the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @return the webhookUrl value.
     */
    public String webhookUrl() {
        return this.innerNotificationSettings() == null ? null : this.innerNotificationSettings().webhookUrl();
    }

    /**
     * Set the webhookUrl property: The webhook URL to which the notification will be sent.
     *
     * @param webhookUrl the webhookUrl value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withWebhookUrl(String webhookUrl) {
        if (this.innerNotificationSettings() == null) {
            this.innerNotificationSettings = new NotificationSettings();
        }
        this.innerNotificationSettings().withWebhookUrl(webhookUrl);
        return this;
    }

    /**
     * Get the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @return the emailRecipient value.
     */
    public String emailRecipient() {
        return this.innerNotificationSettings() == null ? null : this.innerNotificationSettings().emailRecipient();
    }

    /**
     * Set the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     *
     * @param emailRecipient the emailRecipient value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withEmailRecipient(String emailRecipient) {
        if (this.innerNotificationSettings() == null) {
            this.innerNotificationSettings = new NotificationSettings();
        }
        this.innerNotificationSettings().withEmailRecipient(emailRecipient);
        return this;
    }

    /**
     * Get the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @return the notificationLocale value.
     */
    public String notificationLocale() {
        return this.innerNotificationSettings() == null ? null : this.innerNotificationSettings().notificationLocale();
    }

    /**
     * Set the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     *
     * @param notificationLocale the notificationLocale value to set.
     * @return the ScheduleProperties object itself.
     */
    public ScheduleProperties withNotificationLocale(String notificationLocale) {
        if (this.innerNotificationSettings() == null) {
            this.innerNotificationSettings = new NotificationSettings();
        }
        this.innerNotificationSettings().withNotificationLocale(notificationLocale);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerWeeklyRecurrence() != null) {
            innerWeeklyRecurrence().validate();
        }
        if (innerDailyRecurrence() != null) {
            innerDailyRecurrence().validate();
        }
        if (innerHourlyRecurrence() != null) {
            innerHourlyRecurrence().validate();
        }
        if (innerNotificationSettings() != null) {
            innerNotificationSettings().validate();
        }
    }
}
