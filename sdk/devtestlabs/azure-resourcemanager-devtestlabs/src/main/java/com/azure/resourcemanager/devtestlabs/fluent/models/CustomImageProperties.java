// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.DataDiskStorageTypeInfo;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Properties of a custom image. */
@Fluent
public final class CustomImageProperties {
    /*
     * The virtual machine from which the image is to be created.
     */
    @JsonProperty(value = "vm")
    private CustomImagePropertiesFromVm innerVm;

    /*
     * The VHD from which the image is to be created.
     */
    @JsonProperty(value = "vhd")
    private CustomImagePropertiesCustom innerVhd;

    /*
     * The description of the custom image.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The author of the custom image.
     */
    @JsonProperty(value = "author")
    private String author;

    /*
     * The creation date of the custom image.
     */
    @JsonProperty(value = "creationDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationDate;

    /*
     * The Managed Image Id backing the custom image.
     */
    @JsonProperty(value = "managedImageId")
    private String managedImageId;

    /*
     * The Managed Snapshot Id backing the custom image.
     */
    @JsonProperty(value = "managedSnapshotId")
    private String managedSnapshotId;

    /*
     * Storage information about the data disks present in the custom image
     */
    @JsonProperty(value = "dataDiskStorageInfo")
    private List<DataDiskStorageTypeInfo> dataDiskStorageInfo;

    /*
     * Storage information about the plan related to this custom image
     */
    @JsonProperty(value = "customImagePlan")
    private CustomImagePropertiesFromPlan innerCustomImagePlan;

    /*
     * Whether or not the custom images underlying offer/plan has been enabled
     * for programmatic deployment
     */
    @JsonProperty(value = "isPlanAuthorized")
    private Boolean isPlanAuthorized;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "uniqueIdentifier", access = JsonProperty.Access.WRITE_ONLY)
    private String uniqueIdentifier;

    /**
     * Get the innerVm property: The virtual machine from which the image is to be created.
     *
     * @return the innerVm value.
     */
    private CustomImagePropertiesFromVm innerVm() {
        return this.innerVm;
    }

    /**
     * Get the innerVhd property: The VHD from which the image is to be created.
     *
     * @return the innerVhd value.
     */
    private CustomImagePropertiesCustom innerVhd() {
        return this.innerVhd;
    }

    /**
     * Get the description property: The description of the custom image.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the custom image.
     *
     * @param description the description value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the author property: The author of the custom image.
     *
     * @return the author value.
     */
    public String author() {
        return this.author;
    }

    /**
     * Set the author property: The author of the custom image.
     *
     * @param author the author value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withAuthor(String author) {
        this.author = author;
        return this;
    }

    /**
     * Get the creationDate property: The creation date of the custom image.
     *
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the managedImageId property: The Managed Image Id backing the custom image.
     *
     * @return the managedImageId value.
     */
    public String managedImageId() {
        return this.managedImageId;
    }

    /**
     * Set the managedImageId property: The Managed Image Id backing the custom image.
     *
     * @param managedImageId the managedImageId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withManagedImageId(String managedImageId) {
        this.managedImageId = managedImageId;
        return this;
    }

    /**
     * Get the managedSnapshotId property: The Managed Snapshot Id backing the custom image.
     *
     * @return the managedSnapshotId value.
     */
    public String managedSnapshotId() {
        return this.managedSnapshotId;
    }

    /**
     * Set the managedSnapshotId property: The Managed Snapshot Id backing the custom image.
     *
     * @param managedSnapshotId the managedSnapshotId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withManagedSnapshotId(String managedSnapshotId) {
        this.managedSnapshotId = managedSnapshotId;
        return this;
    }

    /**
     * Get the dataDiskStorageInfo property: Storage information about the data disks present in the custom image.
     *
     * @return the dataDiskStorageInfo value.
     */
    public List<DataDiskStorageTypeInfo> dataDiskStorageInfo() {
        return this.dataDiskStorageInfo;
    }

    /**
     * Set the dataDiskStorageInfo property: Storage information about the data disks present in the custom image.
     *
     * @param dataDiskStorageInfo the dataDiskStorageInfo value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withDataDiskStorageInfo(List<DataDiskStorageTypeInfo> dataDiskStorageInfo) {
        this.dataDiskStorageInfo = dataDiskStorageInfo;
        return this;
    }

    /**
     * Get the innerCustomImagePlan property: Storage information about the plan related to this custom image.
     *
     * @return the innerCustomImagePlan value.
     */
    private CustomImagePropertiesFromPlan innerCustomImagePlan() {
        return this.innerCustomImagePlan;
    }

    /**
     * Get the isPlanAuthorized property: Whether or not the custom images underlying offer/plan has been enabled for
     * programmatic deployment.
     *
     * @return the isPlanAuthorized value.
     */
    public Boolean isPlanAuthorized() {
        return this.isPlanAuthorized;
    }

    /**
     * Set the isPlanAuthorized property: Whether or not the custom images underlying offer/plan has been enabled for
     * programmatic deployment.
     *
     * @param isPlanAuthorized the isPlanAuthorized value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withIsPlanAuthorized(Boolean isPlanAuthorized) {
        this.isPlanAuthorized = isPlanAuthorized;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Get the sourceVmId property: The source vm identifier.
     *
     * @return the sourceVmId value.
     */
    public String sourceVmId() {
        return this.innerVm() == null ? null : this.innerVm().sourceVmId();
    }

    /**
     * Set the sourceVmId property: The source vm identifier.
     *
     * @param sourceVmId the sourceVmId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withSourceVmId(String sourceVmId) {
        if (this.innerVm() == null) {
            this.innerVm = new CustomImagePropertiesFromVm();
        }
        this.innerVm().withSourceVmId(sourceVmId);
        return this;
    }

    /**
     * Get the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     *
     * @return the windowsOsState value.
     */
    public WindowsOsState windowsOsState() {
        return this.innerVm() == null ? null : this.innerVm().windowsOsState();
    }

    /**
     * Set the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     *
     * @param windowsOsState the windowsOsState value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withWindowsOsState(WindowsOsState windowsOsState) {
        if (this.innerVm() == null) {
            this.innerVm = new CustomImagePropertiesFromVm();
        }
        this.innerVm().withWindowsOsState(windowsOsState);
        return this;
    }

    /**
     * Get the linuxOsState property: The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested,
     * DeprovisionApplied).
     *
     * @return the linuxOsState value.
     */
    public LinuxOsState linuxOsState() {
        return this.innerVm() == null ? null : this.innerVm().linuxOsState();
    }

    /**
     * Set the linuxOsState property: The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested,
     * DeprovisionApplied).
     *
     * @param linuxOsState the linuxOsState value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withLinuxOsState(LinuxOsState linuxOsState) {
        if (this.innerVm() == null) {
            this.innerVm = new CustomImagePropertiesFromVm();
        }
        this.innerVm().withLinuxOsState(linuxOsState);
        return this;
    }

    /**
     * Get the imageName property: The image name.
     *
     * @return the imageName value.
     */
    public String imageName() {
        return this.innerVhd() == null ? null : this.innerVhd().imageName();
    }

    /**
     * Set the imageName property: The image name.
     *
     * @param imageName the imageName value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withImageName(String imageName) {
        if (this.innerVhd() == null) {
            this.innerVhd = new CustomImagePropertiesCustom();
        }
        this.innerVhd().withImageName(imageName);
        return this;
    }

    /**
     * Get the sysPrep property: Indicates whether sysprep has been run on the VHD.
     *
     * @return the sysPrep value.
     */
    public Boolean sysPrep() {
        return this.innerVhd() == null ? null : this.innerVhd().sysPrep();
    }

    /**
     * Set the sysPrep property: Indicates whether sysprep has been run on the VHD.
     *
     * @param sysPrep the sysPrep value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withSysPrep(Boolean sysPrep) {
        if (this.innerVhd() == null) {
            this.innerVhd = new CustomImagePropertiesCustom();
        }
        this.innerVhd().withSysPrep(sysPrep);
        return this;
    }

    /**
     * Get the osType property: The OS type of the custom image (i.e. Windows, Linux).
     *
     * @return the osType value.
     */
    public CustomImageOsType osType() {
        return this.innerVhd() == null ? null : this.innerVhd().osType();
    }

    /**
     * Set the osType property: The OS type of the custom image (i.e. Windows, Linux).
     *
     * @param osType the osType value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withOsType(CustomImageOsType osType) {
        if (this.innerVhd() == null) {
            this.innerVhd = new CustomImagePropertiesCustom();
        }
        this.innerVhd().withOsType(osType);
        return this;
    }

    /**
     * Get the id property: The id of the plan, equivalent to name of the plan.
     *
     * @return the id value.
     */
    public String id() {
        return this.innerCustomImagePlan() == null ? null : this.innerCustomImagePlan().id();
    }

    /**
     * Set the id property: The id of the plan, equivalent to name of the plan.
     *
     * @param id the id value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withId(String id) {
        if (this.innerCustomImagePlan() == null) {
            this.innerCustomImagePlan = new CustomImagePropertiesFromPlan();
        }
        this.innerCustomImagePlan().withId(id);
        return this;
    }

    /**
     * Get the publisher property: The publisher for the plan from the marketplace image the custom image is derived
     * from.
     *
     * @return the publisher value.
     */
    public String publisher() {
        return this.innerCustomImagePlan() == null ? null : this.innerCustomImagePlan().publisher();
    }

    /**
     * Set the publisher property: The publisher for the plan from the marketplace image the custom image is derived
     * from.
     *
     * @param publisher the publisher value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withPublisher(String publisher) {
        if (this.innerCustomImagePlan() == null) {
            this.innerCustomImagePlan = new CustomImagePropertiesFromPlan();
        }
        this.innerCustomImagePlan().withPublisher(publisher);
        return this;
    }

    /**
     * Get the offer property: The offer for the plan from the marketplace image the custom image is derived from.
     *
     * @return the offer value.
     */
    public String offer() {
        return this.innerCustomImagePlan() == null ? null : this.innerCustomImagePlan().offer();
    }

    /**
     * Set the offer property: The offer for the plan from the marketplace image the custom image is derived from.
     *
     * @param offer the offer value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withOffer(String offer) {
        if (this.innerCustomImagePlan() == null) {
            this.innerCustomImagePlan = new CustomImagePropertiesFromPlan();
        }
        this.innerCustomImagePlan().withOffer(offer);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerVm() != null) {
            innerVm().validate();
        }
        if (innerVhd() != null) {
            innerVhd().validate();
        }
        if (dataDiskStorageInfo() != null) {
            dataDiskStorageInfo().forEach(e -> e.validate());
        }
        if (innerCustomImagePlan() != null) {
            innerCustomImagePlan().validate();
        }
    }
}
