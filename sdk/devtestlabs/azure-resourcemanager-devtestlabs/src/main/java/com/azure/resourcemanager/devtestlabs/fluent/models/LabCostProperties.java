// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devtestlabs.models.CostThresholdProperties;
import com.azure.resourcemanager.devtestlabs.models.LabCostDetailsProperties;
import com.azure.resourcemanager.devtestlabs.models.LabResourceCostProperties;
import com.azure.resourcemanager.devtestlabs.models.ReportingCycleType;
import com.azure.resourcemanager.devtestlabs.models.TargetCostStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Properties of a cost item. */
@Fluent
public final class LabCostProperties {
    /*
     * The target cost properties
     */
    @JsonProperty(value = "targetCost")
    private TargetCostProperties innerTargetCost;

    /*
     * The lab cost summary component of the cost data.
     */
    @JsonProperty(value = "labCostSummary", access = JsonProperty.Access.WRITE_ONLY)
    private LabCostSummaryProperties innerLabCostSummary;

    /*
     * The lab cost details component of the cost data.
     */
    @JsonProperty(value = "labCostDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<LabCostDetailsProperties> labCostDetails;

    /*
     * The resource cost component of the cost data.
     */
    @JsonProperty(value = "resourceCosts", access = JsonProperty.Access.WRITE_ONLY)
    private List<LabResourceCostProperties> resourceCosts;

    /*
     * The currency code of the cost.
     */
    @JsonProperty(value = "currencyCode")
    private String currencyCode;

    /*
     * The start time of the cost data.
     */
    @JsonProperty(value = "startDateTime")
    private OffsetDateTime startDateTime;

    /*
     * The end time of the cost data.
     */
    @JsonProperty(value = "endDateTime")
    private OffsetDateTime endDateTime;

    /*
     * The creation date of the cost.
     */
    @JsonProperty(value = "createdDate")
    private OffsetDateTime createdDate;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "uniqueIdentifier", access = JsonProperty.Access.WRITE_ONLY)
    private String uniqueIdentifier;

    /**
     * Get the innerTargetCost property: The target cost properties.
     *
     * @return the innerTargetCost value.
     */
    private TargetCostProperties innerTargetCost() {
        return this.innerTargetCost;
    }

    /**
     * Get the innerLabCostSummary property: The lab cost summary component of the cost data.
     *
     * @return the innerLabCostSummary value.
     */
    private LabCostSummaryProperties innerLabCostSummary() {
        return this.innerLabCostSummary;
    }

    /**
     * Get the labCostDetails property: The lab cost details component of the cost data.
     *
     * @return the labCostDetails value.
     */
    public List<LabCostDetailsProperties> labCostDetails() {
        return this.labCostDetails;
    }

    /**
     * Get the resourceCosts property: The resource cost component of the cost data.
     *
     * @return the resourceCosts value.
     */
    public List<LabResourceCostProperties> resourceCosts() {
        return this.resourceCosts;
    }

    /**
     * Get the currencyCode property: The currency code of the cost.
     *
     * @return the currencyCode value.
     */
    public String currencyCode() {
        return this.currencyCode;
    }

    /**
     * Set the currencyCode property: The currency code of the cost.
     *
     * @param currencyCode the currencyCode value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * Get the startDateTime property: The start time of the cost data.
     *
     * @return the startDateTime value.
     */
    public OffsetDateTime startDateTime() {
        return this.startDateTime;
    }

    /**
     * Set the startDateTime property: The start time of the cost data.
     *
     * @param startDateTime the startDateTime value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }

    /**
     * Get the endDateTime property: The end time of the cost data.
     *
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: The end time of the cost data.
     *
     * @param endDateTime the endDateTime value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Get the createdDate property: The creation date of the cost.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Set the createdDate property: The creation date of the cost.
     *
     * @param createdDate the createdDate value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Get the status property: Target cost status.
     *
     * @return the status value.
     */
    public TargetCostStatus status() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().status();
    }

    /**
     * Set the status property: Target cost status.
     *
     * @param status the status value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withStatus(TargetCostStatus status) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withStatus(status);
        return this;
    }

    /**
     * Get the target property: Lab target cost.
     *
     * @return the target value.
     */
    public Integer target() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().target();
    }

    /**
     * Set the target property: Lab target cost.
     *
     * @param target the target value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withTarget(Integer target) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withTarget(target);
        return this;
    }

    /**
     * Get the costThresholds property: Cost thresholds.
     *
     * @return the costThresholds value.
     */
    public List<CostThresholdProperties> costThresholds() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().costThresholds();
    }

    /**
     * Set the costThresholds property: Cost thresholds.
     *
     * @param costThresholds the costThresholds value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCostThresholds(List<CostThresholdProperties> costThresholds) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withCostThresholds(costThresholds);
        return this;
    }

    /**
     * Get the cycleStartDateTime property: Reporting cycle start date.
     *
     * @return the cycleStartDateTime value.
     */
    public OffsetDateTime cycleStartDateTime() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().cycleStartDateTime();
    }

    /**
     * Set the cycleStartDateTime property: Reporting cycle start date.
     *
     * @param cycleStartDateTime the cycleStartDateTime value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCycleStartDateTime(OffsetDateTime cycleStartDateTime) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withCycleStartDateTime(cycleStartDateTime);
        return this;
    }

    /**
     * Get the cycleEndDateTime property: Reporting cycle end date.
     *
     * @return the cycleEndDateTime value.
     */
    public OffsetDateTime cycleEndDateTime() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().cycleEndDateTime();
    }

    /**
     * Set the cycleEndDateTime property: Reporting cycle end date.
     *
     * @param cycleEndDateTime the cycleEndDateTime value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCycleEndDateTime(OffsetDateTime cycleEndDateTime) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withCycleEndDateTime(cycleEndDateTime);
        return this;
    }

    /**
     * Get the cycleType property: Reporting cycle type.
     *
     * @return the cycleType value.
     */
    public ReportingCycleType cycleType() {
        return this.innerTargetCost() == null ? null : this.innerTargetCost().cycleType();
    }

    /**
     * Set the cycleType property: Reporting cycle type.
     *
     * @param cycleType the cycleType value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withCycleType(ReportingCycleType cycleType) {
        if (this.innerTargetCost() == null) {
            this.innerTargetCost = new TargetCostProperties();
        }
        this.innerTargetCost().withCycleType(cycleType);
        return this;
    }

    /**
     * Get the estimatedLabCost property: The cost component of the cost item.
     *
     * @return the estimatedLabCost value.
     */
    public Double estimatedLabCost() {
        return this.innerLabCostSummary() == null ? null : this.innerLabCostSummary().estimatedLabCost();
    }

    /**
     * Set the estimatedLabCost property: The cost component of the cost item.
     *
     * @param estimatedLabCost the estimatedLabCost value to set.
     * @return the LabCostProperties object itself.
     */
    public LabCostProperties withEstimatedLabCost(Double estimatedLabCost) {
        if (this.innerLabCostSummary() == null) {
            this.innerLabCostSummary = new LabCostSummaryProperties();
        }
        this.innerLabCostSummary().withEstimatedLabCost(estimatedLabCost);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerTargetCost() != null) {
            innerTargetCost().validate();
        }
        if (innerLabCostSummary() != null) {
            innerLabCostSummary().validate();
        }
        if (labCostDetails() != null) {
            labCostDetails().forEach(e -> e.validate());
        }
        if (resourceCosts() != null) {
            resourceCosts().forEach(e -> e.validate());
        }
    }
}
