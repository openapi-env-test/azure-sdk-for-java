// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.devtestlabs.models.EnableState;
import com.azure.resourcemanager.devtestlabs.models.ImageType;
import com.azure.resourcemanager.devtestlabs.models.ImageVersionProperties;
import com.azure.resourcemanager.devtestlabs.models.OsType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Properties of a shared image. */
@Fluent
public final class SharedImageInner extends Resource {
    /*
     * The properties of the resource.
     */
    @JsonProperty(value = "properties")
    private SharedImageProperties innerProperties;

    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: The properties of the resource.
     *
     * @return the innerProperties value.
     */
    private SharedImageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SharedImageInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SharedImageInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the definitionName property: Shared Image definition name in shared image gallery.
     *
     * @return the definitionName value.
     */
    public String definitionName() {
        return this.innerProperties() == null ? null : this.innerProperties().definitionName();
    }

    /**
     * Set the definitionName property: Shared Image definition name in shared image gallery.
     *
     * @param definitionName the definitionName value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withDefinitionName(String definitionName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withDefinitionName(definitionName);
        return this;
    }

    /**
     * Get the osType property: The operating system of the image.
     *
     * @return the osType value.
     */
    public OsType osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: The operating system of the image.
     *
     * @param osType the osType value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withOsType(OsType osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the imageType property: The type of image in the gallery (generalized or specialized).
     *
     * @return the imageType value.
     */
    public ImageType imageType() {
        return this.innerProperties() == null ? null : this.innerProperties().imageType();
    }

    /**
     * Set the imageType property: The type of image in the gallery (generalized or specialized).
     *
     * @param imageType the imageType value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withImageType(ImageType imageType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withImageType(imageType);
        return this;
    }

    /**
     * Get the enableState property: Whether or not the image is enabled.
     *
     * @return the enableState value.
     */
    public EnableState enableState() {
        return this.innerProperties() == null ? null : this.innerProperties().enableState();
    }

    /**
     * Set the enableState property: Whether or not the image is enabled.
     *
     * @param enableState the enableState value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withEnableState(EnableState enableState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withEnableState(enableState);
        return this;
    }

    /**
     * Get the displayName property: Display name of the image.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Display name of the image.
     *
     * @param displayName the displayName value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the versions property: List of image versions in definition.
     *
     * @return the versions value.
     */
    public List<ImageVersionProperties> versions() {
        return this.innerProperties() == null ? null : this.innerProperties().versions();
    }

    /**
     * Set the versions property: List of image versions in definition.
     *
     * @param versions the versions value to set.
     * @return the SharedImageInner object itself.
     */
    public SharedImageInner withVersions(List<ImageVersionProperties> versions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedImageProperties();
        }
        this.innerProperties().withVersions(versions);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueIdentifier();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
