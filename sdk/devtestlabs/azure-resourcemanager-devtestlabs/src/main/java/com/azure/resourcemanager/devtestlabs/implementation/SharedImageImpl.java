// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.SharedImageInner;
import com.azure.resourcemanager.devtestlabs.models.EnableState;
import com.azure.resourcemanager.devtestlabs.models.ImageType;
import com.azure.resourcemanager.devtestlabs.models.ImageVersionProperties;
import com.azure.resourcemanager.devtestlabs.models.OsType;
import com.azure.resourcemanager.devtestlabs.models.SharedImage;
import com.azure.resourcemanager.devtestlabs.models.SharedImageFragment;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class SharedImageImpl implements SharedImage, SharedImage.Definition, SharedImage.Update {
    private SharedImageInner innerObject;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String definitionName() {
        return this.innerModel().definitionName();
    }

    public OsType osType() {
        return this.innerModel().osType();
    }

    public ImageType imageType() {
        return this.innerModel().imageType();
    }

    public EnableState enableState() {
        return this.innerModel().enableState();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public List<ImageVersionProperties> versions() {
        List<ImageVersionProperties> inner = this.innerModel().versions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SharedImageInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labName;

    private String sharedGalleryName;

    private String name;

    private SharedImageFragment updateSharedImage;

    public SharedImageImpl withExistingSharedgallery(
        String resourceGroupName, String labName, String sharedGalleryName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        this.sharedGalleryName = sharedGalleryName;
        return this;
    }

    public SharedImage create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .createOrUpdateWithResponse(
                    resourceGroupName, labName, sharedGalleryName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SharedImage create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .createOrUpdateWithResponse(
                    resourceGroupName, labName, sharedGalleryName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    SharedImageImpl(String name, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = new SharedImageInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public SharedImageImpl update() {
        this.updateSharedImage = new SharedImageFragment();
        return this;
    }

    public SharedImage apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .updateWithResponse(
                    resourceGroupName, labName, sharedGalleryName, name, updateSharedImage, Context.NONE)
                .getValue();
        return this;
    }

    public SharedImage apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .updateWithResponse(resourceGroupName, labName, sharedGalleryName, name, updateSharedImage, context)
                .getValue();
        return this;
    }

    SharedImageImpl(
        SharedImageInner innerObject, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.sharedGalleryName = Utils.getValueFromIdByName(innerObject.id(), "sharedgalleries");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "sharedimages");
    }

    public SharedImage refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .getWithResponse(resourceGroupName, labName, sharedGalleryName, name, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public SharedImage refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSharedImages()
                .getWithResponse(resourceGroupName, labName, sharedGalleryName, name, localExpand, context)
                .getValue();
        return this;
    }

    public SharedImageImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SharedImageImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SharedImageImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateSharedImage.withTags(tags);
            return this;
        }
    }

    public SharedImageImpl withDefinitionName(String definitionName) {
        this.innerModel().withDefinitionName(definitionName);
        return this;
    }

    public SharedImageImpl withOsType(OsType osType) {
        this.innerModel().withOsType(osType);
        return this;
    }

    public SharedImageImpl withImageType(ImageType imageType) {
        this.innerModel().withImageType(imageType);
        return this;
    }

    public SharedImageImpl withEnableState(EnableState enableState) {
        this.innerModel().withEnableState(enableState);
        return this;
    }

    public SharedImageImpl withDisplayName(String displayName) {
        this.innerModel().withDisplayName(displayName);
        return this;
    }

    public SharedImageImpl withVersions(List<ImageVersionProperties> versions) {
        this.innerModel().withVersions(versions);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
