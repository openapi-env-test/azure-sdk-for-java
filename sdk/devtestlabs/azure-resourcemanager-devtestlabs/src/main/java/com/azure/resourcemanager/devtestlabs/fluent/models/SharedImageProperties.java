// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devtestlabs.models.EnableState;
import com.azure.resourcemanager.devtestlabs.models.ImageType;
import com.azure.resourcemanager.devtestlabs.models.ImageVersionProperties;
import com.azure.resourcemanager.devtestlabs.models.OsType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of a shared image. */
@Fluent
public final class SharedImageProperties {
    /*
     * Shared Image definition name in shared image gallery
     */
    @JsonProperty(value = "definitionName")
    private String definitionName;

    /*
     * The operating system of the image
     */
    @JsonProperty(value = "osType")
    private OsType osType;

    /*
     * The type of image in the gallery (generalized or specialized)
     */
    @JsonProperty(value = "imageType")
    private ImageType imageType;

    /*
     * Whether or not the image is enabled.
     */
    @JsonProperty(value = "enableState")
    private EnableState enableState;

    /*
     * Display name of the image
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * List of image versions in definition
     */
    @JsonProperty(value = "versions")
    private List<ImageVersionProperties> versions;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "uniqueIdentifier", access = JsonProperty.Access.WRITE_ONLY)
    private String uniqueIdentifier;

    /**
     * Get the definitionName property: Shared Image definition name in shared image gallery.
     *
     * @return the definitionName value.
     */
    public String definitionName() {
        return this.definitionName;
    }

    /**
     * Set the definitionName property: Shared Image definition name in shared image gallery.
     *
     * @param definitionName the definitionName value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withDefinitionName(String definitionName) {
        this.definitionName = definitionName;
        return this;
    }

    /**
     * Get the osType property: The operating system of the image.
     *
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The operating system of the image.
     *
     * @param osType the osType value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the imageType property: The type of image in the gallery (generalized or specialized).
     *
     * @return the imageType value.
     */
    public ImageType imageType() {
        return this.imageType;
    }

    /**
     * Set the imageType property: The type of image in the gallery (generalized or specialized).
     *
     * @param imageType the imageType value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withImageType(ImageType imageType) {
        this.imageType = imageType;
        return this;
    }

    /**
     * Get the enableState property: Whether or not the image is enabled.
     *
     * @return the enableState value.
     */
    public EnableState enableState() {
        return this.enableState;
    }

    /**
     * Set the enableState property: Whether or not the image is enabled.
     *
     * @param enableState the enableState value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withEnableState(EnableState enableState) {
        this.enableState = enableState;
        return this;
    }

    /**
     * Get the displayName property: Display name of the image.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the image.
     *
     * @param displayName the displayName value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the versions property: List of image versions in definition.
     *
     * @return the versions value.
     */
    public List<ImageVersionProperties> versions() {
        return this.versions;
    }

    /**
     * Set the versions property: List of image versions in definition.
     *
     * @param versions the versions value to set.
     * @return the SharedImageProperties object itself.
     */
    public SharedImageProperties withVersions(List<ImageVersionProperties> versions) {
        this.versions = versions;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (versions() != null) {
            versions().forEach(e -> e.validate());
        }
    }
}
