// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.devtestlabs.models.EnableState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Properties of a shared gallery. */
@Fluent
public final class SharedGalleryInner extends Resource {
    /*
     * The properties of the resource.
     */
    @JsonProperty(value = "properties")
    private SharedGalleryProperties innerProperties;

    /*
     * The system metadata relating to this resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: The properties of the resource.
     *
     * @return the innerProperties value.
     */
    private SharedGalleryProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SharedGalleryInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SharedGalleryInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the galleryId property: The shared image gallery resource Id.
     *
     * @return the galleryId value.
     */
    public String galleryId() {
        return this.innerProperties() == null ? null : this.innerProperties().galleryId();
    }

    /**
     * Set the galleryId property: The shared image gallery resource Id.
     *
     * @param galleryId the galleryId value to set.
     * @return the SharedGalleryInner object itself.
     */
    public SharedGalleryInner withGalleryId(String galleryId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedGalleryProperties();
        }
        this.innerProperties().withGalleryId(galleryId);
        return this;
    }

    /**
     * Get the allowAllImages property: Enables all images in the gallery to be available in the lab for VM creation.
     * This will override the EnableState on shared images.
     *
     * @return the allowAllImages value.
     */
    public EnableState allowAllImages() {
        return this.innerProperties() == null ? null : this.innerProperties().allowAllImages();
    }

    /**
     * Set the allowAllImages property: Enables all images in the gallery to be available in the lab for VM creation.
     * This will override the EnableState on shared images.
     *
     * @param allowAllImages the allowAllImages value to set.
     * @return the SharedGalleryInner object itself.
     */
    public SharedGalleryInner withAllowAllImages(EnableState allowAllImages) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedGalleryProperties();
        }
        this.innerProperties().withAllowAllImages(allowAllImages);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueIdentifier();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
