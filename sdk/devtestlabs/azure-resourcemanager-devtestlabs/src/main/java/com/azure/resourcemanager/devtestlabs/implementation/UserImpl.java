// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.UserInner;
import com.azure.resourcemanager.devtestlabs.models.User;
import com.azure.resourcemanager.devtestlabs.models.UserFragment;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class UserImpl implements User, User.Definition, User.Update {
    private UserInner innerObject;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public OffsetDateTime createdDate() {
        return this.innerModel().createdDate();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public String principalName() {
        return this.innerModel().principalName();
    }

    public String principalId() {
        return this.innerModel().principalId();
    }

    public String tenantId() {
        return this.innerModel().tenantId();
    }

    public String objectId() {
        return this.innerModel().objectId();
    }

    public String appId() {
        return this.innerModel().appId();
    }

    public String keyVaultUri() {
        return this.innerModel().keyVaultUri();
    }

    public String keyVaultId() {
        return this.innerModel().keyVaultId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public UserInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labName;

    private String name;

    private UserFragment updateUser;

    public UserImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    public User create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .createOrUpdate(resourceGroupName, labName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public User create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .createOrUpdate(resourceGroupName, labName, name, this.innerModel(), context);
        return this;
    }

    UserImpl(String name, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = new UserInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public UserImpl update() {
        this.updateUser = new UserFragment();
        return this;
    }

    public User apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .updateWithResponse(resourceGroupName, labName, name, updateUser, Context.NONE)
                .getValue();
        return this;
    }

    public User apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .updateWithResponse(resourceGroupName, labName, name, updateUser, context)
                .getValue();
        return this;
    }

    UserImpl(UserInner innerObject, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "users");
    }

    public User refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .getWithResponse(resourceGroupName, labName, name, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public User refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getUsers()
                .getWithResponse(resourceGroupName, labName, name, localExpand, context)
                .getValue();
        return this;
    }

    public UserImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public UserImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public UserImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateUser.withTags(tags);
            return this;
        }
    }

    public UserImpl withPrincipalName(String principalName) {
        this.innerModel().withPrincipalName(principalName);
        return this;
    }

    public UserImpl withPrincipalId(String principalId) {
        this.innerModel().withPrincipalId(principalId);
        return this;
    }

    public UserImpl withTenantId(String tenantId) {
        this.innerModel().withTenantId(tenantId);
        return this;
    }

    public UserImpl withObjectId(String objectId) {
        this.innerModel().withObjectId(objectId);
        return this;
    }

    public UserImpl withAppId(String appId) {
        this.innerModel().withAppId(appId);
        return this;
    }

    public UserImpl withKeyVaultUri(String keyVaultUri) {
        this.innerModel().withKeyVaultUri(keyVaultUri);
        return this;
    }

    public UserImpl withKeyVaultId(String keyVaultId) {
        this.innerModel().withKeyVaultId(keyVaultId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
