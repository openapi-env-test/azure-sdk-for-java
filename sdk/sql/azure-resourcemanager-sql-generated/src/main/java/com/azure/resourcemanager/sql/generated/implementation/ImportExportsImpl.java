// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ImportExportsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ImportExportOperationResultInner;
import com.azure.resourcemanager.sql.generated.models.ImportExistingDatabaseDefinition;
import com.azure.resourcemanager.sql.generated.models.ImportExportOperationResult;
import com.azure.resourcemanager.sql.generated.models.ImportExports;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ImportExportsImpl implements ImportExports {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ImportExportsImpl.class);

    private final ImportExportsClient innerClient;

    private final SqlManager serviceManager;

    public ImportExportsImpl(ImportExportsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ImportExportOperationResult importMethod(
        String resourceGroupName, String serverName, String databaseName, ImportExistingDatabaseDefinition parameters) {
        ImportExportOperationResultInner inner =
            this.serviceClient().importMethod(resourceGroupName, serverName, databaseName, parameters);
        if (inner != null) {
            return new ImportExportOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ImportExportOperationResult importMethod(
        String resourceGroupName,
        String serverName,
        String databaseName,
        ImportExistingDatabaseDefinition parameters,
        Context context) {
        ImportExportOperationResultInner inner =
            this.serviceClient().importMethod(resourceGroupName, serverName, databaseName, parameters, context);
        if (inner != null) {
            return new ImportExportOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ImportExportsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
