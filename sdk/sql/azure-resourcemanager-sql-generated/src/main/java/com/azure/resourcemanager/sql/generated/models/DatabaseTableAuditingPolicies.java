// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of DatabaseTableAuditingPolicies. */
public interface DatabaseTableAuditingPolicies {
    /**
     * Gets a database's table auditing policy. Table auditing is deprecated, use blob auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the table audit policy is defined.
     * @param tableAuditingPolicyName The name of the table auditing policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's table auditing policy.
     */
    DatabaseTableAuditingPolicy get(
        String resourceGroupName,
        String serverName,
        String databaseName,
        TableAuditingPolicyName tableAuditingPolicyName);

    /**
     * Gets a database's table auditing policy. Table auditing is deprecated, use blob auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the table audit policy is defined.
     * @param tableAuditingPolicyName The name of the table auditing policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's table auditing policy.
     */
    Response<DatabaseTableAuditingPolicy> getWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        TableAuditingPolicyName tableAuditingPolicyName,
        Context context);

    /**
     * Lists a database's table auditing policies. Table auditing is deprecated, use blob auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the table audit policy is defined.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the response to a list database table auditing policies request.
     */
    DatabaseTableAuditingPolicyListResult listByDatabase(
        String resourceGroupName, String serverName, String databaseName);

    /**
     * Lists a database's table auditing policies. Table auditing is deprecated, use blob auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the table audit policy is defined.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the response to a list database table auditing policies request.
     */
    Response<DatabaseTableAuditingPolicyListResult> listByDatabaseWithResponse(
        String resourceGroupName, String serverName, String databaseName, Context context);

    /**
     * Gets a database's table auditing policy. Table auditing is deprecated, use blob auditing instead.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's table auditing policy.
     */
    DatabaseTableAuditingPolicy getById(String id);

    /**
     * Gets a database's table auditing policy. Table auditing is deprecated, use blob auditing instead.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's table auditing policy.
     */
    Response<DatabaseTableAuditingPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new DatabaseTableAuditingPolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new DatabaseTableAuditingPolicy definition.
     */
    DatabaseTableAuditingPolicy.DefinitionStages.Blank define(TableAuditingPolicyName name);
}
