// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseConnectionPolicyInner;
import com.azure.resourcemanager.sql.generated.models.ConnectionPolicyName;
import com.azure.resourcemanager.sql.generated.models.DatabaseConnectionPolicy;

public final class DatabaseConnectionPolicyImpl
    implements DatabaseConnectionPolicy, DatabaseConnectionPolicy.Definition, DatabaseConnectionPolicy.Update {
    private DatabaseConnectionPolicyInner innerObject;

    private final SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String location() {
        return this.innerModel().location();
    }

    public String securityEnabledAccess() {
        return this.innerModel().securityEnabledAccess();
    }

    public String proxyDnsName() {
        return this.innerModel().proxyDnsName();
    }

    public String proxyPort() {
        return this.innerModel().proxyPort();
    }

    public String visibility() {
        return this.innerModel().visibility();
    }

    public String useServerDefault() {
        return this.innerModel().useServerDefault();
    }

    public String redirectionState() {
        return this.innerModel().redirectionState();
    }

    public String state() {
        return this.innerModel().state();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DatabaseConnectionPolicyInner innerModel() {
        return this.innerObject;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serverName;

    private String databaseName;

    private ConnectionPolicyName connectionPolicyName;

    public DatabaseConnectionPolicyImpl withExistingDatabase(
        String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    public DatabaseConnectionPolicy create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, connectionPolicyName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseConnectionPolicy create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, connectionPolicyName, this.innerModel(), context)
                .getValue();
        return this;
    }

    DatabaseConnectionPolicyImpl(ConnectionPolicyName name, SqlManager serviceManager) {
        this.innerObject = new DatabaseConnectionPolicyInner();
        this.serviceManager = serviceManager;
        this.connectionPolicyName = name;
    }

    public DatabaseConnectionPolicyImpl update() {
        return this;
    }

    public DatabaseConnectionPolicy apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, connectionPolicyName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseConnectionPolicy apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, connectionPolicyName, this.innerModel(), context)
                .getValue();
        return this;
    }

    DatabaseConnectionPolicyImpl(DatabaseConnectionPolicyInner innerObject, SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serverName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
        this.connectionPolicyName =
            ConnectionPolicyName.fromString(Utils.getValueFromIdByName(innerObject.id(), "connectionPolicies"));
    }

    public DatabaseConnectionPolicy refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .getWithResponse(resourceGroupName, serverName, databaseName, connectionPolicyName, Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseConnectionPolicy refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseConnectionPolicies()
                .getWithResponse(resourceGroupName, serverName, databaseName, connectionPolicyName, context)
                .getValue();
        return this;
    }

    public DatabaseConnectionPolicyImpl withSecurityEnabledAccess(String securityEnabledAccess) {
        this.innerModel().withSecurityEnabledAccess(securityEnabledAccess);
        return this;
    }

    public DatabaseConnectionPolicyImpl withProxyDnsName(String proxyDnsName) {
        this.innerModel().withProxyDnsName(proxyDnsName);
        return this;
    }

    public DatabaseConnectionPolicyImpl withProxyPort(String proxyPort) {
        this.innerModel().withProxyPort(proxyPort);
        return this;
    }

    public DatabaseConnectionPolicyImpl withVisibility(String visibility) {
        this.innerModel().withVisibility(visibility);
        return this;
    }

    public DatabaseConnectionPolicyImpl withUseServerDefault(String useServerDefault) {
        this.innerModel().withUseServerDefault(useServerDefault);
        return this;
    }

    public DatabaseConnectionPolicyImpl withRedirectionState(String redirectionState) {
        this.innerModel().withRedirectionState(redirectionState);
        return this;
    }

    public DatabaseConnectionPolicyImpl withState(String state) {
        this.innerModel().withState(state);
        return this;
    }
}
