// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The Elastic Pool DTU capability. */
@Immutable
public final class ElasticPoolDtuCapability {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ElasticPoolDtuCapability.class);

    /*
     * The maximum size of the database (see 'unit' for the units).
     */
    @JsonProperty(value = "limit", access = JsonProperty.Access.WRITE_ONLY)
    private Long limit;

    /*
     * The maximum number of databases supported.
     */
    @JsonProperty(value = "maxDatabaseCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long maxDatabaseCount;

    /*
     * The status of the capability.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private CapabilityStatus status;

    /*
     * The list of supported max sizes.
     */
    @JsonProperty(value = "supportedMaxSizes", access = JsonProperty.Access.WRITE_ONLY)
    private List<MaxSizeCapability> supportedMaxSizes;

    /*
     * The included (free) max size for this service level objective.
     */
    @JsonProperty(value = "includedMaxSize", access = JsonProperty.Access.WRITE_ONLY)
    private MaxSizeCapability includedMaxSize;

    /*
     * The list of supported max database sizes.
     */
    @JsonProperty(value = "supportedPerDatabaseMaxSizes", access = JsonProperty.Access.WRITE_ONLY)
    private List<MaxSizeCapability> supportedPerDatabaseMaxSizes;

    /*
     * The list of supported max database DTUs.
     */
    @JsonProperty(value = "supportedPerDatabaseMaxDtus", access = JsonProperty.Access.WRITE_ONLY)
    private List<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus;

    /**
     * Get the limit property: The maximum size of the database (see 'unit' for the units).
     *
     * @return the limit value.
     */
    public Long limit() {
        return this.limit;
    }

    /**
     * Get the maxDatabaseCount property: The maximum number of databases supported.
     *
     * @return the maxDatabaseCount value.
     */
    public Long maxDatabaseCount() {
        return this.maxDatabaseCount;
    }

    /**
     * Get the status property: The status of the capability.
     *
     * @return the status value.
     */
    public CapabilityStatus status() {
        return this.status;
    }

    /**
     * Get the supportedMaxSizes property: The list of supported max sizes.
     *
     * @return the supportedMaxSizes value.
     */
    public List<MaxSizeCapability> supportedMaxSizes() {
        return this.supportedMaxSizes;
    }

    /**
     * Get the includedMaxSize property: The included (free) max size for this service level objective.
     *
     * @return the includedMaxSize value.
     */
    public MaxSizeCapability includedMaxSize() {
        return this.includedMaxSize;
    }

    /**
     * Get the supportedPerDatabaseMaxSizes property: The list of supported max database sizes.
     *
     * @return the supportedPerDatabaseMaxSizes value.
     */
    public List<MaxSizeCapability> supportedPerDatabaseMaxSizes() {
        return this.supportedPerDatabaseMaxSizes;
    }

    /**
     * Get the supportedPerDatabaseMaxDtus property: The list of supported max database DTUs.
     *
     * @return the supportedPerDatabaseMaxDtus value.
     */
    public List<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus() {
        return this.supportedPerDatabaseMaxDtus;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (supportedMaxSizes() != null) {
            supportedMaxSizes().forEach(e -> e.validate());
        }
        if (includedMaxSize() != null) {
            includedMaxSize().validate();
        }
        if (supportedPerDatabaseMaxSizes() != null) {
            supportedPerDatabaseMaxSizes().forEach(e -> e.validate());
        }
        if (supportedPerDatabaseMaxDtus() != null) {
            supportedPerDatabaseMaxDtus().forEach(e -> e.validate());
        }
    }
}
