// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseInner;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.UUID;

/** An immutable client-side representation of Database. */
public interface Database {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The name and tier of the SKU.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the kind property: Kind of database. This is metadata used for the Azure portal experience.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the createMode property: Specifies the mode of database creation.
     *
     * <p>Default: regular database creation.
     *
     * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the source database.
     *
     * <p>Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be
     * specified as the resource ID of the existing primary database.
     *
     * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
     * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be
     * specified.
     *
     * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the
     * recoverable database resource ID to restore.
     *
     * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified.
     * If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is
     * ignored. restorePointInTime may also be specified to restore from an earlier point in time.
     *
     * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
     * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
     *
     * <p>Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
     *
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * Gets the collation property: The collation of the database.
     *
     * @return the collation value.
     */
    String collation();

    /**
     * Gets the maxSizeBytes property: The max size of the database expressed in bytes.
     *
     * @return the maxSizeBytes value.
     */
    Long maxSizeBytes();

    /**
     * Gets the sampleName property: The name of the sample schema to apply when creating this database.
     *
     * @return the sampleName value.
     */
    SampleName sampleName();

    /**
     * Gets the elasticPoolId property: The resource identifier of the elastic pool containing this database.
     *
     * @return the elasticPoolId value.
     */
    String elasticPoolId();

    /**
     * Gets the sourceDatabaseId property: The resource identifier of the source database associated with create
     * operation of this database.
     *
     * @return the sourceDatabaseId value.
     */
    String sourceDatabaseId();

    /**
     * Gets the status property: The status of the database.
     *
     * @return the status value.
     */
    DatabaseStatus status();

    /**
     * Gets the databaseId property: The ID of the database.
     *
     * @return the databaseId value.
     */
    UUID databaseId();

    /**
     * Gets the creationDate property: The creation date of the database (ISO8601 format).
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the currentServiceObjectiveName property: The current service level objective name of the database.
     *
     * @return the currentServiceObjectiveName value.
     */
    String currentServiceObjectiveName();

    /**
     * Gets the defaultSecondaryLocation property: The default secondary region for this database.
     *
     * @return the defaultSecondaryLocation value.
     */
    String defaultSecondaryLocation();

    /**
     * Gets the failoverGroupId property: Failover Group resource identifier that this database belongs to.
     *
     * @return the failoverGroupId value.
     */
    String failoverGroupId();

    /**
     * Gets the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source database that
     * will be restored to create the new database.
     *
     * @return the restorePointInTime value.
     */
    OffsetDateTime restorePointInTime();

    /**
     * Gets the sourceDatabaseDeletionDate property: Specifies the time that the database was deleted.
     *
     * @return the sourceDatabaseDeletionDate value.
     */
    OffsetDateTime sourceDatabaseDeletionDate();

    /**
     * Gets the recoveryServicesRecoveryPointId property: The resource identifier of the recovery point associated with
     * create operation of this database.
     *
     * @return the recoveryServicesRecoveryPointId value.
     */
    String recoveryServicesRecoveryPointId();

    /**
     * Gets the longTermRetentionBackupResourceId property: The resource identifier of the long term retention backup
     * associated with create operation of this database.
     *
     * @return the longTermRetentionBackupResourceId value.
     */
    String longTermRetentionBackupResourceId();

    /**
     * Gets the recoverableDatabaseId property: The resource identifier of the recoverable database associated with
     * create operation of this database.
     *
     * @return the recoverableDatabaseId value.
     */
    String recoverableDatabaseId();

    /**
     * Gets the restorableDroppedDatabaseId property: The resource identifier of the restorable dropped database
     * associated with create operation of this database.
     *
     * @return the restorableDroppedDatabaseId value.
     */
    String restorableDroppedDatabaseId();

    /**
     * Gets the catalogCollation property: Collation of the metadata catalog.
     *
     * @return the catalogCollation value.
     */
    CatalogCollationType catalogCollation();

    /**
     * Gets the zoneRedundant property: Whether or not this database is zone redundant, which means the replicas of this
     * database will be spread across multiple availability zones.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.DatabaseInner object.
     *
     * @return the inner object.
     */
    DatabaseInner innerModel();

    /** The entirety of the Database definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Database definition stages. */
    interface DefinitionStages {
        /** The first stage of the Database definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Database definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Database definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String serverName);
        }
        /**
         * The stage of the Database definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithCreateMode,
                DefinitionStages.WithCollation,
                DefinitionStages.WithMaxSizeBytes,
                DefinitionStages.WithSampleName,
                DefinitionStages.WithElasticPoolId,
                DefinitionStages.WithSourceDatabaseId,
                DefinitionStages.WithRestorePointInTime,
                DefinitionStages.WithSourceDatabaseDeletionDate,
                DefinitionStages.WithRecoveryServicesRecoveryPointId,
                DefinitionStages.WithLongTermRetentionBackupResourceId,
                DefinitionStages.WithRecoverableDatabaseId,
                DefinitionStages.WithRestorableDroppedDatabaseId,
                DefinitionStages.WithCatalogCollation,
                DefinitionStages.WithZoneRedundant {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Database create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Database create(Context context);
        }
        /** The stage of the Database definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Database definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The name and tier of the SKU..
             *
             * @param sku The name and tier of the SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /** The stage of the Database definition allowing to specify createMode. */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: Specifies the mode of database creation.
             *
             * <p>Default: regular database creation.
             *
             * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the
             * resource ID of the source database.
             *
             * <p>Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be
             * specified as the resource ID of the existing primary database.
             *
             * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
             * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime
             * must be specified.
             *
             * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified
             * as the recoverable database resource ID to restore.
             *
             * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             * specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate
             * must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and
             * sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an
             * earlier point in time.
             *
             * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *
             * <p>Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition..
             *
             * @param createMode Specifies the mode of database creation.
             *     <p>Default: regular database creation.
             *     <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as
             *     the resource ID of the source database.
             *     <p>Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
             *     must be specified as the resource ID of the existing primary database.
             *     <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
             *     database. sourceDatabaseId must be specified as the resource ID of the existing database, and
             *     restorePointInTime must be specified.
             *     <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
             *     specified as the recoverable database resource ID to restore.
             *     <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             *     specified. If sourceDatabaseId is the database's original resource ID, then
             *     sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable
             *     dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
             *     be specified to restore from an earlier point in time.
             *     <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             *     recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *     <p>Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            WithCreate withCreateMode(CreateMode createMode);
        }
        /** The stage of the Database definition allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: The collation of the database..
             *
             * @param collation The collation of the database.
             * @return the next definition stage.
             */
            WithCreate withCollation(String collation);
        }
        /** The stage of the Database definition allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The max size of the database expressed in bytes..
             *
             * @param maxSizeBytes The max size of the database expressed in bytes.
             * @return the next definition stage.
             */
            WithCreate withMaxSizeBytes(Long maxSizeBytes);
        }
        /** The stage of the Database definition allowing to specify sampleName. */
        interface WithSampleName {
            /**
             * Specifies the sampleName property: The name of the sample schema to apply when creating this database..
             *
             * @param sampleName The name of the sample schema to apply when creating this database.
             * @return the next definition stage.
             */
            WithCreate withSampleName(SampleName sampleName);
        }
        /** The stage of the Database definition allowing to specify elasticPoolId. */
        interface WithElasticPoolId {
            /**
             * Specifies the elasticPoolId property: The resource identifier of the elastic pool containing this
             * database..
             *
             * @param elasticPoolId The resource identifier of the elastic pool containing this database.
             * @return the next definition stage.
             */
            WithCreate withElasticPoolId(String elasticPoolId);
        }
        /** The stage of the Database definition allowing to specify sourceDatabaseId. */
        interface WithSourceDatabaseId {
            /**
             * Specifies the sourceDatabaseId property: The resource identifier of the source database associated with
             * create operation of this database..
             *
             * @param sourceDatabaseId The resource identifier of the source database associated with create operation
             *     of this database.
             * @return the next definition stage.
             */
            WithCreate withSourceDatabaseId(String sourceDatabaseId);
        }
        /** The stage of the Database definition allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source
             * database that will be restored to create the new database..
             *
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will
             *     be restored to create the new database.
             * @return the next definition stage.
             */
            WithCreate withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the Database definition allowing to specify sourceDatabaseDeletionDate. */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies the sourceDatabaseDeletionDate property: Specifies the time that the database was deleted..
             *
             * @param sourceDatabaseDeletionDate Specifies the time that the database was deleted.
             * @return the next definition stage.
             */
            WithCreate withSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate);
        }
        /** The stage of the Database definition allowing to specify recoveryServicesRecoveryPointId. */
        interface WithRecoveryServicesRecoveryPointId {
            /**
             * Specifies the recoveryServicesRecoveryPointId property: The resource identifier of the recovery point
             * associated with create operation of this database..
             *
             * @param recoveryServicesRecoveryPointId The resource identifier of the recovery point associated with
             *     create operation of this database.
             * @return the next definition stage.
             */
            WithCreate withRecoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId);
        }
        /** The stage of the Database definition allowing to specify longTermRetentionBackupResourceId. */
        interface WithLongTermRetentionBackupResourceId {
            /**
             * Specifies the longTermRetentionBackupResourceId property: The resource identifier of the long term
             * retention backup associated with create operation of this database..
             *
             * @param longTermRetentionBackupResourceId The resource identifier of the long term retention backup
             *     associated with create operation of this database.
             * @return the next definition stage.
             */
            WithCreate withLongTermRetentionBackupResourceId(String longTermRetentionBackupResourceId);
        }
        /** The stage of the Database definition allowing to specify recoverableDatabaseId. */
        interface WithRecoverableDatabaseId {
            /**
             * Specifies the recoverableDatabaseId property: The resource identifier of the recoverable database
             * associated with create operation of this database..
             *
             * @param recoverableDatabaseId The resource identifier of the recoverable database associated with create
             *     operation of this database.
             * @return the next definition stage.
             */
            WithCreate withRecoverableDatabaseId(String recoverableDatabaseId);
        }
        /** The stage of the Database definition allowing to specify restorableDroppedDatabaseId. */
        interface WithRestorableDroppedDatabaseId {
            /**
             * Specifies the restorableDroppedDatabaseId property: The resource identifier of the restorable dropped
             * database associated with create operation of this database..
             *
             * @param restorableDroppedDatabaseId The resource identifier of the restorable dropped database associated
             *     with create operation of this database.
             * @return the next definition stage.
             */
            WithCreate withRestorableDroppedDatabaseId(String restorableDroppedDatabaseId);
        }
        /** The stage of the Database definition allowing to specify catalogCollation. */
        interface WithCatalogCollation {
            /**
             * Specifies the catalogCollation property: Collation of the metadata catalog..
             *
             * @param catalogCollation Collation of the metadata catalog.
             * @return the next definition stage.
             */
            WithCreate withCatalogCollation(CatalogCollationType catalogCollation);
        }
        /** The stage of the Database definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database is zone redundant, which means the
             * replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this
             *     database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Begins update for the Database resource.
     *
     * @return the stage of resource update.
     */
    Database.Update update();

    /** The template for Database update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithCreateMode,
            UpdateStages.WithCollation,
            UpdateStages.WithMaxSizeBytes,
            UpdateStages.WithSampleName,
            UpdateStages.WithElasticPoolId,
            UpdateStages.WithSourceDatabaseId,
            UpdateStages.WithRestorePointInTime,
            UpdateStages.WithSourceDatabaseDeletionDate,
            UpdateStages.WithRecoveryServicesRecoveryPointId,
            UpdateStages.WithLongTermRetentionBackupResourceId,
            UpdateStages.WithRecoverableDatabaseId,
            UpdateStages.WithRestorableDroppedDatabaseId,
            UpdateStages.WithCatalogCollation,
            UpdateStages.WithZoneRedundant {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Database apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Database apply(Context context);
    }
    /** The Database update stages. */
    interface UpdateStages {
        /** The stage of the Database update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Database update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The name and tier of the SKU..
             *
             * @param sku The name and tier of the SKU.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the Database update allowing to specify createMode. */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: Specifies the mode of database creation.
             *
             * <p>Default: regular database creation.
             *
             * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the
             * resource ID of the source database.
             *
             * <p>Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be
             * specified as the resource ID of the existing primary database.
             *
             * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
             * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime
             * must be specified.
             *
             * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified
             * as the recoverable database resource ID to restore.
             *
             * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             * specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate
             * must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and
             * sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an
             * earlier point in time.
             *
             * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *
             * <p>Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition..
             *
             * @param createMode Specifies the mode of database creation.
             *     <p>Default: regular database creation.
             *     <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as
             *     the resource ID of the source database.
             *     <p>Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
             *     must be specified as the resource ID of the existing primary database.
             *     <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
             *     database. sourceDatabaseId must be specified as the resource ID of the existing database, and
             *     restorePointInTime must be specified.
             *     <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
             *     specified as the recoverable database resource ID to restore.
             *     <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             *     specified. If sourceDatabaseId is the database's original resource ID, then
             *     sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable
             *     dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
             *     be specified to restore from an earlier point in time.
             *     <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             *     recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *     <p>Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            Update withCreateMode(CreateMode createMode);
        }
        /** The stage of the Database update allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: The collation of the database..
             *
             * @param collation The collation of the database.
             * @return the next definition stage.
             */
            Update withCollation(String collation);
        }
        /** The stage of the Database update allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The max size of the database expressed in bytes..
             *
             * @param maxSizeBytes The max size of the database expressed in bytes.
             * @return the next definition stage.
             */
            Update withMaxSizeBytes(Long maxSizeBytes);
        }
        /** The stage of the Database update allowing to specify sampleName. */
        interface WithSampleName {
            /**
             * Specifies the sampleName property: The name of the sample schema to apply when creating this database..
             *
             * @param sampleName The name of the sample schema to apply when creating this database.
             * @return the next definition stage.
             */
            Update withSampleName(SampleName sampleName);
        }
        /** The stage of the Database update allowing to specify elasticPoolId. */
        interface WithElasticPoolId {
            /**
             * Specifies the elasticPoolId property: The resource identifier of the elastic pool containing this
             * database..
             *
             * @param elasticPoolId The resource identifier of the elastic pool containing this database.
             * @return the next definition stage.
             */
            Update withElasticPoolId(String elasticPoolId);
        }
        /** The stage of the Database update allowing to specify sourceDatabaseId. */
        interface WithSourceDatabaseId {
            /**
             * Specifies the sourceDatabaseId property: The resource identifier of the source database associated with
             * create operation of this database..
             *
             * @param sourceDatabaseId The resource identifier of the source database associated with create operation
             *     of this database.
             * @return the next definition stage.
             */
            Update withSourceDatabaseId(String sourceDatabaseId);
        }
        /** The stage of the Database update allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source
             * database that will be restored to create the new database..
             *
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will
             *     be restored to create the new database.
             * @return the next definition stage.
             */
            Update withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the Database update allowing to specify sourceDatabaseDeletionDate. */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies the sourceDatabaseDeletionDate property: Specifies the time that the database was deleted..
             *
             * @param sourceDatabaseDeletionDate Specifies the time that the database was deleted.
             * @return the next definition stage.
             */
            Update withSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate);
        }
        /** The stage of the Database update allowing to specify recoveryServicesRecoveryPointId. */
        interface WithRecoveryServicesRecoveryPointId {
            /**
             * Specifies the recoveryServicesRecoveryPointId property: The resource identifier of the recovery point
             * associated with create operation of this database..
             *
             * @param recoveryServicesRecoveryPointId The resource identifier of the recovery point associated with
             *     create operation of this database.
             * @return the next definition stage.
             */
            Update withRecoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId);
        }
        /** The stage of the Database update allowing to specify longTermRetentionBackupResourceId. */
        interface WithLongTermRetentionBackupResourceId {
            /**
             * Specifies the longTermRetentionBackupResourceId property: The resource identifier of the long term
             * retention backup associated with create operation of this database..
             *
             * @param longTermRetentionBackupResourceId The resource identifier of the long term retention backup
             *     associated with create operation of this database.
             * @return the next definition stage.
             */
            Update withLongTermRetentionBackupResourceId(String longTermRetentionBackupResourceId);
        }
        /** The stage of the Database update allowing to specify recoverableDatabaseId. */
        interface WithRecoverableDatabaseId {
            /**
             * Specifies the recoverableDatabaseId property: The resource identifier of the recoverable database
             * associated with create operation of this database..
             *
             * @param recoverableDatabaseId The resource identifier of the recoverable database associated with create
             *     operation of this database.
             * @return the next definition stage.
             */
            Update withRecoverableDatabaseId(String recoverableDatabaseId);
        }
        /** The stage of the Database update allowing to specify restorableDroppedDatabaseId. */
        interface WithRestorableDroppedDatabaseId {
            /**
             * Specifies the restorableDroppedDatabaseId property: The resource identifier of the restorable dropped
             * database associated with create operation of this database..
             *
             * @param restorableDroppedDatabaseId The resource identifier of the restorable dropped database associated
             *     with create operation of this database.
             * @return the next definition stage.
             */
            Update withRestorableDroppedDatabaseId(String restorableDroppedDatabaseId);
        }
        /** The stage of the Database update allowing to specify catalogCollation. */
        interface WithCatalogCollation {
            /**
             * Specifies the catalogCollation property: Collation of the metadata catalog..
             *
             * @param catalogCollation Collation of the metadata catalog.
             * @return the next definition stage.
             */
            Update withCatalogCollation(CatalogCollationType catalogCollation);
        }
        /** The stage of the Database update allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database is zone redundant, which means the
             * replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this
             *     database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Database refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Database refresh(Context context);

    /**
     * Exports a database.
     *
     * @param parameters The database export request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ImportExport operation result resource.
     */
    ImportExportOperationResult export(ImportExportDatabaseDefinition parameters);

    /**
     * Exports a database.
     *
     * @param parameters The database export request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ImportExport operation result resource.
     */
    ImportExportOperationResult export(ImportExportDatabaseDefinition parameters, Context context);

    /**
     * Pauses a database.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database resource.
     */
    Database pause();

    /**
     * Pauses a database.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database resource.
     */
    Database pause(Context context);

    /**
     * Resumes a database.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database resource.
     */
    Database resume();

    /**
     * Resumes a database.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database resource.
     */
    Database resume(Context context);

    /**
     * Renames a database.
     *
     * @param parameters The resource move definition for renaming this database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rename(ResourceMoveDefinition parameters);

    /**
     * Renames a database.
     *
     * @param parameters The resource move definition for renaming this database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> renameWithResponse(ResourceMoveDefinition parameters, Context context);
}
