// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** An immutable client-side representation of Database. */
public interface Database {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the kind property: Kind of database. This is metadata used for the Azure portal experience.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the collation property: The collation of the database. If createMode is not Default, this value is ignored.
     *
     * @return the collation value.
     */
    String collation();

    /**
     * Gets the creationDate property: The creation date of the database (ISO8601 format).
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the containmentState property: The containment state of the database.
     *
     * @return the containmentState value.
     */
    Long containmentState();

    /**
     * Gets the currentServiceObjectiveId property: The current service level objective ID of the database. This is the
     * ID of the service level objective that is currently active.
     *
     * @return the currentServiceObjectiveId value.
     */
    UUID currentServiceObjectiveId();

    /**
     * Gets the databaseId property: The ID of the database.
     *
     * @return the databaseId value.
     */
    UUID databaseId();

    /**
     * Gets the earliestRestoreDate property: This records the earliest start date and time that restore is available
     * for this database (ISO8601 format).
     *
     * @return the earliestRestoreDate value.
     */
    OffsetDateTime earliestRestoreDate();

    /**
     * Gets the createMode property: Specifies the mode of database creation.
     *
     * <p>Default: regular database creation.
     *
     * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the source database.
     *
     * <p>OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of
     * an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
     *
     * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
     * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be
     * specified.
     *
     * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the
     * recoverable database resource ID to restore.
     *
     * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified.
     * If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is
     * ignored. restorePointInTime may also be specified to restore from an earlier point in time.
     *
     * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
     * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
     *
     * <p>Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition.
     *
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * Gets the sourceDatabaseId property: Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary,
     * PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source
     * database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the
     * same as the new database being created.
     *
     * @return the sourceDatabaseId value.
     */
    String sourceDatabaseId();

    /**
     * Gets the sourceDatabaseDeletionDate property: Conditional. If createMode is Restore and sourceDatabaseId is the
     * deleted database's original resource id when it existed (as opposed to its current restorable dropped database
     * id), then this value is required. Specifies the time that the database was deleted.
     *
     * @return the sourceDatabaseDeletionDate value.
     */
    OffsetDateTime sourceDatabaseDeletionDate();

    /**
     * Gets the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value is required.
     * If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source
     * database that will be restored to create the new database. Must be greater than or equal to the source database's
     * earliestRestoreDate value.
     *
     * @return the restorePointInTime value.
     */
    OffsetDateTime restorePointInTime();

    /**
     * Gets the recoveryServicesRecoveryPointResourceId property: Conditional. If createMode is
     * RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to
     * restore from.
     *
     * @return the recoveryServicesRecoveryPointResourceId value.
     */
    String recoveryServicesRecoveryPointResourceId();

    /**
     * Gets the edition property: The edition of the database. The DatabaseEditions enumeration contains all the valid
     * editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
     *
     * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
     * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
     * `Capabilities_ListByLocation` REST API or one of the following commands:
     *
     * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
     *
     * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
     *
     * @return the edition value.
     */
    DatabaseEdition edition();

    /**
     * Gets the maxSizeBytes property: The max size of the database expressed in bytes. If createMode is not Default,
     * this value is ignored. To see possible values, query the capabilities API
     * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by
     * operationId: "Capabilities_ListByLocation.".
     *
     * @return the maxSizeBytes value.
     */
    String maxSizeBytes();

    /**
     * Gets the requestedServiceObjectiveId property: The configured service level objective ID of the database. This is
     * the service level objective that is in the process of being applied to the database. Once successfully updated,
     * it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and
     * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of
     * requestedServiceObjectiveName.
     *
     * <p>The list of SKUs may vary by region and support offer. To determine the service objective ids that are
     * available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API.
     *
     * @return the requestedServiceObjectiveId value.
     */
    UUID requestedServiceObjectiveId();

    /**
     * Gets the requestedServiceObjectiveName property: The name of the configured service level objective of the
     * database. This is the service level objective that is in the process of being applied to the database. Once
     * successfully updated, it will match the value of serviceLevelObjective property.
     *
     * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
     * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
     * `Capabilities_ListByLocation` REST API or one of the following commands:
     *
     * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
     *
     * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
     *
     * @return the requestedServiceObjectiveName value.
     */
    ServiceObjectiveName requestedServiceObjectiveName();

    /**
     * Gets the serviceLevelObjective property: The current service level objective of the database.
     *
     * @return the serviceLevelObjective value.
     */
    ServiceObjectiveName serviceLevelObjective();

    /**
     * Gets the status property: The status of the database.
     *
     * @return the status value.
     */
    String status();

    /**
     * Gets the elasticPoolName property: The name of the elastic pool the database is in. If elasticPoolName and
     * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not
     * supported for DataWarehouse edition.
     *
     * @return the elasticPoolName value.
     */
    String elasticPoolName();

    /**
     * Gets the defaultSecondaryLocation property: The default secondary region for this database.
     *
     * @return the defaultSecondaryLocation value.
     */
    String defaultSecondaryLocation();

    /**
     * Gets the serviceTierAdvisors property: The list of service tier advisors for this database. Expanded property.
     *
     * @return the serviceTierAdvisors value.
     */
    List<ServiceTierAdvisor> serviceTierAdvisors();

    /**
     * Gets the transparentDataEncryption property: The transparent data encryption info for this database.
     *
     * @return the transparentDataEncryption value.
     */
    List<TransparentDataEncryption> transparentDataEncryption();

    /**
     * Gets the recommendedIndex property: The recommended indices for this database.
     *
     * @return the recommendedIndex value.
     */
    List<RecommendedIndex> recommendedIndex();

    /**
     * Gets the failoverGroupId property: The resource identifier of the failover group containing this database.
     *
     * @return the failoverGroupId value.
     */
    String failoverGroupId();

    /**
     * Gets the readScale property: Conditional. If the database is a geo-secondary, readScale indicates whether
     * read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.
     *
     * @return the readScale value.
     */
    ReadScale readScale();

    /**
     * Gets the sampleName property: Indicates the name of the sample schema to apply when creating this database. If
     * createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
     *
     * @return the sampleName value.
     */
    SampleName sampleName();

    /**
     * Gets the zoneRedundant property: Whether or not this database is zone redundant, which means the replicas of this
     * database will be spread across multiple availability zones.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.DatabaseInner object.
     *
     * @return the inner object.
     */
    DatabaseInner innerModel();

    /** The entirety of the Database definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Database definition stages. */
    interface DefinitionStages {
        /** The first stage of the Database definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Database definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Database definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String serverName);
        }
        /**
         * The stage of the Database definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithCollation,
                DefinitionStages.WithCreateMode,
                DefinitionStages.WithSourceDatabaseId,
                DefinitionStages.WithSourceDatabaseDeletionDate,
                DefinitionStages.WithRestorePointInTime,
                DefinitionStages.WithRecoveryServicesRecoveryPointResourceId,
                DefinitionStages.WithEdition,
                DefinitionStages.WithMaxSizeBytes,
                DefinitionStages.WithRequestedServiceObjectiveId,
                DefinitionStages.WithRequestedServiceObjectiveName,
                DefinitionStages.WithElasticPoolName,
                DefinitionStages.WithReadScale,
                DefinitionStages.WithSampleName,
                DefinitionStages.WithZoneRedundant {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Database create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Database create(Context context);
        }
        /** The stage of the Database definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Database definition allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: The collation of the database. If createMode is not Default, this value
             * is ignored..
             *
             * @param collation The collation of the database. If createMode is not Default, this value is ignored.
             * @return the next definition stage.
             */
            WithCreate withCollation(String collation);
        }
        /** The stage of the Database definition allowing to specify createMode. */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: Specifies the mode of database creation.
             *
             * <p>Default: regular database creation.
             *
             * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the
             * resource ID of the source database.
             *
             * <p>OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary
             * replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing
             * primary database.
             *
             * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
             * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime
             * must be specified.
             *
             * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified
             * as the recoverable database resource ID to restore.
             *
             * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             * specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate
             * must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and
             * sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an
             * earlier point in time.
             *
             * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *
             * <p>Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for
             * DataWarehouse edition..
             *
             * @param createMode Specifies the mode of database creation.
             *     <p>Default: regular database creation.
             *     <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as
             *     the resource ID of the source database.
             *     <p>OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary
             *     replica of an existing database. sourceDatabaseId must be specified as the resource ID of the
             *     existing primary database.
             *     <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
             *     database. sourceDatabaseId must be specified as the resource ID of the existing database, and
             *     restorePointInTime must be specified.
             *     <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
             *     specified as the recoverable database resource ID to restore.
             *     <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             *     specified. If sourceDatabaseId is the database's original resource ID, then
             *     sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable
             *     dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
             *     be specified to restore from an earlier point in time.
             *     <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             *     recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *     <p>Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported
             *     for DataWarehouse edition.
             * @return the next definition stage.
             */
            WithCreate withCreateMode(CreateMode createMode);
        }
        /** The stage of the Database definition allowing to specify sourceDatabaseId. */
        interface WithSourceDatabaseId {
            /**
             * Specifies the sourceDatabaseId property: Conditional. If createMode is Copy, NonReadableSecondary,
             * OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the
             * resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of
             * the source database must be the same as the new database being created..
             *
             * @param sourceDatabaseId Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary,
             *     PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of
             *     the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source
             *     database must be the same as the new database being created.
             * @return the next definition stage.
             */
            WithCreate withSourceDatabaseId(String sourceDatabaseId);
        }
        /** The stage of the Database definition allowing to specify sourceDatabaseDeletionDate. */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies the sourceDatabaseDeletionDate property: Conditional. If createMode is Restore and
             * sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its
             * current restorable dropped database id), then this value is required. Specifies the time that the
             * database was deleted..
             *
             * @param sourceDatabaseDeletionDate Conditional. If createMode is Restore and sourceDatabaseId is the
             *     deleted database's original resource id when it existed (as opposed to its current restorable dropped
             *     database id), then this value is required. Specifies the time that the database was deleted.
             * @return the next definition stage.
             */
            WithCreate withSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate);
        }
        /** The stage of the Database definition allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value
             * is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601
             * format) of the source database that will be restored to create the new database. Must be greater than or
             * equal to the source database's earliestRestoreDate value..
             *
             * @param restorePointInTime Conditional. If createMode is PointInTimeRestore, this value is required. If
             *     createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the
             *     source database that will be restored to create the new database. Must be greater than or equal to
             *     the source database's earliestRestoreDate value.
             * @return the next definition stage.
             */
            WithCreate withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the Database definition allowing to specify recoveryServicesRecoveryPointResourceId. */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies the recoveryServicesRecoveryPointResourceId property: Conditional. If createMode is
             * RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery
             * point to restore from..
             *
             * @param recoveryServicesRecoveryPointResourceId Conditional. If createMode is
             *     RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the
             *     recovery point to restore from.
             * @return the next definition stage.
             */
            WithCreate withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }
        /** The stage of the Database definition allowing to specify edition. */
        interface WithEdition {
            /**
             * Specifies the edition property: The edition of the database. The DatabaseEditions enumeration contains
             * all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
             * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
             * `Capabilities_ListByLocation` REST API or one of the following commands:
             *
             * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *
             * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ```` .
             *
             * @param edition The edition of the database. The DatabaseEditions enumeration contains all the valid
             *     editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
             *     <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU
             *     name, tier/edition, family, and capacity) that are available to your subscription in an Azure region,
             *     use the `Capabilities_ListByLocation` REST API or one of the following commands:
             *     <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *     <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
             * @return the next definition stage.
             */
            WithCreate withEdition(DatabaseEdition edition);
        }
        /** The stage of the Database definition allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The max size of the database expressed in bytes. If createMode is
             * not Default, this value is ignored. To see possible values, query the capabilities API
             * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to
             * by operationId: "Capabilities_ListByLocation.".
             *
             * @param maxSizeBytes The max size of the database expressed in bytes. If createMode is not Default, this
             *     value is ignored. To see possible values, query the capabilities API
             *     (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
             *     referred to by operationId: "Capabilities_ListByLocation.".
             * @return the next definition stage.
             */
            WithCreate withMaxSizeBytes(String maxSizeBytes);
        }
        /** The stage of the Database definition allowing to specify requestedServiceObjectiveId. */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies the requestedServiceObjectiveId property: The configured service level objective ID of the
             * database. This is the service level objective that is in the process of being applied to the database.
             * Once successfully updated, it will match the value of currentServiceObjectiveId property. If
             * requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of
             * requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the service objective ids that are
             * available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API..
             *
             * @param requestedServiceObjectiveId The configured service level objective ID of the database. This is the
             *     service level objective that is in the process of being applied to the database. Once successfully
             *     updated, it will match the value of currentServiceObjectiveId property. If
             *     requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of
             *     requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
             *     <p>The list of SKUs may vary by region and support offer. To determine the service objective ids that
             *     are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST
             *     API.
             * @return the next definition stage.
             */
            WithCreate withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }
        /** The stage of the Database definition allowing to specify requestedServiceObjectiveName. */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies the requestedServiceObjectiveName property: The name of the configured service level objective
             * of the database. This is the service level objective that is in the process of being applied to the
             * database. Once successfully updated, it will match the value of serviceLevelObjective property.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
             * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
             * `Capabilities_ListByLocation` REST API or one of the following commands:
             *
             * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *
             * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ```` .
             *
             * @param requestedServiceObjectiveName The name of the configured service level objective of the database.
             *     This is the service level objective that is in the process of being applied to the database. Once
             *     successfully updated, it will match the value of serviceLevelObjective property.
             *     <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU
             *     name, tier/edition, family, and capacity) that are available to your subscription in an Azure region,
             *     use the `Capabilities_ListByLocation` REST API or one of the following commands:
             *     <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *     <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
             * @return the next definition stage.
             */
            WithCreate withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }
        /** The stage of the Database definition allowing to specify elasticPoolName. */
        interface WithElasticPoolName {
            /**
             * Specifies the elasticPoolName property: The name of the elastic pool the database is in. If
             * elasticPoolName and requestedServiceObjectiveName are both updated, the value of
             * requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition..
             *
             * @param elasticPoolName The name of the elastic pool the database is in. If elasticPoolName and
             *     requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is
             *     ignored. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            WithCreate withElasticPoolName(String elasticPoolName);
        }
        /** The stage of the Database definition allowing to specify readScale. */
        interface WithReadScale {
            /**
             * Specifies the readScale property: Conditional. If the database is a geo-secondary, readScale indicates
             * whether read-only connections are allowed to this database or not. Not supported for DataWarehouse
             * edition..
             *
             * @param readScale Conditional. If the database is a geo-secondary, readScale indicates whether read-only
             *     connections are allowed to this database or not. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            WithCreate withReadScale(ReadScale readScale);
        }
        /** The stage of the Database definition allowing to specify sampleName. */
        interface WithSampleName {
            /**
             * Specifies the sampleName property: Indicates the name of the sample schema to apply when creating this
             * database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition..
             *
             * @param sampleName Indicates the name of the sample schema to apply when creating this database. If
             *     createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            WithCreate withSampleName(SampleName sampleName);
        }
        /** The stage of the Database definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database is zone redundant, which means the
             * replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this
             *     database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Begins update for the Database resource.
     *
     * @return the stage of resource update.
     */
    Database.Update update();

    /** The template for Database update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithCollation,
            UpdateStages.WithCreateMode,
            UpdateStages.WithSourceDatabaseId,
            UpdateStages.WithSourceDatabaseDeletionDate,
            UpdateStages.WithRestorePointInTime,
            UpdateStages.WithRecoveryServicesRecoveryPointResourceId,
            UpdateStages.WithEdition,
            UpdateStages.WithMaxSizeBytes,
            UpdateStages.WithRequestedServiceObjectiveId,
            UpdateStages.WithRequestedServiceObjectiveName,
            UpdateStages.WithElasticPoolName,
            UpdateStages.WithReadScale,
            UpdateStages.WithSampleName,
            UpdateStages.WithZoneRedundant {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Database apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Database apply(Context context);
    }
    /** The Database update stages. */
    interface UpdateStages {
        /** The stage of the Database update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Database update allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: The collation of the database. If createMode is not Default, this value
             * is ignored..
             *
             * @param collation The collation of the database. If createMode is not Default, this value is ignored.
             * @return the next definition stage.
             */
            Update withCollation(String collation);
        }
        /** The stage of the Database update allowing to specify createMode. */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: Specifies the mode of database creation.
             *
             * <p>Default: regular database creation.
             *
             * <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the
             * resource ID of the source database.
             *
             * <p>OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary
             * replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing
             * primary database.
             *
             * <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database.
             * sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime
             * must be specified.
             *
             * <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified
             * as the recoverable database resource ID to restore.
             *
             * <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             * specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate
             * must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and
             * sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an
             * earlier point in time.
             *
             * <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             * recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *
             * <p>Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for
             * DataWarehouse edition..
             *
             * @param createMode Specifies the mode of database creation.
             *     <p>Default: regular database creation.
             *     <p>Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as
             *     the resource ID of the source database.
             *     <p>OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary
             *     replica of an existing database. sourceDatabaseId must be specified as the resource ID of the
             *     existing primary database.
             *     <p>PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
             *     database. sourceDatabaseId must be specified as the resource ID of the existing database, and
             *     restorePointInTime must be specified.
             *     <p>Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
             *     specified as the recoverable database resource ID to restore.
             *     <p>Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be
             *     specified. If sourceDatabaseId is the database's original resource ID, then
             *     sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable
             *     dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
             *     be specified to restore from an earlier point in time.
             *     <p>RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
             *     recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
             *     <p>Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported
             *     for DataWarehouse edition.
             * @return the next definition stage.
             */
            Update withCreateMode(CreateMode createMode);
        }
        /** The stage of the Database update allowing to specify sourceDatabaseId. */
        interface WithSourceDatabaseId {
            /**
             * Specifies the sourceDatabaseId property: Conditional. If createMode is Copy, NonReadableSecondary,
             * OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the
             * resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of
             * the source database must be the same as the new database being created..
             *
             * @param sourceDatabaseId Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary,
             *     PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of
             *     the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source
             *     database must be the same as the new database being created.
             * @return the next definition stage.
             */
            Update withSourceDatabaseId(String sourceDatabaseId);
        }
        /** The stage of the Database update allowing to specify sourceDatabaseDeletionDate. */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies the sourceDatabaseDeletionDate property: Conditional. If createMode is Restore and
             * sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its
             * current restorable dropped database id), then this value is required. Specifies the time that the
             * database was deleted..
             *
             * @param sourceDatabaseDeletionDate Conditional. If createMode is Restore and sourceDatabaseId is the
             *     deleted database's original resource id when it existed (as opposed to its current restorable dropped
             *     database id), then this value is required. Specifies the time that the database was deleted.
             * @return the next definition stage.
             */
            Update withSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate);
        }
        /** The stage of the Database update allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value
             * is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601
             * format) of the source database that will be restored to create the new database. Must be greater than or
             * equal to the source database's earliestRestoreDate value..
             *
             * @param restorePointInTime Conditional. If createMode is PointInTimeRestore, this value is required. If
             *     createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the
             *     source database that will be restored to create the new database. Must be greater than or equal to
             *     the source database's earliestRestoreDate value.
             * @return the next definition stage.
             */
            Update withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the Database update allowing to specify recoveryServicesRecoveryPointResourceId. */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies the recoveryServicesRecoveryPointResourceId property: Conditional. If createMode is
             * RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery
             * point to restore from..
             *
             * @param recoveryServicesRecoveryPointResourceId Conditional. If createMode is
             *     RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the
             *     recovery point to restore from.
             * @return the next definition stage.
             */
            Update withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }
        /** The stage of the Database update allowing to specify edition. */
        interface WithEdition {
            /**
             * Specifies the edition property: The edition of the database. The DatabaseEditions enumeration contains
             * all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
             * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
             * `Capabilities_ListByLocation` REST API or one of the following commands:
             *
             * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *
             * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ```` .
             *
             * @param edition The edition of the database. The DatabaseEditions enumeration contains all the valid
             *     editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
             *     <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU
             *     name, tier/edition, family, and capacity) that are available to your subscription in an Azure region,
             *     use the `Capabilities_ListByLocation` REST API or one of the following commands:
             *     <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *     <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
             * @return the next definition stage.
             */
            Update withEdition(DatabaseEdition edition);
        }
        /** The stage of the Database update allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The max size of the database expressed in bytes. If createMode is
             * not Default, this value is ignored. To see possible values, query the capabilities API
             * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to
             * by operationId: "Capabilities_ListByLocation.".
             *
             * @param maxSizeBytes The max size of the database expressed in bytes. If createMode is not Default, this
             *     value is ignored. To see possible values, query the capabilities API
             *     (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
             *     referred to by operationId: "Capabilities_ListByLocation.".
             * @return the next definition stage.
             */
            Update withMaxSizeBytes(String maxSizeBytes);
        }
        /** The stage of the Database update allowing to specify requestedServiceObjectiveId. */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies the requestedServiceObjectiveId property: The configured service level objective ID of the
             * database. This is the service level objective that is in the process of being applied to the database.
             * Once successfully updated, it will match the value of currentServiceObjectiveId property. If
             * requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of
             * requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the service objective ids that are
             * available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API..
             *
             * @param requestedServiceObjectiveId The configured service level objective ID of the database. This is the
             *     service level objective that is in the process of being applied to the database. Once successfully
             *     updated, it will match the value of currentServiceObjectiveId property. If
             *     requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of
             *     requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
             *     <p>The list of SKUs may vary by region and support offer. To determine the service objective ids that
             *     are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST
             *     API.
             * @return the next definition stage.
             */
            Update withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }
        /** The stage of the Database update allowing to specify requestedServiceObjectiveName. */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies the requestedServiceObjectiveName property: The name of the configured service level objective
             * of the database. This is the service level objective that is in the process of being applied to the
             * database. Once successfully updated, it will match the value of serviceLevelObjective property.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
             * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
             * `Capabilities_ListByLocation` REST API or one of the following commands:
             *
             * <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *
             * <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ```` .
             *
             * @param requestedServiceObjectiveName The name of the configured service level objective of the database.
             *     This is the service level objective that is in the process of being applied to the database. Once
             *     successfully updated, it will match the value of serviceLevelObjective property.
             *     <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU
             *     name, tier/edition, family, and capacity) that are available to your subscription in an Azure region,
             *     use the `Capabilities_ListByLocation` REST API or one of the following commands:
             *     <p>```azurecli az sql db list-editions -l &lt;location&gt; -o table ````
             *     <p>```powershell Get-AzSqlServerServiceObjective -Location &lt;location&gt; ````.
             * @return the next definition stage.
             */
            Update withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }
        /** The stage of the Database update allowing to specify elasticPoolName. */
        interface WithElasticPoolName {
            /**
             * Specifies the elasticPoolName property: The name of the elastic pool the database is in. If
             * elasticPoolName and requestedServiceObjectiveName are both updated, the value of
             * requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition..
             *
             * @param elasticPoolName The name of the elastic pool the database is in. If elasticPoolName and
             *     requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is
             *     ignored. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            Update withElasticPoolName(String elasticPoolName);
        }
        /** The stage of the Database update allowing to specify readScale. */
        interface WithReadScale {
            /**
             * Specifies the readScale property: Conditional. If the database is a geo-secondary, readScale indicates
             * whether read-only connections are allowed to this database or not. Not supported for DataWarehouse
             * edition..
             *
             * @param readScale Conditional. If the database is a geo-secondary, readScale indicates whether read-only
             *     connections are allowed to this database or not. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            Update withReadScale(ReadScale readScale);
        }
        /** The stage of the Database update allowing to specify sampleName. */
        interface WithSampleName {
            /**
             * Specifies the sampleName property: Indicates the name of the sample schema to apply when creating this
             * database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition..
             *
             * @param sampleName Indicates the name of the sample schema to apply when creating this database. If
             *     createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
             * @return the next definition stage.
             */
            Update withSampleName(SampleName sampleName);
        }
        /** The stage of the Database update allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database is zone redundant, which means the
             * replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this
             *     database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Database refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Database refresh(Context context);

    /**
     * Pauses a data warehouse.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void pause();

    /**
     * Pauses a data warehouse.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void pause(Context context);

    /**
     * Resumes a data warehouse.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume();

    /**
     * Resumes a data warehouse.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resume(Context context);

    /**
     * Exports a database to a bacpac.
     *
     * @param parameters The required parameters for exporting a database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for Import/Export Get operation.
     */
    ImportExportResponse export(ExportRequest parameters);

    /**
     * Exports a database to a bacpac.
     *
     * @param parameters The required parameters for exporting a database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for Import/Export Get operation.
     */
    ImportExportResponse export(ExportRequest parameters, Context context);
}
