// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.models.DisasterRecoveryConfigurationAutoFailover;
import com.azure.resourcemanager.sql.generated.models.DisasterRecoveryConfigurationFailoverPolicy;
import com.azure.resourcemanager.sql.generated.models.DisasterRecoveryConfigurationRole;
import com.azure.resourcemanager.sql.generated.models.DisasterRecoveryConfigurationStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Represents a disaster recovery configuration. */
@JsonFlatten
@Fluent
public class DisasterRecoveryConfigurationInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DisasterRecoveryConfigurationInner.class);

    /*
     * Location of the server that contains this disaster recovery
     * configuration.
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /*
     * The status of the disaster recovery configuration.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private DisasterRecoveryConfigurationStatus status;

    /*
     * Whether or not failover can be done automatically.
     */
    @JsonProperty(value = "properties.autoFailover", required = true)
    private DisasterRecoveryConfigurationAutoFailover autoFailover;

    /*
     * How aggressive the automatic failover should be.
     */
    @JsonProperty(value = "properties.failoverPolicy", required = true)
    private DisasterRecoveryConfigurationFailoverPolicy failoverPolicy;

    /*
     * Id of the partner server.
     */
    @JsonProperty(value = "properties.partnerServerId", required = true)
    private String partnerServerId;

    /*
     * Logical name of the server.
     */
    @JsonProperty(value = "properties.logicalServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String logicalServerName;

    /*
     * Logical name of the partner server.
     */
    @JsonProperty(value = "properties.partnerLogicalServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String partnerLogicalServerName;

    /*
     * The role of the current server in the disaster recovery configuration.
     */
    @JsonProperty(value = "properties.role", access = JsonProperty.Access.WRITE_ONLY)
    private DisasterRecoveryConfigurationRole role;

    /**
     * Get the location property: Location of the server that contains this disaster recovery configuration.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Get the status property: The status of the disaster recovery configuration.
     *
     * @return the status value.
     */
    public DisasterRecoveryConfigurationStatus status() {
        return this.status;
    }

    /**
     * Get the autoFailover property: Whether or not failover can be done automatically.
     *
     * @return the autoFailover value.
     */
    public DisasterRecoveryConfigurationAutoFailover autoFailover() {
        return this.autoFailover;
    }

    /**
     * Set the autoFailover property: Whether or not failover can be done automatically.
     *
     * @param autoFailover the autoFailover value to set.
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withAutoFailover(DisasterRecoveryConfigurationAutoFailover autoFailover) {
        this.autoFailover = autoFailover;
        return this;
    }

    /**
     * Get the failoverPolicy property: How aggressive the automatic failover should be.
     *
     * @return the failoverPolicy value.
     */
    public DisasterRecoveryConfigurationFailoverPolicy failoverPolicy() {
        return this.failoverPolicy;
    }

    /**
     * Set the failoverPolicy property: How aggressive the automatic failover should be.
     *
     * @param failoverPolicy the failoverPolicy value to set.
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withFailoverPolicy(
        DisasterRecoveryConfigurationFailoverPolicy failoverPolicy) {
        this.failoverPolicy = failoverPolicy;
        return this;
    }

    /**
     * Get the partnerServerId property: Id of the partner server.
     *
     * @return the partnerServerId value.
     */
    public String partnerServerId() {
        return this.partnerServerId;
    }

    /**
     * Set the partnerServerId property: Id of the partner server.
     *
     * @param partnerServerId the partnerServerId value to set.
     * @return the DisasterRecoveryConfigurationInner object itself.
     */
    public DisasterRecoveryConfigurationInner withPartnerServerId(String partnerServerId) {
        this.partnerServerId = partnerServerId;
        return this;
    }

    /**
     * Get the logicalServerName property: Logical name of the server.
     *
     * @return the logicalServerName value.
     */
    public String logicalServerName() {
        return this.logicalServerName;
    }

    /**
     * Get the partnerLogicalServerName property: Logical name of the partner server.
     *
     * @return the partnerLogicalServerName value.
     */
    public String partnerLogicalServerName() {
        return this.partnerLogicalServerName;
    }

    /**
     * Get the role property: The role of the current server in the disaster recovery configuration.
     *
     * @return the role value.
     */
    public DisasterRecoveryConfigurationRole role() {
        return this.role;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoFailover() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property autoFailover in model DisasterRecoveryConfigurationInner"));
        }
        if (failoverPolicy() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property failoverPolicy in model DisasterRecoveryConfigurationInner"));
        }
        if (partnerServerId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property partnerServerId in model DisasterRecoveryConfigurationInner"));
        }
    }
}
