// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseInner;
import com.azure.resourcemanager.sql.generated.fluent.models.ServiceTierAdvisorInner;
import com.azure.resourcemanager.sql.generated.fluent.models.TransparentDataEncryptionInner;
import com.azure.resourcemanager.sql.generated.models.CreateMode;
import com.azure.resourcemanager.sql.generated.models.Database;
import com.azure.resourcemanager.sql.generated.models.DatabaseEdition;
import com.azure.resourcemanager.sql.generated.models.DatabaseUpdate;
import com.azure.resourcemanager.sql.generated.models.ExportRequest;
import com.azure.resourcemanager.sql.generated.models.ImportExportResponse;
import com.azure.resourcemanager.sql.generated.models.ReadScale;
import com.azure.resourcemanager.sql.generated.models.RecommendedIndex;
import com.azure.resourcemanager.sql.generated.models.SampleName;
import com.azure.resourcemanager.sql.generated.models.ServiceObjectiveName;
import com.azure.resourcemanager.sql.generated.models.ServiceTierAdvisor;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryption;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

public final class DatabaseImpl implements Database, Database.Definition, Database.Update {
    private DatabaseInner innerObject;

    private final SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String collation() {
        return this.innerModel().collation();
    }

    public OffsetDateTime creationDate() {
        return this.innerModel().creationDate();
    }

    public Long containmentState() {
        return this.innerModel().containmentState();
    }

    public UUID currentServiceObjectiveId() {
        return this.innerModel().currentServiceObjectiveId();
    }

    public UUID databaseId() {
        return this.innerModel().databaseId();
    }

    public OffsetDateTime earliestRestoreDate() {
        return this.innerModel().earliestRestoreDate();
    }

    public CreateMode createMode() {
        return this.innerModel().createMode();
    }

    public String sourceDatabaseId() {
        return this.innerModel().sourceDatabaseId();
    }

    public OffsetDateTime sourceDatabaseDeletionDate() {
        return this.innerModel().sourceDatabaseDeletionDate();
    }

    public OffsetDateTime restorePointInTime() {
        return this.innerModel().restorePointInTime();
    }

    public String recoveryServicesRecoveryPointResourceId() {
        return this.innerModel().recoveryServicesRecoveryPointResourceId();
    }

    public DatabaseEdition edition() {
        return this.innerModel().edition();
    }

    public String maxSizeBytes() {
        return this.innerModel().maxSizeBytes();
    }

    public UUID requestedServiceObjectiveId() {
        return this.innerModel().requestedServiceObjectiveId();
    }

    public ServiceObjectiveName requestedServiceObjectiveName() {
        return this.innerModel().requestedServiceObjectiveName();
    }

    public ServiceObjectiveName serviceLevelObjective() {
        return this.innerModel().serviceLevelObjective();
    }

    public String status() {
        return this.innerModel().status();
    }

    public String elasticPoolName() {
        return this.innerModel().elasticPoolName();
    }

    public String defaultSecondaryLocation() {
        return this.innerModel().defaultSecondaryLocation();
    }

    public List<ServiceTierAdvisor> serviceTierAdvisors() {
        List<ServiceTierAdvisorInner> inner = this.innerModel().serviceTierAdvisors();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new ServiceTierAdvisorImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<TransparentDataEncryption> transparentDataEncryption() {
        List<TransparentDataEncryptionInner> inner = this.innerModel().transparentDataEncryption();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new TransparentDataEncryptionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<RecommendedIndex> recommendedIndex() {
        List<RecommendedIndex> inner = this.innerModel().recommendedIndex();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String failoverGroupId() {
        return this.innerModel().failoverGroupId();
    }

    public ReadScale readScale() {
        return this.innerModel().readScale();
    }

    public SampleName sampleName() {
        return this.innerModel().sampleName();
    }

    public Boolean zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DatabaseInner innerModel() {
        return this.innerObject;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serverName;

    private String databaseName;

    private DatabaseUpdate updateParameters;

    public DatabaseImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    public Database create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .createOrUpdate(resourceGroupName, serverName, databaseName, this.innerModel(), Context.NONE);
        return this;
    }

    public Database create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .createOrUpdate(resourceGroupName, serverName, databaseName, this.innerModel(), context);
        return this;
    }

    DatabaseImpl(String name, SqlManager serviceManager) {
        this.innerObject = new DatabaseInner();
        this.serviceManager = serviceManager;
        this.databaseName = name;
    }

    public DatabaseImpl update() {
        this.updateParameters = new DatabaseUpdate();
        return this;
    }

    public Database apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .update(resourceGroupName, serverName, databaseName, updateParameters, Context.NONE);
        return this;
    }

    public Database apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .update(resourceGroupName, serverName, databaseName, updateParameters, context);
        return this;
    }

    DatabaseImpl(DatabaseInner innerObject, SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serverName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
    }

    public Database refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .getWithResponse(resourceGroupName, serverName, databaseName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public Database refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .getWithResponse(resourceGroupName, serverName, databaseName, localExpand, context)
                .getValue();
        return this;
    }

    public void pause() {
        serviceManager.databases().pause(resourceGroupName, serverName, databaseName);
    }

    public void pause(Context context) {
        serviceManager.databases().pause(resourceGroupName, serverName, databaseName, context);
    }

    public void resume() {
        serviceManager.databases().resume(resourceGroupName, serverName, databaseName);
    }

    public void resume(Context context) {
        serviceManager.databases().resume(resourceGroupName, serverName, databaseName, context);
    }

    public ImportExportResponse export(ExportRequest parameters) {
        return serviceManager.databases().export(resourceGroupName, serverName, databaseName, parameters);
    }

    public ImportExportResponse export(ExportRequest parameters, Context context) {
        return serviceManager.databases().export(resourceGroupName, serverName, databaseName, parameters, context);
    }

    public DatabaseImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DatabaseImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DatabaseImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public DatabaseImpl withCollation(String collation) {
        if (isInCreateMode()) {
            this.innerModel().withCollation(collation);
            return this;
        } else {
            this.updateParameters.withCollation(collation);
            return this;
        }
    }

    public DatabaseImpl withCreateMode(CreateMode createMode) {
        if (isInCreateMode()) {
            this.innerModel().withCreateMode(createMode);
            return this;
        } else {
            this.updateParameters.withCreateMode(createMode);
            return this;
        }
    }

    public DatabaseImpl withSourceDatabaseId(String sourceDatabaseId) {
        if (isInCreateMode()) {
            this.innerModel().withSourceDatabaseId(sourceDatabaseId);
            return this;
        } else {
            this.updateParameters.withSourceDatabaseId(sourceDatabaseId);
            return this;
        }
    }

    public DatabaseImpl withSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate) {
        if (isInCreateMode()) {
            this.innerModel().withSourceDatabaseDeletionDate(sourceDatabaseDeletionDate);
            return this;
        } else {
            this.updateParameters.withSourceDatabaseDeletionDate(sourceDatabaseDeletionDate);
            return this;
        }
    }

    public DatabaseImpl withRestorePointInTime(OffsetDateTime restorePointInTime) {
        if (isInCreateMode()) {
            this.innerModel().withRestorePointInTime(restorePointInTime);
            return this;
        } else {
            this.updateParameters.withRestorePointInTime(restorePointInTime);
            return this;
        }
    }

    public DatabaseImpl withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId) {
        if (isInCreateMode()) {
            this.innerModel().withRecoveryServicesRecoveryPointResourceId(recoveryServicesRecoveryPointResourceId);
            return this;
        } else {
            this.updateParameters.withRecoveryServicesRecoveryPointResourceId(recoveryServicesRecoveryPointResourceId);
            return this;
        }
    }

    public DatabaseImpl withEdition(DatabaseEdition edition) {
        if (isInCreateMode()) {
            this.innerModel().withEdition(edition);
            return this;
        } else {
            this.updateParameters.withEdition(edition);
            return this;
        }
    }

    public DatabaseImpl withMaxSizeBytes(String maxSizeBytes) {
        if (isInCreateMode()) {
            this.innerModel().withMaxSizeBytes(maxSizeBytes);
            return this;
        } else {
            this.updateParameters.withMaxSizeBytes(maxSizeBytes);
            return this;
        }
    }

    public DatabaseImpl withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId) {
        if (isInCreateMode()) {
            this.innerModel().withRequestedServiceObjectiveId(requestedServiceObjectiveId);
            return this;
        } else {
            this.updateParameters.withRequestedServiceObjectiveId(requestedServiceObjectiveId);
            return this;
        }
    }

    public DatabaseImpl withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName) {
        if (isInCreateMode()) {
            this.innerModel().withRequestedServiceObjectiveName(requestedServiceObjectiveName);
            return this;
        } else {
            this.updateParameters.withRequestedServiceObjectiveName(requestedServiceObjectiveName);
            return this;
        }
    }

    public DatabaseImpl withElasticPoolName(String elasticPoolName) {
        if (isInCreateMode()) {
            this.innerModel().withElasticPoolName(elasticPoolName);
            return this;
        } else {
            this.updateParameters.withElasticPoolName(elasticPoolName);
            return this;
        }
    }

    public DatabaseImpl withReadScale(ReadScale readScale) {
        if (isInCreateMode()) {
            this.innerModel().withReadScale(readScale);
            return this;
        } else {
            this.updateParameters.withReadScale(readScale);
            return this;
        }
    }

    public DatabaseImpl withSampleName(SampleName sampleName) {
        if (isInCreateMode()) {
            this.innerModel().withSampleName(sampleName);
            return this;
        } else {
            this.updateParameters.withSampleName(sampleName);
            return this;
        }
    }

    public DatabaseImpl withZoneRedundant(Boolean zoneRedundant) {
        if (isInCreateMode()) {
            this.innerModel().withZoneRedundant(zoneRedundant);
            return this;
        } else {
            this.updateParameters.withZoneRedundant(zoneRedundant);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
