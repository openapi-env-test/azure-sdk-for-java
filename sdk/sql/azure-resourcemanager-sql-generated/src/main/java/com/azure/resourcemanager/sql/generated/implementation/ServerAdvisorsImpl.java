// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ServerAdvisorsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.AdvisorInner;
import com.azure.resourcemanager.sql.generated.fluent.models.AdvisorListResultInner;
import com.azure.resourcemanager.sql.generated.models.Advisor;
import com.azure.resourcemanager.sql.generated.models.AdvisorListResult;
import com.azure.resourcemanager.sql.generated.models.ServerAdvisors;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerAdvisorsImpl implements ServerAdvisors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerAdvisorsImpl.class);

    private final ServerAdvisorsClient innerClient;

    private final SqlManager serviceManager;

    public ServerAdvisorsImpl(ServerAdvisorsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AdvisorListResult listByServer(String resourceGroupName, String serverName) {
        AdvisorListResultInner inner = this.serviceClient().listByServer(resourceGroupName, serverName);
        if (inner != null) {
            return new AdvisorListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AdvisorListResult> listByServerWithResponse(
        String resourceGroupName, String serverName, Context context) {
        Response<AdvisorListResultInner> inner =
            this.serviceClient().listByServerWithResponse(resourceGroupName, serverName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Advisor get(String resourceGroupName, String serverName, String advisorName) {
        AdvisorInner inner = this.serviceClient().get(resourceGroupName, serverName, advisorName);
        if (inner != null) {
            return new AdvisorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Advisor> getWithResponse(
        String resourceGroupName, String serverName, String advisorName, Context context) {
        Response<AdvisorInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, advisorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Advisor getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String advisorName = Utils.getValueFromIdByName(id, "advisors");
        if (advisorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'advisors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, advisorName, Context.NONE).getValue();
    }

    public Response<Advisor> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String advisorName = Utils.getValueFromIdByName(id, "advisors");
        if (advisorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'advisors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, advisorName, context);
    }

    private ServerAdvisorsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public AdvisorImpl define(String name) {
        return new AdvisorImpl(name, this.manager());
    }
}
