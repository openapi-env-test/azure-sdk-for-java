// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.SqlManagementClient;
import com.azure.resourcemanager.sql.generated.implementation.BackupLongTermRetentionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DataWarehouseUserActivitiesOperationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseBlobAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseOperationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseVulnerabilityAssessmentRuleBaselinesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseVulnerabilityAssessmentsImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ExtendedDatabaseBlobAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ExtendedServerBlobAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobAgentsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobCredentialsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobExecutionsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobStepExecutionsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobStepsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobTargetExecutionsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobTargetGroupsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobVersionsImpl;
import com.azure.resourcemanager.sql.generated.implementation.JobsImpl;
import com.azure.resourcemanager.sql.generated.implementation.LongTermRetentionBackupsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedBackupShortTermRetentionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedDatabaseSecurityAlertPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedDatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedInstanceAdministratorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedServerSecurityAlertPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.RestorableDroppedManagedDatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.RestorePointsImpl;
import com.azure.resourcemanager.sql.generated.implementation.SensitivityLabelsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerAutomaticTuningsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerBlobAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerDnsAliasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerSecurityAlertPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.SqlManagementClientBuilder;
import com.azure.resourcemanager.sql.generated.models.BackupLongTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.DataWarehouseUserActivitiesOperations;
import com.azure.resourcemanager.sql.generated.models.DatabaseBlobAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.DatabaseOperations;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessmentRuleBaselines;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessments;
import com.azure.resourcemanager.sql.generated.models.Databases;
import com.azure.resourcemanager.sql.generated.models.ExtendedDatabaseBlobAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.ExtendedServerBlobAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.JobAgents;
import com.azure.resourcemanager.sql.generated.models.JobCredentials;
import com.azure.resourcemanager.sql.generated.models.JobExecutions;
import com.azure.resourcemanager.sql.generated.models.JobStepExecutions;
import com.azure.resourcemanager.sql.generated.models.JobSteps;
import com.azure.resourcemanager.sql.generated.models.JobTargetExecutions;
import com.azure.resourcemanager.sql.generated.models.JobTargetGroups;
import com.azure.resourcemanager.sql.generated.models.JobVersions;
import com.azure.resourcemanager.sql.generated.models.Jobs;
import com.azure.resourcemanager.sql.generated.models.LongTermRetentionBackups;
import com.azure.resourcemanager.sql.generated.models.ManagedBackupShortTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseSecurityAlertPolicies;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabases;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceAdministrators;
import com.azure.resourcemanager.sql.generated.models.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.ManagedServerSecurityAlertPolicies;
import com.azure.resourcemanager.sql.generated.models.RestorableDroppedManagedDatabases;
import com.azure.resourcemanager.sql.generated.models.RestorePoints;
import com.azure.resourcemanager.sql.generated.models.SensitivityLabels;
import com.azure.resourcemanager.sql.generated.models.ServerAutomaticTunings;
import com.azure.resourcemanager.sql.generated.models.ServerBlobAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.ServerDnsAliases;
import com.azure.resourcemanager.sql.generated.models.ServerSecurityAlertPolicies;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to SqlManager. The Azure SQL Database management API provides a RESTful set of web services that interact
 * with Azure SQL Database services to manage your databases. The API enables you to create, retrieve, update, and
 * delete databases.
 */
public final class SqlManager {
    private ExtendedDatabaseBlobAuditingPolicies extendedDatabaseBlobAuditingPolicies;

    private ExtendedServerBlobAuditingPolicies extendedServerBlobAuditingPolicies;

    private ServerBlobAuditingPolicies serverBlobAuditingPolicies;

    private DatabaseBlobAuditingPolicies databaseBlobAuditingPolicies;

    private DatabaseOperations databaseOperations;

    private Databases databases;

    private DatabaseVulnerabilityAssessmentRuleBaselines databaseVulnerabilityAssessmentRuleBaselines;

    private DatabaseVulnerabilityAssessments databaseVulnerabilityAssessments;

    private DataWarehouseUserActivitiesOperations dataWarehouseUserActivitiesOperations;

    private JobAgents jobAgents;

    private JobCredentials jobCredentials;

    private JobExecutions jobExecutions;

    private Jobs jobs;

    private JobStepExecutions jobStepExecutions;

    private JobSteps jobSteps;

    private JobTargetExecutions jobTargetExecutions;

    private JobTargetGroups jobTargetGroups;

    private JobVersions jobVersions;

    private LongTermRetentionBackups longTermRetentionBackups;

    private BackupLongTermRetentionPolicies backupLongTermRetentionPolicies;

    private ManagedBackupShortTermRetentionPolicies managedBackupShortTermRetentionPolicies;

    private ManagedDatabases managedDatabases;

    private ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
        managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;

    private RestorableDroppedManagedDatabases restorableDroppedManagedDatabases;

    private RestorePoints restorePoints;

    private ServerAutomaticTunings serverAutomaticTunings;

    private ServerDnsAliases serverDnsAliases;

    private ServerSecurityAlertPolicies serverSecurityAlertPolicies;

    private ManagedDatabaseSecurityAlertPolicies managedDatabaseSecurityAlertPolicies;

    private ManagedServerSecurityAlertPolicies managedServerSecurityAlertPolicies;

    private SensitivityLabels sensitivityLabels;

    private ManagedInstanceAdministrators managedInstanceAdministrators;

    private final SqlManagementClient clientObject;

    private SqlManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new SqlManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Sql service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Sql service API instance.
     */
    public static SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create SqlManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SqlManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Sql service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Sql service API instance.
         */
        public SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.sql.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new SqlManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ExtendedDatabaseBlobAuditingPolicies. */
    public ExtendedDatabaseBlobAuditingPolicies extendedDatabaseBlobAuditingPolicies() {
        if (this.extendedDatabaseBlobAuditingPolicies == null) {
            this.extendedDatabaseBlobAuditingPolicies =
                new ExtendedDatabaseBlobAuditingPoliciesImpl(
                    clientObject.getExtendedDatabaseBlobAuditingPolicies(), this);
        }
        return extendedDatabaseBlobAuditingPolicies;
    }

    /** @return Resource collection API of ExtendedServerBlobAuditingPolicies. */
    public ExtendedServerBlobAuditingPolicies extendedServerBlobAuditingPolicies() {
        if (this.extendedServerBlobAuditingPolicies == null) {
            this.extendedServerBlobAuditingPolicies =
                new ExtendedServerBlobAuditingPoliciesImpl(clientObject.getExtendedServerBlobAuditingPolicies(), this);
        }
        return extendedServerBlobAuditingPolicies;
    }

    /** @return Resource collection API of ServerBlobAuditingPolicies. */
    public ServerBlobAuditingPolicies serverBlobAuditingPolicies() {
        if (this.serverBlobAuditingPolicies == null) {
            this.serverBlobAuditingPolicies =
                new ServerBlobAuditingPoliciesImpl(clientObject.getServerBlobAuditingPolicies(), this);
        }
        return serverBlobAuditingPolicies;
    }

    /** @return Resource collection API of DatabaseBlobAuditingPolicies. */
    public DatabaseBlobAuditingPolicies databaseBlobAuditingPolicies() {
        if (this.databaseBlobAuditingPolicies == null) {
            this.databaseBlobAuditingPolicies =
                new DatabaseBlobAuditingPoliciesImpl(clientObject.getDatabaseBlobAuditingPolicies(), this);
        }
        return databaseBlobAuditingPolicies;
    }

    /** @return Resource collection API of DatabaseOperations. */
    public DatabaseOperations databaseOperations() {
        if (this.databaseOperations == null) {
            this.databaseOperations = new DatabaseOperationsImpl(clientObject.getDatabaseOperations(), this);
        }
        return databaseOperations;
    }

    /** @return Resource collection API of Databases. */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(clientObject.getDatabases(), this);
        }
        return databases;
    }

    /** @return Resource collection API of DatabaseVulnerabilityAssessmentRuleBaselines. */
    public DatabaseVulnerabilityAssessmentRuleBaselines databaseVulnerabilityAssessmentRuleBaselines() {
        if (this.databaseVulnerabilityAssessmentRuleBaselines == null) {
            this.databaseVulnerabilityAssessmentRuleBaselines =
                new DatabaseVulnerabilityAssessmentRuleBaselinesImpl(
                    clientObject.getDatabaseVulnerabilityAssessmentRuleBaselines(), this);
        }
        return databaseVulnerabilityAssessmentRuleBaselines;
    }

    /** @return Resource collection API of DatabaseVulnerabilityAssessments. */
    public DatabaseVulnerabilityAssessments databaseVulnerabilityAssessments() {
        if (this.databaseVulnerabilityAssessments == null) {
            this.databaseVulnerabilityAssessments =
                new DatabaseVulnerabilityAssessmentsImpl(clientObject.getDatabaseVulnerabilityAssessments(), this);
        }
        return databaseVulnerabilityAssessments;
    }

    /** @return Resource collection API of DataWarehouseUserActivitiesOperations. */
    public DataWarehouseUserActivitiesOperations dataWarehouseUserActivitiesOperations() {
        if (this.dataWarehouseUserActivitiesOperations == null) {
            this.dataWarehouseUserActivitiesOperations =
                new DataWarehouseUserActivitiesOperationsImpl(
                    clientObject.getDataWarehouseUserActivitiesOperations(), this);
        }
        return dataWarehouseUserActivitiesOperations;
    }

    /** @return Resource collection API of JobAgents. */
    public JobAgents jobAgents() {
        if (this.jobAgents == null) {
            this.jobAgents = new JobAgentsImpl(clientObject.getJobAgents(), this);
        }
        return jobAgents;
    }

    /** @return Resource collection API of JobCredentials. */
    public JobCredentials jobCredentials() {
        if (this.jobCredentials == null) {
            this.jobCredentials = new JobCredentialsImpl(clientObject.getJobCredentials(), this);
        }
        return jobCredentials;
    }

    /** @return Resource collection API of JobExecutions. */
    public JobExecutions jobExecutions() {
        if (this.jobExecutions == null) {
            this.jobExecutions = new JobExecutionsImpl(clientObject.getJobExecutions(), this);
        }
        return jobExecutions;
    }

    /** @return Resource collection API of Jobs. */
    public Jobs jobs() {
        if (this.jobs == null) {
            this.jobs = new JobsImpl(clientObject.getJobs(), this);
        }
        return jobs;
    }

    /** @return Resource collection API of JobStepExecutions. */
    public JobStepExecutions jobStepExecutions() {
        if (this.jobStepExecutions == null) {
            this.jobStepExecutions = new JobStepExecutionsImpl(clientObject.getJobStepExecutions(), this);
        }
        return jobStepExecutions;
    }

    /** @return Resource collection API of JobSteps. */
    public JobSteps jobSteps() {
        if (this.jobSteps == null) {
            this.jobSteps = new JobStepsImpl(clientObject.getJobSteps(), this);
        }
        return jobSteps;
    }

    /** @return Resource collection API of JobTargetExecutions. */
    public JobTargetExecutions jobTargetExecutions() {
        if (this.jobTargetExecutions == null) {
            this.jobTargetExecutions = new JobTargetExecutionsImpl(clientObject.getJobTargetExecutions(), this);
        }
        return jobTargetExecutions;
    }

    /** @return Resource collection API of JobTargetGroups. */
    public JobTargetGroups jobTargetGroups() {
        if (this.jobTargetGroups == null) {
            this.jobTargetGroups = new JobTargetGroupsImpl(clientObject.getJobTargetGroups(), this);
        }
        return jobTargetGroups;
    }

    /** @return Resource collection API of JobVersions. */
    public JobVersions jobVersions() {
        if (this.jobVersions == null) {
            this.jobVersions = new JobVersionsImpl(clientObject.getJobVersions(), this);
        }
        return jobVersions;
    }

    /** @return Resource collection API of LongTermRetentionBackups. */
    public LongTermRetentionBackups longTermRetentionBackups() {
        if (this.longTermRetentionBackups == null) {
            this.longTermRetentionBackups =
                new LongTermRetentionBackupsImpl(clientObject.getLongTermRetentionBackups(), this);
        }
        return longTermRetentionBackups;
    }

    /** @return Resource collection API of BackupLongTermRetentionPolicies. */
    public BackupLongTermRetentionPolicies backupLongTermRetentionPolicies() {
        if (this.backupLongTermRetentionPolicies == null) {
            this.backupLongTermRetentionPolicies =
                new BackupLongTermRetentionPoliciesImpl(clientObject.getBackupLongTermRetentionPolicies(), this);
        }
        return backupLongTermRetentionPolicies;
    }

    /** @return Resource collection API of ManagedBackupShortTermRetentionPolicies. */
    public ManagedBackupShortTermRetentionPolicies managedBackupShortTermRetentionPolicies() {
        if (this.managedBackupShortTermRetentionPolicies == null) {
            this.managedBackupShortTermRetentionPolicies =
                new ManagedBackupShortTermRetentionPoliciesImpl(
                    clientObject.getManagedBackupShortTermRetentionPolicies(), this);
        }
        return managedBackupShortTermRetentionPolicies;
    }

    /** @return Resource collection API of ManagedDatabases. */
    public ManagedDatabases managedDatabases() {
        if (this.managedDatabases == null) {
            this.managedDatabases = new ManagedDatabasesImpl(clientObject.getManagedDatabases(), this);
        }
        return managedDatabases;
    }

    /** @return Resource collection API of ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies. */
    public ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
        managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies() {
        if (this.managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies == null) {
            this.managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies =
                new ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesImpl(
                    clientObject.getManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies(), this);
        }
        return managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
    }

    /** @return Resource collection API of RestorableDroppedManagedDatabases. */
    public RestorableDroppedManagedDatabases restorableDroppedManagedDatabases() {
        if (this.restorableDroppedManagedDatabases == null) {
            this.restorableDroppedManagedDatabases =
                new RestorableDroppedManagedDatabasesImpl(clientObject.getRestorableDroppedManagedDatabases(), this);
        }
        return restorableDroppedManagedDatabases;
    }

    /** @return Resource collection API of RestorePoints. */
    public RestorePoints restorePoints() {
        if (this.restorePoints == null) {
            this.restorePoints = new RestorePointsImpl(clientObject.getRestorePoints(), this);
        }
        return restorePoints;
    }

    /** @return Resource collection API of ServerAutomaticTunings. */
    public ServerAutomaticTunings serverAutomaticTunings() {
        if (this.serverAutomaticTunings == null) {
            this.serverAutomaticTunings =
                new ServerAutomaticTuningsImpl(clientObject.getServerAutomaticTunings(), this);
        }
        return serverAutomaticTunings;
    }

    /** @return Resource collection API of ServerDnsAliases. */
    public ServerDnsAliases serverDnsAliases() {
        if (this.serverDnsAliases == null) {
            this.serverDnsAliases = new ServerDnsAliasesImpl(clientObject.getServerDnsAliases(), this);
        }
        return serverDnsAliases;
    }

    /** @return Resource collection API of ServerSecurityAlertPolicies. */
    public ServerSecurityAlertPolicies serverSecurityAlertPolicies() {
        if (this.serverSecurityAlertPolicies == null) {
            this.serverSecurityAlertPolicies =
                new ServerSecurityAlertPoliciesImpl(clientObject.getServerSecurityAlertPolicies(), this);
        }
        return serverSecurityAlertPolicies;
    }

    /** @return Resource collection API of ManagedDatabaseSecurityAlertPolicies. */
    public ManagedDatabaseSecurityAlertPolicies managedDatabaseSecurityAlertPolicies() {
        if (this.managedDatabaseSecurityAlertPolicies == null) {
            this.managedDatabaseSecurityAlertPolicies =
                new ManagedDatabaseSecurityAlertPoliciesImpl(
                    clientObject.getManagedDatabaseSecurityAlertPolicies(), this);
        }
        return managedDatabaseSecurityAlertPolicies;
    }

    /** @return Resource collection API of ManagedServerSecurityAlertPolicies. */
    public ManagedServerSecurityAlertPolicies managedServerSecurityAlertPolicies() {
        if (this.managedServerSecurityAlertPolicies == null) {
            this.managedServerSecurityAlertPolicies =
                new ManagedServerSecurityAlertPoliciesImpl(clientObject.getManagedServerSecurityAlertPolicies(), this);
        }
        return managedServerSecurityAlertPolicies;
    }

    /** @return Resource collection API of SensitivityLabels. */
    public SensitivityLabels sensitivityLabels() {
        if (this.sensitivityLabels == null) {
            this.sensitivityLabels = new SensitivityLabelsImpl(clientObject.getSensitivityLabels(), this);
        }
        return sensitivityLabels;
    }

    /** @return Resource collection API of ManagedInstanceAdministrators. */
    public ManagedInstanceAdministrators managedInstanceAdministrators() {
        if (this.managedInstanceAdministrators == null) {
            this.managedInstanceAdministrators =
                new ManagedInstanceAdministratorsImpl(clientObject.getManagedInstanceAdministrators(), this);
        }
        return managedInstanceAdministrators;
    }

    /**
     * @return Wrapped service client SqlManagementClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public SqlManagementClient serviceClient() {
        return this.clientObject;
    }
}
