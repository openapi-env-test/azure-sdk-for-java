// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.SqlManagementClient;
import com.azure.resourcemanager.sql.generated.implementation.BackupShortTermRetentionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.CapabilitiesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseOperationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseVulnerabilityAssessmentScansImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ElasticPoolOperationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ElasticPoolsImpl;
import com.azure.resourcemanager.sql.generated.implementation.InstanceFailoverGroupsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedDatabaseVulnerabilityAssessmentRuleBaselinesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedDatabaseVulnerabilityAssessmentScansImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedDatabaseVulnerabilityAssessmentsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedInstanceEncryptionProtectorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedInstanceKeysImpl;
import com.azure.resourcemanager.sql.generated.implementation.ManagedInstanceTdeCertificatesImpl;
import com.azure.resourcemanager.sql.generated.implementation.RecoverableManagedDatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.SqlManagementClientBuilder;
import com.azure.resourcemanager.sql.generated.implementation.TdeCertificatesImpl;
import com.azure.resourcemanager.sql.generated.models.BackupShortTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.Capabilities;
import com.azure.resourcemanager.sql.generated.models.DatabaseOperations;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessmentScans;
import com.azure.resourcemanager.sql.generated.models.Databases;
import com.azure.resourcemanager.sql.generated.models.ElasticPoolOperations;
import com.azure.resourcemanager.sql.generated.models.ElasticPools;
import com.azure.resourcemanager.sql.generated.models.InstanceFailoverGroups;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessmentScans;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessments;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceEncryptionProtectors;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceKeys;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceTdeCertificates;
import com.azure.resourcemanager.sql.generated.models.RecoverableManagedDatabases;
import com.azure.resourcemanager.sql.generated.models.TdeCertificates;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to SqlManager. The Azure SQL Database management API provides a RESTful set of web services that interact
 * with Azure SQL Database services to manage your databases. The API enables you to create, retrieve, update, and
 * delete databases.
 */
public final class SqlManager {
    private DatabaseOperations databaseOperations;

    private ElasticPoolOperations elasticPoolOperations;

    private DatabaseVulnerabilityAssessmentScans databaseVulnerabilityAssessmentScans;

    private ManagedDatabaseVulnerabilityAssessmentRuleBaselines managedDatabaseVulnerabilityAssessmentRuleBaselines;

    private ManagedDatabaseVulnerabilityAssessmentScans managedDatabaseVulnerabilityAssessmentScans;

    private ManagedDatabaseVulnerabilityAssessments managedDatabaseVulnerabilityAssessments;

    private Capabilities capabilities;

    private Databases databases;

    private ElasticPools elasticPools;

    private InstanceFailoverGroups instanceFailoverGroups;

    private BackupShortTermRetentionPolicies backupShortTermRetentionPolicies;

    private TdeCertificates tdeCertificates;

    private ManagedInstanceTdeCertificates managedInstanceTdeCertificates;

    private ManagedInstanceKeys managedInstanceKeys;

    private ManagedInstanceEncryptionProtectors managedInstanceEncryptionProtectors;

    private RecoverableManagedDatabases recoverableManagedDatabases;

    private final SqlManagementClient clientObject;

    private SqlManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new SqlManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Sql service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Sql service API instance.
     */
    public static SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create SqlManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SqlManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Sql service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Sql service API instance.
         */
        public SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.sql.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new SqlManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of DatabaseOperations. */
    public DatabaseOperations databaseOperations() {
        if (this.databaseOperations == null) {
            this.databaseOperations = new DatabaseOperationsImpl(clientObject.getDatabaseOperations(), this);
        }
        return databaseOperations;
    }

    /** @return Resource collection API of ElasticPoolOperations. */
    public ElasticPoolOperations elasticPoolOperations() {
        if (this.elasticPoolOperations == null) {
            this.elasticPoolOperations = new ElasticPoolOperationsImpl(clientObject.getElasticPoolOperations(), this);
        }
        return elasticPoolOperations;
    }

    /** @return Resource collection API of DatabaseVulnerabilityAssessmentScans. */
    public DatabaseVulnerabilityAssessmentScans databaseVulnerabilityAssessmentScans() {
        if (this.databaseVulnerabilityAssessmentScans == null) {
            this.databaseVulnerabilityAssessmentScans =
                new DatabaseVulnerabilityAssessmentScansImpl(
                    clientObject.getDatabaseVulnerabilityAssessmentScans(), this);
        }
        return databaseVulnerabilityAssessmentScans;
    }

    /** @return Resource collection API of ManagedDatabaseVulnerabilityAssessmentRuleBaselines. */
    public ManagedDatabaseVulnerabilityAssessmentRuleBaselines managedDatabaseVulnerabilityAssessmentRuleBaselines() {
        if (this.managedDatabaseVulnerabilityAssessmentRuleBaselines == null) {
            this.managedDatabaseVulnerabilityAssessmentRuleBaselines =
                new ManagedDatabaseVulnerabilityAssessmentRuleBaselinesImpl(
                    clientObject.getManagedDatabaseVulnerabilityAssessmentRuleBaselines(), this);
        }
        return managedDatabaseVulnerabilityAssessmentRuleBaselines;
    }

    /** @return Resource collection API of ManagedDatabaseVulnerabilityAssessmentScans. */
    public ManagedDatabaseVulnerabilityAssessmentScans managedDatabaseVulnerabilityAssessmentScans() {
        if (this.managedDatabaseVulnerabilityAssessmentScans == null) {
            this.managedDatabaseVulnerabilityAssessmentScans =
                new ManagedDatabaseVulnerabilityAssessmentScansImpl(
                    clientObject.getManagedDatabaseVulnerabilityAssessmentScans(), this);
        }
        return managedDatabaseVulnerabilityAssessmentScans;
    }

    /** @return Resource collection API of ManagedDatabaseVulnerabilityAssessments. */
    public ManagedDatabaseVulnerabilityAssessments managedDatabaseVulnerabilityAssessments() {
        if (this.managedDatabaseVulnerabilityAssessments == null) {
            this.managedDatabaseVulnerabilityAssessments =
                new ManagedDatabaseVulnerabilityAssessmentsImpl(
                    clientObject.getManagedDatabaseVulnerabilityAssessments(), this);
        }
        return managedDatabaseVulnerabilityAssessments;
    }

    /** @return Resource collection API of Capabilities. */
    public Capabilities capabilities() {
        if (this.capabilities == null) {
            this.capabilities = new CapabilitiesImpl(clientObject.getCapabilities(), this);
        }
        return capabilities;
    }

    /** @return Resource collection API of Databases. */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(clientObject.getDatabases(), this);
        }
        return databases;
    }

    /** @return Resource collection API of ElasticPools. */
    public ElasticPools elasticPools() {
        if (this.elasticPools == null) {
            this.elasticPools = new ElasticPoolsImpl(clientObject.getElasticPools(), this);
        }
        return elasticPools;
    }

    /** @return Resource collection API of InstanceFailoverGroups. */
    public InstanceFailoverGroups instanceFailoverGroups() {
        if (this.instanceFailoverGroups == null) {
            this.instanceFailoverGroups =
                new InstanceFailoverGroupsImpl(clientObject.getInstanceFailoverGroups(), this);
        }
        return instanceFailoverGroups;
    }

    /** @return Resource collection API of BackupShortTermRetentionPolicies. */
    public BackupShortTermRetentionPolicies backupShortTermRetentionPolicies() {
        if (this.backupShortTermRetentionPolicies == null) {
            this.backupShortTermRetentionPolicies =
                new BackupShortTermRetentionPoliciesImpl(clientObject.getBackupShortTermRetentionPolicies(), this);
        }
        return backupShortTermRetentionPolicies;
    }

    /** @return Resource collection API of TdeCertificates. */
    public TdeCertificates tdeCertificates() {
        if (this.tdeCertificates == null) {
            this.tdeCertificates = new TdeCertificatesImpl(clientObject.getTdeCertificates(), this);
        }
        return tdeCertificates;
    }

    /** @return Resource collection API of ManagedInstanceTdeCertificates. */
    public ManagedInstanceTdeCertificates managedInstanceTdeCertificates() {
        if (this.managedInstanceTdeCertificates == null) {
            this.managedInstanceTdeCertificates =
                new ManagedInstanceTdeCertificatesImpl(clientObject.getManagedInstanceTdeCertificates(), this);
        }
        return managedInstanceTdeCertificates;
    }

    /** @return Resource collection API of ManagedInstanceKeys. */
    public ManagedInstanceKeys managedInstanceKeys() {
        if (this.managedInstanceKeys == null) {
            this.managedInstanceKeys = new ManagedInstanceKeysImpl(clientObject.getManagedInstanceKeys(), this);
        }
        return managedInstanceKeys;
    }

    /** @return Resource collection API of ManagedInstanceEncryptionProtectors. */
    public ManagedInstanceEncryptionProtectors managedInstanceEncryptionProtectors() {
        if (this.managedInstanceEncryptionProtectors == null) {
            this.managedInstanceEncryptionProtectors =
                new ManagedInstanceEncryptionProtectorsImpl(
                    clientObject.getManagedInstanceEncryptionProtectors(), this);
        }
        return managedInstanceEncryptionProtectors;
    }

    /** @return Resource collection API of RecoverableManagedDatabases. */
    public RecoverableManagedDatabases recoverableManagedDatabases() {
        if (this.recoverableManagedDatabases == null) {
            this.recoverableManagedDatabases =
                new RecoverableManagedDatabasesImpl(clientObject.getRecoverableManagedDatabases(), this);
        }
        return recoverableManagedDatabases;
    }

    /**
     * @return Wrapped service client SqlManagementClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public SqlManagementClient serviceClient() {
        return this.clientObject;
    }
}
