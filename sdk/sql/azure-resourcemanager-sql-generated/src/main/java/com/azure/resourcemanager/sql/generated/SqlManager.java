// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.SqlManagementClient;
import com.azure.resourcemanager.sql.generated.implementation.CapabilitiesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DataMaskingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DataMaskingRulesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseAdvisorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseConnectionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseTableAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseThreatDetectionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabaseUsagesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.DisasterRecoveryConfigurationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ElasticPoolActivitiesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ElasticPoolDatabaseActivitiesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ElasticPoolsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ExtensionsImpl;
import com.azure.resourcemanager.sql.generated.implementation.FirewallRulesImpl;
import com.azure.resourcemanager.sql.generated.implementation.GeoBackupPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.QueriesImpl;
import com.azure.resourcemanager.sql.generated.implementation.QueryStatisticsImpl;
import com.azure.resourcemanager.sql.generated.implementation.QueryTextsImpl;
import com.azure.resourcemanager.sql.generated.implementation.RecommendedElasticPoolsImpl;
import com.azure.resourcemanager.sql.generated.implementation.RecoverableDatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ReplicationLinksImpl;
import com.azure.resourcemanager.sql.generated.implementation.RestorableDroppedDatabasesImpl;
import com.azure.resourcemanager.sql.generated.implementation.RestorePointsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerAdvisorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerAzureADAdministratorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerCommunicationLinksImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerConnectionPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerTableAuditingPoliciesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServerUsagesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServersImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServiceObjectivesImpl;
import com.azure.resourcemanager.sql.generated.implementation.ServiceTierAdvisorsImpl;
import com.azure.resourcemanager.sql.generated.implementation.SqlManagementClientBuilder;
import com.azure.resourcemanager.sql.generated.implementation.TransparentDataEncryptionActivitiesImpl;
import com.azure.resourcemanager.sql.generated.implementation.TransparentDataEncryptionConfigurationsImpl;
import com.azure.resourcemanager.sql.generated.implementation.TransparentDataEncryptionsImpl;
import com.azure.resourcemanager.sql.generated.models.Capabilities;
import com.azure.resourcemanager.sql.generated.models.DataMaskingPolicies;
import com.azure.resourcemanager.sql.generated.models.DataMaskingRules;
import com.azure.resourcemanager.sql.generated.models.DatabaseAdvisors;
import com.azure.resourcemanager.sql.generated.models.DatabaseConnectionPolicies;
import com.azure.resourcemanager.sql.generated.models.DatabaseTableAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.DatabaseThreatDetectionPolicies;
import com.azure.resourcemanager.sql.generated.models.DatabaseUsages;
import com.azure.resourcemanager.sql.generated.models.Databases;
import com.azure.resourcemanager.sql.generated.models.DisasterRecoveryConfigurations;
import com.azure.resourcemanager.sql.generated.models.ElasticPoolActivities;
import com.azure.resourcemanager.sql.generated.models.ElasticPoolDatabaseActivities;
import com.azure.resourcemanager.sql.generated.models.ElasticPools;
import com.azure.resourcemanager.sql.generated.models.Extensions;
import com.azure.resourcemanager.sql.generated.models.FirewallRules;
import com.azure.resourcemanager.sql.generated.models.GeoBackupPolicies;
import com.azure.resourcemanager.sql.generated.models.Operations;
import com.azure.resourcemanager.sql.generated.models.Queries;
import com.azure.resourcemanager.sql.generated.models.QueryStatistics;
import com.azure.resourcemanager.sql.generated.models.QueryTexts;
import com.azure.resourcemanager.sql.generated.models.RecommendedElasticPools;
import com.azure.resourcemanager.sql.generated.models.RecoverableDatabases;
import com.azure.resourcemanager.sql.generated.models.ReplicationLinks;
import com.azure.resourcemanager.sql.generated.models.RestorableDroppedDatabases;
import com.azure.resourcemanager.sql.generated.models.RestorePoints;
import com.azure.resourcemanager.sql.generated.models.ServerAdvisors;
import com.azure.resourcemanager.sql.generated.models.ServerAzureADAdministrators;
import com.azure.resourcemanager.sql.generated.models.ServerCommunicationLinks;
import com.azure.resourcemanager.sql.generated.models.ServerConnectionPolicies;
import com.azure.resourcemanager.sql.generated.models.ServerTableAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.ServerUsages;
import com.azure.resourcemanager.sql.generated.models.Servers;
import com.azure.resourcemanager.sql.generated.models.ServiceObjectives;
import com.azure.resourcemanager.sql.generated.models.ServiceTierAdvisors;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryptionActivities;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryptionConfigurations;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryptions;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to SqlManager. The Azure SQL Database management API provides a RESTful set of web services that interact
 * with Azure SQL Database services to manage your databases. The API enables you to create, retrieve, update, and
 * delete databases.
 */
public final class SqlManager {
    private ServerAdvisors serverAdvisors;

    private DatabaseAdvisors databaseAdvisors;

    private RecoverableDatabases recoverableDatabases;

    private RestorableDroppedDatabases restorableDroppedDatabases;

    private Capabilities capabilities;

    private Servers servers;

    private ServerConnectionPolicies serverConnectionPolicies;

    private Databases databases;

    private DatabaseThreatDetectionPolicies databaseThreatDetectionPolicies;

    private DataMaskingPolicies dataMaskingPolicies;

    private DataMaskingRules dataMaskingRules;

    private TransparentDataEncryptionConfigurations transparentDataEncryptionConfigurations;

    private Extensions extensions;

    private DisasterRecoveryConfigurations disasterRecoveryConfigurations;

    private ElasticPools elasticPools;

    private FirewallRules firewallRules;

    private GeoBackupPolicies geoBackupPolicies;

    private Operations operations;

    private Queries queries;

    private QueryStatistics queryStatistics;

    private QueryTexts queryTexts;

    private RecommendedElasticPools recommendedElasticPools;

    private ReplicationLinks replicationLinks;

    private RestorePoints restorePoints;

    private ServerAzureADAdministrators serverAzureADAdministrators;

    private ServerCommunicationLinks serverCommunicationLinks;

    private ServiceObjectives serviceObjectives;

    private ElasticPoolActivities elasticPoolActivities;

    private ElasticPoolDatabaseActivities elasticPoolDatabaseActivities;

    private ServiceTierAdvisors serviceTierAdvisors;

    private TransparentDataEncryptions transparentDataEncryptions;

    private TransparentDataEncryptionActivities transparentDataEncryptionActivities;

    private ServerTableAuditingPolicies serverTableAuditingPolicies;

    private DatabaseTableAuditingPolicies databaseTableAuditingPolicies;

    private DatabaseConnectionPolicies databaseConnectionPolicies;

    private ServerUsages serverUsages;

    private DatabaseUsages databaseUsages;

    private final SqlManagementClient clientObject;

    private SqlManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new SqlManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Sql service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Sql service API instance.
     */
    public static SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create SqlManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SqlManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Sql service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Sql service API instance.
         */
        public SqlManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.sql.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new SqlManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ServerAdvisors. */
    public ServerAdvisors serverAdvisors() {
        if (this.serverAdvisors == null) {
            this.serverAdvisors = new ServerAdvisorsImpl(clientObject.getServerAdvisors(), this);
        }
        return serverAdvisors;
    }

    /** @return Resource collection API of DatabaseAdvisors. */
    public DatabaseAdvisors databaseAdvisors() {
        if (this.databaseAdvisors == null) {
            this.databaseAdvisors = new DatabaseAdvisorsImpl(clientObject.getDatabaseAdvisors(), this);
        }
        return databaseAdvisors;
    }

    /** @return Resource collection API of RecoverableDatabases. */
    public RecoverableDatabases recoverableDatabases() {
        if (this.recoverableDatabases == null) {
            this.recoverableDatabases = new RecoverableDatabasesImpl(clientObject.getRecoverableDatabases(), this);
        }
        return recoverableDatabases;
    }

    /** @return Resource collection API of RestorableDroppedDatabases. */
    public RestorableDroppedDatabases restorableDroppedDatabases() {
        if (this.restorableDroppedDatabases == null) {
            this.restorableDroppedDatabases =
                new RestorableDroppedDatabasesImpl(clientObject.getRestorableDroppedDatabases(), this);
        }
        return restorableDroppedDatabases;
    }

    /** @return Resource collection API of Capabilities. */
    public Capabilities capabilities() {
        if (this.capabilities == null) {
            this.capabilities = new CapabilitiesImpl(clientObject.getCapabilities(), this);
        }
        return capabilities;
    }

    /** @return Resource collection API of Servers. */
    public Servers servers() {
        if (this.servers == null) {
            this.servers = new ServersImpl(clientObject.getServers(), this);
        }
        return servers;
    }

    /** @return Resource collection API of ServerConnectionPolicies. */
    public ServerConnectionPolicies serverConnectionPolicies() {
        if (this.serverConnectionPolicies == null) {
            this.serverConnectionPolicies =
                new ServerConnectionPoliciesImpl(clientObject.getServerConnectionPolicies(), this);
        }
        return serverConnectionPolicies;
    }

    /** @return Resource collection API of Databases. */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(clientObject.getDatabases(), this);
        }
        return databases;
    }

    /** @return Resource collection API of DatabaseThreatDetectionPolicies. */
    public DatabaseThreatDetectionPolicies databaseThreatDetectionPolicies() {
        if (this.databaseThreatDetectionPolicies == null) {
            this.databaseThreatDetectionPolicies =
                new DatabaseThreatDetectionPoliciesImpl(clientObject.getDatabaseThreatDetectionPolicies(), this);
        }
        return databaseThreatDetectionPolicies;
    }

    /** @return Resource collection API of DataMaskingPolicies. */
    public DataMaskingPolicies dataMaskingPolicies() {
        if (this.dataMaskingPolicies == null) {
            this.dataMaskingPolicies = new DataMaskingPoliciesImpl(clientObject.getDataMaskingPolicies(), this);
        }
        return dataMaskingPolicies;
    }

    /** @return Resource collection API of DataMaskingRules. */
    public DataMaskingRules dataMaskingRules() {
        if (this.dataMaskingRules == null) {
            this.dataMaskingRules = new DataMaskingRulesImpl(clientObject.getDataMaskingRules(), this);
        }
        return dataMaskingRules;
    }

    /** @return Resource collection API of TransparentDataEncryptionConfigurations. */
    public TransparentDataEncryptionConfigurations transparentDataEncryptionConfigurations() {
        if (this.transparentDataEncryptionConfigurations == null) {
            this.transparentDataEncryptionConfigurations =
                new TransparentDataEncryptionConfigurationsImpl(
                    clientObject.getTransparentDataEncryptionConfigurations(), this);
        }
        return transparentDataEncryptionConfigurations;
    }

    /** @return Resource collection API of Extensions. */
    public Extensions extensions() {
        if (this.extensions == null) {
            this.extensions = new ExtensionsImpl(clientObject.getExtensions(), this);
        }
        return extensions;
    }

    /** @return Resource collection API of DisasterRecoveryConfigurations. */
    public DisasterRecoveryConfigurations disasterRecoveryConfigurations() {
        if (this.disasterRecoveryConfigurations == null) {
            this.disasterRecoveryConfigurations =
                new DisasterRecoveryConfigurationsImpl(clientObject.getDisasterRecoveryConfigurations(), this);
        }
        return disasterRecoveryConfigurations;
    }

    /** @return Resource collection API of ElasticPools. */
    public ElasticPools elasticPools() {
        if (this.elasticPools == null) {
            this.elasticPools = new ElasticPoolsImpl(clientObject.getElasticPools(), this);
        }
        return elasticPools;
    }

    /** @return Resource collection API of FirewallRules. */
    public FirewallRules firewallRules() {
        if (this.firewallRules == null) {
            this.firewallRules = new FirewallRulesImpl(clientObject.getFirewallRules(), this);
        }
        return firewallRules;
    }

    /** @return Resource collection API of GeoBackupPolicies. */
    public GeoBackupPolicies geoBackupPolicies() {
        if (this.geoBackupPolicies == null) {
            this.geoBackupPolicies = new GeoBackupPoliciesImpl(clientObject.getGeoBackupPolicies(), this);
        }
        return geoBackupPolicies;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of Queries. */
    public Queries queries() {
        if (this.queries == null) {
            this.queries = new QueriesImpl(clientObject.getQueries(), this);
        }
        return queries;
    }

    /** @return Resource collection API of QueryStatistics. */
    public QueryStatistics queryStatistics() {
        if (this.queryStatistics == null) {
            this.queryStatistics = new QueryStatisticsImpl(clientObject.getQueryStatistics(), this);
        }
        return queryStatistics;
    }

    /** @return Resource collection API of QueryTexts. */
    public QueryTexts queryTexts() {
        if (this.queryTexts == null) {
            this.queryTexts = new QueryTextsImpl(clientObject.getQueryTexts(), this);
        }
        return queryTexts;
    }

    /** @return Resource collection API of RecommendedElasticPools. */
    public RecommendedElasticPools recommendedElasticPools() {
        if (this.recommendedElasticPools == null) {
            this.recommendedElasticPools =
                new RecommendedElasticPoolsImpl(clientObject.getRecommendedElasticPools(), this);
        }
        return recommendedElasticPools;
    }

    /** @return Resource collection API of ReplicationLinks. */
    public ReplicationLinks replicationLinks() {
        if (this.replicationLinks == null) {
            this.replicationLinks = new ReplicationLinksImpl(clientObject.getReplicationLinks(), this);
        }
        return replicationLinks;
    }

    /** @return Resource collection API of RestorePoints. */
    public RestorePoints restorePoints() {
        if (this.restorePoints == null) {
            this.restorePoints = new RestorePointsImpl(clientObject.getRestorePoints(), this);
        }
        return restorePoints;
    }

    /** @return Resource collection API of ServerAzureADAdministrators. */
    public ServerAzureADAdministrators serverAzureADAdministrators() {
        if (this.serverAzureADAdministrators == null) {
            this.serverAzureADAdministrators =
                new ServerAzureADAdministratorsImpl(clientObject.getServerAzureADAdministrators(), this);
        }
        return serverAzureADAdministrators;
    }

    /** @return Resource collection API of ServerCommunicationLinks. */
    public ServerCommunicationLinks serverCommunicationLinks() {
        if (this.serverCommunicationLinks == null) {
            this.serverCommunicationLinks =
                new ServerCommunicationLinksImpl(clientObject.getServerCommunicationLinks(), this);
        }
        return serverCommunicationLinks;
    }

    /** @return Resource collection API of ServiceObjectives. */
    public ServiceObjectives serviceObjectives() {
        if (this.serviceObjectives == null) {
            this.serviceObjectives = new ServiceObjectivesImpl(clientObject.getServiceObjectives(), this);
        }
        return serviceObjectives;
    }

    /** @return Resource collection API of ElasticPoolActivities. */
    public ElasticPoolActivities elasticPoolActivities() {
        if (this.elasticPoolActivities == null) {
            this.elasticPoolActivities = new ElasticPoolActivitiesImpl(clientObject.getElasticPoolActivities(), this);
        }
        return elasticPoolActivities;
    }

    /** @return Resource collection API of ElasticPoolDatabaseActivities. */
    public ElasticPoolDatabaseActivities elasticPoolDatabaseActivities() {
        if (this.elasticPoolDatabaseActivities == null) {
            this.elasticPoolDatabaseActivities =
                new ElasticPoolDatabaseActivitiesImpl(clientObject.getElasticPoolDatabaseActivities(), this);
        }
        return elasticPoolDatabaseActivities;
    }

    /** @return Resource collection API of ServiceTierAdvisors. */
    public ServiceTierAdvisors serviceTierAdvisors() {
        if (this.serviceTierAdvisors == null) {
            this.serviceTierAdvisors = new ServiceTierAdvisorsImpl(clientObject.getServiceTierAdvisors(), this);
        }
        return serviceTierAdvisors;
    }

    /** @return Resource collection API of TransparentDataEncryptions. */
    public TransparentDataEncryptions transparentDataEncryptions() {
        if (this.transparentDataEncryptions == null) {
            this.transparentDataEncryptions =
                new TransparentDataEncryptionsImpl(clientObject.getTransparentDataEncryptions(), this);
        }
        return transparentDataEncryptions;
    }

    /** @return Resource collection API of TransparentDataEncryptionActivities. */
    public TransparentDataEncryptionActivities transparentDataEncryptionActivities() {
        if (this.transparentDataEncryptionActivities == null) {
            this.transparentDataEncryptionActivities =
                new TransparentDataEncryptionActivitiesImpl(
                    clientObject.getTransparentDataEncryptionActivities(), this);
        }
        return transparentDataEncryptionActivities;
    }

    /** @return Resource collection API of ServerTableAuditingPolicies. */
    public ServerTableAuditingPolicies serverTableAuditingPolicies() {
        if (this.serverTableAuditingPolicies == null) {
            this.serverTableAuditingPolicies =
                new ServerTableAuditingPoliciesImpl(clientObject.getServerTableAuditingPolicies(), this);
        }
        return serverTableAuditingPolicies;
    }

    /** @return Resource collection API of DatabaseTableAuditingPolicies. */
    public DatabaseTableAuditingPolicies databaseTableAuditingPolicies() {
        if (this.databaseTableAuditingPolicies == null) {
            this.databaseTableAuditingPolicies =
                new DatabaseTableAuditingPoliciesImpl(clientObject.getDatabaseTableAuditingPolicies(), this);
        }
        return databaseTableAuditingPolicies;
    }

    /** @return Resource collection API of DatabaseConnectionPolicies. */
    public DatabaseConnectionPolicies databaseConnectionPolicies() {
        if (this.databaseConnectionPolicies == null) {
            this.databaseConnectionPolicies =
                new DatabaseConnectionPoliciesImpl(clientObject.getDatabaseConnectionPolicies(), this);
        }
        return databaseConnectionPolicies;
    }

    /** @return Resource collection API of ServerUsages. */
    public ServerUsages serverUsages() {
        if (this.serverUsages == null) {
            this.serverUsages = new ServerUsagesImpl(clientObject.getServerUsages(), this);
        }
        return serverUsages;
    }

    /** @return Resource collection API of DatabaseUsages. */
    public DatabaseUsages databaseUsages() {
        if (this.databaseUsages == null) {
            this.databaseUsages = new DatabaseUsagesImpl(clientObject.getDatabaseUsages(), this);
        }
        return databaseUsages;
    }

    /**
     * @return Wrapped service client SqlManagementClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public SqlManagementClient serviceClient() {
        return this.clientObject;
    }
}
