// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ServerTableAuditingPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerTableAuditingPolicyInner;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerTableAuditingPolicyListResultInner;
import com.azure.resourcemanager.sql.generated.models.ServerTableAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.ServerTableAuditingPolicy;
import com.azure.resourcemanager.sql.generated.models.ServerTableAuditingPolicyListResult;
import com.azure.resourcemanager.sql.generated.models.TableAuditingPolicyName;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerTableAuditingPoliciesImpl implements ServerTableAuditingPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerTableAuditingPoliciesImpl.class);

    private final ServerTableAuditingPoliciesClient innerClient;

    private final SqlManager serviceManager;

    public ServerTableAuditingPoliciesImpl(ServerTableAuditingPoliciesClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerTableAuditingPolicy get(
        String resourceGroupName, String serverName, TableAuditingPolicyName tableAuditingPolicyName) {
        ServerTableAuditingPolicyInner inner =
            this.serviceClient().get(resourceGroupName, serverName, tableAuditingPolicyName);
        if (inner != null) {
            return new ServerTableAuditingPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerTableAuditingPolicy> getWithResponse(
        String resourceGroupName, String serverName, TableAuditingPolicyName tableAuditingPolicyName, Context context) {
        Response<ServerTableAuditingPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, tableAuditingPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerTableAuditingPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerTableAuditingPolicyListResult listByServer(String resourceGroupName, String serverName) {
        ServerTableAuditingPolicyListResultInner inner =
            this.serviceClient().listByServer(resourceGroupName, serverName);
        if (inner != null) {
            return new ServerTableAuditingPolicyListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerTableAuditingPolicyListResult> listByServerWithResponse(
        String resourceGroupName, String serverName, Context context) {
        Response<ServerTableAuditingPolicyListResultInner> inner =
            this.serviceClient().listByServerWithResponse(resourceGroupName, serverName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerTableAuditingPolicyListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerTableAuditingPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        TableAuditingPolicyName tableAuditingPolicyName =
            TableAuditingPolicyName.fromString(Utils.getValueFromIdByName(id, "auditingPolicies"));
        if (tableAuditingPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'auditingPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, tableAuditingPolicyName, Context.NONE).getValue();
    }

    public Response<ServerTableAuditingPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        TableAuditingPolicyName tableAuditingPolicyName =
            TableAuditingPolicyName.fromString(Utils.getValueFromIdByName(id, "auditingPolicies"));
        if (tableAuditingPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'auditingPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, tableAuditingPolicyName, context);
    }

    private ServerTableAuditingPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public ServerTableAuditingPolicyImpl define(TableAuditingPolicyName name) {
        return new ServerTableAuditingPolicyImpl(name, this.manager());
    }
}
