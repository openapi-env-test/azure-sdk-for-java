// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.models.ServerState;
import com.azure.resourcemanager.sql.generated.models.ServerVersion;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;
import java.util.UUID;

/** Represents a server. */
@JsonFlatten
@Fluent
public class ServerInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerInner.class);

    /*
     * Kind of sql server.  This is metadata used for the Azure portal
     * experience.
     */
    @JsonProperty(value = "kind", access = JsonProperty.Access.WRITE_ONLY)
    private String kind;

    /*
     * The fully qualified domain name of the server.
     */
    @JsonProperty(value = "properties.fullyQualifiedDomainName", access = JsonProperty.Access.WRITE_ONLY)
    private String fullyQualifiedDomainName;

    /*
     * The version of the server.
     */
    @JsonProperty(value = "properties.version")
    private ServerVersion version;

    /*
     * Administrator username for the server. Can only be specified when the
     * server is being created (and is required for creation).
     */
    @JsonProperty(value = "properties.administratorLogin")
    private String administratorLogin;

    /*
     * The administrator login password (required for server creation).
     */
    @JsonProperty(value = "properties.administratorLoginPassword")
    private String administratorLoginPassword;

    /*
     * The ID of the Active Azure Directory object with admin permissions on
     * this server. Legacy parameter, always null. To check for Active
     * Directory admin, query .../servers/{serverName}/administrators.
     */
    @JsonProperty(value = "properties.externalAdministratorSid", access = JsonProperty.Access.WRITE_ONLY)
    private UUID externalAdministratorSid;

    /*
     * The display name of the Azure Active Directory object with admin
     * permissions on this server. Legacy parameter, always null. To check for
     * Active Directory admin, query .../servers/{serverName}/administrators
     */
    @JsonProperty(value = "properties.externalAdministratorLogin", access = JsonProperty.Access.WRITE_ONLY)
    private String externalAdministratorLogin;

    /*
     * The state of the server.
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private ServerState state;

    /**
     * Get the kind property: Kind of sql server. This is metadata used for the Azure portal experience.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get the fullyQualifiedDomainName property: The fully qualified domain name of the server.
     *
     * @return the fullyQualifiedDomainName value.
     */
    public String fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }

    /**
     * Get the version property: The version of the server.
     *
     * @return the version value.
     */
    public ServerVersion version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the server.
     *
     * @param version the version value to set.
     * @return the ServerInner object itself.
     */
    public ServerInner withVersion(ServerVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the administratorLogin property: Administrator username for the server. Can only be specified when the server
     * is being created (and is required for creation).
     *
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administratorLogin property: Administrator username for the server. Can only be specified when the server
     * is being created (and is required for creation).
     *
     * @param administratorLogin the administratorLogin value to set.
     * @return the ServerInner object itself.
     */
    public ServerInner withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The administrator login password (required for server creation).
     *
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The administrator login password (required for server creation).
     *
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the ServerInner object itself.
     */
    public ServerInner withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the externalAdministratorSid property: The ID of the Active Azure Directory object with admin permissions on
     * this server. Legacy parameter, always null. To check for Active Directory admin, query
     * .../servers/{serverName}/administrators.
     *
     * @return the externalAdministratorSid value.
     */
    public UUID externalAdministratorSid() {
        return this.externalAdministratorSid;
    }

    /**
     * Get the externalAdministratorLogin property: The display name of the Azure Active Directory object with admin
     * permissions on this server. Legacy parameter, always null. To check for Active Directory admin, query
     * .../servers/{serverName}/administrators.
     *
     * @return the externalAdministratorLogin value.
     */
    public String externalAdministratorLogin() {
        return this.externalAdministratorLogin;
    }

    /**
     * Get the state property: The state of the server.
     *
     * @return the state value.
     */
    public ServerState state() {
        return this.state;
    }

    /** {@inheritDoc} */
    @Override
    public ServerInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServerInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
