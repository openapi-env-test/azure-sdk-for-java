// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of DatabaseConnectionPolicies. */
public interface DatabaseConnectionPolicies {
    /**
     * Gets a database's connection policy, which is used with table auditing. Table auditing is deprecated, use blob
     * auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the connection policy is defined.
     * @param connectionPolicyName The name of the connection policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's connection policy, which is used with table auditing.
     */
    DatabaseConnectionPolicy get(
        String resourceGroupName, String serverName, String databaseName, ConnectionPolicyName connectionPolicyName);

    /**
     * Gets a database's connection policy, which is used with table auditing. Table auditing is deprecated, use blob
     * auditing instead.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the connection policy is defined.
     * @param connectionPolicyName The name of the connection policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's connection policy, which is used with table auditing.
     */
    Response<DatabaseConnectionPolicy> getWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        ConnectionPolicyName connectionPolicyName,
        Context context);

    /**
     * Gets a database's connection policy, which is used with table auditing. Table auditing is deprecated, use blob
     * auditing instead.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's connection policy, which is used with table auditing.
     */
    DatabaseConnectionPolicy getById(String id);

    /**
     * Gets a database's connection policy, which is used with table auditing. Table auditing is deprecated, use blob
     * auditing instead.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's connection policy, which is used with table auditing.
     */
    Response<DatabaseConnectionPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new DatabaseConnectionPolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new DatabaseConnectionPolicy definition.
     */
    DatabaseConnectionPolicy.DefinitionStages.Blank define(ConnectionPolicyName name);
}
