// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.DatabaseAdvisorsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.AdvisorInner;
import com.azure.resourcemanager.sql.generated.fluent.models.AdvisorListResultInner;
import com.azure.resourcemanager.sql.generated.models.Advisor;
import com.azure.resourcemanager.sql.generated.models.AdvisorListResult;
import com.azure.resourcemanager.sql.generated.models.DatabaseAdvisors;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DatabaseAdvisorsImpl implements DatabaseAdvisors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatabaseAdvisorsImpl.class);

    private final DatabaseAdvisorsClient innerClient;

    private final SqlManager serviceManager;

    public DatabaseAdvisorsImpl(DatabaseAdvisorsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AdvisorListResult listByDatabase(String resourceGroupName, String serverName, String databaseName) {
        AdvisorListResultInner inner = this.serviceClient().listByDatabase(resourceGroupName, serverName, databaseName);
        if (inner != null) {
            return new AdvisorListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AdvisorListResult> listByDatabaseWithResponse(
        String resourceGroupName, String serverName, String databaseName, Context context) {
        Response<AdvisorListResultInner> inner =
            this.serviceClient().listByDatabaseWithResponse(resourceGroupName, serverName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Advisor get(String resourceGroupName, String serverName, String databaseName, String advisorName) {
        AdvisorInner inner = this.serviceClient().get(resourceGroupName, serverName, databaseName, advisorName);
        if (inner != null) {
            return new AdvisorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Advisor> getWithResponse(
        String resourceGroupName, String serverName, String databaseName, String advisorName, Context context) {
        Response<AdvisorInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, databaseName, advisorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Advisor createOrUpdate(
        String resourceGroupName, String serverName, String databaseName, String advisorName, AdvisorInner parameters) {
        AdvisorInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, serverName, databaseName, advisorName, parameters);
        if (inner != null) {
            return new AdvisorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Advisor> createOrUpdateWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        String advisorName,
        AdvisorInner parameters,
        Context context) {
        Response<AdvisorInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, advisorName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private DatabaseAdvisorsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
