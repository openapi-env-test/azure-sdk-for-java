// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** Represents an elastic pool update. */
@JsonFlatten
@Fluent
public class ElasticPoolUpdate extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ElasticPoolUpdate.class);

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The creation date of the elastic pool (ISO8601 format).
     */
    @JsonProperty(value = "properties.creationDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationDate;

    /*
     * The state of the elastic pool.
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private ElasticPoolState state;

    /*
     * The edition of the elastic pool.
     */
    @JsonProperty(value = "properties.edition")
    private ElasticPoolEdition edition;

    /*
     * The total shared DTU for the database elastic pool.
     */
    @JsonProperty(value = "properties.dtu")
    private Integer dtu;

    /*
     * The maximum DTU any one database can consume.
     */
    @JsonProperty(value = "properties.databaseDtuMax")
    private Integer databaseDtuMax;

    /*
     * The minimum DTU all databases are guaranteed.
     */
    @JsonProperty(value = "properties.databaseDtuMin")
    private Integer databaseDtuMin;

    /*
     * Gets storage limit for the database elastic pool in MB.
     */
    @JsonProperty(value = "properties.storageMB")
    private Integer storageMB;

    /*
     * Whether or not this database elastic pool is zone redundant, which means
     * the replicas of this database will be spread across multiple
     * availability zones.
     */
    @JsonProperty(value = "properties.zoneRedundant")
    private Boolean zoneRedundant;

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the creationDate property: The creation date of the elastic pool (ISO8601 format).
     *
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the state property: The state of the elastic pool.
     *
     * @return the state value.
     */
    public ElasticPoolState state() {
        return this.state;
    }

    /**
     * Get the edition property: The edition of the elastic pool.
     *
     * @return the edition value.
     */
    public ElasticPoolEdition edition() {
        return this.edition;
    }

    /**
     * Set the edition property: The edition of the elastic pool.
     *
     * @param edition the edition value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withEdition(ElasticPoolEdition edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the dtu property: The total shared DTU for the database elastic pool.
     *
     * @return the dtu value.
     */
    public Integer dtu() {
        return this.dtu;
    }

    /**
     * Set the dtu property: The total shared DTU for the database elastic pool.
     *
     * @param dtu the dtu value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withDtu(Integer dtu) {
        this.dtu = dtu;
        return this;
    }

    /**
     * Get the databaseDtuMax property: The maximum DTU any one database can consume.
     *
     * @return the databaseDtuMax value.
     */
    public Integer databaseDtuMax() {
        return this.databaseDtuMax;
    }

    /**
     * Set the databaseDtuMax property: The maximum DTU any one database can consume.
     *
     * @param databaseDtuMax the databaseDtuMax value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withDatabaseDtuMax(Integer databaseDtuMax) {
        this.databaseDtuMax = databaseDtuMax;
        return this;
    }

    /**
     * Get the databaseDtuMin property: The minimum DTU all databases are guaranteed.
     *
     * @return the databaseDtuMin value.
     */
    public Integer databaseDtuMin() {
        return this.databaseDtuMin;
    }

    /**
     * Set the databaseDtuMin property: The minimum DTU all databases are guaranteed.
     *
     * @param databaseDtuMin the databaseDtuMin value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withDatabaseDtuMin(Integer databaseDtuMin) {
        this.databaseDtuMin = databaseDtuMin;
        return this;
    }

    /**
     * Get the storageMB property: Gets storage limit for the database elastic pool in MB.
     *
     * @return the storageMB value.
     */
    public Integer storageMB() {
        return this.storageMB;
    }

    /**
     * Set the storageMB property: Gets storage limit for the database elastic pool in MB.
     *
     * @param storageMB the storageMB value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withStorageMB(Integer storageMB) {
        this.storageMB = storageMB;
        return this;
    }

    /**
     * Get the zoneRedundant property: Whether or not this database elastic pool is zone redundant, which means the
     * replicas of this database will be spread across multiple availability zones.
     *
     * @return the zoneRedundant value.
     */
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    /**
     * Set the zoneRedundant property: Whether or not this database elastic pool is zone redundant, which means the
     * replicas of this database will be spread across multiple availability zones.
     *
     * @param zoneRedundant the zoneRedundant value to set.
     * @return the ElasticPoolUpdate object itself.
     */
    public ElasticPoolUpdate withZoneRedundant(Boolean zoneRedundant) {
        this.zoneRedundant = zoneRedundant;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
