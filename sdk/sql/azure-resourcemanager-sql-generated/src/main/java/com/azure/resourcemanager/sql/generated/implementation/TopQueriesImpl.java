// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.models.QueryStatisticInner;
import com.azure.resourcemanager.sql.generated.fluent.models.TopQueriesInner;
import com.azure.resourcemanager.sql.generated.models.QueryAggregationFunction;
import com.azure.resourcemanager.sql.generated.models.QueryExecutionType;
import com.azure.resourcemanager.sql.generated.models.QueryObservedMetricType;
import com.azure.resourcemanager.sql.generated.models.QueryStatistic;
import com.azure.resourcemanager.sql.generated.models.TopQueries;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class TopQueriesImpl implements TopQueries {
    private TopQueriesInner innerObject;

    private final SqlManager serviceManager;

    TopQueriesImpl(TopQueriesInner innerObject, SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public QueryAggregationFunction aggregationFunction() {
        return this.innerModel().aggregationFunction();
    }

    public QueryExecutionType executionType() {
        return this.innerModel().executionType();
    }

    public String intervalType() {
        return this.innerModel().intervalType();
    }

    public Integer numberOfTopQueries() {
        return this.innerModel().numberOfTopQueries();
    }

    public OffsetDateTime observationStartTime() {
        return this.innerModel().observationStartTime();
    }

    public OffsetDateTime observationEndTime() {
        return this.innerModel().observationEndTime();
    }

    public QueryObservedMetricType observedMetric() {
        return this.innerModel().observedMetric();
    }

    public List<QueryStatistic> queries() {
        List<QueryStatisticInner> inner = this.innerModel().queries();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new QueryStatisticImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public TopQueriesInner innerModel() {
        return this.innerObject;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
