// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseConnectionPolicyInner;

/** An immutable client-side representation of DatabaseConnectionPolicy. */
public interface DatabaseConnectionPolicy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the kind property: Resource kind.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the location property: Resource location.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the securityEnabledAccess property: The state of security access.
     *
     * @return the securityEnabledAccess value.
     */
    String securityEnabledAccess();

    /**
     * Gets the proxyDnsName property: The fully qualified host name of the auditing proxy.
     *
     * @return the proxyDnsName value.
     */
    String proxyDnsName();

    /**
     * Gets the proxyPort property: The port number of the auditing proxy.
     *
     * @return the proxyPort value.
     */
    String proxyPort();

    /**
     * Gets the visibility property: The visibility of the auditing proxy.
     *
     * @return the visibility value.
     */
    String visibility();

    /**
     * Gets the useServerDefault property: Whether server default is enabled or disabled.
     *
     * @return the useServerDefault value.
     */
    String useServerDefault();

    /**
     * Gets the redirectionState property: The state of proxy redirection.
     *
     * @return the redirectionState value.
     */
    String redirectionState();

    /**
     * Gets the state property: The connection policy state.
     *
     * @return the state value.
     */
    String state();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.DatabaseConnectionPolicyInner object.
     *
     * @return the inner object.
     */
    DatabaseConnectionPolicyInner innerModel();

    /** The entirety of the DatabaseConnectionPolicy definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DatabaseConnectionPolicy definition stages. */
    interface DefinitionStages {
        /** The first stage of the DatabaseConnectionPolicy definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName, databaseName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @param databaseName The name of the database for which the connection policy will be defined.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabase(String resourceGroupName, String serverName, String databaseName);
        }
        /**
         * The stage of the DatabaseConnectionPolicy definition which contains all the minimum required properties for
         * the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithSecurityEnabledAccess,
                DefinitionStages.WithProxyDnsName,
                DefinitionStages.WithProxyPort,
                DefinitionStages.WithVisibility,
                DefinitionStages.WithUseServerDefault,
                DefinitionStages.WithRedirectionState,
                DefinitionStages.WithState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DatabaseConnectionPolicy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseConnectionPolicy create(Context context);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify securityEnabledAccess. */
        interface WithSecurityEnabledAccess {
            /**
             * Specifies the securityEnabledAccess property: The state of security access..
             *
             * @param securityEnabledAccess The state of security access.
             * @return the next definition stage.
             */
            WithCreate withSecurityEnabledAccess(String securityEnabledAccess);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify proxyDnsName. */
        interface WithProxyDnsName {
            /**
             * Specifies the proxyDnsName property: The fully qualified host name of the auditing proxy..
             *
             * @param proxyDnsName The fully qualified host name of the auditing proxy.
             * @return the next definition stage.
             */
            WithCreate withProxyDnsName(String proxyDnsName);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify proxyPort. */
        interface WithProxyPort {
            /**
             * Specifies the proxyPort property: The port number of the auditing proxy..
             *
             * @param proxyPort The port number of the auditing proxy.
             * @return the next definition stage.
             */
            WithCreate withProxyPort(String proxyPort);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify visibility. */
        interface WithVisibility {
            /**
             * Specifies the visibility property: The visibility of the auditing proxy..
             *
             * @param visibility The visibility of the auditing proxy.
             * @return the next definition stage.
             */
            WithCreate withVisibility(String visibility);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Whether server default is enabled or disabled..
             *
             * @param useServerDefault Whether server default is enabled or disabled.
             * @return the next definition stage.
             */
            WithCreate withUseServerDefault(String useServerDefault);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify redirectionState. */
        interface WithRedirectionState {
            /**
             * Specifies the redirectionState property: The state of proxy redirection..
             *
             * @param redirectionState The state of proxy redirection.
             * @return the next definition stage.
             */
            WithCreate withRedirectionState(String redirectionState);
        }
        /** The stage of the DatabaseConnectionPolicy definition allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: The connection policy state..
             *
             * @param state The connection policy state.
             * @return the next definition stage.
             */
            WithCreate withState(String state);
        }
    }
    /**
     * Begins update for the DatabaseConnectionPolicy resource.
     *
     * @return the stage of resource update.
     */
    DatabaseConnectionPolicy.Update update();

    /** The template for DatabaseConnectionPolicy update. */
    interface Update
        extends UpdateStages.WithSecurityEnabledAccess,
            UpdateStages.WithProxyDnsName,
            UpdateStages.WithProxyPort,
            UpdateStages.WithVisibility,
            UpdateStages.WithUseServerDefault,
            UpdateStages.WithRedirectionState,
            UpdateStages.WithState {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DatabaseConnectionPolicy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseConnectionPolicy apply(Context context);
    }
    /** The DatabaseConnectionPolicy update stages. */
    interface UpdateStages {
        /** The stage of the DatabaseConnectionPolicy update allowing to specify securityEnabledAccess. */
        interface WithSecurityEnabledAccess {
            /**
             * Specifies the securityEnabledAccess property: The state of security access..
             *
             * @param securityEnabledAccess The state of security access.
             * @return the next definition stage.
             */
            Update withSecurityEnabledAccess(String securityEnabledAccess);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify proxyDnsName. */
        interface WithProxyDnsName {
            /**
             * Specifies the proxyDnsName property: The fully qualified host name of the auditing proxy..
             *
             * @param proxyDnsName The fully qualified host name of the auditing proxy.
             * @return the next definition stage.
             */
            Update withProxyDnsName(String proxyDnsName);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify proxyPort. */
        interface WithProxyPort {
            /**
             * Specifies the proxyPort property: The port number of the auditing proxy..
             *
             * @param proxyPort The port number of the auditing proxy.
             * @return the next definition stage.
             */
            Update withProxyPort(String proxyPort);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify visibility. */
        interface WithVisibility {
            /**
             * Specifies the visibility property: The visibility of the auditing proxy..
             *
             * @param visibility The visibility of the auditing proxy.
             * @return the next definition stage.
             */
            Update withVisibility(String visibility);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Whether server default is enabled or disabled..
             *
             * @param useServerDefault Whether server default is enabled or disabled.
             * @return the next definition stage.
             */
            Update withUseServerDefault(String useServerDefault);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify redirectionState. */
        interface WithRedirectionState {
            /**
             * Specifies the redirectionState property: The state of proxy redirection..
             *
             * @param redirectionState The state of proxy redirection.
             * @return the next definition stage.
             */
            Update withRedirectionState(String redirectionState);
        }
        /** The stage of the DatabaseConnectionPolicy update allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: The connection policy state..
             *
             * @param state The connection policy state.
             * @return the next definition stage.
             */
            Update withState(String state);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DatabaseConnectionPolicy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseConnectionPolicy refresh(Context context);
}
