// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseTableAuditingPolicyInner;
import java.util.UUID;

/** An immutable client-side representation of DatabaseTableAuditingPolicy. */
public interface DatabaseTableAuditingPolicy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the kind property: Resource kind.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the location property: Resource location.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the auditingState property: The state of the policy.
     *
     * @return the auditingState value.
     */
    String auditingState();

    /**
     * Gets the auditLogsTableName property: The audit logs table name.
     *
     * @return the auditLogsTableName value.
     */
    String auditLogsTableName();

    /**
     * Gets the eventTypesToAudit property: Comma-separated list of event types to audit.
     *
     * @return the eventTypesToAudit value.
     */
    String eventTypesToAudit();

    /**
     * Gets the fullAuditLogsTableName property: The full audit logs table name.
     *
     * @return the fullAuditLogsTableName value.
     */
    String fullAuditLogsTableName();

    /**
     * Gets the retentionDays property: The number of days to keep in the audit logs.
     *
     * @return the retentionDays value.
     */
    String retentionDays();

    /**
     * Gets the storageAccountKey property: The key of the auditing storage account.
     *
     * @return the storageAccountKey value.
     */
    String storageAccountKey();

    /**
     * Gets the storageAccountName property: The table storage account name.
     *
     * @return the storageAccountName value.
     */
    String storageAccountName();

    /**
     * Gets the storageAccountResourceGroupName property: The table storage account resource group name.
     *
     * @return the storageAccountResourceGroupName value.
     */
    String storageAccountResourceGroupName();

    /**
     * Gets the storageAccountSecondaryKey property: The secondary key of the auditing storage account.
     *
     * @return the storageAccountSecondaryKey value.
     */
    String storageAccountSecondaryKey();

    /**
     * Gets the storageAccountSubscriptionId property: The table storage subscription Id.
     *
     * @return the storageAccountSubscriptionId value.
     */
    UUID storageAccountSubscriptionId();

    /**
     * Gets the storageTableEndpoint property: The storage table endpoint.
     *
     * @return the storageTableEndpoint value.
     */
    String storageTableEndpoint();

    /**
     * Gets the useServerDefault property: Whether server default is enabled or disabled.
     *
     * @return the useServerDefault value.
     */
    String useServerDefault();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.DatabaseTableAuditingPolicyInner object.
     *
     * @return the inner object.
     */
    DatabaseTableAuditingPolicyInner innerModel();

    /** The entirety of the DatabaseTableAuditingPolicy definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DatabaseTableAuditingPolicy definition stages. */
    interface DefinitionStages {
        /** The first stage of the DatabaseTableAuditingPolicy definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName, databaseName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @param databaseName The name of the database for which the table auditing policy will be defined.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabase(String resourceGroupName, String serverName, String databaseName);
        }
        /**
         * The stage of the DatabaseTableAuditingPolicy definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithAuditingState,
                DefinitionStages.WithAuditLogsTableName,
                DefinitionStages.WithEventTypesToAudit,
                DefinitionStages.WithFullAuditLogsTableName,
                DefinitionStages.WithRetentionDays,
                DefinitionStages.WithStorageAccountKey,
                DefinitionStages.WithStorageAccountName,
                DefinitionStages.WithStorageAccountResourceGroupName,
                DefinitionStages.WithStorageAccountSecondaryKey,
                DefinitionStages.WithStorageAccountSubscriptionId,
                DefinitionStages.WithStorageTableEndpoint,
                DefinitionStages.WithUseServerDefault {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DatabaseTableAuditingPolicy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseTableAuditingPolicy create(Context context);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify auditingState. */
        interface WithAuditingState {
            /**
             * Specifies the auditingState property: The state of the policy..
             *
             * @param auditingState The state of the policy.
             * @return the next definition stage.
             */
            WithCreate withAuditingState(String auditingState);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify auditLogsTableName. */
        interface WithAuditLogsTableName {
            /**
             * Specifies the auditLogsTableName property: The audit logs table name..
             *
             * @param auditLogsTableName The audit logs table name.
             * @return the next definition stage.
             */
            WithCreate withAuditLogsTableName(String auditLogsTableName);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify eventTypesToAudit. */
        interface WithEventTypesToAudit {
            /**
             * Specifies the eventTypesToAudit property: Comma-separated list of event types to audit..
             *
             * @param eventTypesToAudit Comma-separated list of event types to audit.
             * @return the next definition stage.
             */
            WithCreate withEventTypesToAudit(String eventTypesToAudit);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify fullAuditLogsTableName. */
        interface WithFullAuditLogsTableName {
            /**
             * Specifies the fullAuditLogsTableName property: The full audit logs table name..
             *
             * @param fullAuditLogsTableName The full audit logs table name.
             * @return the next definition stage.
             */
            WithCreate withFullAuditLogsTableName(String fullAuditLogsTableName);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify retentionDays. */
        interface WithRetentionDays {
            /**
             * Specifies the retentionDays property: The number of days to keep in the audit logs..
             *
             * @param retentionDays The number of days to keep in the audit logs.
             * @return the next definition stage.
             */
            WithCreate withRetentionDays(String retentionDays);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageAccountKey. */
        interface WithStorageAccountKey {
            /**
             * Specifies the storageAccountKey property: The key of the auditing storage account..
             *
             * @param storageAccountKey The key of the auditing storage account.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountKey(String storageAccountKey);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageAccountName. */
        interface WithStorageAccountName {
            /**
             * Specifies the storageAccountName property: The table storage account name.
             *
             * @param storageAccountName The table storage account name.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountName(String storageAccountName);
        }
        /**
         * The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageAccountResourceGroupName.
         */
        interface WithStorageAccountResourceGroupName {
            /**
             * Specifies the storageAccountResourceGroupName property: The table storage account resource group name.
             *
             * @param storageAccountResourceGroupName The table storage account resource group name.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountResourceGroupName(String storageAccountResourceGroupName);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageAccountSecondaryKey. */
        interface WithStorageAccountSecondaryKey {
            /**
             * Specifies the storageAccountSecondaryKey property: The secondary key of the auditing storage account..
             *
             * @param storageAccountSecondaryKey The secondary key of the auditing storage account.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountSecondaryKey(String storageAccountSecondaryKey);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageAccountSubscriptionId. */
        interface WithStorageAccountSubscriptionId {
            /**
             * Specifies the storageAccountSubscriptionId property: The table storage subscription Id..
             *
             * @param storageAccountSubscriptionId The table storage subscription Id.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountSubscriptionId(UUID storageAccountSubscriptionId);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify storageTableEndpoint. */
        interface WithStorageTableEndpoint {
            /**
             * Specifies the storageTableEndpoint property: The storage table endpoint..
             *
             * @param storageTableEndpoint The storage table endpoint.
             * @return the next definition stage.
             */
            WithCreate withStorageTableEndpoint(String storageTableEndpoint);
        }
        /** The stage of the DatabaseTableAuditingPolicy definition allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Whether server default is enabled or disabled..
             *
             * @param useServerDefault Whether server default is enabled or disabled.
             * @return the next definition stage.
             */
            WithCreate withUseServerDefault(String useServerDefault);
        }
    }
    /**
     * Begins update for the DatabaseTableAuditingPolicy resource.
     *
     * @return the stage of resource update.
     */
    DatabaseTableAuditingPolicy.Update update();

    /** The template for DatabaseTableAuditingPolicy update. */
    interface Update
        extends UpdateStages.WithAuditingState,
            UpdateStages.WithAuditLogsTableName,
            UpdateStages.WithEventTypesToAudit,
            UpdateStages.WithFullAuditLogsTableName,
            UpdateStages.WithRetentionDays,
            UpdateStages.WithStorageAccountKey,
            UpdateStages.WithStorageAccountName,
            UpdateStages.WithStorageAccountResourceGroupName,
            UpdateStages.WithStorageAccountSecondaryKey,
            UpdateStages.WithStorageAccountSubscriptionId,
            UpdateStages.WithStorageTableEndpoint,
            UpdateStages.WithUseServerDefault {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DatabaseTableAuditingPolicy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseTableAuditingPolicy apply(Context context);
    }
    /** The DatabaseTableAuditingPolicy update stages. */
    interface UpdateStages {
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify auditingState. */
        interface WithAuditingState {
            /**
             * Specifies the auditingState property: The state of the policy..
             *
             * @param auditingState The state of the policy.
             * @return the next definition stage.
             */
            Update withAuditingState(String auditingState);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify auditLogsTableName. */
        interface WithAuditLogsTableName {
            /**
             * Specifies the auditLogsTableName property: The audit logs table name..
             *
             * @param auditLogsTableName The audit logs table name.
             * @return the next definition stage.
             */
            Update withAuditLogsTableName(String auditLogsTableName);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify eventTypesToAudit. */
        interface WithEventTypesToAudit {
            /**
             * Specifies the eventTypesToAudit property: Comma-separated list of event types to audit..
             *
             * @param eventTypesToAudit Comma-separated list of event types to audit.
             * @return the next definition stage.
             */
            Update withEventTypesToAudit(String eventTypesToAudit);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify fullAuditLogsTableName. */
        interface WithFullAuditLogsTableName {
            /**
             * Specifies the fullAuditLogsTableName property: The full audit logs table name..
             *
             * @param fullAuditLogsTableName The full audit logs table name.
             * @return the next definition stage.
             */
            Update withFullAuditLogsTableName(String fullAuditLogsTableName);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify retentionDays. */
        interface WithRetentionDays {
            /**
             * Specifies the retentionDays property: The number of days to keep in the audit logs..
             *
             * @param retentionDays The number of days to keep in the audit logs.
             * @return the next definition stage.
             */
            Update withRetentionDays(String retentionDays);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageAccountKey. */
        interface WithStorageAccountKey {
            /**
             * Specifies the storageAccountKey property: The key of the auditing storage account..
             *
             * @param storageAccountKey The key of the auditing storage account.
             * @return the next definition stage.
             */
            Update withStorageAccountKey(String storageAccountKey);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageAccountName. */
        interface WithStorageAccountName {
            /**
             * Specifies the storageAccountName property: The table storage account name.
             *
             * @param storageAccountName The table storage account name.
             * @return the next definition stage.
             */
            Update withStorageAccountName(String storageAccountName);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageAccountResourceGroupName. */
        interface WithStorageAccountResourceGroupName {
            /**
             * Specifies the storageAccountResourceGroupName property: The table storage account resource group name.
             *
             * @param storageAccountResourceGroupName The table storage account resource group name.
             * @return the next definition stage.
             */
            Update withStorageAccountResourceGroupName(String storageAccountResourceGroupName);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageAccountSecondaryKey. */
        interface WithStorageAccountSecondaryKey {
            /**
             * Specifies the storageAccountSecondaryKey property: The secondary key of the auditing storage account..
             *
             * @param storageAccountSecondaryKey The secondary key of the auditing storage account.
             * @return the next definition stage.
             */
            Update withStorageAccountSecondaryKey(String storageAccountSecondaryKey);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageAccountSubscriptionId. */
        interface WithStorageAccountSubscriptionId {
            /**
             * Specifies the storageAccountSubscriptionId property: The table storage subscription Id..
             *
             * @param storageAccountSubscriptionId The table storage subscription Id.
             * @return the next definition stage.
             */
            Update withStorageAccountSubscriptionId(UUID storageAccountSubscriptionId);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify storageTableEndpoint. */
        interface WithStorageTableEndpoint {
            /**
             * Specifies the storageTableEndpoint property: The storage table endpoint..
             *
             * @param storageTableEndpoint The storage table endpoint.
             * @return the next definition stage.
             */
            Update withStorageTableEndpoint(String storageTableEndpoint);
        }
        /** The stage of the DatabaseTableAuditingPolicy update allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Whether server default is enabled or disabled..
             *
             * @param useServerDefault Whether server default is enabled or disabled.
             * @return the next definition stage.
             */
            Update withUseServerDefault(String useServerDefault);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DatabaseTableAuditingPolicy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseTableAuditingPolicy refresh(Context context);
}
