// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.sql.generated.fluent.BackupShortTermRetentionPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.CapabilitiesClient;
import com.azure.resourcemanager.sql.generated.fluent.DatabaseOperationsClient;
import com.azure.resourcemanager.sql.generated.fluent.DatabaseVulnerabilityAssessmentScansClient;
import com.azure.resourcemanager.sql.generated.fluent.DatabasesClient;
import com.azure.resourcemanager.sql.generated.fluent.ElasticPoolOperationsClient;
import com.azure.resourcemanager.sql.generated.fluent.ElasticPoolsClient;
import com.azure.resourcemanager.sql.generated.fluent.InstanceFailoverGroupsClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentScansClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentsClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceEncryptionProtectorsClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceKeysClient;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceTdeCertificatesClient;
import com.azure.resourcemanager.sql.generated.fluent.RecoverableManagedDatabasesClient;
import com.azure.resourcemanager.sql.generated.fluent.SqlManagementClient;
import com.azure.resourcemanager.sql.generated.fluent.TdeCertificatesClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Map;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the SqlManagementClientImpl type. */
@ServiceClient(builder = SqlManagementClientBuilder.class)
public final class SqlManagementClientImpl implements SqlManagementClient {
    private final ClientLogger logger = new ClientLogger(SqlManagementClientImpl.class);

    /** The subscription ID that identifies an Azure subscription. */
    private final String subscriptionId;

    /**
     * Gets The subscription ID that identifies an Azure subscription.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The default poll interval for long-running operation. */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     *
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /** The DatabaseOperationsClient object to access its operations. */
    private final DatabaseOperationsClient databaseOperations;

    /**
     * Gets the DatabaseOperationsClient object to access its operations.
     *
     * @return the DatabaseOperationsClient object.
     */
    public DatabaseOperationsClient getDatabaseOperations() {
        return this.databaseOperations;
    }

    /** The ElasticPoolOperationsClient object to access its operations. */
    private final ElasticPoolOperationsClient elasticPoolOperations;

    /**
     * Gets the ElasticPoolOperationsClient object to access its operations.
     *
     * @return the ElasticPoolOperationsClient object.
     */
    public ElasticPoolOperationsClient getElasticPoolOperations() {
        return this.elasticPoolOperations;
    }

    /** The DatabaseVulnerabilityAssessmentScansClient object to access its operations. */
    private final DatabaseVulnerabilityAssessmentScansClient databaseVulnerabilityAssessmentScans;

    /**
     * Gets the DatabaseVulnerabilityAssessmentScansClient object to access its operations.
     *
     * @return the DatabaseVulnerabilityAssessmentScansClient object.
     */
    public DatabaseVulnerabilityAssessmentScansClient getDatabaseVulnerabilityAssessmentScans() {
        return this.databaseVulnerabilityAssessmentScans;
    }

    /** The ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient object to access its operations. */
    private final ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient
        managedDatabaseVulnerabilityAssessmentRuleBaselines;

    /**
     * Gets the ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient object to access its operations.
     *
     * @return the ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient object.
     */
    public ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient
        getManagedDatabaseVulnerabilityAssessmentRuleBaselines() {
        return this.managedDatabaseVulnerabilityAssessmentRuleBaselines;
    }

    /** The ManagedDatabaseVulnerabilityAssessmentScansClient object to access its operations. */
    private final ManagedDatabaseVulnerabilityAssessmentScansClient managedDatabaseVulnerabilityAssessmentScans;

    /**
     * Gets the ManagedDatabaseVulnerabilityAssessmentScansClient object to access its operations.
     *
     * @return the ManagedDatabaseVulnerabilityAssessmentScansClient object.
     */
    public ManagedDatabaseVulnerabilityAssessmentScansClient getManagedDatabaseVulnerabilityAssessmentScans() {
        return this.managedDatabaseVulnerabilityAssessmentScans;
    }

    /** The ManagedDatabaseVulnerabilityAssessmentsClient object to access its operations. */
    private final ManagedDatabaseVulnerabilityAssessmentsClient managedDatabaseVulnerabilityAssessments;

    /**
     * Gets the ManagedDatabaseVulnerabilityAssessmentsClient object to access its operations.
     *
     * @return the ManagedDatabaseVulnerabilityAssessmentsClient object.
     */
    public ManagedDatabaseVulnerabilityAssessmentsClient getManagedDatabaseVulnerabilityAssessments() {
        return this.managedDatabaseVulnerabilityAssessments;
    }

    /** The CapabilitiesClient object to access its operations. */
    private final CapabilitiesClient capabilities;

    /**
     * Gets the CapabilitiesClient object to access its operations.
     *
     * @return the CapabilitiesClient object.
     */
    public CapabilitiesClient getCapabilities() {
        return this.capabilities;
    }

    /** The DatabasesClient object to access its operations. */
    private final DatabasesClient databases;

    /**
     * Gets the DatabasesClient object to access its operations.
     *
     * @return the DatabasesClient object.
     */
    public DatabasesClient getDatabases() {
        return this.databases;
    }

    /** The ElasticPoolsClient object to access its operations. */
    private final ElasticPoolsClient elasticPools;

    /**
     * Gets the ElasticPoolsClient object to access its operations.
     *
     * @return the ElasticPoolsClient object.
     */
    public ElasticPoolsClient getElasticPools() {
        return this.elasticPools;
    }

    /** The InstanceFailoverGroupsClient object to access its operations. */
    private final InstanceFailoverGroupsClient instanceFailoverGroups;

    /**
     * Gets the InstanceFailoverGroupsClient object to access its operations.
     *
     * @return the InstanceFailoverGroupsClient object.
     */
    public InstanceFailoverGroupsClient getInstanceFailoverGroups() {
        return this.instanceFailoverGroups;
    }

    /** The BackupShortTermRetentionPoliciesClient object to access its operations. */
    private final BackupShortTermRetentionPoliciesClient backupShortTermRetentionPolicies;

    /**
     * Gets the BackupShortTermRetentionPoliciesClient object to access its operations.
     *
     * @return the BackupShortTermRetentionPoliciesClient object.
     */
    public BackupShortTermRetentionPoliciesClient getBackupShortTermRetentionPolicies() {
        return this.backupShortTermRetentionPolicies;
    }

    /** The TdeCertificatesClient object to access its operations. */
    private final TdeCertificatesClient tdeCertificates;

    /**
     * Gets the TdeCertificatesClient object to access its operations.
     *
     * @return the TdeCertificatesClient object.
     */
    public TdeCertificatesClient getTdeCertificates() {
        return this.tdeCertificates;
    }

    /** The ManagedInstanceTdeCertificatesClient object to access its operations. */
    private final ManagedInstanceTdeCertificatesClient managedInstanceTdeCertificates;

    /**
     * Gets the ManagedInstanceTdeCertificatesClient object to access its operations.
     *
     * @return the ManagedInstanceTdeCertificatesClient object.
     */
    public ManagedInstanceTdeCertificatesClient getManagedInstanceTdeCertificates() {
        return this.managedInstanceTdeCertificates;
    }

    /** The ManagedInstanceKeysClient object to access its operations. */
    private final ManagedInstanceKeysClient managedInstanceKeys;

    /**
     * Gets the ManagedInstanceKeysClient object to access its operations.
     *
     * @return the ManagedInstanceKeysClient object.
     */
    public ManagedInstanceKeysClient getManagedInstanceKeys() {
        return this.managedInstanceKeys;
    }

    /** The ManagedInstanceEncryptionProtectorsClient object to access its operations. */
    private final ManagedInstanceEncryptionProtectorsClient managedInstanceEncryptionProtectors;

    /**
     * Gets the ManagedInstanceEncryptionProtectorsClient object to access its operations.
     *
     * @return the ManagedInstanceEncryptionProtectorsClient object.
     */
    public ManagedInstanceEncryptionProtectorsClient getManagedInstanceEncryptionProtectors() {
        return this.managedInstanceEncryptionProtectors;
    }

    /** The RecoverableManagedDatabasesClient object to access its operations. */
    private final RecoverableManagedDatabasesClient recoverableManagedDatabases;

    /**
     * Gets the RecoverableManagedDatabasesClient object to access its operations.
     *
     * @return the RecoverableManagedDatabasesClient object.
     */
    public RecoverableManagedDatabasesClient getRecoverableManagedDatabases() {
        return this.recoverableManagedDatabases;
    }

    /**
     * Initializes an instance of SqlManagementClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The subscription ID that identifies an Azure subscription.
     * @param endpoint server parameter.
     */
    SqlManagementClientImpl(
        HttpPipeline httpPipeline,
        SerializerAdapter serializerAdapter,
        Duration defaultPollInterval,
        AzureEnvironment environment,
        String subscriptionId,
        String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2017-10-01-preview";
        this.databaseOperations = new DatabaseOperationsClientImpl(this);
        this.elasticPoolOperations = new ElasticPoolOperationsClientImpl(this);
        this.databaseVulnerabilityAssessmentScans = new DatabaseVulnerabilityAssessmentScansClientImpl(this);
        this.managedDatabaseVulnerabilityAssessmentRuleBaselines =
            new ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClientImpl(this);
        this.managedDatabaseVulnerabilityAssessmentScans =
            new ManagedDatabaseVulnerabilityAssessmentScansClientImpl(this);
        this.managedDatabaseVulnerabilityAssessments = new ManagedDatabaseVulnerabilityAssessmentsClientImpl(this);
        this.capabilities = new CapabilitiesClientImpl(this);
        this.databases = new DatabasesClientImpl(this);
        this.elasticPools = new ElasticPoolsClientImpl(this);
        this.instanceFailoverGroups = new InstanceFailoverGroupsClientImpl(this);
        this.backupShortTermRetentionPolicies = new BackupShortTermRetentionPoliciesClientImpl(this);
        this.tdeCertificates = new TdeCertificatesClientImpl(this);
        this.managedInstanceTdeCertificates = new ManagedInstanceTdeCertificatesClientImpl(this);
        this.managedInstanceKeys = new ManagedInstanceKeysClientImpl(this);
        this.managedInstanceEncryptionProtectors = new ManagedInstanceEncryptionProtectorsClientImpl(this);
        this.recoverableManagedDatabases = new RecoverableManagedDatabasesClientImpl(this);
    }

    /**
     * Gets default client context.
     *
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     *
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet()) {
            context = context.addData(entry.getKey(), entry.getValue());
        }
        return context;
    }

    /**
     * Gets long running operation result.
     *
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(
        Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline,
        Type pollResultType,
        Type finalResultType,
        Context context) {
        return PollerFactory
            .create(
                serializerAdapter,
                httpPipeline,
                pollResultType,
                finalResultType,
                defaultPollInterval,
                activationResponse,
                context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     *
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse =
                    new HttpResponseImpl(
                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError =
                            this
                                .getSerializerAdapter()
                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException ioe) {
                        logger.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }
}
