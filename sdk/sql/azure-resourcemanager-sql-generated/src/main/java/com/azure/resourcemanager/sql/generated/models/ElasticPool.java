// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ElasticPoolInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of ElasticPool. */
public interface ElasticPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the kind property: Kind of elastic pool. This is metadata used for the Azure portal experience.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the creationDate property: The creation date of the elastic pool (ISO8601 format).
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the state property: The state of the elastic pool.
     *
     * @return the state value.
     */
    ElasticPoolState state();

    /**
     * Gets the edition property: The edition of the elastic pool.
     *
     * @return the edition value.
     */
    ElasticPoolEdition edition();

    /**
     * Gets the dtu property: The total shared DTU for the database elastic pool.
     *
     * @return the dtu value.
     */
    Integer dtu();

    /**
     * Gets the databaseDtuMax property: The maximum DTU any one database can consume.
     *
     * @return the databaseDtuMax value.
     */
    Integer databaseDtuMax();

    /**
     * Gets the databaseDtuMin property: The minimum DTU all databases are guaranteed.
     *
     * @return the databaseDtuMin value.
     */
    Integer databaseDtuMin();

    /**
     * Gets the storageMB property: Gets storage limit for the database elastic pool in MB.
     *
     * @return the storageMB value.
     */
    Integer storageMB();

    /**
     * Gets the zoneRedundant property: Whether or not this database elastic pool is zone redundant, which means the
     * replicas of this database will be spread across multiple availability zones.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.ElasticPoolInner object.
     *
     * @return the inner object.
     */
    ElasticPoolInner innerModel();

    /** The entirety of the ElasticPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The ElasticPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the ElasticPool definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ElasticPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the ElasticPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String serverName);
        }
        /**
         * The stage of the ElasticPool definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithEdition,
                DefinitionStages.WithDtu,
                DefinitionStages.WithDatabaseDtuMax,
                DefinitionStages.WithDatabaseDtuMin,
                DefinitionStages.WithStorageMB,
                DefinitionStages.WithZoneRedundant {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ElasticPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ElasticPool create(Context context);
        }
        /** The stage of the ElasticPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ElasticPool definition allowing to specify edition. */
        interface WithEdition {
            /**
             * Specifies the edition property: The edition of the elastic pool..
             *
             * @param edition The edition of the elastic pool.
             * @return the next definition stage.
             */
            WithCreate withEdition(ElasticPoolEdition edition);
        }
        /** The stage of the ElasticPool definition allowing to specify dtu. */
        interface WithDtu {
            /**
             * Specifies the dtu property: The total shared DTU for the database elastic pool..
             *
             * @param dtu The total shared DTU for the database elastic pool.
             * @return the next definition stage.
             */
            WithCreate withDtu(Integer dtu);
        }
        /** The stage of the ElasticPool definition allowing to specify databaseDtuMax. */
        interface WithDatabaseDtuMax {
            /**
             * Specifies the databaseDtuMax property: The maximum DTU any one database can consume..
             *
             * @param databaseDtuMax The maximum DTU any one database can consume.
             * @return the next definition stage.
             */
            WithCreate withDatabaseDtuMax(Integer databaseDtuMax);
        }
        /** The stage of the ElasticPool definition allowing to specify databaseDtuMin. */
        interface WithDatabaseDtuMin {
            /**
             * Specifies the databaseDtuMin property: The minimum DTU all databases are guaranteed..
             *
             * @param databaseDtuMin The minimum DTU all databases are guaranteed.
             * @return the next definition stage.
             */
            WithCreate withDatabaseDtuMin(Integer databaseDtuMin);
        }
        /** The stage of the ElasticPool definition allowing to specify storageMB. */
        interface WithStorageMB {
            /**
             * Specifies the storageMB property: Gets storage limit for the database elastic pool in MB..
             *
             * @param storageMB Gets storage limit for the database elastic pool in MB.
             * @return the next definition stage.
             */
            WithCreate withStorageMB(Integer storageMB);
        }
        /** The stage of the ElasticPool definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database elastic pool is zone redundant, which
             * means the replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database elastic pool is zone redundant, which means the
             *     replicas of this database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Begins update for the ElasticPool resource.
     *
     * @return the stage of resource update.
     */
    ElasticPool.Update update();

    /** The template for ElasticPool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithEdition,
            UpdateStages.WithDtu,
            UpdateStages.WithDatabaseDtuMax,
            UpdateStages.WithDatabaseDtuMin,
            UpdateStages.WithStorageMB,
            UpdateStages.WithZoneRedundant {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ElasticPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ElasticPool apply(Context context);
    }
    /** The ElasticPool update stages. */
    interface UpdateStages {
        /** The stage of the ElasticPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ElasticPool update allowing to specify edition. */
        interface WithEdition {
            /**
             * Specifies the edition property: The edition of the elastic pool..
             *
             * @param edition The edition of the elastic pool.
             * @return the next definition stage.
             */
            Update withEdition(ElasticPoolEdition edition);
        }
        /** The stage of the ElasticPool update allowing to specify dtu. */
        interface WithDtu {
            /**
             * Specifies the dtu property: The total shared DTU for the database elastic pool..
             *
             * @param dtu The total shared DTU for the database elastic pool.
             * @return the next definition stage.
             */
            Update withDtu(Integer dtu);
        }
        /** The stage of the ElasticPool update allowing to specify databaseDtuMax. */
        interface WithDatabaseDtuMax {
            /**
             * Specifies the databaseDtuMax property: The maximum DTU any one database can consume..
             *
             * @param databaseDtuMax The maximum DTU any one database can consume.
             * @return the next definition stage.
             */
            Update withDatabaseDtuMax(Integer databaseDtuMax);
        }
        /** The stage of the ElasticPool update allowing to specify databaseDtuMin. */
        interface WithDatabaseDtuMin {
            /**
             * Specifies the databaseDtuMin property: The minimum DTU all databases are guaranteed..
             *
             * @param databaseDtuMin The minimum DTU all databases are guaranteed.
             * @return the next definition stage.
             */
            Update withDatabaseDtuMin(Integer databaseDtuMin);
        }
        /** The stage of the ElasticPool update allowing to specify storageMB. */
        interface WithStorageMB {
            /**
             * Specifies the storageMB property: Gets storage limit for the database elastic pool in MB..
             *
             * @param storageMB Gets storage limit for the database elastic pool in MB.
             * @return the next definition stage.
             */
            Update withStorageMB(Integer storageMB);
        }
        /** The stage of the ElasticPool update allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this database elastic pool is zone redundant, which
             * means the replicas of this database will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this database elastic pool is zone redundant, which means the
             *     replicas of this database will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ElasticPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ElasticPool refresh(Context context);
}
