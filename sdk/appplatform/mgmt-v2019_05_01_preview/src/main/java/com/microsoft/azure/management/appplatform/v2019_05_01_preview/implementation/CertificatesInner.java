/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Certificates.
 */
public class CertificatesInner {
    /** The Retrofit service to perform REST calls. */
    private CertificatesService service;
    /** The service client containing this operation class. */
    private AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of CertificatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CertificatesInner(Retrofit retrofit, AppPlatformManagementClientImpl client) {
        this.service = retrofit.create(CertificatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Certificates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CertificatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("certificateName") String certificateName, @Body CertificateResourceInner certificateResource, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("certificateName") String certificateName, @Body CertificateResourceInner certificateResource, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner get(String resourceGroupName, String serviceName, String certificateName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).toBlocking().single().body();
    }

    /**
     * Get the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> getAsync(String resourceGroupName, String serviceName, String certificateName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, certificateName), serviceCallback);
    }

    /**
     * Get the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> getAsync(String resourceGroupName, String serviceName, String certificateName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String certificateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, serviceName, certificateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner createOrUpdate(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource).toBlocking().last().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CertificateResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CertificateResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificateResource == null) {
            throw new IllegalArgumentException("Parameter certificateResource is required and cannot be null.");
        }
        Validator.validate(certificateResource);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, certificateName, certificateResource, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CertificateResourceInner>() { }.getType());
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner beginCreateOrUpdate(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource).toBlocking().single().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, certificateName, certificateResource).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String certificateName, CertificateResourceInner certificateResource) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificateResource == null) {
            throw new IllegalArgumentException("Parameter certificateResource is required and cannot be null.");
        }
        Validator.validate(certificateResource);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, certificateName, certificateResource, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .register(201, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner delete(String resourceGroupName, String serviceName, String certificateName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).toBlocking().single().body();
    }

    /**
     * Delete the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> deleteAsync(String resourceGroupName, String serviceName, String certificateName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, certificateName), serviceCallback);
    }

    /**
     * Delete the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> deleteAsync(String resourceGroupName, String serviceName, String certificateName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the certificate resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String certificateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, serviceName, certificateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .register(204, new TypeToken<CertificateResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all the certificates of one user.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceCollectionInner object if successful.
     */
    public CertificateResourceCollectionInner list(String resourceGroupName, String serviceName, String certificateName) {
        return listWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).toBlocking().single().body();
    }

    /**
     * List all the certificates of one user.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceCollectionInner> listAsync(String resourceGroupName, String serviceName, String certificateName, final ServiceCallback<CertificateResourceCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, serviceName, certificateName), serviceCallback);
    }

    /**
     * List all the certificates of one user.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceCollectionInner object
     */
    public Observable<CertificateResourceCollectionInner> listAsync(String resourceGroupName, String serviceName, String certificateName) {
        return listWithServiceResponseAsync(resourceGroupName, serviceName, certificateName).map(new Func1<ServiceResponse<CertificateResourceCollectionInner>, CertificateResourceCollectionInner>() {
            @Override
            public CertificateResourceCollectionInner call(ServiceResponse<CertificateResourceCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List all the certificates of one user.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceCollectionInner object
     */
    public Observable<ServiceResponse<CertificateResourceCollectionInner>> listWithServiceResponseAsync(String resourceGroupName, String serviceName, String certificateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, serviceName, certificateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceCollectionInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceCollectionInner> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
