/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview.implementation;

import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CertificateResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CertificateProperties;

class CertificateResourceImpl extends CreatableUpdatableImpl<CertificateResource, CertificateResourceInner, CertificateResourceImpl> implements CertificateResource, CertificateResource.Definition, CertificateResource.Update {
    private String resourceGroupName;
    private String serviceName;
    private String certificateName;
    private final AppPlatformManager manager;

    CertificateResourceImpl(String name, AppPlatformManager manager) {
        super(name, new CertificateResourceInner());
        this.manager = manager;
        // Set resource name
        this.certificateName = name;
        //
    }

    CertificateResourceImpl(CertificateResourceInner inner, AppPlatformManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.certificateName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "Spring");
        this.certificateName = IdParsingUtils.getValueFromIdByName(inner.id(), "certificates");
        // set other parameters for create and update
    }

    @Override
    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CertificateResource> createResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.certificateName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CertificateResource> updateResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.certificateName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CertificateResourceInner> getInnerAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public CertificateProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CertificateResourceImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public CertificateResourceImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public CertificateResourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public CertificateResourceImpl withProperties(CertificateProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

}
