// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerlockbox.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customerlockbox.fluent.RequestsClient;
import com.azure.resourcemanager.customerlockbox.fluent.models.ApprovalInner;
import com.azure.resourcemanager.customerlockbox.fluent.models.LockboxRequestResponseInner;
import com.azure.resourcemanager.customerlockbox.models.Approval;
import com.azure.resourcemanager.customerlockbox.models.LockboxRequestResponse;
import com.azure.resourcemanager.customerlockbox.models.Requests;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RequestsImpl implements Requests {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RequestsImpl.class);

    private final RequestsClient innerClient;

    private final com.azure.resourcemanager.customerlockbox.CustomerLockboxManager serviceManager;

    public RequestsImpl(
        RequestsClient innerClient, com.azure.resourcemanager.customerlockbox.CustomerLockboxManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LockboxRequestResponse get(String requestId, String subscriptionId) {
        LockboxRequestResponseInner inner = this.serviceClient().get(requestId, subscriptionId);
        if (inner != null) {
            return new LockboxRequestResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LockboxRequestResponse> getWithResponse(String requestId, String subscriptionId, Context context) {
        Response<LockboxRequestResponseInner> inner =
            this.serviceClient().getWithResponse(requestId, subscriptionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LockboxRequestResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Approval updateStatus(String subscriptionId, String requestId, ApprovalInner approval) {
        ApprovalInner inner = this.serviceClient().updateStatus(subscriptionId, requestId, approval);
        if (inner != null) {
            return new ApprovalImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Approval> updateStatusWithResponse(
        String subscriptionId, String requestId, ApprovalInner approval, Context context) {
        Response<ApprovalInner> inner =
            this.serviceClient().updateStatusWithResponse(subscriptionId, requestId, approval, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApprovalImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<LockboxRequestResponse> list(String subscriptionId) {
        PagedIterable<LockboxRequestResponseInner> inner = this.serviceClient().list(subscriptionId);
        return Utils.mapPage(inner, inner1 -> new LockboxRequestResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<LockboxRequestResponse> list(String subscriptionId, String filter, Context context) {
        PagedIterable<LockboxRequestResponseInner> inner = this.serviceClient().list(subscriptionId, filter, context);
        return Utils.mapPage(inner, inner1 -> new LockboxRequestResponseImpl(inner1, this.manager()));
    }

    private RequestsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.customerlockbox.CustomerLockboxManager manager() {
        return this.serviceManager;
    }
}
