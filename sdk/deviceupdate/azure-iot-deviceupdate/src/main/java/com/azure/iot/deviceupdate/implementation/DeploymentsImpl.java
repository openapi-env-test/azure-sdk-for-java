// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Deployments. */
public final class DeploymentsImpl {
    /** The proxy service used to perform REST calls. */
    private final DeploymentsService service;

    /** The service client containing this operation class. */
    private final DeviceUpdateClientImpl client;

    /**
     * Initializes an instance of DeploymentsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DeploymentsImpl(DeviceUpdateClientImpl client) {
        this.service =
                RestProxy.create(DeploymentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DeviceUpdateClientDeployments to be used by the proxy service to
     * perform REST calls.
     */
    @Host("https://{accountEndpoint}")
    @ServiceInterface(name = "DeviceUpdateClientDe")
    private interface DeploymentsService {
        @Get("/deviceupdate/{instanceId}/v2/management/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllDeployments(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @BodyParam("application/json") BinaryData deployment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentStatus(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/devicestates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentDevices(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("action") String action,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retryDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("action") String action,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllDeploymentsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentDevicesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllDeploymentsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllDeployments(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllDeploymentsSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAllDeployments(
                        this.client.getAccountEndpoint(), this.client.getInstanceId(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllDeploymentsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getAllDeploymentsSinglePageAsync(requestOptions),
                nextLink -> getAllDeploymentsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllDeploymentsAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getAllDeploymentsSinglePageAsync(requestOptions, context),
                nextLink -> getAllDeploymentsNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getAllDeployments(RequestOptions requestOptions) {
        return new PagedIterable<>(getAllDeploymentsAsync(requestOptions));
    }

    /**
     * Gets the properties of a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the properties of a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeployment(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the properties of a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a deployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return getDeploymentWithResponseAsync(deploymentId, requestOptions).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponseAsync(
            String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                deployment,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponseAsync(
            String deploymentId, BinaryData deployment, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateDeployment(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                deployment,
                accept,
                requestOptions,
                context);
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDeploymentWithResponse(
            String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        return createOrUpdateDeploymentWithResponseAsync(deploymentId, deployment, requestOptions).block();
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(String deploymentId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        return service.deleteDeployment(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, requestOptions, context);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return deleteDeploymentWithResponseAsync(deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentState: String(Active/Superseded/Canceled) (Required)
     *     totalDevices: Integer (Optional)
     *     devicesIncompatibleCount: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(
            String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeploymentStatus(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentState: String(Active/Superseded/Canceled) (Required)
     *     totalDevices: Integer (Optional)
     *     devicesIncompatibleCount: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeploymentStatus(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentState: String(Active/Superseded/Canceled) (Required)
     *     totalDevices: Integer (Optional)
     *     devicesIncompatibleCount: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(String deploymentId, RequestOptions requestOptions) {
        return getDeploymentStatusWithResponseAsync(deploymentId, requestOptions).block();
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getDeploymentDevicesSinglePageAsync(
            String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getDeploymentDevices(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        deploymentId,
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getDeploymentDevicesSinglePageAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeploymentDevices(
                        this.client.getAccountEndpoint(),
                        this.client.getInstanceId(),
                        deploymentId,
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDeploymentDevicesAsync(String deploymentId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getDeploymentDevicesSinglePageAsync(deploymentId, requestOptions),
                nextLink -> getDeploymentDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDeploymentDevicesAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> getDeploymentDevicesSinglePageAsync(deploymentId, requestOptions, context),
                nextLink -> getDeploymentDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDeploymentDevices(String deploymentId, RequestOptions requestOptions) {
        return new PagedIterable<>(getDeploymentDevicesAsync(deploymentId, requestOptions));
    }

    /**
     * Cancels a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions) {
        final String action = "cancel";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                action,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Cancels a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        final String action = "cancel";
        final String accept = "application/json";
        return service.cancelDeployment(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                action,
                accept,
                requestOptions,
                context);
    }

    /**
     * Cancels a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return cancelDeploymentWithResponseAsync(deploymentId, requestOptions).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions) {
        final String action = "retry";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.retryDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                action,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponseAsync(
            String deploymentId, RequestOptions requestOptions, Context context) {
        final String action = "retry";
        final String accept = "application/json";
        return service.retryDeployment(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                action,
                accept,
                requestOptions,
                context);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     deploymentType: String(Complete/Download/Install) (Required)
     *     deviceClassId: String (Optional)
     *     startDateTime: OffsetDateTime (Required)
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *     deviceGroupDefinition (Required): [
     *         String (Required)
     *     ]
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     isCompleted: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retryDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return retryDeploymentWithResponseAsync(deploymentId, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllDeploymentsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllDeploymentsNext(
                                        nextLink, this.client.getAccountEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deploymentId: String (Required)
     *             deploymentType: String(Complete/Download/Install) (Required)
     *             deviceClassId: String (Optional)
     *             startDateTime: OffsetDateTime (Required)
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions) (Required)
     *             deviceGroupDefinition (Required): [
     *                 String (Required)
     *             ]
     *             updateId (Required): {
     *                 provider: String (Required)
     *                 name: String (Required)
     *                 version: String (Required)
     *             }
     *             isCanceled: Boolean (Optional)
     *             isRetried: Boolean (Optional)
     *             isCompleted: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getAllDeploymentsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getAllDeploymentsNext(
                        nextLink, this.client.getAccountEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployment device states along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getDeploymentDevicesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getDeploymentDevicesNext(
                                        nextLink, this.client.getAccountEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             retryCount: int (Required)
     *             movedOnToNewDeployment: boolean (Required)
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible) (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployment device states along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getDeploymentDevicesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeploymentDevicesNext(
                        nextLink, this.client.getAccountEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
