// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeploymentsClientBuilder.class)
public final class DeploymentsClient {
    @Generated private final DeploymentsAsyncClient client;

    /**
     * Initializes an instance of DeploymentsClient class.
     *
     * @param client the async client.
     */
    @Generated
    DeploymentsClient(DeploymentsAsyncClient client) {
        this.client = client;
    }

    /**
     * Gets a list of deployments.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployments returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             deploymentType: String(Complete/Download/Install)
     *             deviceClassId: String
     *             startDateTime: OffsetDateTime
     *             deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *             deviceGroupDefinition: [
     *                 String
     *             ]
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             isCompleted: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getAllDeployments(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getAllDeployments(requestOptions));
    }

    /**
     * Gets the properties of a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     deploymentType: String(Complete/Download/Install)
     *     deviceClassId: String
     *     startDateTime: OffsetDateTime
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *     deviceGroupDefinition: [
     *         String
     *     ]
     *     updateId: {
     *         provider: String
     *         name: String
     *         version: String
     *     }
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     isCompleted: Boolean
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a deployment along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return this.client.getDeploymentWithResponse(deploymentId, requestOptions).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     deploymentType: String(Complete/Download/Install)
     *     deviceClassId: String
     *     startDateTime: OffsetDateTime
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *     deviceGroupDefinition: [
     *         String
     *     ]
     *     updateId: {
     *         provider: String
     *         name: String
     *         version: String
     *     }
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     isCompleted: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     deploymentType: String(Complete/Download/Install)
     *     deviceClassId: String
     *     startDateTime: OffsetDateTime
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *     deviceGroupDefinition: [
     *         String
     *     ]
     *     updateId: {
     *         provider: String
     *         name: String
     *         version: String
     *     }
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     isCompleted: Boolean
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDeploymentWithResponse(
            String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        return this.client.createOrUpdateDeploymentWithResponse(deploymentId, deployment, requestOptions).block();
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return this.client.deleteDeploymentWithResponse(deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentState: String(Active/Superseded/Canceled)
     *     totalDevices: Integer
     *     devicesIncompatibleCount: Integer
     *     devicesInProgressCount: Integer
     *     devicesCompletedFailedCount: Integer
     *     devicesCompletedSucceededCount: Integer
     *     devicesCanceledCount: Integer
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(String deploymentId, RequestOptions requestOptions) {
        return this.client.getDeploymentStatusWithResponse(deploymentId, requestOptions).block();
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Failed/Canceled/Incompatible)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDeploymentDevices(String deploymentId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDeploymentDevices(deploymentId, requestOptions));
    }

    /**
     * Cancels a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     deploymentType: String(Complete/Download/Install)
     *     deviceClassId: String
     *     startDateTime: OffsetDateTime
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *     deviceGroupDefinition: [
     *         String
     *     ]
     *     updateId: {
     *         provider: String
     *         name: String
     *         version: String
     *     }
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     isCompleted: Boolean
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return this.client.cancelDeploymentWithResponse(deploymentId, requestOptions).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     deploymentType: String(Complete/Download/Install)
     *     deviceClassId: String
     *     startDateTime: OffsetDateTime
     *     deviceGroupType: String(All/Devices/DeviceGroupDefinitions)
     *     deviceGroupDefinition: [
     *         String
     *     ]
     *     updateId: {
     *         provider: String
     *         name: String
     *         version: String
     *     }
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     isCompleted: Boolean
     * }
     * }</pre>
     *
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retryDeploymentWithResponse(String deploymentId, RequestOptions requestOptions) {
        return this.client.retryDeploymentWithResponse(deploymentId, requestOptions).block();
    }
}
