// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.template.contoso;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.template.contoso.models.ResourceOperationStatusWidgetWidgetError;
import com.azure.template.contoso.models.Widget;

/** Initializes a new instance of the synchronous ContosoClient type. */
@ServiceClient(builder = ContosoClientBuilder.class)
public final class ContosoClient {
    @Generated private final ContosoAsyncClient client;

    /**
     * Initializes an instance of ContosoClient class.
     *
     * @param client the async client.
     */
    @Generated
    ContosoClient(ContosoAsyncClient client) {
        this.client = client;
    }

    /**
     * Fetch a Widget by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Required)
     *     sharedModel (Optional): {
     *         tag: String (Required)
     *         createdDate: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     *
     * @param widgetName The widget name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a widget along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWidgetWithResponse(String widgetName, RequestOptions requestOptions) {
        return this.client.getWidgetWithResponse(widgetName, requestOptions).block();
    }

    /**
     * Gets status of a Widget operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(InProgress/Succeeded/Failed/Canceled) (Required)
     *     error: ResponseError (Optional)
     *     result (Optional): {
     *         name: String (Required)
     *         manufacturerId: String (Required)
     *         sharedModel (Optional): {
     *             tag: String (Required)
     *             createdDate: OffsetDateTime (Required)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param widgetName The widget name.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of a Widget operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWidgetOperationStatusWithResponse(
            String widgetName, String operationId, RequestOptions requestOptions) {
        return this.client.getWidgetOperationStatusWithResponse(widgetName, operationId, requestOptions).block();
    }

    /**
     * Creates or updates a Widget asynchronously.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Required)
     *     sharedModel (Optional): {
     *         tag: String (Required)
     *         createdDate: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Required)
     *     sharedModel (Optional): {
     *         tag: String (Required)
     *         createdDate: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     *
     * @param widgetName The widget name.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a widget.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrUpdateWidget(
            String widgetName, BinaryData resource, RequestOptions requestOptions) {
        return this.client.beginCreateOrUpdateWidget(widgetName, resource, requestOptions).getSyncPoller();
    }

    /**
     * Delete a Widget asynchronously.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(InProgress/Succeeded/Failed/Canceled) (Required)
     *     error: ResponseError (Optional)
     * }
     * }</pre>
     *
     * @param widgetName The widget name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteWidget(String widgetName, RequestOptions requestOptions) {
        return this.client.beginDeleteWidget(widgetName, requestOptions).getSyncPoller();
    }

    /**
     * List Widget resources.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Required)
     *     sharedModel (Optional): {
     *         tag: String (Required)
     *         createdDate: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Widget items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWidgets(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWidgets(requestOptions));
    }

    /**
     * Fetch a Widget by name.
     *
     * @param widgetName The widget name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a widget.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Widget getWidget(String widgetName) {
        // Generated convenience method for getWidgetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWidgetWithResponse(widgetName, requestOptions).getValue().toObject(Widget.class);
    }

    /**
     * Gets status of a Widget operation.
     *
     * @param widgetName The widget name.
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a Widget operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceOperationStatusWidgetWidgetError getWidgetOperationStatus(String widgetName, String operationId) {
        // Generated convenience method for getWidgetOperationStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWidgetOperationStatusWithResponse(widgetName, operationId, requestOptions)
                .getValue()
                .toObject(ResourceOperationStatusWidgetWidgetError.class);
    }

    /**
     * Delete a Widget asynchronously.
     *
     * @param widgetName The widget name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<ResourceOperationStatusWidgetWidgetError, Void> beginDeleteWidget(String widgetName) {
        // Generated convenience method for beginDeleteWidgetWithModel
        return client.beginDeleteWidget(widgetName).getSyncPoller();
    }

    /**
     * List Widget resources.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Widget items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Widget> listWidgets() {
        // Generated convenience method for listWidgets
        return new PagedIterable<>(client.listWidgets());
    }
}
