// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredata.AzureDataManager;
import com.azure.resourcemanager.azuredata.fluent.PostgresInstancesClient;
import com.azure.resourcemanager.azuredata.fluent.models.PostgresInstanceInner;
import com.azure.resourcemanager.azuredata.models.PostgresInstance;
import com.azure.resourcemanager.azuredata.models.PostgresInstanceUpdate;
import com.azure.resourcemanager.azuredata.models.PostgresInstances;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PostgresInstancesImpl implements PostgresInstances {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PostgresInstancesImpl.class);

    private final PostgresInstancesClient innerClient;

    private final AzureDataManager serviceManager;

    public PostgresInstancesImpl(PostgresInstancesClient innerClient, AzureDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PostgresInstance> list() {
        PagedIterable<PostgresInstanceInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new PostgresInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<PostgresInstance> list(Context context) {
        PagedIterable<PostgresInstanceInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new PostgresInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<PostgresInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PostgresInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new PostgresInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<PostgresInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PostgresInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new PostgresInstanceImpl(inner1, this.manager()));
    }

    public PostgresInstance getByResourceGroup(String resourceGroupName, String postgresInstanceName) {
        PostgresInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, postgresInstanceName);
        if (inner != null) {
            return new PostgresInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PostgresInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String postgresInstanceName, Context context) {
        Response<PostgresInstanceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, postgresInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PostgresInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PostgresInstance create(String resourceGroupName, String postgresInstanceName) {
        PostgresInstanceInner inner = this.serviceClient().create(resourceGroupName, postgresInstanceName);
        if (inner != null) {
            return new PostgresInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PostgresInstance> createWithResponse(
        String resourceGroupName, String postgresInstanceName, Context context) {
        Response<PostgresInstanceInner> inner =
            this.serviceClient().createWithResponse(resourceGroupName, postgresInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PostgresInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String postgresInstanceName) {
        this.serviceClient().delete(resourceGroupName, postgresInstanceName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String postgresInstanceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, postgresInstanceName, context);
    }

    public PostgresInstance update(
        String resourceGroupName, String postgresInstanceName, PostgresInstanceUpdate parameters) {
        PostgresInstanceInner inner = this.serviceClient().update(resourceGroupName, postgresInstanceName, parameters);
        if (inner != null) {
            return new PostgresInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PostgresInstance> updateWithResponse(
        String resourceGroupName, String postgresInstanceName, PostgresInstanceUpdate parameters, Context context) {
        Response<PostgresInstanceInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, postgresInstanceName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PostgresInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private PostgresInstancesClient serviceClient() {
        return this.innerClient;
    }

    private AzureDataManager manager() {
        return this.serviceManager;
    }
}
