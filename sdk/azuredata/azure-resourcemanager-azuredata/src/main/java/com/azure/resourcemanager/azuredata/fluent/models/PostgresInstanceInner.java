// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredata.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A Postgres Instance. */
@JsonFlatten
@Fluent
public class PostgresInstanceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PostgresInstanceInner.class);

    /*
     * null
     */
    @JsonProperty(value = "properties.hybridDataManagerId")
    private String hybridDataManagerId;

    /*
     * Read only system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the hybridDataManagerId property: null.
     *
     * @return the hybridDataManagerId value.
     */
    public String hybridDataManagerId() {
        return this.hybridDataManagerId;
    }

    /**
     * Set the hybridDataManagerId property: null.
     *
     * @param hybridDataManagerId the hybridDataManagerId value to set.
     * @return the PostgresInstanceInner object itself.
     */
    public PostgresInstanceInner withHybridDataManagerId(String hybridDataManagerId) {
        this.hybridDataManagerId = hybridDataManagerId;
        return this;
    }

    /**
     * Get the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public PostgresInstanceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PostgresInstanceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
    }
}
