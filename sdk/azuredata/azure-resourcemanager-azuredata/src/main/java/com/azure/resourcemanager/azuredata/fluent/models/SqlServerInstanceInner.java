// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredata.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A SqlServerInstance. */
@JsonFlatten
@Fluent
public class SqlServerInstanceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SqlServerInstanceInner.class);

    /*
     * SQL Server version.
     */
    @JsonProperty(value = "properties.version")
    private String version;

    /*
     * SQL Server edition.
     */
    @JsonProperty(value = "properties.edition")
    private String edition;

    /*
     * ARM Resource id of the container resource (Azure Arc for Servers)
     */
    @JsonProperty(value = "properties.containerResourceId")
    private String containerResourceId;

    /*
     * The time when the resource was created.
     */
    @JsonProperty(value = "properties.createTime", access = JsonProperty.Access.WRITE_ONLY)
    private String createTime;

    /*
     * The time when the resource was last updated.
     */
    @JsonProperty(value = "properties.updateTime", access = JsonProperty.Access.WRITE_ONLY)
    private String updateTime;

    /*
     * The number of logical processors used by the SQL Server instance.
     */
    @JsonProperty(value = "properties.vCore")
    private String vCore;

    /*
     * The cloud connectivity status.
     */
    @JsonProperty(value = "properties.status")
    private String status;

    /*
     * Read only system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the version property: SQL Server version.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: SQL Server version.
     *
     * @param version the version value to set.
     * @return the SqlServerInstanceInner object itself.
     */
    public SqlServerInstanceInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the edition property: SQL Server edition.
     *
     * @return the edition value.
     */
    public String edition() {
        return this.edition;
    }

    /**
     * Set the edition property: SQL Server edition.
     *
     * @param edition the edition value to set.
     * @return the SqlServerInstanceInner object itself.
     */
    public SqlServerInstanceInner withEdition(String edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the containerResourceId property: ARM Resource id of the container resource (Azure Arc for Servers).
     *
     * @return the containerResourceId value.
     */
    public String containerResourceId() {
        return this.containerResourceId;
    }

    /**
     * Set the containerResourceId property: ARM Resource id of the container resource (Azure Arc for Servers).
     *
     * @param containerResourceId the containerResourceId value to set.
     * @return the SqlServerInstanceInner object itself.
     */
    public SqlServerInstanceInner withContainerResourceId(String containerResourceId) {
        this.containerResourceId = containerResourceId;
        return this;
    }

    /**
     * Get the createTime property: The time when the resource was created.
     *
     * @return the createTime value.
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Get the updateTime property: The time when the resource was last updated.
     *
     * @return the updateTime value.
     */
    public String updateTime() {
        return this.updateTime;
    }

    /**
     * Get the vCore property: The number of logical processors used by the SQL Server instance.
     *
     * @return the vCore value.
     */
    public String vCore() {
        return this.vCore;
    }

    /**
     * Set the vCore property: The number of logical processors used by the SQL Server instance.
     *
     * @param vCore the vCore value to set.
     * @return the SqlServerInstanceInner object itself.
     */
    public SqlServerInstanceInner withVCore(String vCore) {
        this.vCore = vCore;
        return this;
    }

    /**
     * Get the status property: The cloud connectivity status.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The cloud connectivity status.
     *
     * @param status the status value to set.
     * @return the SqlServerInstanceInner object itself.
     */
    public SqlServerInstanceInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SqlServerInstanceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SqlServerInstanceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
    }
}
