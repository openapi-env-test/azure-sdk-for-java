/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcegraph.v2019_04_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQueryErrorException;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQueryUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in GraphQuerys.
 */
public class GraphQuerysInner implements InnerSupportsGet<GraphQueryResourceInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private GraphQuerysService service;
    /** The service client containing this operation class. */
    private ResourceGraphClientImpl client;

    /**
     * Initializes an instance of GraphQuerysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GraphQuerysInner(Retrofit retrofit, ResourceGraphClientImpl client) {
        this.service = retrofit.create(GraphQuerysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for GraphQuerys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GraphQuerysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceGraph/queries")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceGraph/queries/{resourceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceGraph/queries/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceGraph/queries/{resourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body GraphQueryResourceInner properties, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceGraph/queries/{resourceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body GraphQueryUpdateParameters body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQuerys listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GraphQueryResourceInner&gt; object if successful.
     */
    public PagedList<GraphQueryResourceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<GraphQueryResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<GraphQueryResourceInner>(response.body()) {
            @Override
            public Page<GraphQueryResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GraphQueryResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<GraphQueryResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GraphQueryResourceInner&gt; object
     */
    public Observable<Page<GraphQueryResourceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<GraphQueryResourceInner>>, Page<GraphQueryResourceInner>>() {
                @Override
                public Page<GraphQueryResourceInner> call(ServiceResponse<Page<GraphQueryResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GraphQueryResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<GraphQueryResourceInner>>, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(ServiceResponse<Page<GraphQueryResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
    ServiceResponse<PageImpl1<GraphQueryResourceInner>> * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GraphQueryResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2018-09-01-preview";
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<GraphQueryResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GraphQueryResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<GraphQueryResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<GraphQueryResourceInner>, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<GraphQueryResourceInner>>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

    /**
     * Get a single graph query by its resourceName.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GraphQueryResourceInner object if successful.
     */
    public GraphQueryResourceInner getByResourceGroup(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get a single graph query by its resourceName.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GraphQueryResourceInner> getByResourceGroupAsync(String resourceGroupName, String resourceName, final ServiceCallback<GraphQueryResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get a single graph query by its resourceName.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<GraphQueryResourceInner> getByResourceGroupAsync(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<GraphQueryResourceInner>, GraphQueryResourceInner>() {
            @Override
            public GraphQueryResourceInner call(ServiceResponse<GraphQueryResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a single graph query by its resourceName.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<ServiceResponse<GraphQueryResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final String apiVersion = "2018-09-01-preview";
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, resourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GraphQueryResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GraphQueryResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GraphQueryResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GraphQueryResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GraphQueryResourceInner, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GraphQueryResourceInner>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

    /**
     * Delete a graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Delete a graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete a graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        final String apiVersion = "2018-09-01-preview";
        return service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

    /**
     * Create a new graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param properties Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GraphQueryResourceInner object if successful.
     */
    public GraphQueryResourceInner createOrUpdate(String resourceGroupName, String resourceName, GraphQueryResourceInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, properties).toBlocking().single().body();
    }

    /**
     * Create a new graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param properties Properties that need to be specified to create a new graph query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GraphQueryResourceInner> createOrUpdateAsync(String resourceGroupName, String resourceName, GraphQueryResourceInner properties, final ServiceCallback<GraphQueryResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, properties), serviceCallback);
    }

    /**
     * Create a new graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param properties Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<GraphQueryResourceInner> createOrUpdateAsync(String resourceGroupName, String resourceName, GraphQueryResourceInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, properties).map(new Func1<ServiceResponse<GraphQueryResourceInner>, GraphQueryResourceInner>() {
            @Override
            public GraphQueryResourceInner call(ServiceResponse<GraphQueryResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new graph query.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param properties Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<ServiceResponse<GraphQueryResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, GraphQueryResourceInner properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String apiVersion = "2018-09-01-preview";
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, apiVersion, properties, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GraphQueryResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GraphQueryResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GraphQueryResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GraphQueryResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GraphQueryResourceInner, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GraphQueryResourceInner>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

    /**
     * Updates a graph query that has already been added.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param body Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GraphQueryResourceInner object if successful.
     */
    public GraphQueryResourceInner update(String resourceGroupName, String resourceName, GraphQueryUpdateParameters body) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, body).toBlocking().single().body();
    }

    /**
     * Updates a graph query that has already been added.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param body Properties that need to be specified to create a new graph query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GraphQueryResourceInner> updateAsync(String resourceGroupName, String resourceName, GraphQueryUpdateParameters body, final ServiceCallback<GraphQueryResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName, body), serviceCallback);
    }

    /**
     * Updates a graph query that has already been added.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param body Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<GraphQueryResourceInner> updateAsync(String resourceGroupName, String resourceName, GraphQueryUpdateParameters body) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, body).map(new Func1<ServiceResponse<GraphQueryResourceInner>, GraphQueryResourceInner>() {
            @Override
            public GraphQueryResourceInner call(ServiceResponse<GraphQueryResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a graph query that has already been added.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the Graph Query resource.
     * @param body Properties that need to be specified to create a new graph query.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GraphQueryResourceInner object
     */
    public Observable<ServiceResponse<GraphQueryResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName, GraphQueryUpdateParameters body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        final String apiVersion = "2018-09-01-preview";
        return service.update(this.client.subscriptionId(), resourceGroupName, resourceName, apiVersion, body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GraphQueryResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GraphQueryResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GraphQueryResourceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GraphQueryResourceInner> updateDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GraphQueryResourceInner, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GraphQueryResourceInner>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws GraphQueryErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GraphQueryResourceInner&gt; object if successful.
     */
    public PagedList<GraphQueryResourceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<GraphQueryResourceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<GraphQueryResourceInner>(response.body()) {
            @Override
            public Page<GraphQueryResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GraphQueryResourceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<GraphQueryResourceInner>> serviceFuture, final ListOperationCallback<GraphQueryResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GraphQueryResourceInner&gt; object
     */
    public Observable<Page<GraphQueryResourceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<GraphQueryResourceInner>>, Page<GraphQueryResourceInner>>() {
                @Override
                public Page<GraphQueryResourceInner> call(ServiceResponse<Page<GraphQueryResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GraphQueryResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<GraphQueryResourceInner>>, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(ServiceResponse<Page<GraphQueryResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all graph queries defined within a specified subscription and resource group.
     *
    ServiceResponse<PageImpl1<GraphQueryResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GraphQueryResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GraphQueryResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GraphQueryResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<GraphQueryResourceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GraphQueryResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<GraphQueryResourceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws GraphQueryErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<GraphQueryResourceInner>, GraphQueryErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<GraphQueryResourceInner>>() { }.getType())
                .registerError(GraphQueryErrorException.class)
                .build(response);
    }

}
