/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcegraph.v2019_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.implementation.GraphQueryResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.implementation.ResourceGraphManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing GraphQueryResource.
 */
public interface GraphQueryResource extends HasInner<GraphQueryResourceInner>, Indexable, Updatable<GraphQueryResource.Update>, Refreshable<GraphQueryResource>, HasManager<ResourceGraphManager> {
    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the eTag value.
     */
    String eTag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the query value.
     */
    String query();

    /**
     * @return the resultKind value.
     */
    ResultKind resultKind();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the timeModified value.
     */
    DateTime timeModified();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the GraphQueryResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithQuery, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of GraphQueryResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a GraphQueryResource definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the graphqueryresource definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            * @param resourceGroupName The name of the resource group
            * @return the next definition stage
            */
            WithQuery withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the graphqueryresource definition allowing to specify Query.
         */
        interface WithQuery {
           /**
            * Specifies query.
            * @param query KQL query that will be graph
            * @return the next definition stage
            */
            WithCreate withQuery(String query);
        }

        /**
         * The stage of the graphqueryresource definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The description of a graph query
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the graphqueryresource definition allowing to specify ETag.
         */
        interface WithETag {
            /**
             * Specifies eTag.
             * @param eTag This will be used to handle Optimistic Concurrency. If not present, it will always overwrite the existing resource without checking conflict
             * @return the next definition stage
             */
            WithCreate withETag(String eTag);
        }

        /**
         * The stage of the graphqueryresource definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<GraphQueryResource>, DefinitionStages.WithDescription, DefinitionStages.WithETag, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a GraphQueryResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<GraphQueryResource>, UpdateStages.WithDescription, UpdateStages.WithETag, UpdateStages.WithQuery, UpdateStages.WithTags {
    }

    /**
     * Grouping of GraphQueryResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the graphqueryresource update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The description of a graph query
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the graphqueryresource update allowing to specify ETag.
         */
        interface WithETag {
            /**
             * Specifies eTag.
             * @param eTag This will be used to handle Optimistic Concurrency. If not present, it will always overwrite the existing resource without checking conflict
             * @return the next update stage
             */
            Update withETag(String eTag);
        }

        /**
         * The stage of the graphqueryresource update allowing to specify Query.
         */
        interface WithQuery {
            /**
             * Specifies query.
             * @param query KQL query that will be graph
             * @return the next update stage
             */
            Update withQuery(String query);
        }

        /**
         * The stage of the graphqueryresource update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
