/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.resourcegraph.v2019_04_01.implementation;

import com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQueryResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.GraphQueryUpdateParameters;
import java.util.Map;
import org.joda.time.DateTime;
import com.microsoft.azure.management.resourcegraph.v2019_04_01.ResultKind;
import rx.functions.Func1;

class GraphQueryResourceImpl extends CreatableUpdatableImpl<GraphQueryResource, GraphQueryResourceInner, GraphQueryResourceImpl> implements GraphQueryResource, GraphQueryResource.Definition, GraphQueryResource.Update {
    private String resourceGroupName;
    private String resourceName;
    private GraphQueryUpdateParameters updateParameter;
    private final ResourceGraphManager manager;

    GraphQueryResourceImpl(String name, ResourceGraphManager manager) {
        super(name, new GraphQueryResourceInner());
        this.manager = manager;
        // Set resource name
        this.resourceName = name;
        //
        this.updateParameter = new GraphQueryUpdateParameters();
    }

    GraphQueryResourceImpl(GraphQueryResourceInner inner, ResourceGraphManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.resourceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "queries");
        // set other parameters for create and update
        this.updateParameter = new GraphQueryUpdateParameters();
    }

    @Override
    public ResourceGraphManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GraphQueryResource> createResourceAsync() {
        GraphQuerysInner client = this.manager().inner().graphQuerys();
        return client.createOrUpdateAsync(this.resourceGroupName, this.resourceName, this.inner())
            .map(new Func1<GraphQueryResourceInner, GraphQueryResourceInner>() {
               @Override
               public GraphQueryResourceInner call(GraphQueryResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<GraphQueryResource> updateResourceAsync() {
        GraphQuerysInner client = this.manager().inner().graphQuerys();
        return client.updateAsync(this.resourceGroupName, this.resourceName, this.updateParameter)
            .map(new Func1<GraphQueryResourceInner, GraphQueryResourceInner>() {
               @Override
               public GraphQueryResourceInner call(GraphQueryResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<GraphQueryResourceInner> getInnerAsync() {
        GraphQuerysInner client = this.manager().inner().graphQuerys();
        return client.getByResourceGroupAsync(this.resourceGroupName, this.resourceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new GraphQueryUpdateParameters();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String eTag() {
        return this.inner().eTag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String query() {
        return this.inner().query();
    }

    @Override
    public ResultKind resultKind() {
        return this.inner().resultKind();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public DateTime timeModified() {
        return this.inner().timeModified();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public GraphQueryResourceImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public GraphQueryResourceImpl withQuery(String query) {
        if (isInCreateMode()) {
            this.inner().withQuery(query);
        } else {
            this.updateParameter.withQuery(query);
        }
        return this;
    }

    @Override
    public GraphQueryResourceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public GraphQueryResourceImpl withETag(String eTag) {
        if (isInCreateMode()) {
            this.inner().withETag(eTag);
        } else {
            this.updateParameter.withETag(eTag);
        }
        return this;
    }

    @Override
    public GraphQueryResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
