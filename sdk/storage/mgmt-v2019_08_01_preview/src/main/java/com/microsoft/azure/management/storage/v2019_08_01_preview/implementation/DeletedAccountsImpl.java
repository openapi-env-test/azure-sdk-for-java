/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_08_01_preview.DeletedAccounts;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.storage.v2019_08_01_preview.DeletedAccount;

class DeletedAccountsImpl extends WrapperImpl<DeletedAccountsInner> implements DeletedAccounts {
    private PagedListConverter<DeletedAccountInner, DeletedAccount> converter;
    private final StorageManager manager;

    DeletedAccountsImpl(StorageManager manager) {
        super(manager.inner().deletedAccounts());
        this.manager = manager;
        this.converter = new PagedListConverter<DeletedAccountInner, DeletedAccount>() {
            @Override
            public Observable<DeletedAccount> typeConvertAsync(DeletedAccountInner inner) {
                return Observable.just((DeletedAccount) wrapModel(inner));
            }
        };
    }

    public StorageManager manager() {
        return this.manager;
    }

    private DeletedAccountImpl wrapModel(DeletedAccountInner inner) {
        return  new DeletedAccountImpl(inner, manager());
    }

    @Override
    public PagedList<DeletedAccount> list() {
        DeletedAccountsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<DeletedAccount> listAsync() {
        DeletedAccountsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<DeletedAccountInner>, Observable<DeletedAccountInner>>() {
            @Override
            public Observable<DeletedAccountInner> call(Page<DeletedAccountInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<DeletedAccountInner, DeletedAccount>() {
            @Override
            public DeletedAccount call(DeletedAccountInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
