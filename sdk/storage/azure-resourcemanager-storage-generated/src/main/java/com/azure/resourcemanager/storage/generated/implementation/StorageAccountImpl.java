// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.storage.generated.StorageManager;
import com.azure.resourcemanager.storage.generated.fluent.models.SkuInner;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageAccountCreateParametersInner;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageAccountInner;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageAccountUpdateParametersInner;
import com.azure.resourcemanager.storage.generated.models.AccessTier;
import com.azure.resourcemanager.storage.generated.models.AccountSasParameters;
import com.azure.resourcemanager.storage.generated.models.AccountStatus;
import com.azure.resourcemanager.storage.generated.models.CustomDomain;
import com.azure.resourcemanager.storage.generated.models.Encryption;
import com.azure.resourcemanager.storage.generated.models.Endpoints;
import com.azure.resourcemanager.storage.generated.models.Identity;
import com.azure.resourcemanager.storage.generated.models.Kind;
import com.azure.resourcemanager.storage.generated.models.ListAccountSasResponse;
import com.azure.resourcemanager.storage.generated.models.ListServiceSasResponse;
import com.azure.resourcemanager.storage.generated.models.NetworkRuleSet;
import com.azure.resourcemanager.storage.generated.models.ProvisioningState;
import com.azure.resourcemanager.storage.generated.models.ServiceSasParameters;
import com.azure.resourcemanager.storage.generated.models.Sku;
import com.azure.resourcemanager.storage.generated.models.StorageAccount;
import com.azure.resourcemanager.storage.generated.models.StorageAccountListKeysResult;
import com.azure.resourcemanager.storage.generated.models.StorageAccountRegenerateKeyParameters;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class StorageAccountImpl implements StorageAccount, StorageAccount.Definition, StorageAccount.Update {
    private StorageAccountInner innerObject;

    private final StorageManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        SkuInner inner = this.innerModel().sku();
        if (inner != null) {
            return new SkuImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Kind kind() {
        return this.innerModel().kind();
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Endpoints primaryEndpoints() {
        return this.innerModel().primaryEndpoints();
    }

    public String primaryLocation() {
        return this.innerModel().primaryLocation();
    }

    public AccountStatus statusOfPrimary() {
        return this.innerModel().statusOfPrimary();
    }

    public OffsetDateTime lastGeoFailoverTime() {
        return this.innerModel().lastGeoFailoverTime();
    }

    public String secondaryLocation() {
        return this.innerModel().secondaryLocation();
    }

    public AccountStatus statusOfSecondary() {
        return this.innerModel().statusOfSecondary();
    }

    public OffsetDateTime creationTime() {
        return this.innerModel().creationTime();
    }

    public CustomDomain customDomain() {
        return this.innerModel().customDomain();
    }

    public Endpoints secondaryEndpoints() {
        return this.innerModel().secondaryEndpoints();
    }

    public Encryption encryption() {
        return this.innerModel().encryption();
    }

    public AccessTier accessTier() {
        return this.innerModel().accessTier();
    }

    public Boolean enableHttpsTrafficOnly() {
        return this.innerModel().enableHttpsTrafficOnly();
    }

    public NetworkRuleSet networkRuleSet() {
        return this.innerModel().networkRuleSet();
    }

    public Boolean isHnsEnabled() {
        return this.innerModel().isHnsEnabled();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public StorageAccountInner innerModel() {
        return this.innerObject;
    }

    private StorageManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private StorageAccountCreateParametersInner createParameters;

    private StorageAccountUpdateParametersInner updateParameters;

    public StorageAccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public StorageAccount create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .create(resourceGroupName, accountName, createParameters, Context.NONE);
        return this;
    }

    public StorageAccount create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .create(resourceGroupName, accountName, createParameters, context);
        return this;
    }

    StorageAccountImpl(String name, StorageManager serviceManager) {
        this.innerObject = new StorageAccountInner();
        this.serviceManager = serviceManager;
        this.accountName = name;
        this.createParameters = new StorageAccountCreateParametersInner();
    }

    public StorageAccountImpl update() {
        this.updateParameters = new StorageAccountUpdateParametersInner();
        return this;
    }

    public StorageAccount apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .updateWithResponse(resourceGroupName, accountName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public StorageAccount apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .updateWithResponse(resourceGroupName, accountName, updateParameters, context)
                .getValue();
        return this;
    }

    StorageAccountImpl(StorageAccountInner innerObject, StorageManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "storageAccounts");
    }

    public StorageAccount refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public StorageAccount refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public StorageAccountListKeysResult listKeys() {
        return serviceManager.storageAccounts().listKeys(resourceGroupName, accountName);
    }

    public Response<StorageAccountListKeysResult> listKeysWithResponse(Context context) {
        return serviceManager.storageAccounts().listKeysWithResponse(resourceGroupName, accountName, context);
    }

    public StorageAccountListKeysResult regenerateKey(StorageAccountRegenerateKeyParameters regenerateKey) {
        return serviceManager.storageAccounts().regenerateKey(resourceGroupName, accountName, regenerateKey);
    }

    public Response<StorageAccountListKeysResult> regenerateKeyWithResponse(
        StorageAccountRegenerateKeyParameters regenerateKey, Context context) {
        return serviceManager
            .storageAccounts()
            .regenerateKeyWithResponse(resourceGroupName, accountName, regenerateKey, context);
    }

    public ListAccountSasResponse listAccountSas(AccountSasParameters parameters) {
        return serviceManager.storageAccounts().listAccountSas(resourceGroupName, accountName, parameters);
    }

    public Response<ListAccountSasResponse> listAccountSasWithResponse(
        AccountSasParameters parameters, Context context) {
        return serviceManager
            .storageAccounts()
            .listAccountSasWithResponse(resourceGroupName, accountName, parameters, context);
    }

    public ListServiceSasResponse listServiceSas(ServiceSasParameters parameters) {
        return serviceManager.storageAccounts().listServiceSas(resourceGroupName, accountName, parameters);
    }

    public Response<ListServiceSasResponse> listServiceSasWithResponse(
        ServiceSasParameters parameters, Context context) {
        return serviceManager
            .storageAccounts()
            .listServiceSasWithResponse(resourceGroupName, accountName, parameters, context);
    }

    public StorageAccountImpl withRegion(Region location) {
        this.createParameters.withLocation(location.toString());
        return this;
    }

    public StorageAccountImpl withRegion(String location) {
        this.createParameters.withLocation(location);
        return this;
    }

    public StorageAccountImpl withSku(SkuInner sku) {
        if (isInCreateMode()) {
            this.createParameters.withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public StorageAccountImpl withKind(Kind kind) {
        if (isInCreateMode()) {
            this.createParameters.withKind(kind);
            return this;
        } else {
            this.updateParameters.withKind(kind);
            return this;
        }
    }

    public StorageAccountImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameters.withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public StorageAccountImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.createParameters.withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public StorageAccountImpl withCustomDomain(CustomDomain customDomain) {
        if (isInCreateMode()) {
            this.createParameters.withCustomDomain(customDomain);
            return this;
        } else {
            this.updateParameters.withCustomDomain(customDomain);
            return this;
        }
    }

    public StorageAccountImpl withEncryption(Encryption encryption) {
        if (isInCreateMode()) {
            this.createParameters.withEncryption(encryption);
            return this;
        } else {
            this.updateParameters.withEncryption(encryption);
            return this;
        }
    }

    public StorageAccountImpl withNetworkRuleSet(NetworkRuleSet networkRuleSet) {
        if (isInCreateMode()) {
            this.createParameters.withNetworkRuleSet(networkRuleSet);
            return this;
        } else {
            this.updateParameters.withNetworkRuleSet(networkRuleSet);
            return this;
        }
    }

    public StorageAccountImpl withAccessTier(AccessTier accessTier) {
        if (isInCreateMode()) {
            this.createParameters.withAccessTier(accessTier);
            return this;
        } else {
            this.updateParameters.withAccessTier(accessTier);
            return this;
        }
    }

    public StorageAccountImpl withEnableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
        if (isInCreateMode()) {
            this.createParameters.withEnableHttpsTrafficOnly(enableHttpsTrafficOnly);
            return this;
        } else {
            this.updateParameters.withEnableHttpsTrafficOnly(enableHttpsTrafficOnly);
            return this;
        }
    }

    public StorageAccountImpl withIsHnsEnabled(Boolean isHnsEnabled) {
        this.createParameters.withIsHnsEnabled(isHnsEnabled);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
