// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.releaseplannertest.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** FarmBeatsSolution properties. */
@Fluent
public final class FarmBeatsSolutionProperties {
    /*
     * Solution Partner Id.
     */
    @JsonProperty(value = "partnerId", access = JsonProperty.Access.WRITE_ONLY)
    private String partnerId;

    /*
     * Solution Partner Tenant Id.
     */
    @JsonProperty(value = "partnerTenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String partnerTenantId;

    /*
     * Gets scope of the FarmBeats data access that's required for processing solution request to partner.
     * Example: For gdd they might need weatherScope and satelliteScope.
     */
    @JsonProperty(value = "dataAccessScopes", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> dataAccessScopes;

    /*
     * The marketplaceOfferDetails property.
     */
    @JsonProperty(value = "marketplaceOfferDetails")
    private MarketplaceOfferDetails marketplaceOfferDetails;

    /*
     * Gets scope of the FarmBeats related parameters that need to be validated in apiInputParameters.
     * Example: For if 'FarmHierarchy' is the input scope for 'WeatherScope' data access
     * For working with WeatherScope we need FarmHierarchy info implies 'farmerId', 'resourceId', 'resourceType' in
     * request body.
     */
    @JsonProperty(value = "inputParametersValidationScopes", access = JsonProperty.Access.WRITE_ONLY)
    private List<ResourceParameter> inputParametersValidationScopes;

    /*
     * Gets apiVersion: Swagger Document Dictionary to capture all api versions of swagger exposed by partner to
     * farmbeats.
     */
    @JsonProperty(value = "openApiSpecsDictionary", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> openApiSpecsDictionary;

    /*
     * Gets example name: insight sample response Dictionary to capture all variations of computed results ingested by
     * partner.
     */
    @JsonProperty(value = "evaluatedOutputsDictionary", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, SolutionEvaluatedOutput> evaluatedOutputsDictionary;

    /*
     * Application id of the multi tenant application to be used by partner to access FarmBeats data.
     */
    @JsonProperty(value = "accessFBApplicationId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID accessFBApplicationId;

    /*
     * Application id of the SaaS multi tenant application.
     */
    @JsonProperty(value = "saaSApplicationId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID saaSApplicationId;

    /*
     * List of ActionIds needed to make the SaaS multi tenant application access relevant fb data.
     */
    @JsonProperty(value = "actionIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> actionIds;

    /*
     * Role Id of the SaaS multi tenant application to access relevant fb data.
     */
    @JsonProperty(value = "roleId", access = JsonProperty.Access.WRITE_ONLY)
    private String roleId;

    /*
     * Role Name of the SaaS multi tenant application to access relevant fb data.
     */
    @JsonProperty(value = "roleName", access = JsonProperty.Access.WRITE_ONLY)
    private String roleName;

    /*
     * Application name of the multi tenant application to be used by partner to access FarmBeatsData.
     */
    @JsonProperty(value = "accessFBApplicationName", access = JsonProperty.Access.WRITE_ONLY)
    private String accessFBApplicationName;

    /** Creates an instance of FarmBeatsSolutionProperties class. */
    public FarmBeatsSolutionProperties() {
    }

    /**
     * Get the partnerId property: Solution Partner Id.
     *
     * @return the partnerId value.
     */
    public String partnerId() {
        return this.partnerId;
    }

    /**
     * Get the partnerTenantId property: Solution Partner Tenant Id.
     *
     * @return the partnerTenantId value.
     */
    public String partnerTenantId() {
        return this.partnerTenantId;
    }

    /**
     * Get the dataAccessScopes property: Gets scope of the FarmBeats data access that's required for processing
     * solution request to partner. Example: For gdd they might need weatherScope and satelliteScope.
     *
     * @return the dataAccessScopes value.
     */
    public List<String> dataAccessScopes() {
        return this.dataAccessScopes;
    }

    /**
     * Get the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     *
     * @return the marketplaceOfferDetails value.
     */
    public MarketplaceOfferDetails marketplaceOfferDetails() {
        return this.marketplaceOfferDetails;
    }

    /**
     * Set the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     *
     * @param marketplaceOfferDetails the marketplaceOfferDetails value to set.
     * @return the FarmBeatsSolutionProperties object itself.
     */
    public FarmBeatsSolutionProperties withMarketplaceOfferDetails(MarketplaceOfferDetails marketplaceOfferDetails) {
        this.marketplaceOfferDetails = marketplaceOfferDetails;
        return this;
    }

    /**
     * Get the inputParametersValidationScopes property: Gets scope of the FarmBeats related parameters that need to be
     * validated in apiInputParameters. Example: For if 'FarmHierarchy' is the input scope for 'WeatherScope' data
     * access For working with WeatherScope we need FarmHierarchy info implies 'farmerId', 'resourceId', 'resourceType'
     * in request body.
     *
     * @return the inputParametersValidationScopes value.
     */
    public List<ResourceParameter> inputParametersValidationScopes() {
        return this.inputParametersValidationScopes;
    }

    /**
     * Get the openApiSpecsDictionary property: Gets apiVersion: Swagger Document Dictionary to capture all api versions
     * of swagger exposed by partner to farmbeats.
     *
     * @return the openApiSpecsDictionary value.
     */
    public Map<String, Object> openApiSpecsDictionary() {
        return this.openApiSpecsDictionary;
    }

    /**
     * Get the evaluatedOutputsDictionary property: Gets example name: insight sample response Dictionary to capture all
     * variations of computed results ingested by partner.
     *
     * @return the evaluatedOutputsDictionary value.
     */
    public Map<String, SolutionEvaluatedOutput> evaluatedOutputsDictionary() {
        return this.evaluatedOutputsDictionary;
    }

    /**
     * Get the accessFBApplicationId property: Application id of the multi tenant application to be used by partner to
     * access FarmBeats data.
     *
     * @return the accessFBApplicationId value.
     */
    public UUID accessFBApplicationId() {
        return this.accessFBApplicationId;
    }

    /**
     * Get the saaSApplicationId property: Application id of the SaaS multi tenant application.
     *
     * @return the saaSApplicationId value.
     */
    public UUID saaSApplicationId() {
        return this.saaSApplicationId;
    }

    /**
     * Get the actionIds property: List of ActionIds needed to make the SaaS multi tenant application access relevant fb
     * data.
     *
     * @return the actionIds value.
     */
    public List<String> actionIds() {
        return this.actionIds;
    }

    /**
     * Get the roleId property: Role Id of the SaaS multi tenant application to access relevant fb data.
     *
     * @return the roleId value.
     */
    public String roleId() {
        return this.roleId;
    }

    /**
     * Get the roleName property: Role Name of the SaaS multi tenant application to access relevant fb data.
     *
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Get the accessFBApplicationName property: Application name of the multi tenant application to be used by partner
     * to access FarmBeatsData.
     *
     * @return the accessFBApplicationName value.
     */
    public String accessFBApplicationName() {
        return this.accessFBApplicationName;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceOfferDetails() != null) {
            marketplaceOfferDetails().validate();
        }
        if (inputParametersValidationScopes() != null) {
            inputParametersValidationScopes().forEach(e -> e.validate());
        }
        if (evaluatedOutputsDictionary() != null) {
            evaluatedOutputsDictionary()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
