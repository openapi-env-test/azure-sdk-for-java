// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** AML Filesystem Hsm settings. */
@Fluent
public final class AmlFilesystemHsmSettings {
    /*
     * Resource ID of storage container used for hydrating the namespace and
     * archiving from the namespace. The resource provider must have permission
     * to create SAS tokens on the storage account.
     */
    @JsonProperty(value = "container", required = true)
    private String container;

    /*
     * Resource ID of storage container used for logging events and errors.
     * Must be a separate container in the same storage account as the
     * hydration and archive container. The resource provider must have
     * permission to create SAS tokens on the storage account.
     */
    @JsonProperty(value = "loggingContainer", required = true)
    private String loggingContainer;

    /*
     * Path/Prefix for blobs in above container.  Only blobs containing this
     * prefix get pre-hydrated into the cluster namespace
     */
    @JsonProperty(value = "importPrefix")
    private String importPrefix;

    /*
     * Path/Prefix in above blob container where data gets exported when an
     * archive task runs. Specifying '/' will overwrite the original data.
     * This will default to '/' and only '/' is supported at this time.
     */
    @JsonProperty(value = "exportPrefix")
    private String exportPrefix;

    /**
     * Get the container property: Resource ID of storage container used for hydrating the namespace and archiving from
     * the namespace. The resource provider must have permission to create SAS tokens on the storage account.
     *
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: Resource ID of storage container used for hydrating the namespace and archiving from
     * the namespace. The resource provider must have permission to create SAS tokens on the storage account.
     *
     * @param container the container value to set.
     * @return the AmlFilesystemHsmSettings object itself.
     */
    public AmlFilesystemHsmSettings withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the loggingContainer property: Resource ID of storage container used for logging events and errors. Must be a
     * separate container in the same storage account as the hydration and archive container. The resource provider must
     * have permission to create SAS tokens on the storage account.
     *
     * @return the loggingContainer value.
     */
    public String loggingContainer() {
        return this.loggingContainer;
    }

    /**
     * Set the loggingContainer property: Resource ID of storage container used for logging events and errors. Must be a
     * separate container in the same storage account as the hydration and archive container. The resource provider must
     * have permission to create SAS tokens on the storage account.
     *
     * @param loggingContainer the loggingContainer value to set.
     * @return the AmlFilesystemHsmSettings object itself.
     */
    public AmlFilesystemHsmSettings withLoggingContainer(String loggingContainer) {
        this.loggingContainer = loggingContainer;
        return this;
    }

    /**
     * Get the importPrefix property: Path/Prefix for blobs in above container. Only blobs containing this prefix get
     * pre-hydrated into the cluster namespace.
     *
     * @return the importPrefix value.
     */
    public String importPrefix() {
        return this.importPrefix;
    }

    /**
     * Set the importPrefix property: Path/Prefix for blobs in above container. Only blobs containing this prefix get
     * pre-hydrated into the cluster namespace.
     *
     * @param importPrefix the importPrefix value to set.
     * @return the AmlFilesystemHsmSettings object itself.
     */
    public AmlFilesystemHsmSettings withImportPrefix(String importPrefix) {
        this.importPrefix = importPrefix;
        return this;
    }

    /**
     * Get the exportPrefix property: Path/Prefix in above blob container where data gets exported when an archive task
     * runs. Specifying '/' will overwrite the original data. This will default to '/' and only '/' is supported at this
     * time.
     *
     * @return the exportPrefix value.
     */
    public String exportPrefix() {
        return this.exportPrefix;
    }

    /**
     * Set the exportPrefix property: Path/Prefix in above blob container where data gets exported when an archive task
     * runs. Specifying '/' will overwrite the original data. This will default to '/' and only '/' is supported at this
     * time.
     *
     * @param exportPrefix the exportPrefix value to set.
     * @return the AmlFilesystemHsmSettings object itself.
     */
    public AmlFilesystemHsmSettings withExportPrefix(String exportPrefix) {
        this.exportPrefix = exportPrefix;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (container() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property container in model AmlFilesystemHsmSettings"));
        }
        if (loggingContainer() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property loggingContainer in model AmlFilesystemHsmSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AmlFilesystemHsmSettings.class);
}
