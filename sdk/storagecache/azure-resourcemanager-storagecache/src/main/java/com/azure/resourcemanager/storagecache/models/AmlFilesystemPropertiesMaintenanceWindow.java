// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Start time of a 30 minute weekly maintenance window. */
@Fluent
public final class AmlFilesystemPropertiesMaintenanceWindow {
    /*
     * Day of the week that the maintenance window will occur
     */
    @JsonProperty(value = "dayOfWeek")
    private MaintenanceDayOfWeekType dayOfWeek;

    /*
     * The time of day to start the maintenance window
     */
    @JsonProperty(value = "timeOfDay")
    private String timeOfDay;

    /**
     * Get the dayOfWeek property: Day of the week that the maintenance window will occur.
     *
     * @return the dayOfWeek value.
     */
    public MaintenanceDayOfWeekType dayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * Set the dayOfWeek property: Day of the week that the maintenance window will occur.
     *
     * @param dayOfWeek the dayOfWeek value to set.
     * @return the AmlFilesystemPropertiesMaintenanceWindow object itself.
     */
    public AmlFilesystemPropertiesMaintenanceWindow withDayOfWeek(MaintenanceDayOfWeekType dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
        return this;
    }

    /**
     * Get the timeOfDay property: The time of day to start the maintenance window.
     *
     * @return the timeOfDay value.
     */
    public String timeOfDay() {
        return this.timeOfDay;
    }

    /**
     * Set the timeOfDay property: The time of day to start the maintenance window.
     *
     * @param timeOfDay the timeOfDay value to set.
     * @return the AmlFilesystemPropertiesMaintenanceWindow object itself.
     */
    public AmlFilesystemPropertiesMaintenanceWindow withTimeOfDay(String timeOfDay) {
        this.timeOfDay = timeOfDay;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
