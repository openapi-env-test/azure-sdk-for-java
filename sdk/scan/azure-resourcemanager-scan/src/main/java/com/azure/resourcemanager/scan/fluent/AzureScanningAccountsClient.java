// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scan.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.scan.fluent.models.ScanningAccountInner;
import com.azure.resourcemanager.scan.models.ScanningAccountPatch;

/** An instance of this class provides access to all the operations defined in AzureScanningAccountsClient. */
public interface AzureScanningAccountsClient {
    /**
     * Create a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param scanningAccount Parameters to create the scanning account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ScanningAccountInner>, ScanningAccountInner> beginCreate(
        String resourceGroupName, String accountName, ScanningAccountInner scanningAccount);

    /**
     * Create a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param scanningAccount Parameters to create the scanning account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ScanningAccountInner>, ScanningAccountInner> beginCreate(
        String resourceGroupName, String accountName, ScanningAccountInner scanningAccount, Context context);

    /**
     * Create a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param scanningAccount Parameters to create the scanning account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScanningAccountInner create(String resourceGroupName, String accountName, ScanningAccountInner scanningAccount);

    /**
     * Create a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScanningAccountInner create(String resourceGroupName, String accountName);

    /**
     * Create a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param scanningAccount Parameters to create the scanning account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScanningAccountInner create(
        String resourceGroupName, String accountName, ScanningAccountInner scanningAccount, Context context);

    /**
     * Update a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return scanning account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScanningAccountInner update(String resourceGroupName, String accountName);

    /**
     * Update a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param scanningAccountPatch Parameters to update the scanning account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return scanning account resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ScanningAccountInner> updateWithResponse(
        String resourceGroupName, String accountName, ScanningAccountPatch scanningAccountPatch, Context context);

    /**
     * Get a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Scan Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScanningAccountInner getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Get a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Scan Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ScanningAccountInner> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context);

    /**
     * Delete a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName);

    /**
     * Delete a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, Context context);

    /**
     * Delete a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName);

    /**
     * Delete a Scan Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Scanning account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, Context context);

    /**
     * Lists Scanning Accounts within a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of scanning accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScanningAccountInner> list();

    /**
     * Lists Scanning Accounts within a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of scanning accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScanningAccountInner> list(Context context);

    /**
     * List Scanning Accounts within a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of scanning accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScanningAccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Scanning Accounts within a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of scanning accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScanningAccountInner> listByResourceGroup(String resourceGroupName, Context context);
}
