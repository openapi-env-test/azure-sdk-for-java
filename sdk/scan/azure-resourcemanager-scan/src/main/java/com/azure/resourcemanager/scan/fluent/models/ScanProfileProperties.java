// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scan.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scan.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of the scan profile. */
@Fluent
public final class ScanProfileProperties {
    /*
     * AAD client Id of the scan profile
     */
    @JsonProperty(value = "aadClientId", required = true)
    private String aadClientId;

    /*
     * Provisioning state of the scanning account
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the aadClientId property: AAD client Id of the scan profile.
     *
     * @return the aadClientId value.
     */
    public String aadClientId() {
        return this.aadClientId;
    }

    /**
     * Set the aadClientId property: AAD client Id of the scan profile.
     *
     * @param aadClientId the aadClientId value to set.
     * @return the ScanProfileProperties object itself.
     */
    public ScanProfileProperties withAadClientId(String aadClientId) {
        this.aadClientId = aadClientId;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the scanning account.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aadClientId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property aadClientId in model ScanProfileProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScanProfileProperties.class);
}
