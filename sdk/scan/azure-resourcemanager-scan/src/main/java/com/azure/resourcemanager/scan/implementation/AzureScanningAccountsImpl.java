// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scan.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scan.fluent.AzureScanningAccountsClient;
import com.azure.resourcemanager.scan.fluent.models.ScanningAccountInner;
import com.azure.resourcemanager.scan.models.AzureScanningAccounts;
import com.azure.resourcemanager.scan.models.ScanningAccount;

public final class AzureScanningAccountsImpl implements AzureScanningAccounts {
    private static final ClientLogger LOGGER = new ClientLogger(AzureScanningAccountsImpl.class);

    private final AzureScanningAccountsClient innerClient;

    private final com.azure.resourcemanager.scan.AzureScanningManager serviceManager;

    public AzureScanningAccountsImpl(
        AzureScanningAccountsClient innerClient, com.azure.resourcemanager.scan.AzureScanningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ScanningAccount getByResourceGroup(String resourceGroupName, String accountName) {
        ScanningAccountInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, accountName);
        if (inner != null) {
            return new ScanningAccountImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ScanningAccount> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context) {
        Response<ScanningAccountInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ScanningAccountImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String accountName) {
        this.serviceClient().delete(resourceGroupName, accountName);
    }

    public void delete(String resourceGroupName, String accountName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, context);
    }

    public PagedIterable<ScanningAccount> list() {
        PagedIterable<ScanningAccountInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ScanningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<ScanningAccount> list(Context context) {
        PagedIterable<ScanningAccountInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ScanningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<ScanningAccount> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ScanningAccountInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ScanningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<ScanningAccount> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ScanningAccountInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ScanningAccountImpl(inner1, this.manager()));
    }

    public ScanningAccount getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "scanningAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scanningAccounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<ScanningAccount> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "scanningAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scanningAccounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "scanningAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scanningAccounts'.", id)));
        }
        this.delete(resourceGroupName, accountName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "scanningAccounts");
        if (accountName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scanningAccounts'.", id)));
        }
        this.delete(resourceGroupName, accountName, context);
    }

    private AzureScanningAccountsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scan.AzureScanningManager manager() {
        return this.serviceManager;
    }

    public ScanningAccountImpl define(String name) {
        return new ScanningAccountImpl(name, this.manager());
    }
}
