// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.elasticsan.models.SanTierInfo;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuLocationInfo;
import com.azure.resourcemanager.elasticsan.models.VolumeGroupTierInfo;
import com.azure.resourcemanager.elasticsan.models.VolumeTierInfo;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** SkuInformation object. */
@Fluent
public final class ResourceTypeSkuInner {
    /*
     * The Sku tier
     */
    @JsonProperty(value = "sku", access = JsonProperty.Access.WRITE_ONLY)
    private List<Sku> sku;

    /*
     * Availability of the SKU for the location/zone
     */
    @JsonProperty(value = "locationInfo", access = JsonProperty.Access.WRITE_ONLY)
    private List<SkuLocationInfo> locationInfo;

    /*
     * Scalability targets for the San account for a given tier
     */
    @JsonProperty(value = "elasticSan")
    private SanTierInfo elasticSan;

    /*
     * Volume Group targets for the San account for a given tier
     */
    @JsonProperty(value = "volumeGroup")
    private VolumeGroupTierInfo volumeGroup;

    /*
     * Volume targets for the San account for a given tier
     */
    @JsonProperty(value = "volume")
    private VolumeTierInfo volume;

    /**
     * Get the sku property: The Sku tier.
     *
     * @return the sku value.
     */
    public List<Sku> sku() {
        return this.sku;
    }

    /**
     * Get the locationInfo property: Availability of the SKU for the location/zone.
     *
     * @return the locationInfo value.
     */
    public List<SkuLocationInfo> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Get the elasticSan property: Scalability targets for the San account for a given tier.
     *
     * @return the elasticSan value.
     */
    public SanTierInfo elasticSan() {
        return this.elasticSan;
    }

    /**
     * Set the elasticSan property: Scalability targets for the San account for a given tier.
     *
     * @param elasticSan the elasticSan value to set.
     * @return the ResourceTypeSkuInner object itself.
     */
    public ResourceTypeSkuInner withElasticSan(SanTierInfo elasticSan) {
        this.elasticSan = elasticSan;
        return this;
    }

    /**
     * Get the volumeGroup property: Volume Group targets for the San account for a given tier.
     *
     * @return the volumeGroup value.
     */
    public VolumeGroupTierInfo volumeGroup() {
        return this.volumeGroup;
    }

    /**
     * Set the volumeGroup property: Volume Group targets for the San account for a given tier.
     *
     * @param volumeGroup the volumeGroup value to set.
     * @return the ResourceTypeSkuInner object itself.
     */
    public ResourceTypeSkuInner withVolumeGroup(VolumeGroupTierInfo volumeGroup) {
        this.volumeGroup = volumeGroup;
        return this;
    }

    /**
     * Get the volume property: Volume targets for the San account for a given tier.
     *
     * @return the volume value.
     */
    public VolumeTierInfo volume() {
        return this.volume;
    }

    /**
     * Set the volume property: Volume targets for the San account for a given tier.
     *
     * @param volume the volume value to set.
     * @return the ResourceTypeSkuInner object itself.
     */
    public ResourceTypeSkuInner withVolume(VolumeTierInfo volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().forEach(e -> e.validate());
        }
        if (locationInfo() != null) {
            locationInfo().forEach(e -> e.validate());
        }
        if (elasticSan() != null) {
            elasticSan().validate();
        }
        if (volumeGroup() != null) {
            volumeGroup().validate();
        }
        if (volume() != null) {
            volume().validate();
        }
    }
}
