// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.elasticsan.fluent.models.SnapshotInner;
import com.azure.resourcemanager.elasticsan.models.ExportSnapshot;
import com.azure.resourcemanager.elasticsan.models.Snapshot;
import com.azure.resourcemanager.elasticsan.models.SnapshotCreationData;
import com.azure.resourcemanager.elasticsan.models.SnapshotUpdate;
import java.util.Collections;
import java.util.Map;

public final class SnapshotImpl implements Snapshot, Snapshot.Definition, Snapshot.Update {
    private SnapshotInner innerObject;

    private final com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public SnapshotCreationData creationData() {
        return this.innerModel().creationData();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SnapshotInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.elasticsan.ElasticSanManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String elasticSanName;

    private String volumeGroupName;

    private String snapshotName;

    private SnapshotUpdate updateParameters;

    public SnapshotImpl withExistingVolumegroup(
        String resourceGroupName, String elasticSanName, String volumeGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.elasticSanName = elasticSanName;
        this.volumeGroupName = volumeGroupName;
        return this;
    }

    public Snapshot create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .create(
                    resourceGroupName, elasticSanName, volumeGroupName, snapshotName, this.innerModel(), Context.NONE);
        return this;
    }

    public Snapshot create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .create(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, this.innerModel(), context);
        return this;
    }

    SnapshotImpl(String name, com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager) {
        this.innerObject = new SnapshotInner();
        this.serviceManager = serviceManager;
        this.snapshotName = name;
    }

    public SnapshotImpl update() {
        this.updateParameters = new SnapshotUpdate();
        return this;
    }

    public Snapshot apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .update(
                    resourceGroupName, elasticSanName, volumeGroupName, snapshotName, updateParameters, Context.NONE);
        return this;
    }

    public Snapshot apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .update(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, updateParameters, context);
        return this;
    }

    SnapshotImpl(SnapshotInner innerObject, com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.elasticSanName = Utils.getValueFromIdByName(innerObject.id(), "elasticSans");
        this.volumeGroupName = Utils.getValueFromIdByName(innerObject.id(), "volumegroups");
        this.snapshotName = Utils.getValueFromIdByName(innerObject.id(), "snapshots");
    }

    public Snapshot refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .getWithResponse(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, Context.NONE)
                .getValue();
        return this;
    }

    public Snapshot refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSnapshots()
                .getWithResponse(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, context)
                .getValue();
        return this;
    }

    public Snapshot export(ExportSnapshot parameters) {
        return serviceManager
            .snapshots()
            .export(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, parameters);
    }

    public Snapshot export(ExportSnapshot parameters, Context context) {
        return serviceManager
            .snapshots()
            .export(resourceGroupName, elasticSanName, volumeGroupName, snapshotName, parameters, context);
    }

    public SnapshotImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SnapshotImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SnapshotImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SnapshotImpl withCreationData(SnapshotCreationData creationData) {
        this.innerModel().withCreationData(creationData);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
