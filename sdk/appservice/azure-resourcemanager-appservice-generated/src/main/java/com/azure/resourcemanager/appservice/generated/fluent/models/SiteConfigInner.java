// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.ApiDefinitionInfo;
import com.azure.resourcemanager.appservice.generated.models.AutoHealRules;
import com.azure.resourcemanager.appservice.generated.models.ConnStringInfo;
import com.azure.resourcemanager.appservice.generated.models.CorsSettings;
import com.azure.resourcemanager.appservice.generated.models.Experiments;
import com.azure.resourcemanager.appservice.generated.models.HandlerMapping;
import com.azure.resourcemanager.appservice.generated.models.IpSecurityRestriction;
import com.azure.resourcemanager.appservice.generated.models.ManagedPipelineMode;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.SiteLimits;
import com.azure.resourcemanager.appservice.generated.models.SiteLoadBalancing;
import com.azure.resourcemanager.appservice.generated.models.VirtualApplication;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Configuration of Azure web site. */
@JsonFlatten
@Fluent
public class SiteConfigInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SiteConfigInner.class);

    /*
     * Number of workers
     */
    @JsonProperty(value = "properties.numberOfWorkers")
    private Integer numberOfWorkers;

    /*
     * Default documents
     */
    @JsonProperty(value = "properties.defaultDocuments")
    private List<String> defaultDocuments;

    /*
     * Net Framework Version
     */
    @JsonProperty(value = "properties.netFrameworkVersion")
    private String netFrameworkVersion;

    /*
     * Version of PHP
     */
    @JsonProperty(value = "properties.phpVersion")
    private String phpVersion;

    /*
     * Version of Python
     */
    @JsonProperty(value = "properties.pythonVersion")
    private String pythonVersion;

    /*
     * Version of Node
     */
    @JsonProperty(value = "properties.nodeVersion")
    private String nodeVersion;

    /*
     * Enable request tracing
     */
    @JsonProperty(value = "properties.requestTracingEnabled")
    private Boolean requestTracingEnabled;

    /*
     * Request tracing expiration time
     */
    @JsonProperty(value = "properties.requestTracingExpirationTime")
    private OffsetDateTime requestTracingExpirationTime;

    /*
     * Remote Debugging Enabled
     */
    @JsonProperty(value = "properties.remoteDebuggingEnabled")
    private Boolean remoteDebuggingEnabled;

    /*
     * Remote Debugging Version
     */
    @JsonProperty(value = "properties.remoteDebuggingVersion")
    private String remoteDebuggingVersion;

    /*
     * HTTP logging Enabled
     */
    @JsonProperty(value = "properties.httpLoggingEnabled")
    private Boolean httpLoggingEnabled;

    /*
     * HTTP Logs Directory size limit
     */
    @JsonProperty(value = "properties.logsDirectorySizeLimit")
    private Integer logsDirectorySizeLimit;

    /*
     * Detailed error logging enabled
     */
    @JsonProperty(value = "properties.detailedErrorLoggingEnabled")
    private Boolean detailedErrorLoggingEnabled;

    /*
     * Publishing user name
     */
    @JsonProperty(value = "properties.publishingUsername")
    private String publishingUsername;

    /*
     * Publishing password
     */
    @JsonProperty(value = "properties.publishingPassword")
    private String publishingPassword;

    /*
     * Application Settings
     */
    @JsonProperty(value = "properties.appSettings")
    private List<NameValuePair> appSettings;

    /*
     * Site Metadata
     */
    @JsonProperty(value = "properties.metadata")
    private List<NameValuePair> metadata;

    /*
     * Connection strings
     */
    @JsonProperty(value = "properties.connectionStrings")
    private List<ConnStringInfo> connectionStrings;

    /*
     * Handler mappings
     */
    @JsonProperty(value = "properties.handlerMappings")
    private List<HandlerMapping> handlerMappings;

    /*
     * Document root
     */
    @JsonProperty(value = "properties.documentRoot")
    private String documentRoot;

    /*
     * SCM type
     */
    @JsonProperty(value = "properties.scmType")
    private String scmType;

    /*
     * Use 32 bit worker process
     */
    @JsonProperty(value = "properties.use32BitWorkerProcess")
    private Boolean use32BitWorkerProcess;

    /*
     * Web socket enabled.
     */
    @JsonProperty(value = "properties.webSocketsEnabled")
    private Boolean webSocketsEnabled;

    /*
     * Always On
     */
    @JsonProperty(value = "properties.alwaysOn")
    private Boolean alwaysOn;

    /*
     * Java version
     */
    @JsonProperty(value = "properties.javaVersion")
    private String javaVersion;

    /*
     * Java container
     */
    @JsonProperty(value = "properties.javaContainer")
    private String javaContainer;

    /*
     * Java container version
     */
    @JsonProperty(value = "properties.javaContainerVersion")
    private String javaContainerVersion;

    /*
     * App Command Line to launch
     */
    @JsonProperty(value = "properties.appCommandLine")
    private String appCommandLine;

    /*
     * Managed pipeline mode
     */
    @JsonProperty(value = "properties.managedPipelineMode")
    private ManagedPipelineMode managedPipelineMode;

    /*
     * Virtual applications
     */
    @JsonProperty(value = "properties.virtualApplications")
    private List<VirtualApplication> virtualApplications;

    /*
     * Site load balancing
     */
    @JsonProperty(value = "properties.loadBalancing")
    private SiteLoadBalancing loadBalancing;

    /*
     * This is work around for polymorphic types
     */
    @JsonProperty(value = "properties.experiments")
    private Experiments experiments;

    /*
     * Site limits
     */
    @JsonProperty(value = "properties.limits")
    private SiteLimits limits;

    /*
     * Auto heal enabled
     */
    @JsonProperty(value = "properties.autoHealEnabled")
    private Boolean autoHealEnabled;

    /*
     * Auto heal rules
     */
    @JsonProperty(value = "properties.autoHealRules")
    private AutoHealRules autoHealRules;

    /*
     * Tracing options
     */
    @JsonProperty(value = "properties.tracingOptions")
    private String tracingOptions;

    /*
     * Vnet name
     */
    @JsonProperty(value = "properties.vnetName")
    private String vnetName;

    /*
     * Cross-Origin Resource Sharing (CORS) settings.
     */
    @JsonProperty(value = "properties.cors")
    private CorsSettings cors;

    /*
     * Information about the formal API definition for the web app.
     */
    @JsonProperty(value = "properties.apiDefinition")
    private ApiDefinitionInfo apiDefinition;

    /*
     * Auto swap slot name
     */
    @JsonProperty(value = "properties.autoSwapSlotName")
    private String autoSwapSlotName;

    /*
     * Local mysql enabled
     */
    @JsonProperty(value = "properties.localMySqlEnabled")
    private Boolean localMySqlEnabled;

    /*
     * Ip Security restrictions
     */
    @JsonProperty(value = "properties.ipSecurityRestrictions")
    private List<IpSecurityRestriction> ipSecurityRestrictions;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the numberOfWorkers property: Number of workers.
     *
     * @return the numberOfWorkers value.
     */
    public Integer numberOfWorkers() {
        return this.numberOfWorkers;
    }

    /**
     * Set the numberOfWorkers property: Number of workers.
     *
     * @param numberOfWorkers the numberOfWorkers value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withNumberOfWorkers(Integer numberOfWorkers) {
        this.numberOfWorkers = numberOfWorkers;
        return this;
    }

    /**
     * Get the defaultDocuments property: Default documents.
     *
     * @return the defaultDocuments value.
     */
    public List<String> defaultDocuments() {
        return this.defaultDocuments;
    }

    /**
     * Set the defaultDocuments property: Default documents.
     *
     * @param defaultDocuments the defaultDocuments value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withDefaultDocuments(List<String> defaultDocuments) {
        this.defaultDocuments = defaultDocuments;
        return this;
    }

    /**
     * Get the netFrameworkVersion property: Net Framework Version.
     *
     * @return the netFrameworkVersion value.
     */
    public String netFrameworkVersion() {
        return this.netFrameworkVersion;
    }

    /**
     * Set the netFrameworkVersion property: Net Framework Version.
     *
     * @param netFrameworkVersion the netFrameworkVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withNetFrameworkVersion(String netFrameworkVersion) {
        this.netFrameworkVersion = netFrameworkVersion;
        return this;
    }

    /**
     * Get the phpVersion property: Version of PHP.
     *
     * @return the phpVersion value.
     */
    public String phpVersion() {
        return this.phpVersion;
    }

    /**
     * Set the phpVersion property: Version of PHP.
     *
     * @param phpVersion the phpVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withPhpVersion(String phpVersion) {
        this.phpVersion = phpVersion;
        return this;
    }

    /**
     * Get the pythonVersion property: Version of Python.
     *
     * @return the pythonVersion value.
     */
    public String pythonVersion() {
        return this.pythonVersion;
    }

    /**
     * Set the pythonVersion property: Version of Python.
     *
     * @param pythonVersion the pythonVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withPythonVersion(String pythonVersion) {
        this.pythonVersion = pythonVersion;
        return this;
    }

    /**
     * Get the nodeVersion property: Version of Node.
     *
     * @return the nodeVersion value.
     */
    public String nodeVersion() {
        return this.nodeVersion;
    }

    /**
     * Set the nodeVersion property: Version of Node.
     *
     * @param nodeVersion the nodeVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withNodeVersion(String nodeVersion) {
        this.nodeVersion = nodeVersion;
        return this;
    }

    /**
     * Get the requestTracingEnabled property: Enable request tracing.
     *
     * @return the requestTracingEnabled value.
     */
    public Boolean requestTracingEnabled() {
        return this.requestTracingEnabled;
    }

    /**
     * Set the requestTracingEnabled property: Enable request tracing.
     *
     * @param requestTracingEnabled the requestTracingEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withRequestTracingEnabled(Boolean requestTracingEnabled) {
        this.requestTracingEnabled = requestTracingEnabled;
        return this;
    }

    /**
     * Get the requestTracingExpirationTime property: Request tracing expiration time.
     *
     * @return the requestTracingExpirationTime value.
     */
    public OffsetDateTime requestTracingExpirationTime() {
        return this.requestTracingExpirationTime;
    }

    /**
     * Set the requestTracingExpirationTime property: Request tracing expiration time.
     *
     * @param requestTracingExpirationTime the requestTracingExpirationTime value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withRequestTracingExpirationTime(OffsetDateTime requestTracingExpirationTime) {
        this.requestTracingExpirationTime = requestTracingExpirationTime;
        return this;
    }

    /**
     * Get the remoteDebuggingEnabled property: Remote Debugging Enabled.
     *
     * @return the remoteDebuggingEnabled value.
     */
    public Boolean remoteDebuggingEnabled() {
        return this.remoteDebuggingEnabled;
    }

    /**
     * Set the remoteDebuggingEnabled property: Remote Debugging Enabled.
     *
     * @param remoteDebuggingEnabled the remoteDebuggingEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withRemoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        return this;
    }

    /**
     * Get the remoteDebuggingVersion property: Remote Debugging Version.
     *
     * @return the remoteDebuggingVersion value.
     */
    public String remoteDebuggingVersion() {
        return this.remoteDebuggingVersion;
    }

    /**
     * Set the remoteDebuggingVersion property: Remote Debugging Version.
     *
     * @param remoteDebuggingVersion the remoteDebuggingVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withRemoteDebuggingVersion(String remoteDebuggingVersion) {
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        return this;
    }

    /**
     * Get the httpLoggingEnabled property: HTTP logging Enabled.
     *
     * @return the httpLoggingEnabled value.
     */
    public Boolean httpLoggingEnabled() {
        return this.httpLoggingEnabled;
    }

    /**
     * Set the httpLoggingEnabled property: HTTP logging Enabled.
     *
     * @param httpLoggingEnabled the httpLoggingEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withHttpLoggingEnabled(Boolean httpLoggingEnabled) {
        this.httpLoggingEnabled = httpLoggingEnabled;
        return this;
    }

    /**
     * Get the logsDirectorySizeLimit property: HTTP Logs Directory size limit.
     *
     * @return the logsDirectorySizeLimit value.
     */
    public Integer logsDirectorySizeLimit() {
        return this.logsDirectorySizeLimit;
    }

    /**
     * Set the logsDirectorySizeLimit property: HTTP Logs Directory size limit.
     *
     * @param logsDirectorySizeLimit the logsDirectorySizeLimit value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withLogsDirectorySizeLimit(Integer logsDirectorySizeLimit) {
        this.logsDirectorySizeLimit = logsDirectorySizeLimit;
        return this;
    }

    /**
     * Get the detailedErrorLoggingEnabled property: Detailed error logging enabled.
     *
     * @return the detailedErrorLoggingEnabled value.
     */
    public Boolean detailedErrorLoggingEnabled() {
        return this.detailedErrorLoggingEnabled;
    }

    /**
     * Set the detailedErrorLoggingEnabled property: Detailed error logging enabled.
     *
     * @param detailedErrorLoggingEnabled the detailedErrorLoggingEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withDetailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        return this;
    }

    /**
     * Get the publishingUsername property: Publishing user name.
     *
     * @return the publishingUsername value.
     */
    public String publishingUsername() {
        return this.publishingUsername;
    }

    /**
     * Set the publishingUsername property: Publishing user name.
     *
     * @param publishingUsername the publishingUsername value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withPublishingUsername(String publishingUsername) {
        this.publishingUsername = publishingUsername;
        return this;
    }

    /**
     * Get the publishingPassword property: Publishing password.
     *
     * @return the publishingPassword value.
     */
    public String publishingPassword() {
        return this.publishingPassword;
    }

    /**
     * Set the publishingPassword property: Publishing password.
     *
     * @param publishingPassword the publishingPassword value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withPublishingPassword(String publishingPassword) {
        this.publishingPassword = publishingPassword;
        return this;
    }

    /**
     * Get the appSettings property: Application Settings.
     *
     * @return the appSettings value.
     */
    public List<NameValuePair> appSettings() {
        return this.appSettings;
    }

    /**
     * Set the appSettings property: Application Settings.
     *
     * @param appSettings the appSettings value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAppSettings(List<NameValuePair> appSettings) {
        this.appSettings = appSettings;
        return this;
    }

    /**
     * Get the metadata property: Site Metadata.
     *
     * @return the metadata value.
     */
    public List<NameValuePair> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Site Metadata.
     *
     * @param metadata the metadata value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withMetadata(List<NameValuePair> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the connectionStrings property: Connection strings.
     *
     * @return the connectionStrings value.
     */
    public List<ConnStringInfo> connectionStrings() {
        return this.connectionStrings;
    }

    /**
     * Set the connectionStrings property: Connection strings.
     *
     * @param connectionStrings the connectionStrings value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withConnectionStrings(List<ConnStringInfo> connectionStrings) {
        this.connectionStrings = connectionStrings;
        return this;
    }

    /**
     * Get the handlerMappings property: Handler mappings.
     *
     * @return the handlerMappings value.
     */
    public List<HandlerMapping> handlerMappings() {
        return this.handlerMappings;
    }

    /**
     * Set the handlerMappings property: Handler mappings.
     *
     * @param handlerMappings the handlerMappings value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withHandlerMappings(List<HandlerMapping> handlerMappings) {
        this.handlerMappings = handlerMappings;
        return this;
    }

    /**
     * Get the documentRoot property: Document root.
     *
     * @return the documentRoot value.
     */
    public String documentRoot() {
        return this.documentRoot;
    }

    /**
     * Set the documentRoot property: Document root.
     *
     * @param documentRoot the documentRoot value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withDocumentRoot(String documentRoot) {
        this.documentRoot = documentRoot;
        return this;
    }

    /**
     * Get the scmType property: SCM type.
     *
     * @return the scmType value.
     */
    public String scmType() {
        return this.scmType;
    }

    /**
     * Set the scmType property: SCM type.
     *
     * @param scmType the scmType value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withScmType(String scmType) {
        this.scmType = scmType;
        return this;
    }

    /**
     * Get the use32BitWorkerProcess property: Use 32 bit worker process.
     *
     * @return the use32BitWorkerProcess value.
     */
    public Boolean use32BitWorkerProcess() {
        return this.use32BitWorkerProcess;
    }

    /**
     * Set the use32BitWorkerProcess property: Use 32 bit worker process.
     *
     * @param use32BitWorkerProcess the use32BitWorkerProcess value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withUse32BitWorkerProcess(Boolean use32BitWorkerProcess) {
        this.use32BitWorkerProcess = use32BitWorkerProcess;
        return this;
    }

    /**
     * Get the webSocketsEnabled property: Web socket enabled.
     *
     * @return the webSocketsEnabled value.
     */
    public Boolean webSocketsEnabled() {
        return this.webSocketsEnabled;
    }

    /**
     * Set the webSocketsEnabled property: Web socket enabled.
     *
     * @param webSocketsEnabled the webSocketsEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withWebSocketsEnabled(Boolean webSocketsEnabled) {
        this.webSocketsEnabled = webSocketsEnabled;
        return this;
    }

    /**
     * Get the alwaysOn property: Always On.
     *
     * @return the alwaysOn value.
     */
    public Boolean alwaysOn() {
        return this.alwaysOn;
    }

    /**
     * Set the alwaysOn property: Always On.
     *
     * @param alwaysOn the alwaysOn value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAlwaysOn(Boolean alwaysOn) {
        this.alwaysOn = alwaysOn;
        return this;
    }

    /**
     * Get the javaVersion property: Java version.
     *
     * @return the javaVersion value.
     */
    public String javaVersion() {
        return this.javaVersion;
    }

    /**
     * Set the javaVersion property: Java version.
     *
     * @param javaVersion the javaVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withJavaVersion(String javaVersion) {
        this.javaVersion = javaVersion;
        return this;
    }

    /**
     * Get the javaContainer property: Java container.
     *
     * @return the javaContainer value.
     */
    public String javaContainer() {
        return this.javaContainer;
    }

    /**
     * Set the javaContainer property: Java container.
     *
     * @param javaContainer the javaContainer value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withJavaContainer(String javaContainer) {
        this.javaContainer = javaContainer;
        return this;
    }

    /**
     * Get the javaContainerVersion property: Java container version.
     *
     * @return the javaContainerVersion value.
     */
    public String javaContainerVersion() {
        return this.javaContainerVersion;
    }

    /**
     * Set the javaContainerVersion property: Java container version.
     *
     * @param javaContainerVersion the javaContainerVersion value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withJavaContainerVersion(String javaContainerVersion) {
        this.javaContainerVersion = javaContainerVersion;
        return this;
    }

    /**
     * Get the appCommandLine property: App Command Line to launch.
     *
     * @return the appCommandLine value.
     */
    public String appCommandLine() {
        return this.appCommandLine;
    }

    /**
     * Set the appCommandLine property: App Command Line to launch.
     *
     * @param appCommandLine the appCommandLine value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAppCommandLine(String appCommandLine) {
        this.appCommandLine = appCommandLine;
        return this;
    }

    /**
     * Get the managedPipelineMode property: Managed pipeline mode.
     *
     * @return the managedPipelineMode value.
     */
    public ManagedPipelineMode managedPipelineMode() {
        return this.managedPipelineMode;
    }

    /**
     * Set the managedPipelineMode property: Managed pipeline mode.
     *
     * @param managedPipelineMode the managedPipelineMode value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withManagedPipelineMode(ManagedPipelineMode managedPipelineMode) {
        this.managedPipelineMode = managedPipelineMode;
        return this;
    }

    /**
     * Get the virtualApplications property: Virtual applications.
     *
     * @return the virtualApplications value.
     */
    public List<VirtualApplication> virtualApplications() {
        return this.virtualApplications;
    }

    /**
     * Set the virtualApplications property: Virtual applications.
     *
     * @param virtualApplications the virtualApplications value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withVirtualApplications(List<VirtualApplication> virtualApplications) {
        this.virtualApplications = virtualApplications;
        return this;
    }

    /**
     * Get the loadBalancing property: Site load balancing.
     *
     * @return the loadBalancing value.
     */
    public SiteLoadBalancing loadBalancing() {
        return this.loadBalancing;
    }

    /**
     * Set the loadBalancing property: Site load balancing.
     *
     * @param loadBalancing the loadBalancing value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withLoadBalancing(SiteLoadBalancing loadBalancing) {
        this.loadBalancing = loadBalancing;
        return this;
    }

    /**
     * Get the experiments property: This is work around for polymorphic types.
     *
     * @return the experiments value.
     */
    public Experiments experiments() {
        return this.experiments;
    }

    /**
     * Set the experiments property: This is work around for polymorphic types.
     *
     * @param experiments the experiments value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withExperiments(Experiments experiments) {
        this.experiments = experiments;
        return this;
    }

    /**
     * Get the limits property: Site limits.
     *
     * @return the limits value.
     */
    public SiteLimits limits() {
        return this.limits;
    }

    /**
     * Set the limits property: Site limits.
     *
     * @param limits the limits value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withLimits(SiteLimits limits) {
        this.limits = limits;
        return this;
    }

    /**
     * Get the autoHealEnabled property: Auto heal enabled.
     *
     * @return the autoHealEnabled value.
     */
    public Boolean autoHealEnabled() {
        return this.autoHealEnabled;
    }

    /**
     * Set the autoHealEnabled property: Auto heal enabled.
     *
     * @param autoHealEnabled the autoHealEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAutoHealEnabled(Boolean autoHealEnabled) {
        this.autoHealEnabled = autoHealEnabled;
        return this;
    }

    /**
     * Get the autoHealRules property: Auto heal rules.
     *
     * @return the autoHealRules value.
     */
    public AutoHealRules autoHealRules() {
        return this.autoHealRules;
    }

    /**
     * Set the autoHealRules property: Auto heal rules.
     *
     * @param autoHealRules the autoHealRules value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAutoHealRules(AutoHealRules autoHealRules) {
        this.autoHealRules = autoHealRules;
        return this;
    }

    /**
     * Get the tracingOptions property: Tracing options.
     *
     * @return the tracingOptions value.
     */
    public String tracingOptions() {
        return this.tracingOptions;
    }

    /**
     * Set the tracingOptions property: Tracing options.
     *
     * @param tracingOptions the tracingOptions value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withTracingOptions(String tracingOptions) {
        this.tracingOptions = tracingOptions;
        return this;
    }

    /**
     * Get the vnetName property: Vnet name.
     *
     * @return the vnetName value.
     */
    public String vnetName() {
        return this.vnetName;
    }

    /**
     * Set the vnetName property: Vnet name.
     *
     * @param vnetName the vnetName value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withVnetName(String vnetName) {
        this.vnetName = vnetName;
        return this;
    }

    /**
     * Get the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @return the cors value.
     */
    public CorsSettings cors() {
        return this.cors;
    }

    /**
     * Set the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @param cors the cors value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withCors(CorsSettings cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get the apiDefinition property: Information about the formal API definition for the web app.
     *
     * @return the apiDefinition value.
     */
    public ApiDefinitionInfo apiDefinition() {
        return this.apiDefinition;
    }

    /**
     * Set the apiDefinition property: Information about the formal API definition for the web app.
     *
     * @param apiDefinition the apiDefinition value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withApiDefinition(ApiDefinitionInfo apiDefinition) {
        this.apiDefinition = apiDefinition;
        return this;
    }

    /**
     * Get the autoSwapSlotName property: Auto swap slot name.
     *
     * @return the autoSwapSlotName value.
     */
    public String autoSwapSlotName() {
        return this.autoSwapSlotName;
    }

    /**
     * Set the autoSwapSlotName property: Auto swap slot name.
     *
     * @param autoSwapSlotName the autoSwapSlotName value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withAutoSwapSlotName(String autoSwapSlotName) {
        this.autoSwapSlotName = autoSwapSlotName;
        return this;
    }

    /**
     * Get the localMySqlEnabled property: Local mysql enabled.
     *
     * @return the localMySqlEnabled value.
     */
    public Boolean localMySqlEnabled() {
        return this.localMySqlEnabled;
    }

    /**
     * Set the localMySqlEnabled property: Local mysql enabled.
     *
     * @param localMySqlEnabled the localMySqlEnabled value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withLocalMySqlEnabled(Boolean localMySqlEnabled) {
        this.localMySqlEnabled = localMySqlEnabled;
        return this;
    }

    /**
     * Get the ipSecurityRestrictions property: Ip Security restrictions.
     *
     * @return the ipSecurityRestrictions value.
     */
    public List<IpSecurityRestriction> ipSecurityRestrictions() {
        return this.ipSecurityRestrictions;
    }

    /**
     * Set the ipSecurityRestrictions property: Ip Security restrictions.
     *
     * @param ipSecurityRestrictions the ipSecurityRestrictions value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withIpSecurityRestrictions(List<IpSecurityRestriction> ipSecurityRestrictions) {
        this.ipSecurityRestrictions = ipSecurityRestrictions;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the SiteConfigInner object itself.
     */
    public SiteConfigInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SiteConfigInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SiteConfigInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appSettings() != null) {
            appSettings().forEach(e -> e.validate());
        }
        if (metadata() != null) {
            metadata().forEach(e -> e.validate());
        }
        if (connectionStrings() != null) {
            connectionStrings().forEach(e -> e.validate());
        }
        if (handlerMappings() != null) {
            handlerMappings().forEach(e -> e.validate());
        }
        if (virtualApplications() != null) {
            virtualApplications().forEach(e -> e.validate());
        }
        if (experiments() != null) {
            experiments().validate();
        }
        if (limits() != null) {
            limits().validate();
        }
        if (autoHealRules() != null) {
            autoHealRules().validate();
        }
        if (cors() != null) {
            cors().validate();
        }
        if (apiDefinition() != null) {
            apiDefinition().validate();
        }
        if (ipSecurityRestrictions() != null) {
            ipSecurityRestrictions().forEach(e -> e.validate());
        }
    }
}
