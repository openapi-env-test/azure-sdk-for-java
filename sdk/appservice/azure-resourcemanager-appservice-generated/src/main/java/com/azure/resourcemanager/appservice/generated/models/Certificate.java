// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Certificate. */
public interface Certificate {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the friendlyName property: Friendly name of the certificate.
     *
     * @return the friendlyName value.
     */
    String friendlyName();

    /**
     * Gets the subjectName property: Subject name of the certificate.
     *
     * @return the subjectName value.
     */
    String subjectName();

    /**
     * Gets the hostNames property: Host names the certificate applies to.
     *
     * @return the hostNames value.
     */
    List<String> hostNames();

    /**
     * Gets the pfxBlob property: Pfx blob.
     *
     * @return the pfxBlob value.
     */
    String pfxBlob();

    /**
     * Gets the siteName property: App name.
     *
     * @return the siteName value.
     */
    String siteName();

    /**
     * Gets the selfLink property: Self link.
     *
     * @return the selfLink value.
     */
    String selfLink();

    /**
     * Gets the issuer property: Certificate issuer.
     *
     * @return the issuer value.
     */
    String issuer();

    /**
     * Gets the issueDate property: Certificate issue Date.
     *
     * @return the issueDate value.
     */
    OffsetDateTime issueDate();

    /**
     * Gets the expirationDate property: Certificate expiration date.
     *
     * @return the expirationDate value.
     */
    OffsetDateTime expirationDate();

    /**
     * Gets the password property: Certificate password.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the thumbprint property: Certificate thumbprint.
     *
     * @return the thumbprint value.
     */
    String thumbprint();

    /**
     * Gets the valid property: Is the certificate valid?.
     *
     * @return the valid value.
     */
    Boolean valid();

    /**
     * Gets the cerBlob property: Raw bytes of .cer file.
     *
     * @return the cerBlob value.
     */
    String cerBlob();

    /**
     * Gets the publicKeyHash property: Public key hash.
     *
     * @return the publicKeyHash value.
     */
    String publicKeyHash();

    /**
     * Gets the hostingEnvironmentProfile property: Specification for the hosting environment (App Service Environment)
     * to use for the certificate.
     *
     * @return the hostingEnvironmentProfile value.
     */
    HostingEnvironmentProfile hostingEnvironmentProfile();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.CertificateInner object.
     *
     * @return the inner object.
     */
    CertificateInner innerModel();

    /** The entirety of the Certificate definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The Certificate definition stages. */
    interface DefinitionStages {
        /** The first stage of the Certificate definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Certificate definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the Certificate definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the Certificate definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithFriendlyName,
                DefinitionStages.WithSubjectName,
                DefinitionStages.WithHostNames,
                DefinitionStages.WithPfxBlob,
                DefinitionStages.WithSiteName,
                DefinitionStages.WithSelfLink,
                DefinitionStages.WithIssuer,
                DefinitionStages.WithIssueDate,
                DefinitionStages.WithExpirationDate,
                DefinitionStages.WithPassword,
                DefinitionStages.WithThumbprint,
                DefinitionStages.WithValid,
                DefinitionStages.WithCerBlob,
                DefinitionStages.WithPublicKeyHash,
                DefinitionStages.WithHostingEnvironmentProfile,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Certificate create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Certificate create(Context context);
        }
        /** The stage of the Certificate definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Certificate definition allowing to specify friendlyName. */
        interface WithFriendlyName {
            /**
             * Specifies the friendlyName property: Friendly name of the certificate.
             *
             * @param friendlyName Friendly name of the certificate.
             * @return the next definition stage.
             */
            WithCreate withFriendlyName(String friendlyName);
        }
        /** The stage of the Certificate definition allowing to specify subjectName. */
        interface WithSubjectName {
            /**
             * Specifies the subjectName property: Subject name of the certificate.
             *
             * @param subjectName Subject name of the certificate.
             * @return the next definition stage.
             */
            WithCreate withSubjectName(String subjectName);
        }
        /** The stage of the Certificate definition allowing to specify hostNames. */
        interface WithHostNames {
            /**
             * Specifies the hostNames property: Host names the certificate applies to.
             *
             * @param hostNames Host names the certificate applies to.
             * @return the next definition stage.
             */
            WithCreate withHostNames(List<String> hostNames);
        }
        /** The stage of the Certificate definition allowing to specify pfxBlob. */
        interface WithPfxBlob {
            /**
             * Specifies the pfxBlob property: Pfx blob.
             *
             * @param pfxBlob Pfx blob.
             * @return the next definition stage.
             */
            WithCreate withPfxBlob(String pfxBlob);
        }
        /** The stage of the Certificate definition allowing to specify siteName. */
        interface WithSiteName {
            /**
             * Specifies the siteName property: App name.
             *
             * @param siteName App name.
             * @return the next definition stage.
             */
            WithCreate withSiteName(String siteName);
        }
        /** The stage of the Certificate definition allowing to specify selfLink. */
        interface WithSelfLink {
            /**
             * Specifies the selfLink property: Self link.
             *
             * @param selfLink Self link.
             * @return the next definition stage.
             */
            WithCreate withSelfLink(String selfLink);
        }
        /** The stage of the Certificate definition allowing to specify issuer. */
        interface WithIssuer {
            /**
             * Specifies the issuer property: Certificate issuer.
             *
             * @param issuer Certificate issuer.
             * @return the next definition stage.
             */
            WithCreate withIssuer(String issuer);
        }
        /** The stage of the Certificate definition allowing to specify issueDate. */
        interface WithIssueDate {
            /**
             * Specifies the issueDate property: Certificate issue Date.
             *
             * @param issueDate Certificate issue Date.
             * @return the next definition stage.
             */
            WithCreate withIssueDate(OffsetDateTime issueDate);
        }
        /** The stage of the Certificate definition allowing to specify expirationDate. */
        interface WithExpirationDate {
            /**
             * Specifies the expirationDate property: Certificate expiration date.
             *
             * @param expirationDate Certificate expiration date.
             * @return the next definition stage.
             */
            WithCreate withExpirationDate(OffsetDateTime expirationDate);
        }
        /** The stage of the Certificate definition allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Certificate password.
             *
             * @param password Certificate password.
             * @return the next definition stage.
             */
            WithCreate withPassword(String password);
        }
        /** The stage of the Certificate definition allowing to specify thumbprint. */
        interface WithThumbprint {
            /**
             * Specifies the thumbprint property: Certificate thumbprint.
             *
             * @param thumbprint Certificate thumbprint.
             * @return the next definition stage.
             */
            WithCreate withThumbprint(String thumbprint);
        }
        /** The stage of the Certificate definition allowing to specify valid. */
        interface WithValid {
            /**
             * Specifies the valid property: Is the certificate valid?.
             *
             * @param valid Is the certificate valid?.
             * @return the next definition stage.
             */
            WithCreate withValid(Boolean valid);
        }
        /** The stage of the Certificate definition allowing to specify cerBlob. */
        interface WithCerBlob {
            /**
             * Specifies the cerBlob property: Raw bytes of .cer file.
             *
             * @param cerBlob Raw bytes of .cer file.
             * @return the next definition stage.
             */
            WithCreate withCerBlob(String cerBlob);
        }
        /** The stage of the Certificate definition allowing to specify publicKeyHash. */
        interface WithPublicKeyHash {
            /**
             * Specifies the publicKeyHash property: Public key hash.
             *
             * @param publicKeyHash Public key hash.
             * @return the next definition stage.
             */
            WithCreate withPublicKeyHash(String publicKeyHash);
        }
        /** The stage of the Certificate definition allowing to specify hostingEnvironmentProfile. */
        interface WithHostingEnvironmentProfile {
            /**
             * Specifies the hostingEnvironmentProfile property: Specification for the hosting environment (App Service
             * Environment) to use for the certificate.
             *
             * @param hostingEnvironmentProfile Specification for the hosting environment (App Service Environment) to
             *     use for the certificate.
             * @return the next definition stage.
             */
            WithCreate withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile);
        }
        /** The stage of the Certificate definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the Certificate definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the Certificate definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
    }
    /**
     * Begins update for the Certificate resource.
     *
     * @return the stage of resource update.
     */
    Certificate.Update update();

    /** The template for Certificate update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithFriendlyName,
            UpdateStages.WithSubjectName,
            UpdateStages.WithHostNames,
            UpdateStages.WithPfxBlob,
            UpdateStages.WithSiteName,
            UpdateStages.WithSelfLink,
            UpdateStages.WithIssuer,
            UpdateStages.WithIssueDate,
            UpdateStages.WithExpirationDate,
            UpdateStages.WithPassword,
            UpdateStages.WithThumbprint,
            UpdateStages.WithValid,
            UpdateStages.WithCerBlob,
            UpdateStages.WithPublicKeyHash,
            UpdateStages.WithHostingEnvironmentProfile,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Certificate apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Certificate apply(Context context);
    }
    /** The Certificate update stages. */
    interface UpdateStages {
        /** The stage of the Certificate update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Certificate update allowing to specify friendlyName. */
        interface WithFriendlyName {
            /**
             * Specifies the friendlyName property: Friendly name of the certificate.
             *
             * @param friendlyName Friendly name of the certificate.
             * @return the next definition stage.
             */
            Update withFriendlyName(String friendlyName);
        }
        /** The stage of the Certificate update allowing to specify subjectName. */
        interface WithSubjectName {
            /**
             * Specifies the subjectName property: Subject name of the certificate.
             *
             * @param subjectName Subject name of the certificate.
             * @return the next definition stage.
             */
            Update withSubjectName(String subjectName);
        }
        /** The stage of the Certificate update allowing to specify hostNames. */
        interface WithHostNames {
            /**
             * Specifies the hostNames property: Host names the certificate applies to.
             *
             * @param hostNames Host names the certificate applies to.
             * @return the next definition stage.
             */
            Update withHostNames(List<String> hostNames);
        }
        /** The stage of the Certificate update allowing to specify pfxBlob. */
        interface WithPfxBlob {
            /**
             * Specifies the pfxBlob property: Pfx blob.
             *
             * @param pfxBlob Pfx blob.
             * @return the next definition stage.
             */
            Update withPfxBlob(String pfxBlob);
        }
        /** The stage of the Certificate update allowing to specify siteName. */
        interface WithSiteName {
            /**
             * Specifies the siteName property: App name.
             *
             * @param siteName App name.
             * @return the next definition stage.
             */
            Update withSiteName(String siteName);
        }
        /** The stage of the Certificate update allowing to specify selfLink. */
        interface WithSelfLink {
            /**
             * Specifies the selfLink property: Self link.
             *
             * @param selfLink Self link.
             * @return the next definition stage.
             */
            Update withSelfLink(String selfLink);
        }
        /** The stage of the Certificate update allowing to specify issuer. */
        interface WithIssuer {
            /**
             * Specifies the issuer property: Certificate issuer.
             *
             * @param issuer Certificate issuer.
             * @return the next definition stage.
             */
            Update withIssuer(String issuer);
        }
        /** The stage of the Certificate update allowing to specify issueDate. */
        interface WithIssueDate {
            /**
             * Specifies the issueDate property: Certificate issue Date.
             *
             * @param issueDate Certificate issue Date.
             * @return the next definition stage.
             */
            Update withIssueDate(OffsetDateTime issueDate);
        }
        /** The stage of the Certificate update allowing to specify expirationDate. */
        interface WithExpirationDate {
            /**
             * Specifies the expirationDate property: Certificate expiration date.
             *
             * @param expirationDate Certificate expiration date.
             * @return the next definition stage.
             */
            Update withExpirationDate(OffsetDateTime expirationDate);
        }
        /** The stage of the Certificate update allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Certificate password.
             *
             * @param password Certificate password.
             * @return the next definition stage.
             */
            Update withPassword(String password);
        }
        /** The stage of the Certificate update allowing to specify thumbprint. */
        interface WithThumbprint {
            /**
             * Specifies the thumbprint property: Certificate thumbprint.
             *
             * @param thumbprint Certificate thumbprint.
             * @return the next definition stage.
             */
            Update withThumbprint(String thumbprint);
        }
        /** The stage of the Certificate update allowing to specify valid. */
        interface WithValid {
            /**
             * Specifies the valid property: Is the certificate valid?.
             *
             * @param valid Is the certificate valid?.
             * @return the next definition stage.
             */
            Update withValid(Boolean valid);
        }
        /** The stage of the Certificate update allowing to specify cerBlob. */
        interface WithCerBlob {
            /**
             * Specifies the cerBlob property: Raw bytes of .cer file.
             *
             * @param cerBlob Raw bytes of .cer file.
             * @return the next definition stage.
             */
            Update withCerBlob(String cerBlob);
        }
        /** The stage of the Certificate update allowing to specify publicKeyHash. */
        interface WithPublicKeyHash {
            /**
             * Specifies the publicKeyHash property: Public key hash.
             *
             * @param publicKeyHash Public key hash.
             * @return the next definition stage.
             */
            Update withPublicKeyHash(String publicKeyHash);
        }
        /** The stage of the Certificate update allowing to specify hostingEnvironmentProfile. */
        interface WithHostingEnvironmentProfile {
            /**
             * Specifies the hostingEnvironmentProfile property: Specification for the hosting environment (App Service
             * Environment) to use for the certificate.
             *
             * @param hostingEnvironmentProfile Specification for the hosting environment (App Service Environment) to
             *     use for the certificate.
             * @return the next definition stage.
             */
            Update withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile);
        }
        /** The stage of the Certificate update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the Certificate update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the Certificate update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Certificate refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Certificate refresh(Context context);
}
