// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.CertificateDetails;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrderStatus;
import com.azure.resourcemanager.appservice.generated.models.CertificateProductType;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** Certificate purchase order. */
@JsonFlatten
@Fluent
public class CertificateOrderInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CertificateOrderInner.class);

    /*
     * State of the Key Vault secret
     */
    @JsonProperty(value = "properties.certificates")
    private Map<String, CertificateOrderCertificateInner> certificates;

    /*
     * Certificate distinguished name
     */
    @JsonProperty(value = "properties.distinguishedName")
    private String distinguishedName;

    /*
     * Domain Verification Token
     */
    @JsonProperty(value = "properties.domainVerificationToken")
    private String domainVerificationToken;

    /*
     * Duration in years (must be between 1 and 3)
     */
    @JsonProperty(value = "properties.validityInYears")
    private Integer validityInYears;

    /*
     * Certificate Key Size
     */
    @JsonProperty(value = "properties.keySize")
    private Integer keySize;

    /*
     * Certificate product type
     */
    @JsonProperty(value = "properties.productType")
    private CertificateProductType productType;

    /*
     * Auto renew
     */
    @JsonProperty(value = "properties.autoRenew")
    private Boolean autoRenew;

    /*
     * Status of certificate order
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningState provisioningState;

    /*
     * Current order status
     */
    @JsonProperty(value = "properties.status")
    private CertificateOrderStatus status;

    /*
     * Signed certificate
     */
    @JsonProperty(value = "properties.signedCertificate")
    private CertificateDetails signedCertificate;

    /*
     * Last CSR that was created for this order
     */
    @JsonProperty(value = "properties.csr")
    private String csr;

    /*
     * Intermediate certificate
     */
    @JsonProperty(value = "properties.intermediate")
    private CertificateDetails intermediate;

    /*
     * Root certificate
     */
    @JsonProperty(value = "properties.root")
    private CertificateDetails root;

    /*
     * Current serial number of the certificate
     */
    @JsonProperty(value = "properties.serialNumber")
    private String serialNumber;

    /*
     * Certificate last issuance time
     */
    @JsonProperty(value = "properties.lastCertificateIssuanceTime")
    private OffsetDateTime lastCertificateIssuanceTime;

    /*
     * Certificate expiration time
     */
    @JsonProperty(value = "properties.expirationTime")
    private OffsetDateTime expirationTime;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the certificates property: State of the Key Vault secret.
     *
     * @return the certificates value.
     */
    public Map<String, CertificateOrderCertificateInner> certificates() {
        return this.certificates;
    }

    /**
     * Set the certificates property: State of the Key Vault secret.
     *
     * @param certificates the certificates value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withCertificates(Map<String, CertificateOrderCertificateInner> certificates) {
        this.certificates = certificates;
        return this;
    }

    /**
     * Get the distinguishedName property: Certificate distinguished name.
     *
     * @return the distinguishedName value.
     */
    public String distinguishedName() {
        return this.distinguishedName;
    }

    /**
     * Set the distinguishedName property: Certificate distinguished name.
     *
     * @param distinguishedName the distinguishedName value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withDistinguishedName(String distinguishedName) {
        this.distinguishedName = distinguishedName;
        return this;
    }

    /**
     * Get the domainVerificationToken property: Domain Verification Token.
     *
     * @return the domainVerificationToken value.
     */
    public String domainVerificationToken() {
        return this.domainVerificationToken;
    }

    /**
     * Set the domainVerificationToken property: Domain Verification Token.
     *
     * @param domainVerificationToken the domainVerificationToken value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withDomainVerificationToken(String domainVerificationToken) {
        this.domainVerificationToken = domainVerificationToken;
        return this;
    }

    /**
     * Get the validityInYears property: Duration in years (must be between 1 and 3).
     *
     * @return the validityInYears value.
     */
    public Integer validityInYears() {
        return this.validityInYears;
    }

    /**
     * Set the validityInYears property: Duration in years (must be between 1 and 3).
     *
     * @param validityInYears the validityInYears value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withValidityInYears(Integer validityInYears) {
        this.validityInYears = validityInYears;
        return this;
    }

    /**
     * Get the keySize property: Certificate Key Size.
     *
     * @return the keySize value.
     */
    public Integer keySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: Certificate Key Size.
     *
     * @param keySize the keySize value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withKeySize(Integer keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the productType property: Certificate product type.
     *
     * @return the productType value.
     */
    public CertificateProductType productType() {
        return this.productType;
    }

    /**
     * Set the productType property: Certificate product type.
     *
     * @param productType the productType value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withProductType(CertificateProductType productType) {
        this.productType = productType;
        return this;
    }

    /**
     * Get the autoRenew property: Auto renew.
     *
     * @return the autoRenew value.
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }

    /**
     * Set the autoRenew property: Auto renew.
     *
     * @param autoRenew the autoRenew value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }

    /**
     * Get the provisioningState property: Status of certificate order.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Status of certificate order.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the status property: Current order status.
     *
     * @return the status value.
     */
    public CertificateOrderStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Current order status.
     *
     * @param status the status value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withStatus(CertificateOrderStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the signedCertificate property: Signed certificate.
     *
     * @return the signedCertificate value.
     */
    public CertificateDetails signedCertificate() {
        return this.signedCertificate;
    }

    /**
     * Set the signedCertificate property: Signed certificate.
     *
     * @param signedCertificate the signedCertificate value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withSignedCertificate(CertificateDetails signedCertificate) {
        this.signedCertificate = signedCertificate;
        return this;
    }

    /**
     * Get the csr property: Last CSR that was created for this order.
     *
     * @return the csr value.
     */
    public String csr() {
        return this.csr;
    }

    /**
     * Set the csr property: Last CSR that was created for this order.
     *
     * @param csr the csr value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withCsr(String csr) {
        this.csr = csr;
        return this;
    }

    /**
     * Get the intermediate property: Intermediate certificate.
     *
     * @return the intermediate value.
     */
    public CertificateDetails intermediate() {
        return this.intermediate;
    }

    /**
     * Set the intermediate property: Intermediate certificate.
     *
     * @param intermediate the intermediate value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withIntermediate(CertificateDetails intermediate) {
        this.intermediate = intermediate;
        return this;
    }

    /**
     * Get the root property: Root certificate.
     *
     * @return the root value.
     */
    public CertificateDetails root() {
        return this.root;
    }

    /**
     * Set the root property: Root certificate.
     *
     * @param root the root value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withRoot(CertificateDetails root) {
        this.root = root;
        return this;
    }

    /**
     * Get the serialNumber property: Current serial number of the certificate.
     *
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Current serial number of the certificate.
     *
     * @param serialNumber the serialNumber value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the lastCertificateIssuanceTime property: Certificate last issuance time.
     *
     * @return the lastCertificateIssuanceTime value.
     */
    public OffsetDateTime lastCertificateIssuanceTime() {
        return this.lastCertificateIssuanceTime;
    }

    /**
     * Set the lastCertificateIssuanceTime property: Certificate last issuance time.
     *
     * @param lastCertificateIssuanceTime the lastCertificateIssuanceTime value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withLastCertificateIssuanceTime(OffsetDateTime lastCertificateIssuanceTime) {
        this.lastCertificateIssuanceTime = lastCertificateIssuanceTime;
        return this;
    }

    /**
     * Get the expirationTime property: Certificate expiration time.
     *
     * @return the expirationTime value.
     */
    public OffsetDateTime expirationTime() {
        return this.expirationTime;
    }

    /**
     * Set the expirationTime property: Certificate expiration time.
     *
     * @param expirationTime the expirationTime value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the CertificateOrderInner object itself.
     */
    public CertificateOrderInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CertificateOrderInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CertificateOrderInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certificates() != null) {
            certificates()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (signedCertificate() != null) {
            signedCertificate().validate();
        }
        if (intermediate() != null) {
            intermediate().validate();
        }
        if (root() != null) {
            root().validate();
        }
    }
}
