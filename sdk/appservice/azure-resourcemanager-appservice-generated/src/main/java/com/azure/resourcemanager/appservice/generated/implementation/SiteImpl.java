// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.models.CloningInfo;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.HostnameSslState;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.SiteAvailabilityState;
import com.azure.resourcemanager.appservice.generated.models.SiteConfig;
import com.azure.resourcemanager.appservice.generated.models.UsageState;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class SiteImpl implements Site, Site.Definition, Site.Update {
    private SiteInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String namePropertiesName() {
        return this.innerModel().namePropertiesName();
    }

    public String state() {
        return this.innerModel().state();
    }

    public List<String> hostNames() {
        List<String> inner = this.innerModel().hostNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String repositorySiteName() {
        return this.innerModel().repositorySiteName();
    }

    public UsageState usageState() {
        return this.innerModel().usageState();
    }

    public Boolean enabled() {
        return this.innerModel().enabled();
    }

    public List<String> enabledHostNames() {
        List<String> inner = this.innerModel().enabledHostNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SiteAvailabilityState availabilityState() {
        return this.innerModel().availabilityState();
    }

    public List<HostnameSslState> hostnameSslStates() {
        List<HostnameSslState> inner = this.innerModel().hostnameSslStates();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String serverFarmId() {
        return this.innerModel().serverFarmId();
    }

    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerModel().lastModifiedTimeUtc();
    }

    public SiteConfig siteConfig() {
        SiteConfigInner inner = this.innerModel().siteConfig();
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public List<String> trafficManagerHostNames() {
        List<String> inner = this.innerModel().trafficManagerHostNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean premiumAppDeployed() {
        return this.innerModel().premiumAppDeployed();
    }

    public Boolean scmSiteAlsoStopped() {
        return this.innerModel().scmSiteAlsoStopped();
    }

    public String targetSwapSlot() {
        return this.innerModel().targetSwapSlot();
    }

    public HostingEnvironmentProfile hostingEnvironmentProfile() {
        return this.innerModel().hostingEnvironmentProfile();
    }

    public String microService() {
        return this.innerModel().microService();
    }

    public String gatewaySiteName() {
        return this.innerModel().gatewaySiteName();
    }

    public Boolean clientAffinityEnabled() {
        return this.innerModel().clientAffinityEnabled();
    }

    public Boolean clientCertEnabled() {
        return this.innerModel().clientCertEnabled();
    }

    public Boolean hostNamesDisabled() {
        return this.innerModel().hostNamesDisabled();
    }

    public String outboundIpAddresses() {
        return this.innerModel().outboundIpAddresses();
    }

    public Integer containerSize() {
        return this.innerModel().containerSize();
    }

    public Integer maxNumberOfWorkers() {
        return this.innerModel().maxNumberOfWorkers();
    }

    public CloningInfo cloningInfo() {
        return this.innerModel().cloningInfo();
    }

    public String resourceGroup() {
        return this.innerModel().resourceGroup();
    }

    public Boolean isDefaultContainer() {
        return this.innerModel().isDefaultContainer();
    }

    public String defaultHostname() {
        return this.innerModel().defaultHostname();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SiteInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private String createSkipDnsRegistration;

    private String createSkipCustomDomainVerification;

    private String createForceDnsRegistration;

    private String createTtlInSeconds;

    private String updateSkipDnsRegistration;

    private String updateSkipCustomDomainVerification;

    private String updateForceDnsRegistration;

    private String updateTtlInSeconds;

    public SiteImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Site create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSite(
                    resourceGroupName,
                    name,
                    this.innerModel(),
                    createSkipDnsRegistration,
                    createSkipCustomDomainVerification,
                    createForceDnsRegistration,
                    createTtlInSeconds,
                    Context.NONE);
        return this;
    }

    public Site create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSite(
                    resourceGroupName,
                    name,
                    this.innerModel(),
                    createSkipDnsRegistration,
                    createSkipCustomDomainVerification,
                    createForceDnsRegistration,
                    createTtlInSeconds,
                    context);
        return this;
    }

    SiteImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new SiteInner();
        this.serviceManager = serviceManager;
        this.name = name;
        this.createSkipDnsRegistration = null;
        this.createSkipCustomDomainVerification = null;
        this.createForceDnsRegistration = null;
        this.createTtlInSeconds = null;
    }

    public SiteImpl update() {
        this.updateSkipDnsRegistration = null;
        this.updateSkipCustomDomainVerification = null;
        this.updateForceDnsRegistration = null;
        this.updateTtlInSeconds = null;
        return this;
    }

    public Site apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSite(
                    resourceGroupName,
                    name,
                    this.innerModel(),
                    updateSkipDnsRegistration,
                    updateSkipCustomDomainVerification,
                    updateForceDnsRegistration,
                    updateTtlInSeconds,
                    Context.NONE);
        return this;
    }

    public Site apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSite(
                    resourceGroupName,
                    name,
                    this.innerModel(),
                    updateSkipDnsRegistration,
                    updateSkipCustomDomainVerification,
                    updateForceDnsRegistration,
                    updateTtlInSeconds,
                    context);
        return this;
    }

    SiteImpl(SiteInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "sites");
    }

    public Site refresh() {
        String localPropertiesToInclude = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .getByResourceGroupWithResponse(resourceGroupName, name, localPropertiesToInclude, Context.NONE)
                .getValue();
        return this;
    }

    public Site refresh(Context context) {
        String localPropertiesToInclude = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .getByResourceGroupWithResponse(resourceGroupName, name, localPropertiesToInclude, context)
                .getValue();
        return this;
    }

    public SiteImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SiteImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SiteImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public SiteImpl withNamePropertiesName(String namePropertiesName) {
        this.innerModel().withNamePropertiesName(namePropertiesName);
        return this;
    }

    public SiteImpl withEnabled(Boolean enabled) {
        this.innerModel().withEnabled(enabled);
        return this;
    }

    public SiteImpl withHostnameSslStates(List<HostnameSslState> hostnameSslStates) {
        this.innerModel().withHostnameSslStates(hostnameSslStates);
        return this;
    }

    public SiteImpl withServerFarmId(String serverFarmId) {
        this.innerModel().withServerFarmId(serverFarmId);
        return this;
    }

    public SiteImpl withSiteConfig(SiteConfigInner siteConfig) {
        this.innerModel().withSiteConfig(siteConfig);
        return this;
    }

    public SiteImpl withScmSiteAlsoStopped(Boolean scmSiteAlsoStopped) {
        this.innerModel().withScmSiteAlsoStopped(scmSiteAlsoStopped);
        return this;
    }

    public SiteImpl withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile) {
        this.innerModel().withHostingEnvironmentProfile(hostingEnvironmentProfile);
        return this;
    }

    public SiteImpl withMicroService(String microService) {
        this.innerModel().withMicroService(microService);
        return this;
    }

    public SiteImpl withGatewaySiteName(String gatewaySiteName) {
        this.innerModel().withGatewaySiteName(gatewaySiteName);
        return this;
    }

    public SiteImpl withClientAffinityEnabled(Boolean clientAffinityEnabled) {
        this.innerModel().withClientAffinityEnabled(clientAffinityEnabled);
        return this;
    }

    public SiteImpl withClientCertEnabled(Boolean clientCertEnabled) {
        this.innerModel().withClientCertEnabled(clientCertEnabled);
        return this;
    }

    public SiteImpl withHostNamesDisabled(Boolean hostNamesDisabled) {
        this.innerModel().withHostNamesDisabled(hostNamesDisabled);
        return this;
    }

    public SiteImpl withContainerSize(Integer containerSize) {
        this.innerModel().withContainerSize(containerSize);
        return this;
    }

    public SiteImpl withMaxNumberOfWorkers(Integer maxNumberOfWorkers) {
        this.innerModel().withMaxNumberOfWorkers(maxNumberOfWorkers);
        return this;
    }

    public SiteImpl withCloningInfo(CloningInfo cloningInfo) {
        this.innerModel().withCloningInfo(cloningInfo);
        return this;
    }

    public SiteImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public SiteImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public SiteImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }

    public SiteImpl withSkipDnsRegistration(String skipDnsRegistration) {
        if (isInCreateMode()) {
            this.createSkipDnsRegistration = skipDnsRegistration;
            return this;
        } else {
            this.updateSkipDnsRegistration = skipDnsRegistration;
            return this;
        }
    }

    public SiteImpl withSkipCustomDomainVerification(String skipCustomDomainVerification) {
        if (isInCreateMode()) {
            this.createSkipCustomDomainVerification = skipCustomDomainVerification;
            return this;
        } else {
            this.updateSkipCustomDomainVerification = skipCustomDomainVerification;
            return this;
        }
    }

    public SiteImpl withForceDnsRegistration(String forceDnsRegistration) {
        if (isInCreateMode()) {
            this.createForceDnsRegistration = forceDnsRegistration;
            return this;
        } else {
            this.updateForceDnsRegistration = forceDnsRegistration;
            return this;
        }
    }

    public SiteImpl withTtlInSeconds(String ttlInSeconds) {
        if (isInCreateMode()) {
            this.createTtlInSeconds = ttlInSeconds;
            return this;
        } else {
            this.updateTtlInSeconds = ttlInSeconds;
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
