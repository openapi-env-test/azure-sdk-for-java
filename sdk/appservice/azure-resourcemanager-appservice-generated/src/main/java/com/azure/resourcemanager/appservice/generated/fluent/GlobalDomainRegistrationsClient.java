// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainAvailablilityCheckResultInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainControlCenterSsoRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NameIdentifierInner;
import com.azure.resourcemanager.appservice.generated.models.DomainRecommendationSearchParameters;
import com.azure.resourcemanager.appservice.generated.models.DomainRegistrationInput;

/** An instance of this class provides access to all the operations defined in GlobalDomainRegistrationsClient. */
public interface GlobalDomainRegistrationsClient {
    /**
     * Lists all domains in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DomainInner> list();

    /**
     * Lists all domains in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DomainInner> list(Context context);

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return single sign on request information for domain management.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DomainControlCenterSsoRequestInner getDomainControlCenterSsoRequest();

    /**
     * Generates a single sign on request for domain management portal.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return single sign on request information for domain management.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DomainControlCenterSsoRequestInner> getDomainControlCenterSsoRequestWithResponse(Context context);

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object validateDomainPurchaseInformation(DomainRegistrationInput domainRegistrationInput);

    /**
     * Validates domain registration information.
     *
     * @param domainRegistrationInput Domain registration information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> validateDomainPurchaseInformationWithResponse(
        DomainRegistrationInput domainRegistrationInput, Context context);

    /**
     * Checks if a domain is available for registration.
     *
     * @param identifier Name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain availablility check result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DomainAvailablilityCheckResultInner checkDomainAvailability(NameIdentifierInner identifier);

    /**
     * Checks if a domain is available for registration.
     *
     * @param identifier Name of the domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain availablility check result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DomainAvailablilityCheckResultInner> checkDomainAvailabilityWithResponse(
        NameIdentifierInner identifier, Context context);

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain name identifiers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NameIdentifierInner> listDomainRecommendations(DomainRecommendationSearchParameters parameters);

    /**
     * Lists domain recommendations based on keywords.
     *
     * @param parameters Domain recommendation search parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain name identifiers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NameIdentifierInner> listDomainRecommendations(
        DomainRecommendationSearchParameters parameters, Context context);
}
