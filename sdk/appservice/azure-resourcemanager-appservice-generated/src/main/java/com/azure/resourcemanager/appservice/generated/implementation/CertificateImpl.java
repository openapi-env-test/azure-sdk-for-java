// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateInner;
import com.azure.resourcemanager.appservice.generated.models.Certificate;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CertificateImpl implements Certificate, Certificate.Definition, Certificate.Update {
    private CertificateInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String friendlyName() {
        return this.innerModel().friendlyName();
    }

    public String subjectName() {
        return this.innerModel().subjectName();
    }

    public List<String> hostNames() {
        List<String> inner = this.innerModel().hostNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String pfxBlob() {
        return this.innerModel().pfxBlob();
    }

    public String siteName() {
        return this.innerModel().siteName();
    }

    public String selfLink() {
        return this.innerModel().selfLink();
    }

    public String issuer() {
        return this.innerModel().issuer();
    }

    public OffsetDateTime issueDate() {
        return this.innerModel().issueDate();
    }

    public OffsetDateTime expirationDate() {
        return this.innerModel().expirationDate();
    }

    public String password() {
        return this.innerModel().password();
    }

    public String thumbprint() {
        return this.innerModel().thumbprint();
    }

    public Boolean valid() {
        return this.innerModel().valid();
    }

    public String cerBlob() {
        return this.innerModel().cerBlob();
    }

    public String publicKeyHash() {
        return this.innerModel().publicKeyHash();
    }

    public HostingEnvironmentProfile hostingEnvironmentProfile() {
        return this.innerModel().hostingEnvironmentProfile();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public CertificateInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    public CertificateImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Certificate create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdateCertificateWithResponse(resourceGroupName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Certificate create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdateCertificateWithResponse(resourceGroupName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    CertificateImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new CertificateInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public CertificateImpl update() {
        return this;
    }

    public Certificate apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .updateCertificateWithResponse(resourceGroupName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Certificate apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .updateCertificateWithResponse(resourceGroupName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    CertificateImpl(CertificateInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "certificates");
    }

    public Certificate refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public Certificate refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public CertificateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CertificateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CertificateImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public CertificateImpl withFriendlyName(String friendlyName) {
        this.innerModel().withFriendlyName(friendlyName);
        return this;
    }

    public CertificateImpl withSubjectName(String subjectName) {
        this.innerModel().withSubjectName(subjectName);
        return this;
    }

    public CertificateImpl withHostNames(List<String> hostNames) {
        this.innerModel().withHostNames(hostNames);
        return this;
    }

    public CertificateImpl withPfxBlob(String pfxBlob) {
        this.innerModel().withPfxBlob(pfxBlob);
        return this;
    }

    public CertificateImpl withSiteName(String siteName) {
        this.innerModel().withSiteName(siteName);
        return this;
    }

    public CertificateImpl withSelfLink(String selfLink) {
        this.innerModel().withSelfLink(selfLink);
        return this;
    }

    public CertificateImpl withIssuer(String issuer) {
        this.innerModel().withIssuer(issuer);
        return this;
    }

    public CertificateImpl withIssueDate(OffsetDateTime issueDate) {
        this.innerModel().withIssueDate(issueDate);
        return this;
    }

    public CertificateImpl withExpirationDate(OffsetDateTime expirationDate) {
        this.innerModel().withExpirationDate(expirationDate);
        return this;
    }

    public CertificateImpl withPassword(String password) {
        this.innerModel().withPassword(password);
        return this;
    }

    public CertificateImpl withThumbprint(String thumbprint) {
        this.innerModel().withThumbprint(thumbprint);
        return this;
    }

    public CertificateImpl withValid(Boolean valid) {
        this.innerModel().withValid(valid);
        return this;
    }

    public CertificateImpl withCerBlob(String cerBlob) {
        this.innerModel().withCerBlob(cerBlob);
        return this;
    }

    public CertificateImpl withPublicKeyHash(String publicKeyHash) {
        this.innerModel().withPublicKeyHash(publicKeyHash);
        return this;
    }

    public CertificateImpl withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile) {
        this.innerModel().withHostingEnvironmentProfile(hostingEnvironmentProfile);
        return this;
    }

    public CertificateImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public CertificateImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public CertificateImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }
}
