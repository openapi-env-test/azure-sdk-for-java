// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ExpandedParentApiEntityInner;
import com.azure.resourcemanager.appservice.generated.models.Connection;
import com.azure.resourcemanager.appservice.generated.models.ConnectionStatus;
import com.azure.resourcemanager.appservice.generated.models.ExpandedParentApiEntity;
import com.azure.resourcemanager.appservice.generated.models.ParameterCustomLoginSettingValues;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ConnectionImpl implements Connection, Connection.Definition, Connection.Update {
    private ConnectionInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String namePropertiesName() {
        return this.innerModel().namePropertiesName();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public List<ConnectionStatus> statuses() {
        List<ConnectionStatus> inner = this.innerModel().statuses();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, ParameterCustomLoginSettingValues> customParameterValues() {
        Map<String, ParameterCustomLoginSettingValues> inner = this.innerModel().customParameterValues();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String tenantId() {
        return this.innerModel().tenantId();
    }

    public Map<String, Object> parameterValues() {
        Map<String, Object> inner = this.innerModel().parameterValues();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Map<String, Object> nonSecretParameterValues() {
        Map<String, Object> inner = this.innerModel().nonSecretParameterValues();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Object metadata() {
        return this.innerModel().metadata();
    }

    public OffsetDateTime firstExpirationTime() {
        return this.innerModel().firstExpirationTime();
    }

    public List<String> keywords() {
        List<String> inner = this.innerModel().keywords();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime createdTime() {
        return this.innerModel().createdTime();
    }

    public OffsetDateTime changedTime() {
        return this.innerModel().changedTime();
    }

    public ExpandedParentApiEntity api() {
        ExpandedParentApiEntityInner inner = this.innerModel().api();
        if (inner != null) {
            return new ExpandedParentApiEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ConnectionInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String connectionName;

    public ConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Connection create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .createOrUpdateWithResponse(resourceGroupName, connectionName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Connection create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .createOrUpdateWithResponse(resourceGroupName, connectionName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ConnectionImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new ConnectionInner();
        this.serviceManager = serviceManager;
        this.connectionName = name;
    }

    public ConnectionImpl update() {
        return this;
    }

    public Connection apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .createOrUpdateWithResponse(resourceGroupName, connectionName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Connection apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .createOrUpdateWithResponse(resourceGroupName, connectionName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ConnectionImpl(ConnectionInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.connectionName = Utils.getValueFromIdByName(innerObject.id(), "connections");
    }

    public Connection refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .getByResourceGroupWithResponse(resourceGroupName, connectionName, Context.NONE)
                .getValue();
        return this;
    }

    public Connection refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnections()
                .getByResourceGroupWithResponse(resourceGroupName, connectionName, context)
                .getValue();
        return this;
    }

    public ConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConnectionImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ConnectionImpl withNamePropertiesName(String namePropertiesName) {
        this.innerModel().withNamePropertiesName(namePropertiesName);
        return this;
    }

    public ConnectionImpl withDisplayName(String displayName) {
        this.innerModel().withDisplayName(displayName);
        return this;
    }

    public ConnectionImpl withStatuses(List<ConnectionStatus> statuses) {
        this.innerModel().withStatuses(statuses);
        return this;
    }

    public ConnectionImpl withCustomParameterValues(
        Map<String, ParameterCustomLoginSettingValues> customParameterValues) {
        this.innerModel().withCustomParameterValues(customParameterValues);
        return this;
    }

    public ConnectionImpl withTenantId(String tenantId) {
        this.innerModel().withTenantId(tenantId);
        return this;
    }

    public ConnectionImpl withParameterValues(Map<String, Object> parameterValues) {
        this.innerModel().withParameterValues(parameterValues);
        return this;
    }

    public ConnectionImpl withNonSecretParameterValues(Map<String, Object> nonSecretParameterValues) {
        this.innerModel().withNonSecretParameterValues(nonSecretParameterValues);
        return this;
    }

    public ConnectionImpl withMetadata(Object metadata) {
        this.innerModel().withMetadata(metadata);
        return this;
    }

    public ConnectionImpl withFirstExpirationTime(OffsetDateTime firstExpirationTime) {
        this.innerModel().withFirstExpirationTime(firstExpirationTime);
        return this;
    }

    public ConnectionImpl withKeywords(List<String> keywords) {
        this.innerModel().withKeywords(keywords);
        return this;
    }

    public ConnectionImpl withCreatedTime(OffsetDateTime createdTime) {
        this.innerModel().withCreatedTime(createdTime);
        return this;
    }

    public ConnectionImpl withChangedTime(OffsetDateTime changedTime) {
        this.innerModel().withChangedTime(changedTime);
        return this;
    }

    public ConnectionImpl withApi(ExpandedParentApiEntityInner api) {
        this.innerModel().withApi(api);
        return this;
    }

    public ConnectionImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ConnectionImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public ConnectionImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }
}
