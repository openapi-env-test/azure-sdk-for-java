// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** API definitions with backend urls. */
@JsonFlatten
@Fluent
public class BackendServiceDefinition extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BackendServiceDefinition.class);

    /*
     * Url from which the swagger payload will be fetched
     */
    @JsonProperty(value = "properties.serviceUrl")
    private String serviceUrl;

    /*
     * Service Urls per Hosting environment
     */
    @JsonProperty(value = "properties.hostingEnvironmentServiceUrls")
    private List<HostingEnvironmentServiceDescriptions> hostingEnvironmentServiceUrls;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the serviceUrl property: Url from which the swagger payload will be fetched.
     *
     * @return the serviceUrl value.
     */
    public String serviceUrl() {
        return this.serviceUrl;
    }

    /**
     * Set the serviceUrl property: Url from which the swagger payload will be fetched.
     *
     * @param serviceUrl the serviceUrl value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withServiceUrl(String serviceUrl) {
        this.serviceUrl = serviceUrl;
        return this;
    }

    /**
     * Get the hostingEnvironmentServiceUrls property: Service Urls per Hosting environment.
     *
     * @return the hostingEnvironmentServiceUrls value.
     */
    public List<HostingEnvironmentServiceDescriptions> hostingEnvironmentServiceUrls() {
        return this.hostingEnvironmentServiceUrls;
    }

    /**
     * Set the hostingEnvironmentServiceUrls property: Service Urls per Hosting environment.
     *
     * @param hostingEnvironmentServiceUrls the hostingEnvironmentServiceUrls value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withHostingEnvironmentServiceUrls(
        List<HostingEnvironmentServiceDescriptions> hostingEnvironmentServiceUrls) {
        this.hostingEnvironmentServiceUrls = hostingEnvironmentServiceUrls;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the BackendServiceDefinition object itself.
     */
    public BackendServiceDefinition withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BackendServiceDefinition withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BackendServiceDefinition withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostingEnvironmentServiceUrls() != null) {
            hostingEnvironmentServiceUrls().forEach(e -> e.validate());
        }
    }
}
