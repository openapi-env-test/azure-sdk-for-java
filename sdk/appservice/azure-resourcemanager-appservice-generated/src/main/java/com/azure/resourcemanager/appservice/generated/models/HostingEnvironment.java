// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of HostingEnvironment. */
public interface HostingEnvironment {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the namePropertiesName property: Name of the hostingEnvironment (App Service Environment).
     *
     * @return the namePropertiesName value.
     */
    String namePropertiesName();

    /**
     * Gets the locationPropertiesLocation property: Location of the hostingEnvironment (App Service Environment), e.g.
     * "West US".
     *
     * @return the locationPropertiesLocation value.
     */
    String locationPropertiesLocation();

    /**
     * Gets the provisioningState property: Provisioning state of the hostingEnvironment (App Service Environment).
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the status property: Current status of the hostingEnvironment (App Service Environment).
     *
     * @return the status value.
     */
    HostingEnvironmentStatus status();

    /**
     * Gets the vnetName property: Name of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @return the vnetName value.
     */
    String vnetName();

    /**
     * Gets the vnetResourceGroupName property: Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network.
     *
     * @return the vnetResourceGroupName value.
     */
    String vnetResourceGroupName();

    /**
     * Gets the vnetSubnetName property: Subnet of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @return the vnetSubnetName value.
     */
    String vnetSubnetName();

    /**
     * Gets the virtualNetwork property: Description of the hostingEnvironment's (App Service Environment) virtual
     * network.
     *
     * @return the virtualNetwork value.
     */
    VirtualNetworkProfile virtualNetwork();

    /**
     * Gets the internalLoadBalancingMode property: Specifies which endpoints to serve internally in the
     * hostingEnvironment's (App Service Environment) VNET.
     *
     * @return the internalLoadBalancingMode value.
     */
    InternalLoadBalancingMode internalLoadBalancingMode();

    /**
     * Gets the multiSize property: Front-end VM size, e.g. "Medium", "Large".
     *
     * @return the multiSize value.
     */
    String multiSize();

    /**
     * Gets the multiRoleCount property: Number of front-end instances.
     *
     * @return the multiRoleCount value.
     */
    Integer multiRoleCount();

    /**
     * Gets the workerPools property: Description of worker pools with worker size ids, VM sizes, and number of workers
     * in each pool.
     *
     * @return the workerPools value.
     */
    List<WorkerPool> workerPools();

    /**
     * Gets the ipsslAddressCount property: Number of IP SSL addresses reserved for this hostingEnvironment (App Service
     * Environment).
     *
     * @return the ipsslAddressCount value.
     */
    Integer ipsslAddressCount();

    /**
     * Gets the databaseEdition property: Edition of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard".
     *
     * @return the databaseEdition value.
     */
    String databaseEdition();

    /**
     * Gets the databaseServiceObjective property: Service objective of the metadata database for the hostingEnvironment
     * (App Service Environment) e.g. "S0".
     *
     * @return the databaseServiceObjective value.
     */
    String databaseServiceObjective();

    /**
     * Gets the upgradeDomains property: Number of upgrade domains of this hostingEnvironment (App Service Environment).
     *
     * @return the upgradeDomains value.
     */
    Integer upgradeDomains();

    /**
     * Gets the subscriptionId property: Subscription of the hostingEnvironment (App Service Environment).
     *
     * @return the subscriptionId value.
     */
    String subscriptionId();

    /**
     * Gets the dnsSuffix property: DNS suffix of the hostingEnvironment (App Service Environment).
     *
     * @return the dnsSuffix value.
     */
    String dnsSuffix();

    /**
     * Gets the lastAction property: Last deployment action on this hostingEnvironment (App Service Environment).
     *
     * @return the lastAction value.
     */
    String lastAction();

    /**
     * Gets the lastActionResult property: Result of the last deployment action on this hostingEnvironment (App Service
     * Environment).
     *
     * @return the lastActionResult value.
     */
    String lastActionResult();

    /**
     * Gets the allowedMultiSizes property: List of comma separated strings describing which VM sizes are allowed for
     * front-ends.
     *
     * @return the allowedMultiSizes value.
     */
    String allowedMultiSizes();

    /**
     * Gets the allowedWorkerSizes property: List of comma separated strings describing which VM sizes are allowed for
     * workers.
     *
     * @return the allowedWorkerSizes value.
     */
    String allowedWorkerSizes();

    /**
     * Gets the maximumNumberOfMachines property: Maximum number of VMs in this hostingEnvironment (App Service
     * Environment).
     *
     * @return the maximumNumberOfMachines value.
     */
    Integer maximumNumberOfMachines();

    /**
     * Gets the vipMappings property: Description of IP SSL mapping for this hostingEnvironment (App Service
     * Environment).
     *
     * @return the vipMappings value.
     */
    List<VirtualIpMapping> vipMappings();

    /**
     * Gets the environmentCapacities property: Current total, used, and available worker capacities.
     *
     * @return the environmentCapacities value.
     */
    List<StampCapacity> environmentCapacities();

    /**
     * Gets the networkAccessControlList property: Access control list for controlling traffic to the hostingEnvironment
     * (App Service Environment).
     *
     * @return the networkAccessControlList value.
     */
    List<NetworkAccessControlEntry> networkAccessControlList();

    /**
     * Gets the environmentIsHealthy property: True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy.
     *
     * @return the environmentIsHealthy value.
     */
    Boolean environmentIsHealthy();

    /**
     * Gets the environmentStatus property: Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment).
     *
     * @return the environmentStatus value.
     */
    String environmentStatus();

    /**
     * Gets the resourceGroup property: Resource group of the hostingEnvironment (App Service Environment).
     *
     * @return the resourceGroup value.
     */
    String resourceGroup();

    /**
     * Gets the apiManagementAccountId property: Api Management Account associated with this Hosting Environment.
     *
     * @return the apiManagementAccountId value.
     */
    String apiManagementAccountId();

    /**
     * Gets the suspended property: True/false indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the
     * incoming traffic).
     *
     * @return the suspended value.
     */
    Boolean suspended();

    /**
     * Gets the clusterSettings property: Custom settings for changing the behavior of the hosting environment.
     *
     * @return the clusterSettings value.
     */
    List<NameValuePair> clusterSettings();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner object.
     *
     * @return the inner object.
     */
    HostingEnvironmentInner innerModel();

    /** The entirety of the HostingEnvironment definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroupStage,
            DefinitionStages.WithCreate {
    }
    /** The HostingEnvironment definition stages. */
    interface DefinitionStages {
        /** The first stage of the HostingEnvironment definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the HostingEnvironment definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroupStage withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroupStage withRegion(String location);
        }
        /** The stage of the HostingEnvironment definition allowing to specify parent resource. */
        interface WithResourceGroupStage {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the HostingEnvironment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithNamePropertiesName,
                DefinitionStages.WithLocationPropertiesLocation,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithStatus,
                DefinitionStages.WithVnetName,
                DefinitionStages.WithVnetResourceGroupName,
                DefinitionStages.WithVnetSubnetName,
                DefinitionStages.WithVirtualNetwork,
                DefinitionStages.WithInternalLoadBalancingMode,
                DefinitionStages.WithMultiSize,
                DefinitionStages.WithMultiRoleCount,
                DefinitionStages.WithWorkerPools,
                DefinitionStages.WithIpsslAddressCount,
                DefinitionStages.WithDatabaseEdition,
                DefinitionStages.WithDatabaseServiceObjective,
                DefinitionStages.WithUpgradeDomains,
                DefinitionStages.WithSubscriptionId,
                DefinitionStages.WithDnsSuffix,
                DefinitionStages.WithLastAction,
                DefinitionStages.WithLastActionResult,
                DefinitionStages.WithAllowedMultiSizes,
                DefinitionStages.WithAllowedWorkerSizes,
                DefinitionStages.WithMaximumNumberOfMachines,
                DefinitionStages.WithVipMappings,
                DefinitionStages.WithEnvironmentCapacities,
                DefinitionStages.WithNetworkAccessControlList,
                DefinitionStages.WithEnvironmentIsHealthy,
                DefinitionStages.WithEnvironmentStatus,
                DefinitionStages.WithResourceGroup,
                DefinitionStages.WithApiManagementAccountId,
                DefinitionStages.WithSuspended,
                DefinitionStages.WithClusterSettings,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            HostingEnvironment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            HostingEnvironment create(Context context);
        }
        /** The stage of the HostingEnvironment definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the HostingEnvironment definition allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: Name of the hostingEnvironment (App Service Environment).
             *
             * @param namePropertiesName Name of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the HostingEnvironment definition allowing to specify locationPropertiesLocation. */
        interface WithLocationPropertiesLocation {
            /**
             * Specifies the locationPropertiesLocation property: Location of the hostingEnvironment (App Service
             * Environment), e.g. "West US".
             *
             * @param locationPropertiesLocation Location of the hostingEnvironment (App Service Environment), e.g.
             *     "West US".
             * @return the next definition stage.
             */
            WithCreate withLocationPropertiesLocation(String locationPropertiesLocation);
        }
        /** The stage of the HostingEnvironment definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Provisioning state of the hostingEnvironment (App Service
             * Environment).
             *
             * @param provisioningState Provisioning state of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }
        /** The stage of the HostingEnvironment definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Current status of the hostingEnvironment (App Service Environment).
             *
             * @param status Current status of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withStatus(HostingEnvironmentStatus status);
        }
        /** The stage of the HostingEnvironment definition allowing to specify vnetName. */
        interface WithVnetName {
            /**
             * Specifies the vnetName property: Name of the hostingEnvironment's (App Service Environment) virtual
             * network.
             *
             * @param vnetName Name of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            WithCreate withVnetName(String vnetName);
        }
        /** The stage of the HostingEnvironment definition allowing to specify vnetResourceGroupName. */
        interface WithVnetResourceGroupName {
            /**
             * Specifies the vnetResourceGroupName property: Resource group of the hostingEnvironment's (App Service
             * Environment) virtual network.
             *
             * @param vnetResourceGroupName Resource group of the hostingEnvironment's (App Service Environment) virtual
             *     network.
             * @return the next definition stage.
             */
            WithCreate withVnetResourceGroupName(String vnetResourceGroupName);
        }
        /** The stage of the HostingEnvironment definition allowing to specify vnetSubnetName. */
        interface WithVnetSubnetName {
            /**
             * Specifies the vnetSubnetName property: Subnet of the hostingEnvironment's (App Service Environment)
             * virtual network.
             *
             * @param vnetSubnetName Subnet of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            WithCreate withVnetSubnetName(String vnetSubnetName);
        }
        /** The stage of the HostingEnvironment definition allowing to specify virtualNetwork. */
        interface WithVirtualNetwork {
            /**
             * Specifies the virtualNetwork property: Description of the hostingEnvironment's (App Service Environment)
             * virtual network.
             *
             * @param virtualNetwork Description of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            WithCreate withVirtualNetwork(VirtualNetworkProfile virtualNetwork);
        }
        /** The stage of the HostingEnvironment definition allowing to specify internalLoadBalancingMode. */
        interface WithInternalLoadBalancingMode {
            /**
             * Specifies the internalLoadBalancingMode property: Specifies which endpoints to serve internally in the
             * hostingEnvironment's (App Service Environment) VNET.
             *
             * @param internalLoadBalancingMode Specifies which endpoints to serve internally in the
             *     hostingEnvironment's (App Service Environment) VNET.
             * @return the next definition stage.
             */
            WithCreate withInternalLoadBalancingMode(InternalLoadBalancingMode internalLoadBalancingMode);
        }
        /** The stage of the HostingEnvironment definition allowing to specify multiSize. */
        interface WithMultiSize {
            /**
             * Specifies the multiSize property: Front-end VM size, e.g. "Medium", "Large".
             *
             * @param multiSize Front-end VM size, e.g. "Medium", "Large".
             * @return the next definition stage.
             */
            WithCreate withMultiSize(String multiSize);
        }
        /** The stage of the HostingEnvironment definition allowing to specify multiRoleCount. */
        interface WithMultiRoleCount {
            /**
             * Specifies the multiRoleCount property: Number of front-end instances.
             *
             * @param multiRoleCount Number of front-end instances.
             * @return the next definition stage.
             */
            WithCreate withMultiRoleCount(Integer multiRoleCount);
        }
        /** The stage of the HostingEnvironment definition allowing to specify workerPools. */
        interface WithWorkerPools {
            /**
             * Specifies the workerPools property: Description of worker pools with worker size ids, VM sizes, and
             * number of workers in each pool.
             *
             * @param workerPools Description of worker pools with worker size ids, VM sizes, and number of workers in
             *     each pool.
             * @return the next definition stage.
             */
            WithCreate withWorkerPools(List<WorkerPoolInner> workerPools);
        }
        /** The stage of the HostingEnvironment definition allowing to specify ipsslAddressCount. */
        interface WithIpsslAddressCount {
            /**
             * Specifies the ipsslAddressCount property: Number of IP SSL addresses reserved for this hostingEnvironment
             * (App Service Environment).
             *
             * @param ipsslAddressCount Number of IP SSL addresses reserved for this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            WithCreate withIpsslAddressCount(Integer ipsslAddressCount);
        }
        /** The stage of the HostingEnvironment definition allowing to specify databaseEdition. */
        interface WithDatabaseEdition {
            /**
             * Specifies the databaseEdition property: Edition of the metadata database for the hostingEnvironment (App
             * Service Environment) e.g. "Standard".
             *
             * @param databaseEdition Edition of the metadata database for the hostingEnvironment (App Service
             *     Environment) e.g. "Standard".
             * @return the next definition stage.
             */
            WithCreate withDatabaseEdition(String databaseEdition);
        }
        /** The stage of the HostingEnvironment definition allowing to specify databaseServiceObjective. */
        interface WithDatabaseServiceObjective {
            /**
             * Specifies the databaseServiceObjective property: Service objective of the metadata database for the
             * hostingEnvironment (App Service Environment) e.g. "S0".
             *
             * @param databaseServiceObjective Service objective of the metadata database for the hostingEnvironment
             *     (App Service Environment) e.g. "S0".
             * @return the next definition stage.
             */
            WithCreate withDatabaseServiceObjective(String databaseServiceObjective);
        }
        /** The stage of the HostingEnvironment definition allowing to specify upgradeDomains. */
        interface WithUpgradeDomains {
            /**
             * Specifies the upgradeDomains property: Number of upgrade domains of this hostingEnvironment (App Service
             * Environment).
             *
             * @param upgradeDomains Number of upgrade domains of this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withUpgradeDomains(Integer upgradeDomains);
        }
        /** The stage of the HostingEnvironment definition allowing to specify subscriptionId. */
        interface WithSubscriptionId {
            /**
             * Specifies the subscriptionId property: Subscription of the hostingEnvironment (App Service Environment).
             *
             * @param subscriptionId Subscription of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withSubscriptionId(String subscriptionId);
        }
        /** The stage of the HostingEnvironment definition allowing to specify dnsSuffix. */
        interface WithDnsSuffix {
            /**
             * Specifies the dnsSuffix property: DNS suffix of the hostingEnvironment (App Service Environment).
             *
             * @param dnsSuffix DNS suffix of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withDnsSuffix(String dnsSuffix);
        }
        /** The stage of the HostingEnvironment definition allowing to specify lastAction. */
        interface WithLastAction {
            /**
             * Specifies the lastAction property: Last deployment action on this hostingEnvironment (App Service
             * Environment).
             *
             * @param lastAction Last deployment action on this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withLastAction(String lastAction);
        }
        /** The stage of the HostingEnvironment definition allowing to specify lastActionResult. */
        interface WithLastActionResult {
            /**
             * Specifies the lastActionResult property: Result of the last deployment action on this hostingEnvironment
             * (App Service Environment).
             *
             * @param lastActionResult Result of the last deployment action on this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            WithCreate withLastActionResult(String lastActionResult);
        }
        /** The stage of the HostingEnvironment definition allowing to specify allowedMultiSizes. */
        interface WithAllowedMultiSizes {
            /**
             * Specifies the allowedMultiSizes property: List of comma separated strings describing which VM sizes are
             * allowed for front-ends.
             *
             * @param allowedMultiSizes List of comma separated strings describing which VM sizes are allowed for
             *     front-ends.
             * @return the next definition stage.
             */
            WithCreate withAllowedMultiSizes(String allowedMultiSizes);
        }
        /** The stage of the HostingEnvironment definition allowing to specify allowedWorkerSizes. */
        interface WithAllowedWorkerSizes {
            /**
             * Specifies the allowedWorkerSizes property: List of comma separated strings describing which VM sizes are
             * allowed for workers.
             *
             * @param allowedWorkerSizes List of comma separated strings describing which VM sizes are allowed for
             *     workers.
             * @return the next definition stage.
             */
            WithCreate withAllowedWorkerSizes(String allowedWorkerSizes);
        }
        /** The stage of the HostingEnvironment definition allowing to specify maximumNumberOfMachines. */
        interface WithMaximumNumberOfMachines {
            /**
             * Specifies the maximumNumberOfMachines property: Maximum number of VMs in this hostingEnvironment (App
             * Service Environment).
             *
             * @param maximumNumberOfMachines Maximum number of VMs in this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            WithCreate withMaximumNumberOfMachines(Integer maximumNumberOfMachines);
        }
        /** The stage of the HostingEnvironment definition allowing to specify vipMappings. */
        interface WithVipMappings {
            /**
             * Specifies the vipMappings property: Description of IP SSL mapping for this hostingEnvironment (App
             * Service Environment).
             *
             * @param vipMappings Description of IP SSL mapping for this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withVipMappings(List<VirtualIpMapping> vipMappings);
        }
        /** The stage of the HostingEnvironment definition allowing to specify environmentCapacities. */
        interface WithEnvironmentCapacities {
            /**
             * Specifies the environmentCapacities property: Current total, used, and available worker capacities.
             *
             * @param environmentCapacities Current total, used, and available worker capacities.
             * @return the next definition stage.
             */
            WithCreate withEnvironmentCapacities(List<StampCapacityInner> environmentCapacities);
        }
        /** The stage of the HostingEnvironment definition allowing to specify networkAccessControlList. */
        interface WithNetworkAccessControlList {
            /**
             * Specifies the networkAccessControlList property: Access control list for controlling traffic to the
             * hostingEnvironment (App Service Environment).
             *
             * @param networkAccessControlList Access control list for controlling traffic to the hostingEnvironment
             *     (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withNetworkAccessControlList(List<NetworkAccessControlEntry> networkAccessControlList);
        }
        /** The stage of the HostingEnvironment definition allowing to specify environmentIsHealthy. */
        interface WithEnvironmentIsHealthy {
            /**
             * Specifies the environmentIsHealthy property: True/false indicating whether the hostingEnvironment (App
             * Service Environment) is healthy.
             *
             * @param environmentIsHealthy True/false indicating whether the hostingEnvironment (App Service
             *     Environment) is healthy.
             * @return the next definition stage.
             */
            WithCreate withEnvironmentIsHealthy(Boolean environmentIsHealthy);
        }
        /** The stage of the HostingEnvironment definition allowing to specify environmentStatus. */
        interface WithEnvironmentStatus {
            /**
             * Specifies the environmentStatus property: Detailed message about with results of the last check of the
             * hostingEnvironment (App Service Environment).
             *
             * @param environmentStatus Detailed message about with results of the last check of the hostingEnvironment
             *     (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withEnvironmentStatus(String environmentStatus);
        }
        /** The stage of the HostingEnvironment definition allowing to specify resourceGroup. */
        interface WithResourceGroup {
            /**
             * Specifies the resourceGroup property: Resource group of the hostingEnvironment (App Service Environment).
             *
             * @param resourceGroup Resource group of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            WithCreate withResourceGroup(String resourceGroup);
        }
        /** The stage of the HostingEnvironment definition allowing to specify apiManagementAccountId. */
        interface WithApiManagementAccountId {
            /**
             * Specifies the apiManagementAccountId property: Api Management Account associated with this Hosting
             * Environment.
             *
             * @param apiManagementAccountId Api Management Account associated with this Hosting Environment.
             * @return the next definition stage.
             */
            WithCreate withApiManagementAccountId(String apiManagementAccountId);
        }
        /** The stage of the HostingEnvironment definition allowing to specify suspended. */
        interface WithSuspended {
            /**
             * Specifies the suspended property: True/false indicating whether the hostingEnvironment is suspended. The
             * environment can be suspended e.g. when the management endpoint is no longer available (most likely
             * because NSG blocked the incoming traffic).
             *
             * @param suspended True/false indicating whether the hostingEnvironment is suspended. The environment can
             *     be suspended e.g. when the management endpoint is no longer available (most likely because NSG
             *     blocked the incoming traffic).
             * @return the next definition stage.
             */
            WithCreate withSuspended(Boolean suspended);
        }
        /** The stage of the HostingEnvironment definition allowing to specify clusterSettings. */
        interface WithClusterSettings {
            /**
             * Specifies the clusterSettings property: Custom settings for changing the behavior of the hosting
             * environment.
             *
             * @param clusterSettings Custom settings for changing the behavior of the hosting environment.
             * @return the next definition stage.
             */
            WithCreate withClusterSettings(List<NameValuePair> clusterSettings);
        }
        /** The stage of the HostingEnvironment definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the HostingEnvironment definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the HostingEnvironment definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
    }
    /**
     * Begins update for the HostingEnvironment resource.
     *
     * @return the stage of resource update.
     */
    HostingEnvironment.Update update();

    /** The template for HostingEnvironment update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithNamePropertiesName,
            UpdateStages.WithLocationPropertiesLocation,
            UpdateStages.WithProvisioningState,
            UpdateStages.WithStatus,
            UpdateStages.WithVnetName,
            UpdateStages.WithVnetResourceGroupName,
            UpdateStages.WithVnetSubnetName,
            UpdateStages.WithVirtualNetwork,
            UpdateStages.WithInternalLoadBalancingMode,
            UpdateStages.WithMultiSize,
            UpdateStages.WithMultiRoleCount,
            UpdateStages.WithWorkerPools,
            UpdateStages.WithIpsslAddressCount,
            UpdateStages.WithDatabaseEdition,
            UpdateStages.WithDatabaseServiceObjective,
            UpdateStages.WithUpgradeDomains,
            UpdateStages.WithSubscriptionId,
            UpdateStages.WithDnsSuffix,
            UpdateStages.WithLastAction,
            UpdateStages.WithLastActionResult,
            UpdateStages.WithAllowedMultiSizes,
            UpdateStages.WithAllowedWorkerSizes,
            UpdateStages.WithMaximumNumberOfMachines,
            UpdateStages.WithVipMappings,
            UpdateStages.WithEnvironmentCapacities,
            UpdateStages.WithNetworkAccessControlList,
            UpdateStages.WithEnvironmentIsHealthy,
            UpdateStages.WithEnvironmentStatus,
            UpdateStages.WithResourceGroup,
            UpdateStages.WithApiManagementAccountId,
            UpdateStages.WithSuspended,
            UpdateStages.WithClusterSettings,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        HostingEnvironment apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        HostingEnvironment apply(Context context);
    }
    /** The HostingEnvironment update stages. */
    interface UpdateStages {
        /** The stage of the HostingEnvironment update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the HostingEnvironment update allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: Name of the hostingEnvironment (App Service Environment).
             *
             * @param namePropertiesName Name of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the HostingEnvironment update allowing to specify locationPropertiesLocation. */
        interface WithLocationPropertiesLocation {
            /**
             * Specifies the locationPropertiesLocation property: Location of the hostingEnvironment (App Service
             * Environment), e.g. "West US".
             *
             * @param locationPropertiesLocation Location of the hostingEnvironment (App Service Environment), e.g.
             *     "West US".
             * @return the next definition stage.
             */
            Update withLocationPropertiesLocation(String locationPropertiesLocation);
        }
        /** The stage of the HostingEnvironment update allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Provisioning state of the hostingEnvironment (App Service
             * Environment).
             *
             * @param provisioningState Provisioning state of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }
        /** The stage of the HostingEnvironment update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Current status of the hostingEnvironment (App Service Environment).
             *
             * @param status Current status of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withStatus(HostingEnvironmentStatus status);
        }
        /** The stage of the HostingEnvironment update allowing to specify vnetName. */
        interface WithVnetName {
            /**
             * Specifies the vnetName property: Name of the hostingEnvironment's (App Service Environment) virtual
             * network.
             *
             * @param vnetName Name of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            Update withVnetName(String vnetName);
        }
        /** The stage of the HostingEnvironment update allowing to specify vnetResourceGroupName. */
        interface WithVnetResourceGroupName {
            /**
             * Specifies the vnetResourceGroupName property: Resource group of the hostingEnvironment's (App Service
             * Environment) virtual network.
             *
             * @param vnetResourceGroupName Resource group of the hostingEnvironment's (App Service Environment) virtual
             *     network.
             * @return the next definition stage.
             */
            Update withVnetResourceGroupName(String vnetResourceGroupName);
        }
        /** The stage of the HostingEnvironment update allowing to specify vnetSubnetName. */
        interface WithVnetSubnetName {
            /**
             * Specifies the vnetSubnetName property: Subnet of the hostingEnvironment's (App Service Environment)
             * virtual network.
             *
             * @param vnetSubnetName Subnet of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            Update withVnetSubnetName(String vnetSubnetName);
        }
        /** The stage of the HostingEnvironment update allowing to specify virtualNetwork. */
        interface WithVirtualNetwork {
            /**
             * Specifies the virtualNetwork property: Description of the hostingEnvironment's (App Service Environment)
             * virtual network.
             *
             * @param virtualNetwork Description of the hostingEnvironment's (App Service Environment) virtual network.
             * @return the next definition stage.
             */
            Update withVirtualNetwork(VirtualNetworkProfile virtualNetwork);
        }
        /** The stage of the HostingEnvironment update allowing to specify internalLoadBalancingMode. */
        interface WithInternalLoadBalancingMode {
            /**
             * Specifies the internalLoadBalancingMode property: Specifies which endpoints to serve internally in the
             * hostingEnvironment's (App Service Environment) VNET.
             *
             * @param internalLoadBalancingMode Specifies which endpoints to serve internally in the
             *     hostingEnvironment's (App Service Environment) VNET.
             * @return the next definition stage.
             */
            Update withInternalLoadBalancingMode(InternalLoadBalancingMode internalLoadBalancingMode);
        }
        /** The stage of the HostingEnvironment update allowing to specify multiSize. */
        interface WithMultiSize {
            /**
             * Specifies the multiSize property: Front-end VM size, e.g. "Medium", "Large".
             *
             * @param multiSize Front-end VM size, e.g. "Medium", "Large".
             * @return the next definition stage.
             */
            Update withMultiSize(String multiSize);
        }
        /** The stage of the HostingEnvironment update allowing to specify multiRoleCount. */
        interface WithMultiRoleCount {
            /**
             * Specifies the multiRoleCount property: Number of front-end instances.
             *
             * @param multiRoleCount Number of front-end instances.
             * @return the next definition stage.
             */
            Update withMultiRoleCount(Integer multiRoleCount);
        }
        /** The stage of the HostingEnvironment update allowing to specify workerPools. */
        interface WithWorkerPools {
            /**
             * Specifies the workerPools property: Description of worker pools with worker size ids, VM sizes, and
             * number of workers in each pool.
             *
             * @param workerPools Description of worker pools with worker size ids, VM sizes, and number of workers in
             *     each pool.
             * @return the next definition stage.
             */
            Update withWorkerPools(List<WorkerPoolInner> workerPools);
        }
        /** The stage of the HostingEnvironment update allowing to specify ipsslAddressCount. */
        interface WithIpsslAddressCount {
            /**
             * Specifies the ipsslAddressCount property: Number of IP SSL addresses reserved for this hostingEnvironment
             * (App Service Environment).
             *
             * @param ipsslAddressCount Number of IP SSL addresses reserved for this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            Update withIpsslAddressCount(Integer ipsslAddressCount);
        }
        /** The stage of the HostingEnvironment update allowing to specify databaseEdition. */
        interface WithDatabaseEdition {
            /**
             * Specifies the databaseEdition property: Edition of the metadata database for the hostingEnvironment (App
             * Service Environment) e.g. "Standard".
             *
             * @param databaseEdition Edition of the metadata database for the hostingEnvironment (App Service
             *     Environment) e.g. "Standard".
             * @return the next definition stage.
             */
            Update withDatabaseEdition(String databaseEdition);
        }
        /** The stage of the HostingEnvironment update allowing to specify databaseServiceObjective. */
        interface WithDatabaseServiceObjective {
            /**
             * Specifies the databaseServiceObjective property: Service objective of the metadata database for the
             * hostingEnvironment (App Service Environment) e.g. "S0".
             *
             * @param databaseServiceObjective Service objective of the metadata database for the hostingEnvironment
             *     (App Service Environment) e.g. "S0".
             * @return the next definition stage.
             */
            Update withDatabaseServiceObjective(String databaseServiceObjective);
        }
        /** The stage of the HostingEnvironment update allowing to specify upgradeDomains. */
        interface WithUpgradeDomains {
            /**
             * Specifies the upgradeDomains property: Number of upgrade domains of this hostingEnvironment (App Service
             * Environment).
             *
             * @param upgradeDomains Number of upgrade domains of this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withUpgradeDomains(Integer upgradeDomains);
        }
        /** The stage of the HostingEnvironment update allowing to specify subscriptionId. */
        interface WithSubscriptionId {
            /**
             * Specifies the subscriptionId property: Subscription of the hostingEnvironment (App Service Environment).
             *
             * @param subscriptionId Subscription of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withSubscriptionId(String subscriptionId);
        }
        /** The stage of the HostingEnvironment update allowing to specify dnsSuffix. */
        interface WithDnsSuffix {
            /**
             * Specifies the dnsSuffix property: DNS suffix of the hostingEnvironment (App Service Environment).
             *
             * @param dnsSuffix DNS suffix of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withDnsSuffix(String dnsSuffix);
        }
        /** The stage of the HostingEnvironment update allowing to specify lastAction. */
        interface WithLastAction {
            /**
             * Specifies the lastAction property: Last deployment action on this hostingEnvironment (App Service
             * Environment).
             *
             * @param lastAction Last deployment action on this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withLastAction(String lastAction);
        }
        /** The stage of the HostingEnvironment update allowing to specify lastActionResult. */
        interface WithLastActionResult {
            /**
             * Specifies the lastActionResult property: Result of the last deployment action on this hostingEnvironment
             * (App Service Environment).
             *
             * @param lastActionResult Result of the last deployment action on this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            Update withLastActionResult(String lastActionResult);
        }
        /** The stage of the HostingEnvironment update allowing to specify allowedMultiSizes. */
        interface WithAllowedMultiSizes {
            /**
             * Specifies the allowedMultiSizes property: List of comma separated strings describing which VM sizes are
             * allowed for front-ends.
             *
             * @param allowedMultiSizes List of comma separated strings describing which VM sizes are allowed for
             *     front-ends.
             * @return the next definition stage.
             */
            Update withAllowedMultiSizes(String allowedMultiSizes);
        }
        /** The stage of the HostingEnvironment update allowing to specify allowedWorkerSizes. */
        interface WithAllowedWorkerSizes {
            /**
             * Specifies the allowedWorkerSizes property: List of comma separated strings describing which VM sizes are
             * allowed for workers.
             *
             * @param allowedWorkerSizes List of comma separated strings describing which VM sizes are allowed for
             *     workers.
             * @return the next definition stage.
             */
            Update withAllowedWorkerSizes(String allowedWorkerSizes);
        }
        /** The stage of the HostingEnvironment update allowing to specify maximumNumberOfMachines. */
        interface WithMaximumNumberOfMachines {
            /**
             * Specifies the maximumNumberOfMachines property: Maximum number of VMs in this hostingEnvironment (App
             * Service Environment).
             *
             * @param maximumNumberOfMachines Maximum number of VMs in this hostingEnvironment (App Service
             *     Environment).
             * @return the next definition stage.
             */
            Update withMaximumNumberOfMachines(Integer maximumNumberOfMachines);
        }
        /** The stage of the HostingEnvironment update allowing to specify vipMappings. */
        interface WithVipMappings {
            /**
             * Specifies the vipMappings property: Description of IP SSL mapping for this hostingEnvironment (App
             * Service Environment).
             *
             * @param vipMappings Description of IP SSL mapping for this hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withVipMappings(List<VirtualIpMapping> vipMappings);
        }
        /** The stage of the HostingEnvironment update allowing to specify environmentCapacities. */
        interface WithEnvironmentCapacities {
            /**
             * Specifies the environmentCapacities property: Current total, used, and available worker capacities.
             *
             * @param environmentCapacities Current total, used, and available worker capacities.
             * @return the next definition stage.
             */
            Update withEnvironmentCapacities(List<StampCapacityInner> environmentCapacities);
        }
        /** The stage of the HostingEnvironment update allowing to specify networkAccessControlList. */
        interface WithNetworkAccessControlList {
            /**
             * Specifies the networkAccessControlList property: Access control list for controlling traffic to the
             * hostingEnvironment (App Service Environment).
             *
             * @param networkAccessControlList Access control list for controlling traffic to the hostingEnvironment
             *     (App Service Environment).
             * @return the next definition stage.
             */
            Update withNetworkAccessControlList(List<NetworkAccessControlEntry> networkAccessControlList);
        }
        /** The stage of the HostingEnvironment update allowing to specify environmentIsHealthy. */
        interface WithEnvironmentIsHealthy {
            /**
             * Specifies the environmentIsHealthy property: True/false indicating whether the hostingEnvironment (App
             * Service Environment) is healthy.
             *
             * @param environmentIsHealthy True/false indicating whether the hostingEnvironment (App Service
             *     Environment) is healthy.
             * @return the next definition stage.
             */
            Update withEnvironmentIsHealthy(Boolean environmentIsHealthy);
        }
        /** The stage of the HostingEnvironment update allowing to specify environmentStatus. */
        interface WithEnvironmentStatus {
            /**
             * Specifies the environmentStatus property: Detailed message about with results of the last check of the
             * hostingEnvironment (App Service Environment).
             *
             * @param environmentStatus Detailed message about with results of the last check of the hostingEnvironment
             *     (App Service Environment).
             * @return the next definition stage.
             */
            Update withEnvironmentStatus(String environmentStatus);
        }
        /** The stage of the HostingEnvironment update allowing to specify resourceGroup. */
        interface WithResourceGroup {
            /**
             * Specifies the resourceGroup property: Resource group of the hostingEnvironment (App Service Environment).
             *
             * @param resourceGroup Resource group of the hostingEnvironment (App Service Environment).
             * @return the next definition stage.
             */
            Update withResourceGroup(String resourceGroup);
        }
        /** The stage of the HostingEnvironment update allowing to specify apiManagementAccountId. */
        interface WithApiManagementAccountId {
            /**
             * Specifies the apiManagementAccountId property: Api Management Account associated with this Hosting
             * Environment.
             *
             * @param apiManagementAccountId Api Management Account associated with this Hosting Environment.
             * @return the next definition stage.
             */
            Update withApiManagementAccountId(String apiManagementAccountId);
        }
        /** The stage of the HostingEnvironment update allowing to specify suspended. */
        interface WithSuspended {
            /**
             * Specifies the suspended property: True/false indicating whether the hostingEnvironment is suspended. The
             * environment can be suspended e.g. when the management endpoint is no longer available (most likely
             * because NSG blocked the incoming traffic).
             *
             * @param suspended True/false indicating whether the hostingEnvironment is suspended. The environment can
             *     be suspended e.g. when the management endpoint is no longer available (most likely because NSG
             *     blocked the incoming traffic).
             * @return the next definition stage.
             */
            Update withSuspended(Boolean suspended);
        }
        /** The stage of the HostingEnvironment update allowing to specify clusterSettings. */
        interface WithClusterSettings {
            /**
             * Specifies the clusterSettings property: Custom settings for changing the behavior of the hosting
             * environment.
             *
             * @param clusterSettings Custom settings for changing the behavior of the hosting environment.
             * @return the next definition stage.
             */
            Update withClusterSettings(List<NameValuePair> clusterSettings);
        }
        /** The stage of the HostingEnvironment update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the HostingEnvironment update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the HostingEnvironment update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    HostingEnvironment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    HostingEnvironment refresh(Context context);
}
