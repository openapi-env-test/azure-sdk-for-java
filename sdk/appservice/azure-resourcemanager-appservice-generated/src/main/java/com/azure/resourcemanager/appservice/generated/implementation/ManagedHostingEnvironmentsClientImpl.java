// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appservice.generated.fluent.ManagedHostingEnvironmentsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ManagedHostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentCollection;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmCollection;
import com.azure.resourcemanager.appservice.generated.models.SiteCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ManagedHostingEnvironmentsClient. */
public final class ManagedHostingEnvironmentsClientImpl implements ManagedHostingEnvironmentsClient {
    private final ClientLogger logger = new ClientLogger(ManagedHostingEnvironmentsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ManagedHostingEnvironmentsService service;

    /** The service client containing this operation class. */
    private final WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of ManagedHostingEnvironmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ManagedHostingEnvironmentsClientImpl(WebSiteManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    ManagedHostingEnvironmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WebSiteManagementClientManagedHostingEnvironments to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementCli")
    private interface ManagedHostingEnvironmentsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedHostingEnvironmentInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}")
        @ExpectedResponses({202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateManagedHostingEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HostingEnvironmentInner managedHostingEnvironmentEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}")
        @ExpectedResponses({202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("forceDelete") Boolean forceDelete,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentCollection>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}/capacities/virtualip")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AddressResponseInner>> getManagedHostingEnvironmentVips(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}/operations/{operationId}")
        @ExpectedResponses({200, 200, 202, 202, 500})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getManagedHostingEnvironmentOperation(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("operationId") String operationId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}/sites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getManagedHostingEnvironmentSites(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}/webhostingplans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getManagedHostingEnvironmentWebHostingPlans(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/managedHostingEnvironments/{name}/serverfarms")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getManagedHostingEnvironmentServerFarms(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentCollection>> getManagedHostingEnvironmentsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getManagedHostingEnvironmentSitesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getManagedHostingEnvironmentWebHostingPlansNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getManagedHostingEnvironmentServerFarmsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedHostingEnvironmentInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedHostingEnvironmentInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedHostingEnvironmentInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<ManagedHostingEnvironmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedHostingEnvironmentInner getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).block();
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedHostingEnvironmentInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateManagedHostingEnvironmentWithResponseAsync(
        String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (managedHostingEnvironmentEnvelope == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedHostingEnvironmentEnvelope is required and cannot be null."));
        } else {
            managedHostingEnvironmentEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateManagedHostingEnvironment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            managedHostingEnvironmentEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateManagedHostingEnvironmentWithResponseAsync(
        String resourceGroupName,
        String name,
        HostingEnvironmentInner managedHostingEnvironmentEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (managedHostingEnvironmentEnvelope == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedHostingEnvironmentEnvelope is required and cannot be null."));
        } else {
            managedHostingEnvironmentEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateManagedHostingEnvironment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                managedHostingEnvironmentEnvelope,
                accept,
                context);
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironmentAsync(
            String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateManagedHostingEnvironmentWithResponseAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope);
        return this
            .client
            .<HostingEnvironmentInner, HostingEnvironmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                HostingEnvironmentInner.class,
                HostingEnvironmentInner.class,
                Context.NONE);
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironmentAsync(
            String resourceGroupName,
            String name,
            HostingEnvironmentInner managedHostingEnvironmentEnvelope,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateManagedHostingEnvironmentWithResponseAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope, context);
        return this
            .client
            .<HostingEnvironmentInner, HostingEnvironmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                HostingEnvironmentInner.class,
                HostingEnvironmentInner.class,
                context);
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironment(
            String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        return beginCreateOrUpdateManagedHostingEnvironmentAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope)
            .getSyncPoller();
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironment(
            String resourceGroupName,
            String name,
            HostingEnvironmentInner managedHostingEnvironmentEnvelope,
            Context context) {
        return beginCreateOrUpdateManagedHostingEnvironmentAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentInner> createOrUpdateManagedHostingEnvironmentAsync(
        String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        return beginCreateOrUpdateManagedHostingEnvironmentAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentInner> createOrUpdateManagedHostingEnvironmentAsync(
        String resourceGroupName,
        String name,
        HostingEnvironmentInner managedHostingEnvironmentEnvelope,
        Context context) {
        return beginCreateOrUpdateManagedHostingEnvironmentAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentInner createOrUpdateManagedHostingEnvironment(
        String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        return createOrUpdateManagedHostingEnvironmentAsync(resourceGroupName, name, managedHostingEnvironmentEnvelope)
            .block();
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentInner createOrUpdateManagedHostingEnvironment(
        String resourceGroupName,
        String name,
        HostingEnvironmentInner managedHostingEnvironmentEnvelope,
        Context context) {
        return createOrUpdateManagedHostingEnvironmentAsync(
                resourceGroupName, name, managedHostingEnvironmentEnvelope, context)
            .block();
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String name, Boolean forceDelete) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            forceDelete,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                forceDelete,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginDeleteAsync(
        String resourceGroupName, String name, Boolean forceDelete) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, name, forceDelete);
        return this
            .client
            .<Object, Object>getLroResult(
                mono, this.client.getHttpPipeline(), Object.class, Object.class, Context.NONE);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginDeleteAsync(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, name, forceDelete, context);
        return this
            .client
            .<Object, Object>getLroResult(mono, this.client.getHttpPipeline(), Object.class, Object.class, context);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String name, Boolean forceDelete) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete).getSyncPoller();
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete, context).getSyncPoller();
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name, Boolean forceDelete) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name) {
        final Boolean forceDelete = null;
        return beginDeleteAsync(resourceGroupName, name, forceDelete)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name, Boolean forceDelete) {
        return deleteAsync(resourceGroupName, name, forceDelete).block();
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name) {
        final Boolean forceDelete = null;
        return deleteAsync(resourceGroupName, name, forceDelete).block();
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return deleteAsync(resourceGroupName, name, forceDelete, context).block();
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<HostingEnvironmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostingEnvironmentInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> getManagedHostingEnvironmentsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostingEnvironmentInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> getManagedHostingEnvironmentsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AddressResponseInner>> getManagedHostingEnvironmentVipsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentVips(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AddressResponseInner>> getManagedHostingEnvironmentVipsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentVips(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AddressResponseInner> getManagedHostingEnvironmentVipsAsync(String resourceGroupName, String name) {
        return getManagedHostingEnvironmentVipsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<AddressResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddressResponseInner getManagedHostingEnvironmentVips(String resourceGroupName, String name) {
        return getManagedHostingEnvironmentVipsAsync(resourceGroupName, name).block();
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddressResponseInner> getManagedHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context) {
        return getManagedHostingEnvironmentVipsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getManagedHostingEnvironmentOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentOperation(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            operationId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getManagedHostingEnvironmentOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentOperation(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                operationId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getManagedHostingEnvironmentOperationAsync(
        String resourceGroupName, String name, String operationId) {
        return getManagedHostingEnvironmentOperationWithResponseAsync(resourceGroupName, name, operationId)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getManagedHostingEnvironmentOperation(String resourceGroupName, String name, String operationId) {
        return getManagedHostingEnvironmentOperationAsync(resourceGroupName, name, operationId).block();
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getManagedHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return getManagedHostingEnvironmentOperationWithResponseAsync(resourceGroupName, name, operationId, context)
            .block();
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getManagedHostingEnvironmentSitesSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentSites(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            propertiesToInclude,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getManagedHostingEnvironmentSitesSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentSites(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                propertiesToInclude,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getManagedHostingEnvironmentSitesAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getManagedHostingEnvironmentSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getManagedHostingEnvironmentSitesAsync(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getManagedHostingEnvironmentSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getManagedHostingEnvironmentSitesAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedFlux<>(
            () ->
                getManagedHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude, context),
            nextLink -> getManagedHostingEnvironmentSitesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getManagedHostingEnvironmentSites(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedIterable<>(
            getManagedHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude));
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getManagedHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedIterable<>(
            getManagedHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentWebHostingPlansSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentWebHostingPlans(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentWebHostingPlansSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentWebHostingPlans(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlansAsync(
        String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentWebHostingPlansSinglePageAsync(resourceGroupName, name),
            nextLink -> getManagedHostingEnvironmentWebHostingPlansNextSinglePageAsync(nextLink));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlansAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentWebHostingPlansSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getManagedHostingEnvironmentWebHostingPlansNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name) {
        return new PagedIterable<>(getManagedHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getManagedHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentServerFarmsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentServerFarms(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentServerFarmsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentServerFarms(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarmsAsync(
        String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentServerFarmsSinglePageAsync(resourceGroupName, name),
            nextLink -> getManagedHostingEnvironmentServerFarmsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarmsAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getManagedHostingEnvironmentServerFarmsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getManagedHostingEnvironmentServerFarmsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name) {
        return new PagedIterable<>(getManagedHostingEnvironmentServerFarmsAsync(resourceGroupName, name));
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getManagedHostingEnvironmentServerFarmsAsync(resourceGroupName, name, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of hosting environments (App Service Environments).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> getManagedHostingEnvironmentsNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getManagedHostingEnvironmentsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HostingEnvironmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of hosting environments (App Service Environments).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> getManagedHostingEnvironmentsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getManagedHostingEnvironmentSitesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getManagedHostingEnvironmentSitesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getManagedHostingEnvironmentSitesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentSitesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>>
        getManagedHostingEnvironmentWebHostingPlansNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentWebHostingPlansNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>>
        getManagedHostingEnvironmentWebHostingPlansNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentWebHostingPlansNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentServerFarmsNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getManagedHostingEnvironmentServerFarmsNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getManagedHostingEnvironmentServerFarmsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getManagedHostingEnvironmentServerFarmsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
