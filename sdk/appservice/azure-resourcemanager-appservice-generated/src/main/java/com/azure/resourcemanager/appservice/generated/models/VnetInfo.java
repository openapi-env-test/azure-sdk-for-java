// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetRouteInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of VnetInfo. */
public interface VnetInfo {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the vnetResourceId property: The vnet resource id.
     *
     * @return the vnetResourceId value.
     */
    String vnetResourceId();

    /**
     * Gets the certThumbprint property: The client certificate thumbprint.
     *
     * @return the certThumbprint value.
     */
    String certThumbprint();

    /**
     * Gets the certBlob property: A certificate file (.cer) blob containing the public key of the private key used to
     * authenticate a Point-To-Site VPN connection.
     *
     * @return the certBlob value.
     */
    String certBlob();

    /**
     * Gets the routes property: The routes that this virtual network connection uses.
     *
     * @return the routes value.
     */
    List<VnetRoute> routes();

    /**
     * Gets the resyncRequired property: Flag to determine if a resync is required.
     *
     * @return the resyncRequired value.
     */
    Boolean resyncRequired();

    /**
     * Gets the dnsServers property: Dns servers to be used by this VNET. This should be a comma-separated list of IP
     * addresses.
     *
     * @return the dnsServers value.
     */
    String dnsServers();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner object.
     *
     * @return the inner object.
     */
    VnetInfoInner innerModel();

    /** The entirety of the VnetInfo definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The VnetInfo definition stages. */
    interface DefinitionStages {
        /** The first stage of the VnetInfo definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VnetInfo definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the VnetInfo definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, name, slot.
             *
             * @param resourceGroupName The resource group name.
             * @param name The name of the web app.
             * @param slot The name of the slot for this web app.
             * @return the next definition stage.
             */
            WithCreate withExistingSlot(String resourceGroupName, String name, String slot);
        }
        /**
         * The stage of the VnetInfo definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithVnetResourceId,
                DefinitionStages.WithCertThumbprint,
                DefinitionStages.WithCertBlob,
                DefinitionStages.WithRoutes,
                DefinitionStages.WithResyncRequired,
                DefinitionStages.WithDnsServers,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VnetInfo create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VnetInfo create(Context context);
        }
        /** The stage of the VnetInfo definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VnetInfo definition allowing to specify vnetResourceId. */
        interface WithVnetResourceId {
            /**
             * Specifies the vnetResourceId property: The vnet resource id.
             *
             * @param vnetResourceId The vnet resource id.
             * @return the next definition stage.
             */
            WithCreate withVnetResourceId(String vnetResourceId);
        }
        /** The stage of the VnetInfo definition allowing to specify certThumbprint. */
        interface WithCertThumbprint {
            /**
             * Specifies the certThumbprint property: The client certificate thumbprint.
             *
             * @param certThumbprint The client certificate thumbprint.
             * @return the next definition stage.
             */
            WithCreate withCertThumbprint(String certThumbprint);
        }
        /** The stage of the VnetInfo definition allowing to specify certBlob. */
        interface WithCertBlob {
            /**
             * Specifies the certBlob property: A certificate file (.cer) blob containing the public key of the private
             * key used to authenticate a Point-To-Site VPN connection..
             *
             * @param certBlob A certificate file (.cer) blob containing the public key of the private key used to
             *     authenticate a Point-To-Site VPN connection.
             * @return the next definition stage.
             */
            WithCreate withCertBlob(String certBlob);
        }
        /** The stage of the VnetInfo definition allowing to specify routes. */
        interface WithRoutes {
            /**
             * Specifies the routes property: The routes that this virtual network connection uses..
             *
             * @param routes The routes that this virtual network connection uses.
             * @return the next definition stage.
             */
            WithCreate withRoutes(List<VnetRouteInner> routes);
        }
        /** The stage of the VnetInfo definition allowing to specify resyncRequired. */
        interface WithResyncRequired {
            /**
             * Specifies the resyncRequired property: Flag to determine if a resync is required.
             *
             * @param resyncRequired Flag to determine if a resync is required.
             * @return the next definition stage.
             */
            WithCreate withResyncRequired(Boolean resyncRequired);
        }
        /** The stage of the VnetInfo definition allowing to specify dnsServers. */
        interface WithDnsServers {
            /**
             * Specifies the dnsServers property: Dns servers to be used by this VNET. This should be a comma-separated
             * list of IP addresses..
             *
             * @param dnsServers Dns servers to be used by this VNET. This should be a comma-separated list of IP
             *     addresses.
             * @return the next definition stage.
             */
            WithCreate withDnsServers(String dnsServers);
        }
        /** The stage of the VnetInfo definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the VnetInfo definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the VnetInfo definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
    }
    /**
     * Begins update for the VnetInfo resource.
     *
     * @return the stage of resource update.
     */
    VnetInfo.Update update();

    /** The template for VnetInfo update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithVnetResourceId,
            UpdateStages.WithCertThumbprint,
            UpdateStages.WithCertBlob,
            UpdateStages.WithRoutes,
            UpdateStages.WithResyncRequired,
            UpdateStages.WithDnsServers,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VnetInfo apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VnetInfo apply(Context context);
    }
    /** The VnetInfo update stages. */
    interface UpdateStages {
        /** The stage of the VnetInfo update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the VnetInfo update allowing to specify vnetResourceId. */
        interface WithVnetResourceId {
            /**
             * Specifies the vnetResourceId property: The vnet resource id.
             *
             * @param vnetResourceId The vnet resource id.
             * @return the next definition stage.
             */
            Update withVnetResourceId(String vnetResourceId);
        }
        /** The stage of the VnetInfo update allowing to specify certThumbprint. */
        interface WithCertThumbprint {
            /**
             * Specifies the certThumbprint property: The client certificate thumbprint.
             *
             * @param certThumbprint The client certificate thumbprint.
             * @return the next definition stage.
             */
            Update withCertThumbprint(String certThumbprint);
        }
        /** The stage of the VnetInfo update allowing to specify certBlob. */
        interface WithCertBlob {
            /**
             * Specifies the certBlob property: A certificate file (.cer) blob containing the public key of the private
             * key used to authenticate a Point-To-Site VPN connection..
             *
             * @param certBlob A certificate file (.cer) blob containing the public key of the private key used to
             *     authenticate a Point-To-Site VPN connection.
             * @return the next definition stage.
             */
            Update withCertBlob(String certBlob);
        }
        /** The stage of the VnetInfo update allowing to specify routes. */
        interface WithRoutes {
            /**
             * Specifies the routes property: The routes that this virtual network connection uses..
             *
             * @param routes The routes that this virtual network connection uses.
             * @return the next definition stage.
             */
            Update withRoutes(List<VnetRouteInner> routes);
        }
        /** The stage of the VnetInfo update allowing to specify resyncRequired. */
        interface WithResyncRequired {
            /**
             * Specifies the resyncRequired property: Flag to determine if a resync is required.
             *
             * @param resyncRequired Flag to determine if a resync is required.
             * @return the next definition stage.
             */
            Update withResyncRequired(Boolean resyncRequired);
        }
        /** The stage of the VnetInfo update allowing to specify dnsServers. */
        interface WithDnsServers {
            /**
             * Specifies the dnsServers property: Dns servers to be used by this VNET. This should be a comma-separated
             * list of IP addresses..
             *
             * @param dnsServers Dns servers to be used by this VNET. This should be a comma-separated list of IP
             *     addresses.
             * @return the next definition stage.
             */
            Update withDnsServers(String dnsServers);
        }
        /** The stage of the VnetInfo update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the VnetInfo update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the VnetInfo update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VnetInfo refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VnetInfo refresh(Context context);
}
