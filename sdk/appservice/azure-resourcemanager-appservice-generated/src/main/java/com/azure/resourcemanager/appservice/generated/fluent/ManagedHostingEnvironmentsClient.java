// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ManagedHostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;

/** An instance of this class provides access to all the operations defined in ManagedHostingEnvironmentsClient. */
public interface ManagedHostingEnvironmentsClient {
    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedHostingEnvironmentInner getByResourceGroup(String resourceGroupName, String name);

    /**
     * Get properties of a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ManagedHostingEnvironmentInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironment(
            String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope);

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateManagedHostingEnvironment(
            String resourceGroupName,
            String name,
            HostingEnvironmentInner managedHostingEnvironmentEnvelope,
            Context context);

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HostingEnvironmentInner createOrUpdateManagedHostingEnvironment(
        String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope);

    /**
     * Create or update a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HostingEnvironmentInner createOrUpdateManagedHostingEnvironment(
        String resourceGroupName,
        String name,
        HostingEnvironmentInner managedHostingEnvironmentEnvelope,
        Context context);

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Object>, Object> beginDelete(String resourceGroupName, String name, Boolean forceDelete);

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String name, Boolean forceDelete, Context context);

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String name, Boolean forceDelete);

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String name);

    /**
     * Delete a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param forceDelete Delete even if the managed hosting environment contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context);

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName);

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddressResponseInner getManagedHostingEnvironmentVips(String resourceGroupName, String name);

    /**
     * Get list of ip addresses assigned to a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ip addresses assigned to a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AddressResponseInner> getManagedHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object getManagedHostingEnvironmentOperation(String resourceGroupName, String name, String operationId);

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> getManagedHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context);

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteInner> getManagedHostingEnvironmentSites(String resourceGroupName, String name);

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteInner> getManagedHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context);

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name);

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context);

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name);

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of managed hosting environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the managed hosting environment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context);
}
