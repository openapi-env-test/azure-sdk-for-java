// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.CloningInfo;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.HostnameSslState;
import com.azure.resourcemanager.appservice.generated.models.SiteAvailabilityState;
import com.azure.resourcemanager.appservice.generated.models.UsageState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Reports deleted site including the timestamp of operation. */
@JsonFlatten
@Fluent
public class DeletedSiteInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeletedSiteInner.class);

    /*
     * Time when the site was deleted
     */
    @JsonProperty(value = "properties.deletedTimestamp")
    private OffsetDateTime deletedTimestamp;

    /*
     * Name of web app
     */
    @JsonProperty(value = "properties.name")
    private String namePropertiesName;

    /*
     * State of the web app
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private String state;

    /*
     * Hostnames associated with web app
     */
    @JsonProperty(value = "properties.hostNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> hostNames;

    /*
     * Name of repository site
     */
    @JsonProperty(value = "properties.repositorySiteName", access = JsonProperty.Access.WRITE_ONLY)
    private String repositorySiteName;

    /*
     * State indicating whether web app has exceeded its quota usage
     */
    @JsonProperty(value = "properties.usageState", access = JsonProperty.Access.WRITE_ONLY)
    private UsageState usageState;

    /*
     * True if the site is enabled; otherwise, false. Setting this  value to
     * false disables the site (takes the site off line).
     */
    @JsonProperty(value = "properties.enabled")
    private Boolean enabled;

    /*
     * Hostnames for the web app that are enabled. Hostnames need to be
     * assigned and enabled. If some hostnames are assigned but not enabled
     * the app is not served on those hostnames
     */
    @JsonProperty(value = "properties.enabledHostNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> enabledHostNames;

    /*
     * Management information availability state for the web app. Possible
     * values are Normal or Limited.
     * Normal means that the site is running correctly and that management
     * information for the site is available.
     * Limited means that only partial management information for the site is
     * available and that detailed site information is unavailable.
     */
    @JsonProperty(value = "properties.availabilityState", access = JsonProperty.Access.WRITE_ONLY)
    private SiteAvailabilityState availabilityState;

    /*
     * Hostname SSL states are  used to manage the SSL bindings for site's
     * hostnames.
     */
    @JsonProperty(value = "properties.hostNameSslStates")
    private List<HostnameSslState> hostnameSslStates;

    /*
     * The serverFarmId property.
     */
    @JsonProperty(value = "properties.serverFarmId")
    private String serverFarmId;

    /*
     * Last time web app was modified in UTC
     */
    @JsonProperty(value = "properties.lastModifiedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTimeUtc;

    /*
     * Configuration of web app
     */
    @JsonProperty(value = "properties.siteConfig")
    private SiteConfigInner siteConfig;

    /*
     * Read-only list of Azure Traffic manager hostnames associated with web
     * app
     */
    @JsonProperty(value = "properties.trafficManagerHostNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> trafficManagerHostNames;

    /*
     * If set indicates whether web app is deployed as a premium app
     */
    @JsonProperty(value = "properties.premiumAppDeployed", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean premiumAppDeployed;

    /*
     * If set indicates whether to stop SCM (KUDU) site when the web app is
     * stopped. Default is false.
     */
    @JsonProperty(value = "properties.scmSiteAlsoStopped")
    private Boolean scmSiteAlsoStopped;

    /*
     * Read-only property that specifies which slot this app will swap into
     */
    @JsonProperty(value = "properties.targetSwapSlot", access = JsonProperty.Access.WRITE_ONLY)
    private String targetSwapSlot;

    /*
     * Specification for the hosting environment (App Service Environment) to
     * use for the web app
     */
    @JsonProperty(value = "properties.hostingEnvironmentProfile")
    private HostingEnvironmentProfile hostingEnvironmentProfile;

    /*
     * The microService property.
     */
    @JsonProperty(value = "properties.microService")
    private String microService;

    /*
     * Name of gateway app associated with web app
     */
    @JsonProperty(value = "properties.gatewaySiteName")
    private String gatewaySiteName;

    /*
     * Specifies if the client affinity is enabled when load balancing http
     * request for multiple instances of the web app
     */
    @JsonProperty(value = "properties.clientAffinityEnabled")
    private Boolean clientAffinityEnabled;

    /*
     * Specifies if the client certificate is enabled for the web app
     */
    @JsonProperty(value = "properties.clientCertEnabled")
    private Boolean clientCertEnabled;

    /*
     * Specifies if the public hostnames are disabled the web app.
     * If set to true the app is only accessible via API Management process
     */
    @JsonProperty(value = "properties.hostNamesDisabled")
    private Boolean hostNamesDisabled;

    /*
     * List of comma separated IP addresses that this web app uses for outbound
     * connections. Those can be used when configuring firewall rules for
     * databases accessed by this web app.
     */
    @JsonProperty(value = "properties.outboundIpAddresses", access = JsonProperty.Access.WRITE_ONLY)
    private String outboundIpAddresses;

    /*
     * Size of a function container
     */
    @JsonProperty(value = "properties.containerSize")
    private Integer containerSize;

    /*
     * Maximum number of workers
     * This only applies to function container
     */
    @JsonProperty(value = "properties.maxNumberOfWorkers")
    private Integer maxNumberOfWorkers;

    /*
     * This is only valid for web app creation. If specified, web app is cloned
     * from
     * a source web app
     */
    @JsonProperty(value = "properties.cloningInfo")
    private CloningInfo cloningInfo;

    /*
     * Resource group web app belongs to
     */
    @JsonProperty(value = "properties.resourceGroup", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceGroup;

    /*
     * Site is a default container
     */
    @JsonProperty(value = "properties.isDefaultContainer", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isDefaultContainer;

    /*
     * Default hostname of the web app
     */
    @JsonProperty(value = "properties.defaultHostName", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultHostname;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the deletedTimestamp property: Time when the site was deleted.
     *
     * @return the deletedTimestamp value.
     */
    public OffsetDateTime deletedTimestamp() {
        return this.deletedTimestamp;
    }

    /**
     * Set the deletedTimestamp property: Time when the site was deleted.
     *
     * @param deletedTimestamp the deletedTimestamp value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withDeletedTimestamp(OffsetDateTime deletedTimestamp) {
        this.deletedTimestamp = deletedTimestamp;
        return this;
    }

    /**
     * Get the namePropertiesName property: Name of web app.
     *
     * @return the namePropertiesName value.
     */
    public String namePropertiesName() {
        return this.namePropertiesName;
    }

    /**
     * Set the namePropertiesName property: Name of web app.
     *
     * @param namePropertiesName the namePropertiesName value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withNamePropertiesName(String namePropertiesName) {
        this.namePropertiesName = namePropertiesName;
        return this;
    }

    /**
     * Get the state property: State of the web app.
     *
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the hostNames property: Hostnames associated with web app.
     *
     * @return the hostNames value.
     */
    public List<String> hostNames() {
        return this.hostNames;
    }

    /**
     * Get the repositorySiteName property: Name of repository site.
     *
     * @return the repositorySiteName value.
     */
    public String repositorySiteName() {
        return this.repositorySiteName;
    }

    /**
     * Get the usageState property: State indicating whether web app has exceeded its quota usage.
     *
     * @return the usageState value.
     */
    public UsageState usageState() {
        return this.usageState;
    }

    /**
     * Get the enabled property: True if the site is enabled; otherwise, false. Setting this value to false disables the
     * site (takes the site off line).
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: True if the site is enabled; otherwise, false. Setting this value to false disables the
     * site (takes the site off line).
     *
     * @param enabled the enabled value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the enabledHostNames property: Hostnames for the web app that are enabled. Hostnames need to be assigned and
     * enabled. If some hostnames are assigned but not enabled the app is not served on those hostnames.
     *
     * @return the enabledHostNames value.
     */
    public List<String> enabledHostNames() {
        return this.enabledHostNames;
    }

    /**
     * Get the availabilityState property: Management information availability state for the web app. Possible values
     * are Normal or Limited. Normal means that the site is running correctly and that management information for the
     * site is available. Limited means that only partial management information for the site is available and that
     * detailed site information is unavailable.
     *
     * @return the availabilityState value.
     */
    public SiteAvailabilityState availabilityState() {
        return this.availabilityState;
    }

    /**
     * Get the hostnameSslStates property: Hostname SSL states are used to manage the SSL bindings for site's hostnames.
     *
     * @return the hostnameSslStates value.
     */
    public List<HostnameSslState> hostnameSslStates() {
        return this.hostnameSslStates;
    }

    /**
     * Set the hostnameSslStates property: Hostname SSL states are used to manage the SSL bindings for site's hostnames.
     *
     * @param hostnameSslStates the hostnameSslStates value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withHostnameSslStates(List<HostnameSslState> hostnameSslStates) {
        this.hostnameSslStates = hostnameSslStates;
        return this;
    }

    /**
     * Get the serverFarmId property: The serverFarmId property.
     *
     * @return the serverFarmId value.
     */
    public String serverFarmId() {
        return this.serverFarmId;
    }

    /**
     * Set the serverFarmId property: The serverFarmId property.
     *
     * @param serverFarmId the serverFarmId value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withServerFarmId(String serverFarmId) {
        this.serverFarmId = serverFarmId;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: Last time web app was modified in UTC.
     *
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Get the siteConfig property: Configuration of web app.
     *
     * @return the siteConfig value.
     */
    public SiteConfigInner siteConfig() {
        return this.siteConfig;
    }

    /**
     * Set the siteConfig property: Configuration of web app.
     *
     * @param siteConfig the siteConfig value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withSiteConfig(SiteConfigInner siteConfig) {
        this.siteConfig = siteConfig;
        return this;
    }

    /**
     * Get the trafficManagerHostNames property: Read-only list of Azure Traffic manager hostnames associated with web
     * app.
     *
     * @return the trafficManagerHostNames value.
     */
    public List<String> trafficManagerHostNames() {
        return this.trafficManagerHostNames;
    }

    /**
     * Get the premiumAppDeployed property: If set indicates whether web app is deployed as a premium app.
     *
     * @return the premiumAppDeployed value.
     */
    public Boolean premiumAppDeployed() {
        return this.premiumAppDeployed;
    }

    /**
     * Get the scmSiteAlsoStopped property: If set indicates whether to stop SCM (KUDU) site when the web app is
     * stopped. Default is false.
     *
     * @return the scmSiteAlsoStopped value.
     */
    public Boolean scmSiteAlsoStopped() {
        return this.scmSiteAlsoStopped;
    }

    /**
     * Set the scmSiteAlsoStopped property: If set indicates whether to stop SCM (KUDU) site when the web app is
     * stopped. Default is false.
     *
     * @param scmSiteAlsoStopped the scmSiteAlsoStopped value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withScmSiteAlsoStopped(Boolean scmSiteAlsoStopped) {
        this.scmSiteAlsoStopped = scmSiteAlsoStopped;
        return this;
    }

    /**
     * Get the targetSwapSlot property: Read-only property that specifies which slot this app will swap into.
     *
     * @return the targetSwapSlot value.
     */
    public String targetSwapSlot() {
        return this.targetSwapSlot;
    }

    /**
     * Get the hostingEnvironmentProfile property: Specification for the hosting environment (App Service Environment)
     * to use for the web app.
     *
     * @return the hostingEnvironmentProfile value.
     */
    public HostingEnvironmentProfile hostingEnvironmentProfile() {
        return this.hostingEnvironmentProfile;
    }

    /**
     * Set the hostingEnvironmentProfile property: Specification for the hosting environment (App Service Environment)
     * to use for the web app.
     *
     * @param hostingEnvironmentProfile the hostingEnvironmentProfile value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile) {
        this.hostingEnvironmentProfile = hostingEnvironmentProfile;
        return this;
    }

    /**
     * Get the microService property: The microService property.
     *
     * @return the microService value.
     */
    public String microService() {
        return this.microService;
    }

    /**
     * Set the microService property: The microService property.
     *
     * @param microService the microService value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withMicroService(String microService) {
        this.microService = microService;
        return this;
    }

    /**
     * Get the gatewaySiteName property: Name of gateway app associated with web app.
     *
     * @return the gatewaySiteName value.
     */
    public String gatewaySiteName() {
        return this.gatewaySiteName;
    }

    /**
     * Set the gatewaySiteName property: Name of gateway app associated with web app.
     *
     * @param gatewaySiteName the gatewaySiteName value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withGatewaySiteName(String gatewaySiteName) {
        this.gatewaySiteName = gatewaySiteName;
        return this;
    }

    /**
     * Get the clientAffinityEnabled property: Specifies if the client affinity is enabled when load balancing http
     * request for multiple instances of the web app.
     *
     * @return the clientAffinityEnabled value.
     */
    public Boolean clientAffinityEnabled() {
        return this.clientAffinityEnabled;
    }

    /**
     * Set the clientAffinityEnabled property: Specifies if the client affinity is enabled when load balancing http
     * request for multiple instances of the web app.
     *
     * @param clientAffinityEnabled the clientAffinityEnabled value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withClientAffinityEnabled(Boolean clientAffinityEnabled) {
        this.clientAffinityEnabled = clientAffinityEnabled;
        return this;
    }

    /**
     * Get the clientCertEnabled property: Specifies if the client certificate is enabled for the web app.
     *
     * @return the clientCertEnabled value.
     */
    public Boolean clientCertEnabled() {
        return this.clientCertEnabled;
    }

    /**
     * Set the clientCertEnabled property: Specifies if the client certificate is enabled for the web app.
     *
     * @param clientCertEnabled the clientCertEnabled value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withClientCertEnabled(Boolean clientCertEnabled) {
        this.clientCertEnabled = clientCertEnabled;
        return this;
    }

    /**
     * Get the hostNamesDisabled property: Specifies if the public hostnames are disabled the web app. If set to true
     * the app is only accessible via API Management process.
     *
     * @return the hostNamesDisabled value.
     */
    public Boolean hostNamesDisabled() {
        return this.hostNamesDisabled;
    }

    /**
     * Set the hostNamesDisabled property: Specifies if the public hostnames are disabled the web app. If set to true
     * the app is only accessible via API Management process.
     *
     * @param hostNamesDisabled the hostNamesDisabled value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withHostNamesDisabled(Boolean hostNamesDisabled) {
        this.hostNamesDisabled = hostNamesDisabled;
        return this;
    }

    /**
     * Get the outboundIpAddresses property: List of comma separated IP addresses that this web app uses for outbound
     * connections. Those can be used when configuring firewall rules for databases accessed by this web app.
     *
     * @return the outboundIpAddresses value.
     */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }

    /**
     * Get the containerSize property: Size of a function container.
     *
     * @return the containerSize value.
     */
    public Integer containerSize() {
        return this.containerSize;
    }

    /**
     * Set the containerSize property: Size of a function container.
     *
     * @param containerSize the containerSize value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withContainerSize(Integer containerSize) {
        this.containerSize = containerSize;
        return this;
    }

    /**
     * Get the maxNumberOfWorkers property: Maximum number of workers This only applies to function container.
     *
     * @return the maxNumberOfWorkers value.
     */
    public Integer maxNumberOfWorkers() {
        return this.maxNumberOfWorkers;
    }

    /**
     * Set the maxNumberOfWorkers property: Maximum number of workers This only applies to function container.
     *
     * @param maxNumberOfWorkers the maxNumberOfWorkers value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withMaxNumberOfWorkers(Integer maxNumberOfWorkers) {
        this.maxNumberOfWorkers = maxNumberOfWorkers;
        return this;
    }

    /**
     * Get the cloningInfo property: This is only valid for web app creation. If specified, web app is cloned from a
     * source web app.
     *
     * @return the cloningInfo value.
     */
    public CloningInfo cloningInfo() {
        return this.cloningInfo;
    }

    /**
     * Set the cloningInfo property: This is only valid for web app creation. If specified, web app is cloned from a
     * source web app.
     *
     * @param cloningInfo the cloningInfo value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withCloningInfo(CloningInfo cloningInfo) {
        this.cloningInfo = cloningInfo;
        return this;
    }

    /**
     * Get the resourceGroup property: Resource group web app belongs to.
     *
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the isDefaultContainer property: Site is a default container.
     *
     * @return the isDefaultContainer value.
     */
    public Boolean isDefaultContainer() {
        return this.isDefaultContainer;
    }

    /**
     * Get the defaultHostname property: Default hostname of the web app.
     *
     * @return the defaultHostname value.
     */
    public String defaultHostname() {
        return this.defaultHostname;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the DeletedSiteInner object itself.
     */
    public DeletedSiteInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DeletedSiteInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DeletedSiteInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostnameSslStates() != null) {
            hostnameSslStates().forEach(e -> e.validate());
        }
        if (siteConfig() != null) {
            siteConfig().validate();
        }
        if (hostingEnvironmentProfile() != null) {
            hostingEnvironmentProfile().validate();
        }
        if (cloningInfo() != null) {
            cloningInfo().validate();
        }
    }
}
