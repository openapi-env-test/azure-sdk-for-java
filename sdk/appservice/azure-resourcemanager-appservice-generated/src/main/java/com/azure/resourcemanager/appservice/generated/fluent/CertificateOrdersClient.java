// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderCertificateInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderInner;
import com.azure.resourcemanager.appservice.generated.models.ReissueCertificateOrderRequest;
import com.azure.resourcemanager.appservice.generated.models.RenewCertificateOrderRequest;

/** An instance of this class provides access to all the operations defined in CertificateOrdersClient. */
public interface CertificateOrdersClient {
    /**
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate associated with the certificate order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderCertificateInner getCertificate(String resourceGroupName, String certificateOrderName, String name);

    /**
     * Get certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate associated with the certificate order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderCertificateInner> getCertificateWithResponse(
        String resourceGroupName, String certificateOrderName, String name, Context context);

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's
     * ready.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param keyVaultCertificate Key Vault secret csm Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class representing the Key Vault container for certificate purchased through Azure.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderCertificateInner createOrUpdateCertificate(
        String resourceGroupName,
        String certificateOrderName,
        String name,
        CertificateOrderCertificateInner keyVaultCertificate);

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's
     * ready.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param keyVaultCertificate Key Vault secret csm Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class representing the Key Vault container for certificate purchased through Azure.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderCertificateInner> createOrUpdateCertificateWithResponse(
        String resourceGroupName,
        String certificateOrderName,
        String name,
        CertificateOrderCertificateInner keyVaultCertificate,
        Context context);

    /**
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object deleteCertificate(String resourceGroupName, String certificateOrderName, String name);

    /**
     * Deletes the certificate associated with the certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> deleteCertificateWithResponse(
        String resourceGroupName, String certificateOrderName, String name, Context context);

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's
     * ready.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param keyVaultCertificate Key Vault secret csm Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class representing the Key Vault container for certificate purchased through Azure.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderCertificateInner updateCertificate(
        String resourceGroupName,
        String certificateOrderName,
        String name,
        CertificateOrderCertificateInner keyVaultCertificate);

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's
     * ready.
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param name Certificate name.
     * @param keyVaultCertificate Key Vault secret csm Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class representing the Key Vault container for certificate purchased through Azure.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderCertificateInner> updateCertificateWithResponse(
        String resourceGroupName,
        String certificateOrderName,
        String name,
        CertificateOrderCertificateInner keyVaultCertificate,
        Context context);

    /**
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderInner getByResourceGroup(String resourceGroupName, String name);

    /**
     * Get a certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate purchase order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderInner createOrUpdateCertificateOrder(
        String resourceGroupName, String name, CertificateOrderInner certificateDistinguishedName);

    /**
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate purchase order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderInner> createOrUpdateCertificateOrderWithResponse(
        String resourceGroupName, String name, CertificateOrderInner certificateDistinguishedName, Context context);

    /**
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String name);

    /**
     * Delete an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> deleteWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate purchase order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateOrderInner updateCertificateOrder(
        String resourceGroupName, String name, CertificateOrderInner certificateDistinguishedName);

    /**
     * Create or update a certificate purchase order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate purchase order.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateOrderInner> updateCertificateOrderWithResponse(
        String resourceGroupName, String name, CertificateOrderInner certificateDistinguishedName, Context context);

    /**
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate orders in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateOrderInner> listByResourceGroup(String resourceGroupName);

    /**
     * Get certificate orders in a resource group.
     *
     * @param resourceGroupName Azure resource group name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate orders in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateOrderInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order
     * at a time).
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of certificate order certificates.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateOrderCertificateInner> getCertificates(
        String resourceGroupName, String certificateOrderName);

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order
     * at a time).
     *
     * @param resourceGroupName Azure resource group name.
     * @param certificateOrderName Certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of certificate order certificates.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateOrderCertificateInner> getCertificates(
        String resourceGroupName, String certificateOrderName, Context context);

    /**
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param reissueCertificateOrderRequest Reissue parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object reissueCertificateOrder(
        String resourceGroupName, String name, ReissueCertificateOrderRequest reissueCertificateOrderRequest);

    /**
     * Reissue an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param reissueCertificateOrderRequest Reissue parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> reissueCertificateOrderWithResponse(
        String resourceGroupName,
        String name,
        ReissueCertificateOrderRequest reissueCertificateOrderRequest,
        Context context);

    /**
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param renewCertificateOrderRequest Renew parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object renewCertificateOrder(
        String resourceGroupName, String name, RenewCertificateOrderRequest renewCertificateOrderRequest);

    /**
     * Renew an existing certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate name.
     * @param renewCertificateOrderRequest Renew parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> renewCertificateOrderWithResponse(
        String resourceGroupName,
        String name,
        RenewCertificateOrderRequest renewCertificateOrderRequest,
        Context context);

    /**
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of CertificateOrderAction.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object retrieveCertificateActions(String resourceGroupName, String name);

    /**
     * Retrieve the list of certificate actions.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of CertificateOrderAction.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> retrieveCertificateActionsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Retrieve email history.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of CertificateEmail.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object retrieveCertificateEmailHistory(String resourceGroupName, String name);

    /**
     * Retrieve email history.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of CertificateEmail.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> retrieveCertificateEmailHistoryWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object resendCertificateEmail(String resourceGroupName, String name);

    /**
     * Resend certificate email.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> resendCertificateEmailWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object verifyDomainOwnership(String resourceGroupName, String name);

    /**
     * Verify domain ownership for this certificate order.
     *
     * @param resourceGroupName Azure resource group name.
     * @param name Certificate order name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> verifyDomainOwnershipWithResponse(String resourceGroupName, String name, Context context);
}
