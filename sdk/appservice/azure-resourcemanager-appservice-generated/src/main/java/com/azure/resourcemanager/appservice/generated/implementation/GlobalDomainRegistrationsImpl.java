// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.GlobalDomainRegistrationsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainAvailablilityCheckResultInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainControlCenterSsoRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NameIdentifierInner;
import com.azure.resourcemanager.appservice.generated.models.Domain;
import com.azure.resourcemanager.appservice.generated.models.DomainAvailablilityCheckResult;
import com.azure.resourcemanager.appservice.generated.models.DomainControlCenterSsoRequest;
import com.azure.resourcemanager.appservice.generated.models.DomainRecommendationSearchParameters;
import com.azure.resourcemanager.appservice.generated.models.DomainRegistrationInput;
import com.azure.resourcemanager.appservice.generated.models.GlobalDomainRegistrations;
import com.azure.resourcemanager.appservice.generated.models.NameIdentifier;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class GlobalDomainRegistrationsImpl implements GlobalDomainRegistrations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GlobalDomainRegistrationsImpl.class);

    private final GlobalDomainRegistrationsClient innerClient;

    private final WebSiteManager serviceManager;

    public GlobalDomainRegistrationsImpl(GlobalDomainRegistrationsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Domain> list() {
        PagedIterable<DomainInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new DomainImpl(inner1, this.manager()));
    }

    public PagedIterable<Domain> list(Context context) {
        PagedIterable<DomainInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new DomainImpl(inner1, this.manager()));
    }

    public DomainControlCenterSsoRequest getDomainControlCenterSsoRequest() {
        DomainControlCenterSsoRequestInner inner = this.serviceClient().getDomainControlCenterSsoRequest();
        if (inner != null) {
            return new DomainControlCenterSsoRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DomainControlCenterSsoRequest> getDomainControlCenterSsoRequestWithResponse(Context context) {
        Response<DomainControlCenterSsoRequestInner> inner =
            this.serviceClient().getDomainControlCenterSsoRequestWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DomainControlCenterSsoRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object validateDomainPurchaseInformation(DomainRegistrationInput domainRegistrationInput) {
        return this.serviceClient().validateDomainPurchaseInformation(domainRegistrationInput);
    }

    public Response<Object> validateDomainPurchaseInformationWithResponse(
        DomainRegistrationInput domainRegistrationInput, Context context) {
        return this.serviceClient().validateDomainPurchaseInformationWithResponse(domainRegistrationInput, context);
    }

    public DomainAvailablilityCheckResult checkDomainAvailability(NameIdentifierInner identifier) {
        DomainAvailablilityCheckResultInner inner = this.serviceClient().checkDomainAvailability(identifier);
        if (inner != null) {
            return new DomainAvailablilityCheckResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DomainAvailablilityCheckResult> checkDomainAvailabilityWithResponse(
        NameIdentifierInner identifier, Context context) {
        Response<DomainAvailablilityCheckResultInner> inner =
            this.serviceClient().checkDomainAvailabilityWithResponse(identifier, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DomainAvailablilityCheckResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<NameIdentifier> listDomainRecommendations(DomainRecommendationSearchParameters parameters) {
        PagedIterable<NameIdentifierInner> inner = this.serviceClient().listDomainRecommendations(parameters);
        return inner.mapPage(inner1 -> new NameIdentifierImpl(inner1, this.manager()));
    }

    public PagedIterable<NameIdentifier> listDomainRecommendations(
        DomainRecommendationSearchParameters parameters, Context context) {
        PagedIterable<NameIdentifierInner> inner = this.serviceClient().listDomainRecommendations(parameters, context);
        return inner.mapPage(inner1 -> new NameIdentifierImpl(inner1, this.manager()));
    }

    private GlobalDomainRegistrationsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
