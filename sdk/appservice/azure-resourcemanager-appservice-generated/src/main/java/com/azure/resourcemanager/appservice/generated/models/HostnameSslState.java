// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Object that represents a SSL-enabled host name. */
@Fluent
public final class HostnameSslState {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HostnameSslState.class);

    /*
     * Host name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * SSL type
     */
    @JsonProperty(value = "sslState", required = true)
    private SslState sslState;

    /*
     * Virtual IP address assigned to the host name if IP based SSL is enabled
     */
    @JsonProperty(value = "virtualIP")
    private String virtualIp;

    /*
     * SSL cert thumbprint
     */
    @JsonProperty(value = "thumbprint")
    private String thumbprint;

    /*
     * Set this flag to update existing host name
     */
    @JsonProperty(value = "toUpdate")
    private Boolean toUpdate;

    /**
     * Get the name property: Host name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Host name.
     *
     * @param name the name value to set.
     * @return the HostnameSslState object itself.
     */
    public HostnameSslState withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the sslState property: SSL type.
     *
     * @return the sslState value.
     */
    public SslState sslState() {
        return this.sslState;
    }

    /**
     * Set the sslState property: SSL type.
     *
     * @param sslState the sslState value to set.
     * @return the HostnameSslState object itself.
     */
    public HostnameSslState withSslState(SslState sslState) {
        this.sslState = sslState;
        return this;
    }

    /**
     * Get the virtualIp property: Virtual IP address assigned to the host name if IP based SSL is enabled.
     *
     * @return the virtualIp value.
     */
    public String virtualIp() {
        return this.virtualIp;
    }

    /**
     * Set the virtualIp property: Virtual IP address assigned to the host name if IP based SSL is enabled.
     *
     * @param virtualIp the virtualIp value to set.
     * @return the HostnameSslState object itself.
     */
    public HostnameSslState withVirtualIp(String virtualIp) {
        this.virtualIp = virtualIp;
        return this;
    }

    /**
     * Get the thumbprint property: SSL cert thumbprint.
     *
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: SSL cert thumbprint.
     *
     * @param thumbprint the thumbprint value to set.
     * @return the HostnameSslState object itself.
     */
    public HostnameSslState withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the toUpdate property: Set this flag to update existing host name.
     *
     * @return the toUpdate value.
     */
    public Boolean toUpdate() {
        return this.toUpdate;
    }

    /**
     * Set the toUpdate property: Set this flag to update existing host name.
     *
     * @param toUpdate the toUpdate value to set.
     * @return the HostnameSslState object itself.
     */
    public HostnameSslState withToUpdate(Boolean toUpdate) {
        this.toUpdate = toUpdate;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sslState() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property sslState in model HostnameSslState"));
        }
    }
}
