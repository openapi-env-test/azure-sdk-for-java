// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.Contact;
import com.azure.resourcemanager.appservice.generated.models.DomainPropertiesDomainNotRenewableReasonsItem;
import com.azure.resourcemanager.appservice.generated.models.DomainPurchaseConsent;
import com.azure.resourcemanager.appservice.generated.models.DomainStatus;
import com.azure.resourcemanager.appservice.generated.models.Hostname;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Represents a domain. */
@JsonFlatten
@Fluent
public class DomainInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DomainInner.class);

    /*
     * Admin contact information
     */
    @JsonProperty(value = "properties.contactAdmin")
    private Contact contactAdmin;

    /*
     * Billing contact information
     */
    @JsonProperty(value = "properties.contactBilling")
    private Contact contactBilling;

    /*
     * Registrant contact information
     */
    @JsonProperty(value = "properties.contactRegistrant")
    private Contact contactRegistrant;

    /*
     * Technical contact information
     */
    @JsonProperty(value = "properties.contactTech")
    private Contact contactTech;

    /*
     * Domain registration status
     */
    @JsonProperty(value = "properties.registrationStatus")
    private DomainStatus registrationStatus;

    /*
     * Domain provisioning state
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningState provisioningState;

    /*
     * Name servers
     */
    @JsonProperty(value = "properties.nameServers")
    private List<String> nameServers;

    /*
     * If true then domain privacy is enabled for this domain
     */
    @JsonProperty(value = "properties.privacy")
    private Boolean privacy;

    /*
     * Domain creation timestamp
     */
    @JsonProperty(value = "properties.createdTime")
    private OffsetDateTime createdTime;

    /*
     * Domain expiration timestamp
     */
    @JsonProperty(value = "properties.expirationTime")
    private OffsetDateTime expirationTime;

    /*
     * Timestamp when the domain was renewed last time
     */
    @JsonProperty(value = "properties.lastRenewedTime")
    private OffsetDateTime lastRenewedTime;

    /*
     * If true then domain will renewed automatically
     */
    @JsonProperty(value = "properties.autoRenew")
    private Boolean autoRenew;

    /*
     * If true then Azure can assign this domain to Web Apps. This value will
     * be true if domain registration status is active and it is hosted on name
     * servers Azure has programmatic access to
     */
    @JsonProperty(value = "properties.readyForDnsRecordManagement")
    private Boolean readyForDnsRecordManagement;

    /*
     * All hostnames derived from the domain and assigned to Azure resources
     */
    @JsonProperty(value = "properties.managedHostNames")
    private List<Hostname> managedHostNames;

    /*
     * Legal agreement consent
     */
    @JsonProperty(value = "properties.consent")
    private DomainPurchaseConsent consent;

    /*
     * Reasons why domain is not renewable
     */
    @JsonProperty(value = "properties.domainNotRenewableReasons")
    private List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the contactAdmin property: Admin contact information.
     *
     * @return the contactAdmin value.
     */
    public Contact contactAdmin() {
        return this.contactAdmin;
    }

    /**
     * Set the contactAdmin property: Admin contact information.
     *
     * @param contactAdmin the contactAdmin value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withContactAdmin(Contact contactAdmin) {
        this.contactAdmin = contactAdmin;
        return this;
    }

    /**
     * Get the contactBilling property: Billing contact information.
     *
     * @return the contactBilling value.
     */
    public Contact contactBilling() {
        return this.contactBilling;
    }

    /**
     * Set the contactBilling property: Billing contact information.
     *
     * @param contactBilling the contactBilling value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withContactBilling(Contact contactBilling) {
        this.contactBilling = contactBilling;
        return this;
    }

    /**
     * Get the contactRegistrant property: Registrant contact information.
     *
     * @return the contactRegistrant value.
     */
    public Contact contactRegistrant() {
        return this.contactRegistrant;
    }

    /**
     * Set the contactRegistrant property: Registrant contact information.
     *
     * @param contactRegistrant the contactRegistrant value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withContactRegistrant(Contact contactRegistrant) {
        this.contactRegistrant = contactRegistrant;
        return this;
    }

    /**
     * Get the contactTech property: Technical contact information.
     *
     * @return the contactTech value.
     */
    public Contact contactTech() {
        return this.contactTech;
    }

    /**
     * Set the contactTech property: Technical contact information.
     *
     * @param contactTech the contactTech value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withContactTech(Contact contactTech) {
        this.contactTech = contactTech;
        return this;
    }

    /**
     * Get the registrationStatus property: Domain registration status.
     *
     * @return the registrationStatus value.
     */
    public DomainStatus registrationStatus() {
        return this.registrationStatus;
    }

    /**
     * Set the registrationStatus property: Domain registration status.
     *
     * @param registrationStatus the registrationStatus value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withRegistrationStatus(DomainStatus registrationStatus) {
        this.registrationStatus = registrationStatus;
        return this;
    }

    /**
     * Get the provisioningState property: Domain provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Domain provisioning state.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the nameServers property: Name servers.
     *
     * @return the nameServers value.
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    /**
     * Set the nameServers property: Name servers.
     *
     * @param nameServers the nameServers value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withNameServers(List<String> nameServers) {
        this.nameServers = nameServers;
        return this;
    }

    /**
     * Get the privacy property: If true then domain privacy is enabled for this domain.
     *
     * @return the privacy value.
     */
    public Boolean privacy() {
        return this.privacy;
    }

    /**
     * Set the privacy property: If true then domain privacy is enabled for this domain.
     *
     * @param privacy the privacy value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withPrivacy(Boolean privacy) {
        this.privacy = privacy;
        return this;
    }

    /**
     * Get the createdTime property: Domain creation timestamp.
     *
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Set the createdTime property: Domain creation timestamp.
     *
     * @param createdTime the createdTime value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }

    /**
     * Get the expirationTime property: Domain expiration timestamp.
     *
     * @return the expirationTime value.
     */
    public OffsetDateTime expirationTime() {
        return this.expirationTime;
    }

    /**
     * Set the expirationTime property: Domain expiration timestamp.
     *
     * @param expirationTime the expirationTime value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }

    /**
     * Get the lastRenewedTime property: Timestamp when the domain was renewed last time.
     *
     * @return the lastRenewedTime value.
     */
    public OffsetDateTime lastRenewedTime() {
        return this.lastRenewedTime;
    }

    /**
     * Set the lastRenewedTime property: Timestamp when the domain was renewed last time.
     *
     * @param lastRenewedTime the lastRenewedTime value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withLastRenewedTime(OffsetDateTime lastRenewedTime) {
        this.lastRenewedTime = lastRenewedTime;
        return this;
    }

    /**
     * Get the autoRenew property: If true then domain will renewed automatically.
     *
     * @return the autoRenew value.
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }

    /**
     * Set the autoRenew property: If true then domain will renewed automatically.
     *
     * @param autoRenew the autoRenew value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }

    /**
     * Get the readyForDnsRecordManagement property: If true then Azure can assign this domain to Web Apps. This value
     * will be true if domain registration status is active and it is hosted on name servers Azure has programmatic
     * access to.
     *
     * @return the readyForDnsRecordManagement value.
     */
    public Boolean readyForDnsRecordManagement() {
        return this.readyForDnsRecordManagement;
    }

    /**
     * Set the readyForDnsRecordManagement property: If true then Azure can assign this domain to Web Apps. This value
     * will be true if domain registration status is active and it is hosted on name servers Azure has programmatic
     * access to.
     *
     * @param readyForDnsRecordManagement the readyForDnsRecordManagement value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withReadyForDnsRecordManagement(Boolean readyForDnsRecordManagement) {
        this.readyForDnsRecordManagement = readyForDnsRecordManagement;
        return this;
    }

    /**
     * Get the managedHostNames property: All hostnames derived from the domain and assigned to Azure resources.
     *
     * @return the managedHostNames value.
     */
    public List<Hostname> managedHostNames() {
        return this.managedHostNames;
    }

    /**
     * Set the managedHostNames property: All hostnames derived from the domain and assigned to Azure resources.
     *
     * @param managedHostNames the managedHostNames value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withManagedHostNames(List<Hostname> managedHostNames) {
        this.managedHostNames = managedHostNames;
        return this;
    }

    /**
     * Get the consent property: Legal agreement consent.
     *
     * @return the consent value.
     */
    public DomainPurchaseConsent consent() {
        return this.consent;
    }

    /**
     * Set the consent property: Legal agreement consent.
     *
     * @param consent the consent value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withConsent(DomainPurchaseConsent consent) {
        this.consent = consent;
        return this;
    }

    /**
     * Get the domainNotRenewableReasons property: Reasons why domain is not renewable.
     *
     * @return the domainNotRenewableReasons value.
     */
    public List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons() {
        return this.domainNotRenewableReasons;
    }

    /**
     * Set the domainNotRenewableReasons property: Reasons why domain is not renewable.
     *
     * @param domainNotRenewableReasons the domainNotRenewableReasons value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withDomainNotRenewableReasons(
        List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons) {
        this.domainNotRenewableReasons = domainNotRenewableReasons;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the DomainInner object itself.
     */
    public DomainInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DomainInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DomainInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contactAdmin() != null) {
            contactAdmin().validate();
        }
        if (contactBilling() != null) {
            contactBilling().validate();
        }
        if (contactRegistrant() != null) {
            contactRegistrant().validate();
        }
        if (contactTech() != null) {
            contactTech().validate();
        }
        if (managedHostNames() != null) {
            managedHostNames().forEach(e -> e.validate());
        }
        if (consent() != null) {
            consent().validate();
        }
    }
}
