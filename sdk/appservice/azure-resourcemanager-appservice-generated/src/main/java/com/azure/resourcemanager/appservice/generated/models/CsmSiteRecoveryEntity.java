// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Class containing details about site recovery operation. */
@Fluent
public final class CsmSiteRecoveryEntity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CsmSiteRecoveryEntity.class);

    /*
     * Point in time in which the site recover should be attempted.
     */
    @JsonProperty(value = "snapshotTime")
    private OffsetDateTime snapshotTime;

    /*
     * If true, then the website's configuration will be reverted to its state
     * at SnapshotTime
     */
    @JsonProperty(value = "recoverConfig")
    private Boolean recoverConfig;

    /*
     * [Optional] Destination web app name into which web app should be
     * recovered. This is case when new web app should be created instead.
     */
    @JsonProperty(value = "siteName")
    private String siteName;

    /*
     * [Optional] Destination web app slot name into which web app should be
     * recovered
     */
    @JsonProperty(value = "slotName")
    private String slotName;

    /**
     * Get the snapshotTime property: Point in time in which the site recover should be attempted.
     *
     * @return the snapshotTime value.
     */
    public OffsetDateTime snapshotTime() {
        return this.snapshotTime;
    }

    /**
     * Set the snapshotTime property: Point in time in which the site recover should be attempted.
     *
     * @param snapshotTime the snapshotTime value to set.
     * @return the CsmSiteRecoveryEntity object itself.
     */
    public CsmSiteRecoveryEntity withSnapshotTime(OffsetDateTime snapshotTime) {
        this.snapshotTime = snapshotTime;
        return this;
    }

    /**
     * Get the recoverConfig property: If true, then the website's configuration will be reverted to its state at
     * SnapshotTime.
     *
     * @return the recoverConfig value.
     */
    public Boolean recoverConfig() {
        return this.recoverConfig;
    }

    /**
     * Set the recoverConfig property: If true, then the website's configuration will be reverted to its state at
     * SnapshotTime.
     *
     * @param recoverConfig the recoverConfig value to set.
     * @return the CsmSiteRecoveryEntity object itself.
     */
    public CsmSiteRecoveryEntity withRecoverConfig(Boolean recoverConfig) {
        this.recoverConfig = recoverConfig;
        return this;
    }

    /**
     * Get the siteName property: [Optional] Destination web app name into which web app should be recovered. This is
     * case when new web app should be created instead.
     *
     * @return the siteName value.
     */
    public String siteName() {
        return this.siteName;
    }

    /**
     * Set the siteName property: [Optional] Destination web app name into which web app should be recovered. This is
     * case when new web app should be created instead.
     *
     * @param siteName the siteName value to set.
     * @return the CsmSiteRecoveryEntity object itself.
     */
    public CsmSiteRecoveryEntity withSiteName(String siteName) {
        this.siteName = siteName;
        return this;
    }

    /**
     * Get the slotName property: [Optional] Destination web app slot name into which web app should be recovered.
     *
     * @return the slotName value.
     */
    public String slotName() {
        return this.slotName;
    }

    /**
     * Set the slotName property: [Optional] Destination web app slot name into which web app should be recovered.
     *
     * @param slotName the slotName value to set.
     * @return the CsmSiteRecoveryEntity object itself.
     */
    public CsmSiteRecoveryEntity withSlotName(String slotName) {
        this.slotName = slotName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
