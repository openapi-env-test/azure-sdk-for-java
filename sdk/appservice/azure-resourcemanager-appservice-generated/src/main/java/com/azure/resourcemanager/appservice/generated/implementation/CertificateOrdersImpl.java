// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.CertificateOrdersClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderCertificateInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderInner;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrder;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrderCertificate;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrders;
import com.azure.resourcemanager.appservice.generated.models.ReissueCertificateOrderRequest;
import com.azure.resourcemanager.appservice.generated.models.RenewCertificateOrderRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CertificateOrdersImpl implements CertificateOrders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CertificateOrdersImpl.class);

    private final CertificateOrdersClient innerClient;

    private final WebSiteManager serviceManager;

    public CertificateOrdersImpl(CertificateOrdersClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CertificateOrderCertificate getCertificate(
        String resourceGroupName, String certificateOrderName, String name) {
        CertificateOrderCertificateInner inner =
            this.serviceClient().getCertificate(resourceGroupName, certificateOrderName, name);
        if (inner != null) {
            return new CertificateOrderCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateOrderCertificate> getCertificateWithResponse(
        String resourceGroupName, String certificateOrderName, String name, Context context) {
        Response<CertificateOrderCertificateInner> inner =
            this.serviceClient().getCertificateWithResponse(resourceGroupName, certificateOrderName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateOrderCertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteCertificate(String resourceGroupName, String certificateOrderName, String name) {
        return this.serviceClient().deleteCertificate(resourceGroupName, certificateOrderName, name);
    }

    public Response<Object> deleteCertificateWithResponse(
        String resourceGroupName, String certificateOrderName, String name, Context context) {
        return this
            .serviceClient()
            .deleteCertificateWithResponse(resourceGroupName, certificateOrderName, name, context);
    }

    public CertificateOrder getByResourceGroup(String resourceGroupName, String name) {
        CertificateOrderInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new CertificateOrderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateOrder> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<CertificateOrderInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateOrderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteByResourceGroup(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Object> deleteWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, context);
    }

    public PagedIterable<CertificateOrder> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CertificateOrderInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new CertificateOrderImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateOrder> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CertificateOrderInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new CertificateOrderImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateOrderCertificate> getCertificates(
        String resourceGroupName, String certificateOrderName) {
        PagedIterable<CertificateOrderCertificateInner> inner =
            this.serviceClient().getCertificates(resourceGroupName, certificateOrderName);
        return inner.mapPage(inner1 -> new CertificateOrderCertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateOrderCertificate> getCertificates(
        String resourceGroupName, String certificateOrderName, Context context) {
        PagedIterable<CertificateOrderCertificateInner> inner =
            this.serviceClient().getCertificates(resourceGroupName, certificateOrderName, context);
        return inner.mapPage(inner1 -> new CertificateOrderCertificateImpl(inner1, this.manager()));
    }

    public Object reissueCertificateOrder(
        String resourceGroupName, String name, ReissueCertificateOrderRequest reissueCertificateOrderRequest) {
        return this.serviceClient().reissueCertificateOrder(resourceGroupName, name, reissueCertificateOrderRequest);
    }

    public Response<Object> reissueCertificateOrderWithResponse(
        String resourceGroupName,
        String name,
        ReissueCertificateOrderRequest reissueCertificateOrderRequest,
        Context context) {
        return this
            .serviceClient()
            .reissueCertificateOrderWithResponse(resourceGroupName, name, reissueCertificateOrderRequest, context);
    }

    public Object renewCertificateOrder(
        String resourceGroupName, String name, RenewCertificateOrderRequest renewCertificateOrderRequest) {
        return this.serviceClient().renewCertificateOrder(resourceGroupName, name, renewCertificateOrderRequest);
    }

    public Response<Object> renewCertificateOrderWithResponse(
        String resourceGroupName,
        String name,
        RenewCertificateOrderRequest renewCertificateOrderRequest,
        Context context) {
        return this
            .serviceClient()
            .renewCertificateOrderWithResponse(resourceGroupName, name, renewCertificateOrderRequest, context);
    }

    public Object retrieveCertificateActions(String resourceGroupName, String name) {
        return this.serviceClient().retrieveCertificateActions(resourceGroupName, name);
    }

    public Response<Object> retrieveCertificateActionsWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().retrieveCertificateActionsWithResponse(resourceGroupName, name, context);
    }

    public Object retrieveCertificateEmailHistory(String resourceGroupName, String name) {
        return this.serviceClient().retrieveCertificateEmailHistory(resourceGroupName, name);
    }

    public Response<Object> retrieveCertificateEmailHistoryWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().retrieveCertificateEmailHistoryWithResponse(resourceGroupName, name, context);
    }

    public Object resendCertificateEmail(String resourceGroupName, String name) {
        return this.serviceClient().resendCertificateEmail(resourceGroupName, name);
    }

    public Response<Object> resendCertificateEmailWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().resendCertificateEmailWithResponse(resourceGroupName, name, context);
    }

    public Object verifyDomainOwnership(String resourceGroupName, String name) {
        return this.serviceClient().verifyDomainOwnership(resourceGroupName, name);
    }

    public Response<Object> verifyDomainOwnershipWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().verifyDomainOwnershipWithResponse(resourceGroupName, name, context);
    }

    public CertificateOrder getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificateOrders");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<CertificateOrder> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificateOrders");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public CertificateOrderCertificate getCertificateById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String certificateOrderName = Utils.getValueFromIdByName(id, "certificateOrders");
        if (certificateOrderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificates");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this.getCertificateWithResponse(resourceGroupName, certificateOrderName, name, Context.NONE).getValue();
    }

    public Response<CertificateOrderCertificate> getCertificateByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String certificateOrderName = Utils.getValueFromIdByName(id, "certificateOrders");
        if (certificateOrderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificates");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this.getCertificateWithResponse(resourceGroupName, certificateOrderName, name, context);
    }

    public Object deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificateOrders");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<Object> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificateOrders");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, context);
    }

    public Object deleteCertificateById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String certificateOrderName = Utils.getValueFromIdByName(id, "certificateOrders");
        if (certificateOrderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificates");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this
            .deleteCertificateWithResponse(resourceGroupName, certificateOrderName, name, Context.NONE)
            .getValue();
    }

    public Response<Object> deleteCertificateByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String certificateOrderName = Utils.getValueFromIdByName(id, "certificateOrders");
        if (certificateOrderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'certificateOrders'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "certificates");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this.deleteCertificateWithResponse(resourceGroupName, certificateOrderName, name, context);
    }

    private CertificateOrdersClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    public CertificateOrderImpl defineCertificateOrder(String name) {
        return new CertificateOrderImpl(name, this.manager());
    }

    public CertificateOrderCertificateImpl defineCertificate(String name) {
        return new CertificateOrderCertificateImpl(name, this.manager());
    }
}
