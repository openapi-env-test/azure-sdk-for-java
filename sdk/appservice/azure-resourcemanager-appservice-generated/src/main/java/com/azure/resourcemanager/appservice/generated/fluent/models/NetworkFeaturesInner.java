// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * This is an object used to store a full view of network features (presently VNET integration and Hybrid Connections)
 * for a web app.
 */
@JsonFlatten
@Fluent
public class NetworkFeaturesInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetworkFeaturesInner.class);

    /*
     * The Vnet Name
     */
    @JsonProperty(value = "properties.virtualNetworkName")
    private String virtualNetworkName;

    /*
     * The Vnet Summary view
     */
    @JsonProperty(value = "properties.virtualNetworkConnection")
    private VnetInfoInner virtualNetworkConnection;

    /*
     * The Hybrid Connections Summary view
     */
    @JsonProperty(value = "properties.hybridConnections")
    private List<RelayServiceConnectionEntityInner> hybridConnections;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the virtualNetworkName property: The Vnet Name.
     *
     * @return the virtualNetworkName value.
     */
    public String virtualNetworkName() {
        return this.virtualNetworkName;
    }

    /**
     * Set the virtualNetworkName property: The Vnet Name.
     *
     * @param virtualNetworkName the virtualNetworkName value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withVirtualNetworkName(String virtualNetworkName) {
        this.virtualNetworkName = virtualNetworkName;
        return this;
    }

    /**
     * Get the virtualNetworkConnection property: The Vnet Summary view.
     *
     * @return the virtualNetworkConnection value.
     */
    public VnetInfoInner virtualNetworkConnection() {
        return this.virtualNetworkConnection;
    }

    /**
     * Set the virtualNetworkConnection property: The Vnet Summary view.
     *
     * @param virtualNetworkConnection the virtualNetworkConnection value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withVirtualNetworkConnection(VnetInfoInner virtualNetworkConnection) {
        this.virtualNetworkConnection = virtualNetworkConnection;
        return this;
    }

    /**
     * Get the hybridConnections property: The Hybrid Connections Summary view.
     *
     * @return the hybridConnections value.
     */
    public List<RelayServiceConnectionEntityInner> hybridConnections() {
        return this.hybridConnections;
    }

    /**
     * Set the hybridConnections property: The Hybrid Connections Summary view.
     *
     * @param hybridConnections the hybridConnections value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withHybridConnections(List<RelayServiceConnectionEntityInner> hybridConnections) {
        this.hybridConnections = hybridConnections;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the NetworkFeaturesInner object itself.
     */
    public NetworkFeaturesInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFeaturesInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFeaturesInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualNetworkConnection() != null) {
            virtualNetworkConnection().validate();
        }
        if (hybridConnections() != null) {
            hybridConnections().forEach(e -> e.validate());
        }
    }
}
