// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** connection provider parameters. */
@Fluent
public final class ConnectionParameter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectionParameter.class);

    /*
     * Type of the parameter
     */
    @JsonProperty(value = "type")
    private ConnectionParameterType type;

    /*
     * Default parameter value
     */
    @JsonProperty(value = "defaultValue")
    private Object defaultValue;

    /*
     * Settings defining OAuth flow for the back end provider
     */
    @JsonProperty(value = "oAuthSettings")
    private ApiOAuthSettings oAuthSettings;

    /*
     * UI definitions
     */
    @JsonProperty(value = "uiDefinition")
    private Object uiDefinition;

    /**
     * Get the type property: Type of the parameter.
     *
     * @return the type value.
     */
    public ConnectionParameterType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the parameter.
     *
     * @param type the type value to set.
     * @return the ConnectionParameter object itself.
     */
    public ConnectionParameter withType(ConnectionParameterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the defaultValue property: Default parameter value.
     *
     * @return the defaultValue value.
     */
    public Object defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: Default parameter value.
     *
     * @param defaultValue the defaultValue value to set.
     * @return the ConnectionParameter object itself.
     */
    public ConnectionParameter withDefaultValue(Object defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the oAuthSettings property: Settings defining OAuth flow for the back end provider.
     *
     * @return the oAuthSettings value.
     */
    public ApiOAuthSettings oAuthSettings() {
        return this.oAuthSettings;
    }

    /**
     * Set the oAuthSettings property: Settings defining OAuth flow for the back end provider.
     *
     * @param oAuthSettings the oAuthSettings value to set.
     * @return the ConnectionParameter object itself.
     */
    public ConnectionParameter withOAuthSettings(ApiOAuthSettings oAuthSettings) {
        this.oAuthSettings = oAuthSettings;
        return this;
    }

    /**
     * Get the uiDefinition property: UI definitions.
     *
     * @return the uiDefinition value.
     */
    public Object uiDefinition() {
        return this.uiDefinition;
    }

    /**
     * Set the uiDefinition property: UI definitions.
     *
     * @param uiDefinition the uiDefinition value to set.
     * @return the ConnectionParameter object itself.
     */
    public ConnectionParameter withUiDefinition(Object uiDefinition) {
        this.uiDefinition = uiDefinition;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (oAuthSettings() != null) {
            oAuthSettings().validate();
        }
    }
}
