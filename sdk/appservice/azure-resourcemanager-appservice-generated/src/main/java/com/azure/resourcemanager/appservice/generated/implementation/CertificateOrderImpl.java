// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderCertificateInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderInner;
import com.azure.resourcemanager.appservice.generated.models.CertificateDetails;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrder;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrderCertificate;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrderStatus;
import com.azure.resourcemanager.appservice.generated.models.CertificateProductType;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;

public final class CertificateOrderImpl
    implements CertificateOrder, CertificateOrder.Definition, CertificateOrder.Update {
    private CertificateOrderInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Map<String, CertificateOrderCertificate> certificates() {
        Map<String, CertificateOrderCertificateInner> inner = this.innerModel().certificates();
        if (inner != null) {
            return Collections
                .unmodifiableMap(
                    inner
                        .entrySet()
                        .stream()
                        .collect(
                            Collectors
                                .toMap(
                                    Map.Entry::getKey,
                                    inner1 -> new CertificateOrderCertificateImpl(inner1.getValue(), this.manager()))));
        } else {
            return Collections.emptyMap();
        }
    }

    public String distinguishedName() {
        return this.innerModel().distinguishedName();
    }

    public String domainVerificationToken() {
        return this.innerModel().domainVerificationToken();
    }

    public Integer validityInYears() {
        return this.innerModel().validityInYears();
    }

    public Integer keySize() {
        return this.innerModel().keySize();
    }

    public CertificateProductType productType() {
        return this.innerModel().productType();
    }

    public Boolean autoRenew() {
        return this.innerModel().autoRenew();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public CertificateOrderStatus status() {
        return this.innerModel().status();
    }

    public CertificateDetails signedCertificate() {
        return this.innerModel().signedCertificate();
    }

    public String csr() {
        return this.innerModel().csr();
    }

    public CertificateDetails intermediate() {
        return this.innerModel().intermediate();
    }

    public CertificateDetails root() {
        return this.innerModel().root();
    }

    public String serialNumber() {
        return this.innerModel().serialNumber();
    }

    public OffsetDateTime lastCertificateIssuanceTime() {
        return this.innerModel().lastCertificateIssuanceTime();
    }

    public OffsetDateTime expirationTime() {
        return this.innerModel().expirationTime();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public CertificateOrderInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    public CertificateOrderImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CertificateOrder create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .createOrUpdateCertificateOrderWithResponse(resourceGroupName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public CertificateOrder create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .createOrUpdateCertificateOrderWithResponse(resourceGroupName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    CertificateOrderImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new CertificateOrderInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public CertificateOrderImpl update() {
        return this;
    }

    public CertificateOrder apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .updateCertificateOrderWithResponse(resourceGroupName, name, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public CertificateOrder apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .updateCertificateOrderWithResponse(resourceGroupName, name, this.innerModel(), context)
                .getValue();
        return this;
    }

    CertificateOrderImpl(CertificateOrderInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "certificateOrders");
    }

    public CertificateOrder refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public CertificateOrder refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificateOrders()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public CertificateOrderImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CertificateOrderImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CertificateOrderImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public CertificateOrderImpl withCertificates(Map<String, CertificateOrderCertificateInner> certificates) {
        this.innerModel().withCertificates(certificates);
        return this;
    }

    public CertificateOrderImpl withDistinguishedName(String distinguishedName) {
        this.innerModel().withDistinguishedName(distinguishedName);
        return this;
    }

    public CertificateOrderImpl withDomainVerificationToken(String domainVerificationToken) {
        this.innerModel().withDomainVerificationToken(domainVerificationToken);
        return this;
    }

    public CertificateOrderImpl withValidityInYears(Integer validityInYears) {
        this.innerModel().withValidityInYears(validityInYears);
        return this;
    }

    public CertificateOrderImpl withKeySize(Integer keySize) {
        this.innerModel().withKeySize(keySize);
        return this;
    }

    public CertificateOrderImpl withProductType(CertificateProductType productType) {
        this.innerModel().withProductType(productType);
        return this;
    }

    public CertificateOrderImpl withAutoRenew(Boolean autoRenew) {
        this.innerModel().withAutoRenew(autoRenew);
        return this;
    }

    public CertificateOrderImpl withProvisioningState(ProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public CertificateOrderImpl withStatus(CertificateOrderStatus status) {
        this.innerModel().withStatus(status);
        return this;
    }

    public CertificateOrderImpl withSignedCertificate(CertificateDetails signedCertificate) {
        this.innerModel().withSignedCertificate(signedCertificate);
        return this;
    }

    public CertificateOrderImpl withCsr(String csr) {
        this.innerModel().withCsr(csr);
        return this;
    }

    public CertificateOrderImpl withIntermediate(CertificateDetails intermediate) {
        this.innerModel().withIntermediate(intermediate);
        return this;
    }

    public CertificateOrderImpl withRoot(CertificateDetails root) {
        this.innerModel().withRoot(root);
        return this;
    }

    public CertificateOrderImpl withSerialNumber(String serialNumber) {
        this.innerModel().withSerialNumber(serialNumber);
        return this;
    }

    public CertificateOrderImpl withLastCertificateIssuanceTime(OffsetDateTime lastCertificateIssuanceTime) {
        this.innerModel().withLastCertificateIssuanceTime(lastCertificateIssuanceTime);
        return this;
    }

    public CertificateOrderImpl withExpirationTime(OffsetDateTime expirationTime) {
        this.innerModel().withExpirationTime(expirationTime);
        return this;
    }

    public CertificateOrderImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public CertificateOrderImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public CertificateOrderImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }
}
