// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetRouteInner;

/** An instance of this class provides access to all the operations defined in ServerFarmsClient. */
public interface ServerFarmsClient {
    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of App Service Plans in a resource group for a given subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of App Service Plans in a resource group for a given subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ServerFarmWithRichSkuInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets specified App Service Plan in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified App Service Plan in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerFarmWithRichSkuInner getByResourceGroup(String resourceGroupName, String name);

    /**
     * Gets specified App Service Plan in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified App Service Plan in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ServerFarmWithRichSkuInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Creates or updates an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param serverFarmEnvelope Details of App Service Plan.
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return app Service Plan Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ServerFarmWithRichSkuInner>, ServerFarmWithRichSkuInner> beginCreateOrUpdateServerFarm(
        String resourceGroupName,
        String name,
        ServerFarmWithRichSkuInner serverFarmEnvelope,
        Boolean allowPendingState);

    /**
     * Creates or updates an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param serverFarmEnvelope Details of App Service Plan.
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return app Service Plan Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ServerFarmWithRichSkuInner>, ServerFarmWithRichSkuInner> beginCreateOrUpdateServerFarm(
        String resourceGroupName,
        String name,
        ServerFarmWithRichSkuInner serverFarmEnvelope,
        Boolean allowPendingState,
        Context context);

    /**
     * Creates or updates an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param serverFarmEnvelope Details of App Service Plan.
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return app Service Plan Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerFarmWithRichSkuInner createOrUpdateServerFarm(
        String resourceGroupName,
        String name,
        ServerFarmWithRichSkuInner serverFarmEnvelope,
        Boolean allowPendingState);

    /**
     * Creates or updates an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param serverFarmEnvelope Details of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return app Service Plan Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerFarmWithRichSkuInner createOrUpdateServerFarm(
        String resourceGroupName, String name, ServerFarmWithRichSkuInner serverFarmEnvelope);

    /**
     * Creates or updates an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param serverFarmEnvelope Details of App Service Plan.
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return app Service Plan Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerFarmWithRichSkuInner createOrUpdateServerFarm(
        String resourceGroupName,
        String name,
        ServerFarmWithRichSkuInner serverFarmEnvelope,
        Boolean allowPendingState,
        Context context);

    /**
     * Deletes a App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object delete(String resourceGroupName, String name);

    /**
     * Deletes a App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> deleteWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Queries for App Service Plan metrics.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ResourceMetricInner> getServerFarmMetrics(String resourceGroupName, String name);

    /**
     * Queries for App Service Plan metrics.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param details If true, metrics are broken down per App Service Plan instance.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ResourceMetricInner> getServerFarmMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context);

    /**
     * List of metrics that can be queried for an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MetricDefinitionInner> getServerFarmMetricDefintions(String resourceGroupName, String name);

    /**
     * List of metrics that can be queried for an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MetricDefinitionInner> getServerFarmMetricDefintions(
        String resourceGroupName, String name, Context context);

    /**
     * Gets list of VNets associated with App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of VNets associated with App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object getVnetsForServerFarm(String resourceGroupName, String name);

    /**
     * Gets list of VNets associated with App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of VNets associated with App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> getVnetsForServerFarmWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Gets a vnet associated with an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vnet associated with an App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VnetInfoInner getVnetFromServerFarm(String resourceGroupName, String name, String vnetName);

    /**
     * Gets a vnet associated with an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vnet associated with an App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VnetInfoInner> getVnetFromServerFarmWithResponse(
        String resourceGroupName, String name, String vnetName, Context context);

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all routes associated with a vnet, in an app service plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object getRoutesForVnet(String resourceGroupName, String name, String vnetName);

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all routes associated with a vnet, in an app service plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> getRoutesForVnetWithResponse(
        String resourceGroupName, String name, String vnetName, Context context);

    /**
     * Gets a specific route associated with a vnet, in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific route associated with a vnet, in an app service plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object getRouteForVnet(String resourceGroupName, String name, String vnetName, String routeName);

    /**
     * Gets a specific route associated with a vnet, in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific route associated with a vnet, in an app service plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> getRouteForVnetWithResponse(
        String resourceGroupName, String name, String vnetName, String routeName, Context context);

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param route The route object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vnetRoute contract used to pass routing information for a vnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VnetRouteInner createOrUpdateVnetRoute(
        String resourceGroupName, String name, String vnetName, String routeName, VnetRouteInner route);

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param route The route object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vnetRoute contract used to pass routing information for a vnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VnetRouteInner> createOrUpdateVnetRouteWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String routeName,
        VnetRouteInner route,
        Context context);

    /**
     * Deletes an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object deleteVnetRoute(String resourceGroupName, String name, String vnetName, String routeName);

    /**
     * Deletes an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> deleteVnetRouteWithResponse(
        String resourceGroupName, String name, String vnetName, String routeName, Context context);

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param route The route object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vnetRoute contract used to pass routing information for a vnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VnetRouteInner updateVnetRoute(
        String resourceGroupName, String name, String vnetName, String routeName, VnetRouteInner route);

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param vnetName Name of virtual network.
     * @param routeName Name of the virtual network route.
     * @param route The route object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vnetRoute contract used to pass routing information for a vnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VnetRouteInner> updateVnetRouteWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String routeName,
        VnetRouteInner route,
        Context context);

    /**
     * Gets the vnet gateway.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of the App Service Plan.
     * @param vnetName Name of the virtual network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the vnet gateway.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VnetGatewayInner getServerFarmVnetGateway(
        String resourceGroupName, String name, String vnetName, String gatewayName);

    /**
     * Gets the vnet gateway.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of the App Service Plan.
     * @param vnetName Name of the virtual network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the vnet gateway.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VnetGatewayInner> getServerFarmVnetGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context);

    /**
     * Updates the vnet gateway.
     *
     * @param resourceGroupName The resource group.
     * @param name The name of the App Service Plan.
     * @param vnetName The name of the virtual network.
     * @param gatewayName The name of the gateway. Only 'primary' is supported.
     * @param connectionEnvelope The gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VnetGatewayInner updateServerFarmVnetGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope);

    /**
     * Updates the vnet gateway.
     *
     * @param resourceGroupName The resource group.
     * @param name The name of the App Service Plan.
     * @param vnetName The name of the virtual network.
     * @param gatewayName The name of the gateway. Only 'primary' is supported.
     * @param connectionEnvelope The gateway entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VnetGatewayInner> updateServerFarmVnetGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context);

    /**
     * Gets list of Apps associated with an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Apps associated with an App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteInner> getServerFarmSites(String resourceGroupName, String name);

    /**
     * Gets list of Apps associated with an App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param skipToken Skip to of web apps in a list. If specified, the resulting list will contain web apps starting
     *     from (including) the skipToken. Else, the resulting list contains web apps from the start of the list.
     * @param filter Supported filter: $filter=state eq running. Returns only web apps that are currently running.
     * @param top List page size. If specified, results are paged.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Apps associated with an App Service Plan.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SiteInner> getServerFarmSites(
        String resourceGroupName, String name, String skipToken, String filter, String top, Context context);

    /**
     * Submit a reboot request for a worker machine in the specified server farm.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of server farm.
     * @param workerName Name of worker machine, typically starts with RD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object rebootWorkerForServerFarm(String resourceGroupName, String name, String workerName);

    /**
     * Submit a reboot request for a worker machine in the specified server farm.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of server farm.
     * @param workerName Name of worker machine, typically starts with RD.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> rebootWorkerForServerFarmWithResponse(
        String resourceGroupName, String name, String workerName, Context context);

    /**
     * Restarts web apps in a specified App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object restartSitesForServerFarm(String resourceGroupName, String name);

    /**
     * Restarts web apps in a specified App Service Plan.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of App Service Plan.
     * @param softRestart Soft restart applies the configuration settings and restarts the apps if necessary. Hard
     *     restart always restarts and reprovisions the apps.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Object> restartSitesForServerFarmWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Context context);

    /**
     * Gets a server farm operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of server farm.
     * @param operationId Id of Server farm operation"&amp;gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server farm operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerFarmWithRichSkuInner getServerFarmOperation(String resourceGroupName, String name, String operationId);

    /**
     * Gets a server farm operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of server farm.
     * @param operationId Id of Server farm operation"&amp;gt;.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server farm operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ServerFarmWithRichSkuInner> getServerFarmOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context);
}
