// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.fluent.RecommendationsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.RecommendationRuleInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RecommendationsClient. */
public final class RecommendationsClientImpl implements RecommendationsClient {
    private final ClientLogger logger = new ClientLogger(RecommendationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final RecommendationsService service;

    /** The service client containing this operation class. */
    private final WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of RecommendationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RecommendationsClientImpl(WebSiteManagementClientImpl client) {
        this.service =
            RestProxy.create(RecommendationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WebSiteManagementClientRecommendations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementCli")
    private interface RecommendationsService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getRecommendationBySubscription(
            @HostParam("$host") String endpoint,
            @QueryParam("featured") Boolean featured,
            @QueryParam("$filter") String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites"
                + "/{siteName}/recommendations/{name}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RecommendationRuleInner>> getRuleDetailsBySiteName(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("siteName") String siteName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites"
                + "/{siteName}/recommendations")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getRecommendedRulesForSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("siteName") String siteName,
            @QueryParam("featured") Boolean featured,
            @QueryParam("siteSku") String siteSku,
            @QueryParam("numSlots") Integer numSlots,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites"
                + "/{siteName}/recommendationHistory")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getRecommendationHistoryForSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("siteName") String siteName,
            @QueryParam("startTime") String startTime,
            @QueryParam("endTime") String endTime,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=channels eq 'Api' or channel eq 'Notification'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendationBySubscriptionWithResponseAsync(Boolean featured, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getRecommendationBySubscription(
                            this.client.getEndpoint(),
                            featured,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=channels eq 'Api' or channel eq 'Notification'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendationBySubscriptionWithResponseAsync(
        Boolean featured, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getRecommendationBySubscription(
                this.client.getEndpoint(),
                featured,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=channels eq 'Api' or channel eq 'Notification'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendationBySubscriptionAsync(Boolean featured, String filter) {
        return getRecommendationBySubscriptionWithResponseAsync(featured, filter)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendationBySubscriptionAsync() {
        final Boolean featured = null;
        final String filter = null;
        return getRecommendationBySubscriptionWithResponseAsync(featured, filter)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getRecommendationBySubscription() {
        final Boolean featured = null;
        final String filter = null;
        return getRecommendationBySubscriptionAsync(featured, filter).block();
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=channels eq 'Api' or channel eq 'Notification'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getRecommendationBySubscriptionWithResponse(
        Boolean featured, String filter, Context context) {
        return getRecommendationBySubscriptionWithResponseAsync(featured, filter, context).block();
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param name Recommendation rule name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed properties of the recommendation object for the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RecommendationRuleInner>> getRuleDetailsBySiteNameWithResponseAsync(
        String resourceGroupName, String siteName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getRuleDetailsBySiteName(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            siteName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param name Recommendation rule name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed properties of the recommendation object for the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RecommendationRuleInner>> getRuleDetailsBySiteNameWithResponseAsync(
        String resourceGroupName, String siteName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getRuleDetailsBySiteName(
                this.client.getEndpoint(),
                resourceGroupName,
                siteName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param name Recommendation rule name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed properties of the recommendation object for the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecommendationRuleInner> getRuleDetailsBySiteNameAsync(
        String resourceGroupName, String siteName, String name) {
        return getRuleDetailsBySiteNameWithResponseAsync(resourceGroupName, siteName, name)
            .flatMap(
                (Response<RecommendationRuleInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param name Recommendation rule name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed properties of the recommendation object for the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecommendationRuleInner getRuleDetailsBySiteName(String resourceGroupName, String siteName, String name) {
        return getRuleDetailsBySiteNameAsync(resourceGroupName, siteName, name).block();
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param name Recommendation rule name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed properties of the recommendation object for the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RecommendationRuleInner> getRuleDetailsBySiteNameWithResponse(
        String resourceGroupName, String siteName, String name, Context context) {
        return getRuleDetailsBySiteNameWithResponseAsync(resourceGroupName, siteName, name, context).block();
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param siteSku The name of site SKU.
     * @param numSlots The number of site slots associated to the site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendedRulesForSiteWithResponseAsync(
        String resourceGroupName, String siteName, Boolean featured, String siteSku, Integer numSlots) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getRecommendedRulesForSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            siteName,
                            featured,
                            siteSku,
                            numSlots,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param siteSku The name of site SKU.
     * @param numSlots The number of site slots associated to the site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendedRulesForSiteWithResponseAsync(
        String resourceGroupName,
        String siteName,
        Boolean featured,
        String siteSku,
        Integer numSlots,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getRecommendedRulesForSite(
                this.client.getEndpoint(),
                resourceGroupName,
                siteName,
                featured,
                siteSku,
                numSlots,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param siteSku The name of site SKU.
     * @param numSlots The number of site slots associated to the site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendedRulesForSiteAsync(
        String resourceGroupName, String siteName, Boolean featured, String siteSku, Integer numSlots) {
        return getRecommendedRulesForSiteWithResponseAsync(resourceGroupName, siteName, featured, siteSku, numSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendedRulesForSiteAsync(String resourceGroupName, String siteName) {
        final Boolean featured = null;
        final String siteSku = null;
        final Integer numSlots = null;
        return getRecommendedRulesForSiteWithResponseAsync(resourceGroupName, siteName, featured, siteSku, numSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getRecommendedRulesForSite(String resourceGroupName, String siteName) {
        final Boolean featured = null;
        final String siteSku = null;
        final Integer numSlots = null;
        return getRecommendedRulesForSiteAsync(resourceGroupName, siteName, featured, siteSku, numSlots).block();
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param featured If set, this API returns only the most critical recommendation among the others. Otherwise this
     *     API returns all recommendations available.
     * @param siteSku The name of site SKU.
     * @param numSlots The number of site slots associated to the site.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of recommendations associated with the specified web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getRecommendedRulesForSiteWithResponse(
        String resourceGroupName,
        String siteName,
        Boolean featured,
        String siteSku,
        Integer numSlots,
        Context context) {
        return getRecommendedRulesForSiteWithResponseAsync(
                resourceGroupName, siteName, featured, siteSku, numSlots, context)
            .block();
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param startTime The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param endTime The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendationHistoryForSiteWithResponseAsync(
        String resourceGroupName, String siteName, String startTime, String endTime) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getRecommendationHistoryForSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            siteName,
                            startTime,
                            endTime,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param startTime The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param endTime The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getRecommendationHistoryForSiteWithResponseAsync(
        String resourceGroupName, String siteName, String startTime, String endTime, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getRecommendationHistoryForSite(
                this.client.getEndpoint(),
                resourceGroupName,
                siteName,
                startTime,
                endTime,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param startTime The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param endTime The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendationHistoryForSiteAsync(
        String resourceGroupName, String siteName, String startTime, String endTime) {
        return getRecommendationHistoryForSiteWithResponseAsync(resourceGroupName, siteName, startTime, endTime)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getRecommendationHistoryForSiteAsync(String resourceGroupName, String siteName) {
        final String startTime = null;
        final String endTime = null;
        return getRecommendationHistoryForSiteWithResponseAsync(resourceGroupName, siteName, startTime, endTime)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getRecommendationHistoryForSite(String resourceGroupName, String siteName) {
        final String startTime = null;
        final String endTime = null;
        return getRecommendationHistoryForSiteAsync(resourceGroupName, siteName, startTime, endTime).block();
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @param resourceGroupName Resource group name.
     * @param siteName Site name.
     * @param startTime The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param endTime The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and
     *     endTime eq '2015-01-02T00:00:00Z'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of past recommendations optionally specified by the time range.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getRecommendationHistoryForSiteWithResponse(
        String resourceGroupName, String siteName, String startTime, String endTime, Context context) {
        return getRecommendationHistoryForSiteWithResponseAsync(
                resourceGroupName, siteName, startTime, endTime, context)
            .block();
    }
}
