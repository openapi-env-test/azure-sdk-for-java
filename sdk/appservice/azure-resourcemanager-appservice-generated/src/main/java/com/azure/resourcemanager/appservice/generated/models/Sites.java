// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionStringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeploymentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostnameBindingInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RelayServiceConnectionEntityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteAuthSettingsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteLogsConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteSourceControlInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotConfigNamesResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import java.io.InputStream;

/** Resource collection API of Sites. */
public interface Sites {
    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    VnetInfo getSiteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot);

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    Response<VnetInfo> getSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context);

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    VnetInfo getSiteVnetConnection(String resourceGroupName, String name, String vnetName);

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    Response<VnetInfo> getSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context);

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    VnetInfo createOrUpdateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope);

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    Response<VnetInfo> createOrUpdateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteVnetConnection(String resourceGroupName, String name, String vnetName);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context);

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    VnetInfo updateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope);

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    Response<VnetInfo> updateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context);

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    NetworkFeatures getSiteNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot);

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    Response<NetworkFeatures> getSiteNetworkFeaturesSlotWithResponse(
        String resourceGroupName, String name, String view, String slot, Context context);

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    NetworkFeatures getSiteNetworkFeatures(String resourceGroupName, String name, String view);

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    Response<NetworkFeatures> getSiteNetworkFeaturesWithResponse(
        String resourceGroupName, String name, String view, Context context);

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    Object getSiteOperationSlot(String resourceGroupName, String name, String operationId, String slot);

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    Response<Object> getSiteOperationSlotWithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context);

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    Object getSiteOperation(String resourceGroupName, String name, String operationId);

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    Response<Object> getSiteOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context);

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity);

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object swapSlotsSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity);

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object swapSlotsSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    PagedIterable<SlotDifference> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity);

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    PagedIterable<SlotDifference> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    PagedIterable<SlotDifference> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity);

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    PagedIterable<SlotDifference> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object applySlotConfigToProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> applySlotConfigToProductionWithResponse(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object applySlotConfigSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> applySlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object resetProductionSlotConfig(String resourceGroupName, String name);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> resetProductionSlotConfigWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object resetSlotConfigSlot(String resourceGroupName, String name, String slot);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> resetSlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    SlotConfigNamesResource getSlotConfigNames(String resourceGroupName, String name);

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    Response<SlotConfigNamesResource> getSlotConfigNamesWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    SlotConfigNamesResource updateSlotConfigNames(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames);

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    Response<SlotConfigNamesResource> updateSlotConfigNamesWithResponse(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames, Context context);

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    PagedIterable<Site> getSiteSlots(String resourceGroupName, String name);

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    PagedIterable<Site> getSiteSlots(
        String resourceGroupName, String name, String propertiesToInclude, Context context);

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    PagedIterable<Site> listByResourceGroup(String resourceGroupName);

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    PagedIterable<Site> listByResourceGroup(
        String resourceGroupName,
        String propertiesToInclude,
        String includeSiteTypes,
        Boolean includeSlots,
        Context context);

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Site getByResourceGroup(String resourceGroupName, String name);

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Response<Site> getByResourceGroupWithResponse(
        String resourceGroupName, String name, String propertiesToInclude, Context context);

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object delete(String resourceGroupName, String name);

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteWithResponse(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context);

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Site getSiteSlot(String resourceGroupName, String name, String slot);

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Response<Site> getSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, String propertiesToInclude, Context context);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site createOrUpdateSiteSlot(String resourceGroupName, String name, String slot, SiteInner siteEnvelope);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context);

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteSlot(String resourceGroupName, String name, String slot);

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    SiteCloneability isSiteCloneable(String resourceGroupName, String name);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    Response<SiteCloneability> isSiteCloneableWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    SiteCloneability isSiteCloneableSlot(String resourceGroupName, String name, String slot);

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    Response<SiteCloneability> isSiteCloneableSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site recoverSite(String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity);

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site recoverSite(String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context);

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site recoverSiteSlot(String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity);

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    Site recoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context);

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSiteSnapshots(String resourceGroupName, String name);

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSiteSnapshotsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSiteSnapshotsSlot(String resourceGroupName, String name, String slot);

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSiteSnapshotsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    PagedIterable<DeletedSite> getDeletedSites(String resourceGroupName);

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    PagedIterable<DeletedSite> getDeletedSites(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Context context);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getDeployments(String resourceGroupName, String name);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getDeployments(String resourceGroupName, String name, Context context);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getDeploymentsSlot(String resourceGroupName, String name, String slot);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getDeploymentsSlot(String resourceGroupName, String name, String slot, Context context);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getInstanceDeployments(String resourceGroupName, String name, String instanceId);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getInstanceDeployments(
        String resourceGroupName, String name, String instanceId, Context context);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId);

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    PagedIterable<Deployment> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId, Context context);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Deployment getInstanceDeployment(String resourceGroupName, String name, String id, String instanceId);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Response<Deployment> getInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteInstanceDeployment(String resourceGroupName, String name, String id, String instanceId);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Deployment getDeployment(String resourceGroupName, String name, String id);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Response<Deployment> getDeploymentWithResponse(String resourceGroupName, String name, String id, Context context);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Deployment createDeployment(String resourceGroupName, String name, String id, DeploymentInner deployment);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Response<Deployment> createDeploymentWithResponse(
        String resourceGroupName, String name, String id, DeploymentInner deployment, Context context);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteDeployment(String resourceGroupName, String name, String id);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteDeploymentWithResponse(String resourceGroupName, String name, String id, Context context);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Deployment getDeploymentSlot(String resourceGroupName, String name, String id, String slot);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Response<Deployment> getDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Deployment createDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Response<Deployment> createDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment, Context context);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteDeploymentSlot(String resourceGroupName, String name, String id, String slot);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Deployment getInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId);

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Response<Deployment> getInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Deployment createInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId, DeploymentInner deployment);

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Response<Deployment> createInstanceDeploymentSlotWithResponse(
        String resourceGroupName,
        String name,
        String id,
        String slot,
        String instanceId,
        DeploymentInner deployment,
        Context context);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId);

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context);

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    PagedIterable<SiteInstance> getSiteInstanceIdentifiers(String resourceGroupName, String name);

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    PagedIterable<SiteInstance> getSiteInstanceIdentifiers(String resourceGroupName, String name, Context context);

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    PagedIterable<SiteInstance> getSiteInstanceIdentifiersSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    PagedIterable<SiteInstance> getSiteInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    PagedIterable<HostnameBinding> getSiteHostnameBindings(String resourceGroupName, String name);

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    PagedIterable<HostnameBinding> getSiteHostnameBindings(String resourceGroupName, String name, Context context);

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    PagedIterable<HostnameBinding> getSiteHostnameBindingsSlot(String resourceGroupName, String name, String slot);

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    PagedIterable<HostnameBinding> getSiteHostnameBindingsSlot(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    HostnameBinding getSiteHostnameBinding(String resourceGroupName, String name, String hostname);

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    Response<HostnameBinding> getSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context);

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteHostnameBinding(String resourceGroupName, String name, String hostname);

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context);

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    HostnameBinding getSiteHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname);

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    Response<HostnameBinding> getSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context);

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    HostnameBinding createOrUpdateSiteHostnameBindingSlot(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding);

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    Response<HostnameBinding> createOrUpdateSiteHostnameBindingSlotWithResponse(
        String resourceGroupName,
        String name,
        String hostname,
        String slot,
        HostnameBindingInner hostnameBinding,
        Context context);

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname);

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context);

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    SiteConfig getSiteConfig(String resourceGroupName, String name);

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    Response<SiteConfig> getSiteConfigWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteConfig createOrUpdateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteConfig> createOrUpdateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteConfig updateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteConfig> updateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context);

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    SiteConfig getSiteConfigSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    Response<SiteConfig> getSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteConfig createOrUpdateSiteConfigSlot(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteConfig> createOrUpdateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteConfig updateSiteConfigSlot(String resourceGroupName, String name, String slot, SiteConfigInner siteConfig);

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteConfig> updateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context);

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    SiteSourceControl getSiteSourceControl(String resourceGroupName, String name);

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    Response<SiteSourceControl> getSiteSourceControlWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    SiteSourceControl createOrUpdateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    Response<SiteSourceControl> createOrUpdateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context);

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteSourceControl(String resourceGroupName, String name);

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteSourceControlWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    SiteSourceControl updateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    Response<SiteSourceControl> updateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context);

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    SiteSourceControl getSiteSourceControlSlot(String resourceGroupName, String name, String slot);

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    Response<SiteSourceControl> getSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    SiteSourceControl createOrUpdateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    Response<SiteSourceControl> createOrUpdateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context);

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteSourceControlSlot(String resourceGroupName, String name, String slot);

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    SiteSourceControl updateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl);

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    Response<SiteSourceControl> updateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context);

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    StringDictionary listSiteAppSettingsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    Response<StringDictionary> listSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    StringDictionary listSiteAppSettings(String resourceGroupName, String name);

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    Response<StringDictionary> listSiteAppSettingsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    StringDictionary updateSiteAppSettings(String resourceGroupName, String name, StringDictionaryInner appSettings);

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<StringDictionary> updateSiteAppSettingsWithResponse(
        String resourceGroupName, String name, StringDictionaryInner appSettings, Context context);

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    StringDictionary updateSiteAppSettingsSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings);

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<StringDictionary> updateSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings, Context context);

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    ConnectionStringDictionary listSiteConnectionStrings(String resourceGroupName, String name);

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    Response<ConnectionStringDictionary> listSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    ConnectionStringDictionary listSiteConnectionStringsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    Response<ConnectionStringDictionary> listSiteConnectionStringsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    ConnectionStringDictionary updateSiteConnectionStrings(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings);

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<ConnectionStringDictionary> updateSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings, Context context);

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    ConnectionStringDictionary updateSiteConnectionStringsSlot(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings);

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<ConnectionStringDictionary> updateSiteConnectionStringsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        ConnectionStringDictionaryInner connectionStrings,
        Context context);

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    SiteAuthSettings listSiteAuthSettings(String resourceGroupName, String name);

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    Response<SiteAuthSettings> listSiteAuthSettingsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    SiteAuthSettings listSiteAuthSettingsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    Response<SiteAuthSettings> listSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    SiteAuthSettings updateSiteAuthSettings(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    Response<SiteAuthSettings> updateSiteAuthSettingsWithResponse(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings, Context context);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    SiteAuthSettings updateSiteAuthSettingsSlot(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    Response<SiteAuthSettings> updateSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings, Context context);

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    User listSitePublishingCredentials(String resourceGroupName, String name);

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    User listSitePublishingCredentials(String resourceGroupName, String name, Context context);

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    User listSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    User listSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    StringDictionary listSiteMetadata(String resourceGroupName, String name);

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    Response<StringDictionary> listSiteMetadataWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    StringDictionary listSiteMetadataSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    Response<StringDictionary> listSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    StringDictionary updateSiteMetadata(String resourceGroupName, String name, StringDictionaryInner metadata);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<StringDictionary> updateSiteMetadataWithResponse(
        String resourceGroupName, String name, StringDictionaryInner metadata, Context context);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    StringDictionary updateSiteMetadataSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    Response<StringDictionary> updateSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata, Context context);

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    SiteLogsConfig getSiteLogsConfig(String resourceGroupName, String name);

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    Response<SiteLogsConfig> getSiteLogsConfigWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteLogsConfig updateSiteLogsConfig(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteLogsConfig> updateSiteLogsConfigWithResponse(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig, Context context);

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    SiteLogsConfig getSiteLogsConfigSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    Response<SiteLogsConfig> getSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    SiteLogsConfig updateSiteLogsConfigSlot(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig);

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    Response<SiteLogsConfig> updateSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object listSitePremierAddOns(String resourceGroupName, String name);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> listSitePremierAddOnsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object listSitePremierAddOnsSlot(String resourceGroupName, String name, String slot);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> listSitePremierAddOnsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object addSitePremierAddOn(
        String resourceGroupName, String name, String premierAddOnName, PremierAddOnRequest premierAddOn);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> addSitePremierAddOnWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        PremierAddOnRequest premierAddOn,
        Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object addSitePremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnRequest premierAddOn);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> addSitePremierAddOnSlotWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnRequest premierAddOn,
        Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context);

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    BackupRequest getSiteBackupConfiguration(String resourceGroupName, String name);

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    Response<BackupRequest> getSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    BackupRequest getSiteBackupConfigurationSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    Response<BackupRequest> getSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    BackupRequest updateSiteBackupConfiguration(String resourceGroupName, String name, BackupRequestInner request);

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    Response<BackupRequest> updateSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context);

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    BackupRequest updateSiteBackupConfigurationSlot(
        String resourceGroupName, String name, String slot, BackupRequestInner request);

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    Response<BackupRequest> updateSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context);

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    BackupItem backupSite(String resourceGroupName, String name, BackupRequestInner request);

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    Response<BackupItem> backupSiteWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context);

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    BackupItem backupSiteSlot(String resourceGroupName, String name, String slot, BackupRequestInner request);

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    Response<BackupItem> backupSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context);

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    RestoreRequest discoverSiteRestore(String resourceGroupName, String name, RestoreRequestInner request);

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    Response<RestoreRequest> discoverSiteRestoreWithResponse(
        String resourceGroupName, String name, RestoreRequestInner request, Context context);

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    RestoreRequest discoverSiteRestoreSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request);

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    Response<RestoreRequest> discoverSiteRestoreSlotWithResponse(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context);

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name);

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name, Context context);

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    PagedIterable<BackupItem> listSiteBackupsSlot(String resourceGroupName, String name, String slot);

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    PagedIterable<BackupItem> listSiteBackupsSlot(String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    BackupItem getSiteBackupStatus(String resourceGroupName, String name, String backupId);

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    Response<BackupItem> getSiteBackupStatusWithResponse(
        String resourceGroupName, String name, String backupId, Context context);

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    BackupItem deleteBackup(String resourceGroupName, String name, String backupId);

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    Response<BackupItem> deleteBackupWithResponse(
        String resourceGroupName, String name, String backupId, Context context);

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    BackupItem getSiteBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot);

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    Response<BackupItem> getSiteBackupStatusSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context);

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    BackupItem deleteBackupSlot(String resourceGroupName, String name, String backupId, String slot);

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    Response<BackupItem> deleteBackupSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    BackupItem getSiteBackupStatusSecretsSlot(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    Response<BackupItem> getSiteBackupStatusSecretsSlotWithResponse(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        BackupRequestInner request,
        Context context);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    BackupItem getSiteBackupStatusSecrets(
        String resourceGroupName, String name, String backupId, BackupRequestInner request);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    Response<BackupItem> getSiteBackupStatusSecretsWithResponse(
        String resourceGroupName, String name, String backupId, BackupRequestInner request, Context context);

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    RestoreResponse restoreSite(String resourceGroupName, String name, String backupId, RestoreRequestInner request);

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    RestoreResponse restoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context);

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    RestoreResponse restoreSiteSlot(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request);

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    RestoreResponse restoreSiteSlot(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context);

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    PagedIterable<CsmUsageQuota> getSiteUsages(String resourceGroupName, String name);

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    PagedIterable<CsmUsageQuota> getSiteUsages(String resourceGroupName, String name, String filter, Context context);

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    PagedIterable<CsmUsageQuota> getSiteUsagesSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    PagedIterable<CsmUsageQuota> getSiteUsagesSlot(
        String resourceGroupName, String name, String slot, String filter, Context context);

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    PagedIterable<ResourceMetric> getSiteMetrics(String resourceGroupName, String name);

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    PagedIterable<ResourceMetric> getSiteMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context);

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    PagedIterable<ResourceMetric> getSiteMetricsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    PagedIterable<ResourceMetric> getSiteMetricsSlot(
        String resourceGroupName, String name, String slot, Boolean details, String filter, Context context);

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    PagedIterable<MetricDefinition> getSiteMetricDefinitionsSlot(String resourceGroupName, String name, String slot);

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    PagedIterable<MetricDefinition> getSiteMetricDefinitionsSlot(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    PagedIterable<MetricDefinition> getSiteMetricDefinitions(String resourceGroupName, String name);

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    PagedIterable<MetricDefinition> getSiteMetricDefinitions(String resourceGroupName, String name, Context context);

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    InputStream listSitePublishingProfileXml(
        String resourceGroupName, String name, CsmPublishingProfileOptions options);

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    StreamResponse listSitePublishingProfileXmlWithResponse(
        String resourceGroupName, String name, CsmPublishingProfileOptions options, Context context);

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    InputStream listSitePublishingProfileXmlSlot(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options);

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    StreamResponse listSitePublishingProfileXmlSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options, Context context);

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object restartSiteSlot(String resourceGroupName, String name, String slot);

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> restartSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous, Context context);

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object restartSite(String resourceGroupName, String name);

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> restartSiteWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous, Context context);

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object startSite(String resourceGroupName, String name);

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> startSiteWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object startSiteSlot(String resourceGroupName, String name, String slot);

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> startSiteSlotWithResponse(String resourceGroupName, String name, String slot, Context context);

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object stopSite(String resourceGroupName, String name);

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> stopSiteWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object stopSiteSlot(String resourceGroupName, String name, String slot);

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> stopSiteSlotWithResponse(String resourceGroupName, String name, String slot, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object syncSiteRepository(String resourceGroupName, String name);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> syncSiteRepositoryWithResponse(String resourceGroupName, String name, Context context);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object syncSiteRepositorySlot(String resourceGroupName, String name, String slot);

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> syncSiteRepositorySlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object generateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot);

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> generateNewSitePublishingPasswordSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object generateNewSitePublishingPassword(String resourceGroupName, String name);

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> generateNewSitePublishingPasswordWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity getSiteRelayServiceConnection(
        String resourceGroupName, String name, String entityName);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteRelayServiceConnection(String resourceGroupName, String name, String entityName);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity getSiteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context);

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity createOrUpdateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> createOrUpdateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context);

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity updateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> updateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context);

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity listSiteRelayServiceConnectionsSlot(
        String resourceGroupName, String name, String slot);

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> listSiteRelayServiceConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity listSiteRelayServiceConnections(String resourceGroupName, String name);

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> listSiteRelayServiceConnectionsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSiteVnetGatewaySlot(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot);

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSiteVnetGatewaySlotWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot, Context context);

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getSiteVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName);

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getSiteVnetGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context);

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    VnetGateway createOrUpdateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope);

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    Response<VnetGateway> createOrUpdateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context);

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    VnetGateway updateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope);

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    Response<VnetGateway> updateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context);

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    Object getSiteVnetConnections(String resourceGroupName, String name);

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    Response<Object> getSiteVnetConnectionsWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    Object getSiteVnetConnectionsSlot(String resourceGroupName, String name, String slot);

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    Response<Object> getSiteVnetConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context);

    /**
     * Get details of a web app.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Site getById(String id);

    /**
     * Get details of a web app.
     *
     * @param id the resource ID.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    Response<Site> getByIdWithResponse(String id, String propertiesToInclude, Context context);

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    VnetInfo getSiteVnetConnectionSlotById(String id);

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    Response<VnetInfo> getSiteVnetConnectionSlotByIdWithResponse(String id, Context context);

    /**
     * Get the deployment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Deployment getInstanceDeploymentById(String id);

    /**
     * Get the deployment.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    Response<Deployment> getInstanceDeploymentByIdWithResponse(String id, Context context);

    /**
     * Get web app binding for a hostname.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    HostnameBinding getSiteHostnameBindingById(String id);

    /**
     * Get web app binding for a hostname.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    Response<HostnameBinding> getSiteHostnameBindingByIdWithResponse(String id, Context context);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    RelayServiceConnectionEntity getSiteRelayServiceConnectionById(String id);

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionByIdWithResponse(String id, Context context);

    /**
     * Deletes a web app.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteById(String id);

    /**
     * Deletes a web app.
     *
     * @param id the resource ID.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteByIdWithResponse(
        String id,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteVnetConnectionSlotById(String id);

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteVnetConnectionSlotByIdWithResponse(String id, Context context);

    /**
     * Delete the deployment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteInstanceDeploymentById(String id);

    /**
     * Delete the deployment.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteInstanceDeploymentByIdWithResponse(String id, Context context);

    /**
     * Deletes a host name binding.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteHostnameBindingById(String id);

    /**
     * Deletes a host name binding.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteHostnameBindingByIdWithResponse(String id, Context context);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteSiteRelayServiceConnectionById(String id);

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> deleteSiteRelayServiceConnectionByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Site resource.
     *
     * @param name resource name.
     * @return the first stage of the new Site definition.
     */
    Site.DefinitionStages.Blank defineSite(String name);

    /**
     * Begins definition for a new VnetInfo resource.
     *
     * @param name resource name.
     * @return the first stage of the new VnetInfo definition.
     */
    VnetInfo.DefinitionStages.Blank defineSiteVnetConnectionSlot(String name);

    /**
     * Begins definition for a new Deployment resource.
     *
     * @param name resource name.
     * @return the first stage of the new Deployment definition.
     */
    Deployment.DefinitionStages.Blank defineInstanceDeployment(String name);

    /**
     * Begins definition for a new HostnameBinding resource.
     *
     * @param name resource name.
     * @return the first stage of the new HostnameBinding definition.
     */
    HostnameBinding.DefinitionStages.Blank defineSiteHostnameBinding(String name);

    /**
     * Begins definition for a new RelayServiceConnectionEntity resource.
     *
     * @param name resource name.
     * @return the first stage of the new RelayServiceConnectionEntity definition.
     */
    RelayServiceConnectionEntity.DefinitionStages.Blank defineSiteRelayServiceConnection(String name);

    /**
     * Begins definition for a new VnetGateway resource.
     *
     * @param name resource name.
     * @return the first stage of the new VnetGateway definition.
     */
    VnetGateway.DefinitionStages.Blank defineSiteVnetConnectionGatewaySlot(String name);
}
