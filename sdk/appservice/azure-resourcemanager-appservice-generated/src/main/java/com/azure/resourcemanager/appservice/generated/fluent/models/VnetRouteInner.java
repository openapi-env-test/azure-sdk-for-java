// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** VnetRoute contract used to pass routing information for a vnet. */
@JsonFlatten
@Fluent
public class VnetRouteInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VnetRouteInner.class);

    /*
     * The name of this route. This is only returned by the server and does not
     * need to be set by the client.
     */
    @JsonProperty(value = "properties.name")
    private String namePropertiesName;

    /*
     * The starting address for this route. This may also include a CIDR
     * notation, in which case the end address must not be specified.
     */
    @JsonProperty(value = "properties.startAddress")
    private String startAddress;

    /*
     * The ending address for this route. If the start address is specified in
     * CIDR notation, this must be omitted.
     */
    @JsonProperty(value = "properties.endAddress")
    private String endAddress;

    /*
     * The type of route this is:
     * DEFAULT - By default, every web app has routes to the local address
     * ranges specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the web app only
     *
     * These values will be used for syncing a Web App's routes with those from
     * a Virtual Network. This operation will clear all DEFAULT and INHERITED
     * routes and replace them
     * with new INHERITED routes.
     */
    @JsonProperty(value = "properties.routeType")
    private String routeType;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the namePropertiesName property: The name of this route. This is only returned by the server and does not
     * need to be set by the client.
     *
     * @return the namePropertiesName value.
     */
    public String namePropertiesName() {
        return this.namePropertiesName;
    }

    /**
     * Set the namePropertiesName property: The name of this route. This is only returned by the server and does not
     * need to be set by the client.
     *
     * @param namePropertiesName the namePropertiesName value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withNamePropertiesName(String namePropertiesName) {
        this.namePropertiesName = namePropertiesName;
        return this;
    }

    /**
     * Get the startAddress property: The starting address for this route. This may also include a CIDR notation, in
     * which case the end address must not be specified.
     *
     * @return the startAddress value.
     */
    public String startAddress() {
        return this.startAddress;
    }

    /**
     * Set the startAddress property: The starting address for this route. This may also include a CIDR notation, in
     * which case the end address must not be specified.
     *
     * @param startAddress the startAddress value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withStartAddress(String startAddress) {
        this.startAddress = startAddress;
        return this;
    }

    /**
     * Get the endAddress property: The ending address for this route. If the start address is specified in CIDR
     * notation, this must be omitted.
     *
     * @return the endAddress value.
     */
    public String endAddress() {
        return this.endAddress;
    }

    /**
     * Set the endAddress property: The ending address for this route. If the start address is specified in CIDR
     * notation, this must be omitted.
     *
     * @param endAddress the endAddress value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withEndAddress(String endAddress) {
        this.endAddress = endAddress;
        return this;
    }

    /**
     * Get the routeType property: The type of route this is: DEFAULT - By default, every web app has routes to the
     * local address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the web app only
     *
     * <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation
     * will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes.
     *
     * @return the routeType value.
     */
    public String routeType() {
        return this.routeType;
    }

    /**
     * Set the routeType property: The type of route this is: DEFAULT - By default, every web app has routes to the
     * local address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the web app only
     *
     * <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation
     * will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes.
     *
     * @param routeType the routeType value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withRouteType(String routeType) {
        this.routeType = routeType;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the VnetRouteInner object itself.
     */
    public VnetRouteInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VnetRouteInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VnetRouteInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
