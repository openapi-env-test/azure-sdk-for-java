// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Domain. */
public interface Domain {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the contactAdmin property: Admin contact information.
     *
     * @return the contactAdmin value.
     */
    Contact contactAdmin();

    /**
     * Gets the contactBilling property: Billing contact information.
     *
     * @return the contactBilling value.
     */
    Contact contactBilling();

    /**
     * Gets the contactRegistrant property: Registrant contact information.
     *
     * @return the contactRegistrant value.
     */
    Contact contactRegistrant();

    /**
     * Gets the contactTech property: Technical contact information.
     *
     * @return the contactTech value.
     */
    Contact contactTech();

    /**
     * Gets the registrationStatus property: Domain registration status.
     *
     * @return the registrationStatus value.
     */
    DomainStatus registrationStatus();

    /**
     * Gets the provisioningState property: Domain provisioning state.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the nameServers property: Name servers.
     *
     * @return the nameServers value.
     */
    List<String> nameServers();

    /**
     * Gets the privacy property: If true then domain privacy is enabled for this domain.
     *
     * @return the privacy value.
     */
    Boolean privacy();

    /**
     * Gets the createdTime property: Domain creation timestamp.
     *
     * @return the createdTime value.
     */
    OffsetDateTime createdTime();

    /**
     * Gets the expirationTime property: Domain expiration timestamp.
     *
     * @return the expirationTime value.
     */
    OffsetDateTime expirationTime();

    /**
     * Gets the lastRenewedTime property: Timestamp when the domain was renewed last time.
     *
     * @return the lastRenewedTime value.
     */
    OffsetDateTime lastRenewedTime();

    /**
     * Gets the autoRenew property: If true then domain will renewed automatically.
     *
     * @return the autoRenew value.
     */
    Boolean autoRenew();

    /**
     * Gets the readyForDnsRecordManagement property: If true then Azure can assign this domain to Web Apps. This value
     * will be true if domain registration status is active and it is hosted on name servers Azure has programmatic
     * access to.
     *
     * @return the readyForDnsRecordManagement value.
     */
    Boolean readyForDnsRecordManagement();

    /**
     * Gets the managedHostNames property: All hostnames derived from the domain and assigned to Azure resources.
     *
     * @return the managedHostNames value.
     */
    List<Hostname> managedHostNames();

    /**
     * Gets the consent property: Legal agreement consent.
     *
     * @return the consent value.
     */
    DomainPurchaseConsent consent();

    /**
     * Gets the domainNotRenewableReasons property: Reasons why domain is not renewable.
     *
     * @return the domainNotRenewableReasons value.
     */
    List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.DomainInner object.
     *
     * @return the inner object.
     */
    DomainInner innerModel();

    /** The entirety of the Domain definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The Domain definition stages. */
    interface DefinitionStages {
        /** The first stage of the Domain definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Domain definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the Domain definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName &amp;gt;Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the Domain definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithContactAdmin,
                DefinitionStages.WithContactBilling,
                DefinitionStages.WithContactRegistrant,
                DefinitionStages.WithContactTech,
                DefinitionStages.WithRegistrationStatus,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithNameServers,
                DefinitionStages.WithPrivacy,
                DefinitionStages.WithCreatedTime,
                DefinitionStages.WithExpirationTime,
                DefinitionStages.WithLastRenewedTime,
                DefinitionStages.WithAutoRenew,
                DefinitionStages.WithReadyForDnsRecordManagement,
                DefinitionStages.WithManagedHostNames,
                DefinitionStages.WithConsent,
                DefinitionStages.WithDomainNotRenewableReasons,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Domain create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Domain create(Context context);
        }
        /** The stage of the Domain definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Domain definition allowing to specify contactAdmin. */
        interface WithContactAdmin {
            /**
             * Specifies the contactAdmin property: Admin contact information.
             *
             * @param contactAdmin Admin contact information.
             * @return the next definition stage.
             */
            WithCreate withContactAdmin(Contact contactAdmin);
        }
        /** The stage of the Domain definition allowing to specify contactBilling. */
        interface WithContactBilling {
            /**
             * Specifies the contactBilling property: Billing contact information.
             *
             * @param contactBilling Billing contact information.
             * @return the next definition stage.
             */
            WithCreate withContactBilling(Contact contactBilling);
        }
        /** The stage of the Domain definition allowing to specify contactRegistrant. */
        interface WithContactRegistrant {
            /**
             * Specifies the contactRegistrant property: Registrant contact information.
             *
             * @param contactRegistrant Registrant contact information.
             * @return the next definition stage.
             */
            WithCreate withContactRegistrant(Contact contactRegistrant);
        }
        /** The stage of the Domain definition allowing to specify contactTech. */
        interface WithContactTech {
            /**
             * Specifies the contactTech property: Technical contact information.
             *
             * @param contactTech Technical contact information.
             * @return the next definition stage.
             */
            WithCreate withContactTech(Contact contactTech);
        }
        /** The stage of the Domain definition allowing to specify registrationStatus. */
        interface WithRegistrationStatus {
            /**
             * Specifies the registrationStatus property: Domain registration status.
             *
             * @param registrationStatus Domain registration status.
             * @return the next definition stage.
             */
            WithCreate withRegistrationStatus(DomainStatus registrationStatus);
        }
        /** The stage of the Domain definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Domain provisioning state.
             *
             * @param provisioningState Domain provisioning state.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }
        /** The stage of the Domain definition allowing to specify nameServers. */
        interface WithNameServers {
            /**
             * Specifies the nameServers property: Name servers.
             *
             * @param nameServers Name servers.
             * @return the next definition stage.
             */
            WithCreate withNameServers(List<String> nameServers);
        }
        /** The stage of the Domain definition allowing to specify privacy. */
        interface WithPrivacy {
            /**
             * Specifies the privacy property: If true then domain privacy is enabled for this domain.
             *
             * @param privacy If true then domain privacy is enabled for this domain.
             * @return the next definition stage.
             */
            WithCreate withPrivacy(Boolean privacy);
        }
        /** The stage of the Domain definition allowing to specify createdTime. */
        interface WithCreatedTime {
            /**
             * Specifies the createdTime property: Domain creation timestamp.
             *
             * @param createdTime Domain creation timestamp.
             * @return the next definition stage.
             */
            WithCreate withCreatedTime(OffsetDateTime createdTime);
        }
        /** The stage of the Domain definition allowing to specify expirationTime. */
        interface WithExpirationTime {
            /**
             * Specifies the expirationTime property: Domain expiration timestamp.
             *
             * @param expirationTime Domain expiration timestamp.
             * @return the next definition stage.
             */
            WithCreate withExpirationTime(OffsetDateTime expirationTime);
        }
        /** The stage of the Domain definition allowing to specify lastRenewedTime. */
        interface WithLastRenewedTime {
            /**
             * Specifies the lastRenewedTime property: Timestamp when the domain was renewed last time.
             *
             * @param lastRenewedTime Timestamp when the domain was renewed last time.
             * @return the next definition stage.
             */
            WithCreate withLastRenewedTime(OffsetDateTime lastRenewedTime);
        }
        /** The stage of the Domain definition allowing to specify autoRenew. */
        interface WithAutoRenew {
            /**
             * Specifies the autoRenew property: If true then domain will renewed automatically.
             *
             * @param autoRenew If true then domain will renewed automatically.
             * @return the next definition stage.
             */
            WithCreate withAutoRenew(Boolean autoRenew);
        }
        /** The stage of the Domain definition allowing to specify readyForDnsRecordManagement. */
        interface WithReadyForDnsRecordManagement {
            /**
             * Specifies the readyForDnsRecordManagement property: If true then Azure can assign this domain to Web
             * Apps. This value will be true if domain registration status is active and it is hosted on name servers
             * Azure has programmatic access to.
             *
             * @param readyForDnsRecordManagement If true then Azure can assign this domain to Web Apps. This value will
             *     be true if domain registration status is active and it is hosted on name servers Azure has
             *     programmatic access to.
             * @return the next definition stage.
             */
            WithCreate withReadyForDnsRecordManagement(Boolean readyForDnsRecordManagement);
        }
        /** The stage of the Domain definition allowing to specify managedHostNames. */
        interface WithManagedHostNames {
            /**
             * Specifies the managedHostNames property: All hostnames derived from the domain and assigned to Azure
             * resources.
             *
             * @param managedHostNames All hostnames derived from the domain and assigned to Azure resources.
             * @return the next definition stage.
             */
            WithCreate withManagedHostNames(List<Hostname> managedHostNames);
        }
        /** The stage of the Domain definition allowing to specify consent. */
        interface WithConsent {
            /**
             * Specifies the consent property: Legal agreement consent.
             *
             * @param consent Legal agreement consent.
             * @return the next definition stage.
             */
            WithCreate withConsent(DomainPurchaseConsent consent);
        }
        /** The stage of the Domain definition allowing to specify domainNotRenewableReasons. */
        interface WithDomainNotRenewableReasons {
            /**
             * Specifies the domainNotRenewableReasons property: Reasons why domain is not renewable.
             *
             * @param domainNotRenewableReasons Reasons why domain is not renewable.
             * @return the next definition stage.
             */
            WithCreate withDomainNotRenewableReasons(
                List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons);
        }
        /** The stage of the Domain definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the Domain definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the Domain definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
    }
    /**
     * Begins update for the Domain resource.
     *
     * @return the stage of resource update.
     */
    Domain.Update update();

    /** The template for Domain update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithContactAdmin,
            UpdateStages.WithContactBilling,
            UpdateStages.WithContactRegistrant,
            UpdateStages.WithContactTech,
            UpdateStages.WithRegistrationStatus,
            UpdateStages.WithProvisioningState,
            UpdateStages.WithNameServers,
            UpdateStages.WithPrivacy,
            UpdateStages.WithCreatedTime,
            UpdateStages.WithExpirationTime,
            UpdateStages.WithLastRenewedTime,
            UpdateStages.WithAutoRenew,
            UpdateStages.WithReadyForDnsRecordManagement,
            UpdateStages.WithManagedHostNames,
            UpdateStages.WithConsent,
            UpdateStages.WithDomainNotRenewableReasons,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Domain apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Domain apply(Context context);
    }
    /** The Domain update stages. */
    interface UpdateStages {
        /** The stage of the Domain update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Domain update allowing to specify contactAdmin. */
        interface WithContactAdmin {
            /**
             * Specifies the contactAdmin property: Admin contact information.
             *
             * @param contactAdmin Admin contact information.
             * @return the next definition stage.
             */
            Update withContactAdmin(Contact contactAdmin);
        }
        /** The stage of the Domain update allowing to specify contactBilling. */
        interface WithContactBilling {
            /**
             * Specifies the contactBilling property: Billing contact information.
             *
             * @param contactBilling Billing contact information.
             * @return the next definition stage.
             */
            Update withContactBilling(Contact contactBilling);
        }
        /** The stage of the Domain update allowing to specify contactRegistrant. */
        interface WithContactRegistrant {
            /**
             * Specifies the contactRegistrant property: Registrant contact information.
             *
             * @param contactRegistrant Registrant contact information.
             * @return the next definition stage.
             */
            Update withContactRegistrant(Contact contactRegistrant);
        }
        /** The stage of the Domain update allowing to specify contactTech. */
        interface WithContactTech {
            /**
             * Specifies the contactTech property: Technical contact information.
             *
             * @param contactTech Technical contact information.
             * @return the next definition stage.
             */
            Update withContactTech(Contact contactTech);
        }
        /** The stage of the Domain update allowing to specify registrationStatus. */
        interface WithRegistrationStatus {
            /**
             * Specifies the registrationStatus property: Domain registration status.
             *
             * @param registrationStatus Domain registration status.
             * @return the next definition stage.
             */
            Update withRegistrationStatus(DomainStatus registrationStatus);
        }
        /** The stage of the Domain update allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Domain provisioning state.
             *
             * @param provisioningState Domain provisioning state.
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }
        /** The stage of the Domain update allowing to specify nameServers. */
        interface WithNameServers {
            /**
             * Specifies the nameServers property: Name servers.
             *
             * @param nameServers Name servers.
             * @return the next definition stage.
             */
            Update withNameServers(List<String> nameServers);
        }
        /** The stage of the Domain update allowing to specify privacy. */
        interface WithPrivacy {
            /**
             * Specifies the privacy property: If true then domain privacy is enabled for this domain.
             *
             * @param privacy If true then domain privacy is enabled for this domain.
             * @return the next definition stage.
             */
            Update withPrivacy(Boolean privacy);
        }
        /** The stage of the Domain update allowing to specify createdTime. */
        interface WithCreatedTime {
            /**
             * Specifies the createdTime property: Domain creation timestamp.
             *
             * @param createdTime Domain creation timestamp.
             * @return the next definition stage.
             */
            Update withCreatedTime(OffsetDateTime createdTime);
        }
        /** The stage of the Domain update allowing to specify expirationTime. */
        interface WithExpirationTime {
            /**
             * Specifies the expirationTime property: Domain expiration timestamp.
             *
             * @param expirationTime Domain expiration timestamp.
             * @return the next definition stage.
             */
            Update withExpirationTime(OffsetDateTime expirationTime);
        }
        /** The stage of the Domain update allowing to specify lastRenewedTime. */
        interface WithLastRenewedTime {
            /**
             * Specifies the lastRenewedTime property: Timestamp when the domain was renewed last time.
             *
             * @param lastRenewedTime Timestamp when the domain was renewed last time.
             * @return the next definition stage.
             */
            Update withLastRenewedTime(OffsetDateTime lastRenewedTime);
        }
        /** The stage of the Domain update allowing to specify autoRenew. */
        interface WithAutoRenew {
            /**
             * Specifies the autoRenew property: If true then domain will renewed automatically.
             *
             * @param autoRenew If true then domain will renewed automatically.
             * @return the next definition stage.
             */
            Update withAutoRenew(Boolean autoRenew);
        }
        /** The stage of the Domain update allowing to specify readyForDnsRecordManagement. */
        interface WithReadyForDnsRecordManagement {
            /**
             * Specifies the readyForDnsRecordManagement property: If true then Azure can assign this domain to Web
             * Apps. This value will be true if domain registration status is active and it is hosted on name servers
             * Azure has programmatic access to.
             *
             * @param readyForDnsRecordManagement If true then Azure can assign this domain to Web Apps. This value will
             *     be true if domain registration status is active and it is hosted on name servers Azure has
             *     programmatic access to.
             * @return the next definition stage.
             */
            Update withReadyForDnsRecordManagement(Boolean readyForDnsRecordManagement);
        }
        /** The stage of the Domain update allowing to specify managedHostNames. */
        interface WithManagedHostNames {
            /**
             * Specifies the managedHostNames property: All hostnames derived from the domain and assigned to Azure
             * resources.
             *
             * @param managedHostNames All hostnames derived from the domain and assigned to Azure resources.
             * @return the next definition stage.
             */
            Update withManagedHostNames(List<Hostname> managedHostNames);
        }
        /** The stage of the Domain update allowing to specify consent. */
        interface WithConsent {
            /**
             * Specifies the consent property: Legal agreement consent.
             *
             * @param consent Legal agreement consent.
             * @return the next definition stage.
             */
            Update withConsent(DomainPurchaseConsent consent);
        }
        /** The stage of the Domain update allowing to specify domainNotRenewableReasons. */
        interface WithDomainNotRenewableReasons {
            /**
             * Specifies the domainNotRenewableReasons property: Reasons why domain is not renewable.
             *
             * @param domainNotRenewableReasons Reasons why domain is not renewable.
             * @return the next definition stage.
             */
            Update withDomainNotRenewableReasons(
                List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons);
        }
        /** The stage of the Domain update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the Domain update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the Domain update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Domain refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Domain refresh(Context context);
}
