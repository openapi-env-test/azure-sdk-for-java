// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.GlobalCertificateOrdersClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateOrderInner;
import com.azure.resourcemanager.appservice.generated.models.CertificateOrder;
import com.azure.resourcemanager.appservice.generated.models.GlobalCertificateOrders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class GlobalCertificateOrdersImpl implements GlobalCertificateOrders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GlobalCertificateOrdersImpl.class);

    private final GlobalCertificateOrdersClient innerClient;

    private final WebSiteManager serviceManager;

    public GlobalCertificateOrdersImpl(GlobalCertificateOrdersClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CertificateOrder> list() {
        PagedIterable<CertificateOrderInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new CertificateOrderImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateOrder> list(Context context) {
        PagedIterable<CertificateOrderInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new CertificateOrderImpl(inner1, this.manager()));
    }

    public Object validateCertificatePurchaseInformation(CertificateOrderInner certificateOrder) {
        return this.serviceClient().validateCertificatePurchaseInformation(certificateOrder);
    }

    public Response<Object> validateCertificatePurchaseInformationWithResponse(
        CertificateOrderInner certificateOrder, Context context) {
        return this.serviceClient().validateCertificatePurchaseInformationWithResponse(certificateOrder, context);
    }

    private GlobalCertificateOrdersClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
