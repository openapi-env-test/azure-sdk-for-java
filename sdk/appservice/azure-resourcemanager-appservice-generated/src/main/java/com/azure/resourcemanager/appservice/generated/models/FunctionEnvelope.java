// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.FunctionEnvelopeInner;
import java.util.Map;

/** An immutable client-side representation of FunctionEnvelope. */
public interface FunctionEnvelope {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the namePropertiesName property: Function name.
     *
     * @return the namePropertiesName value.
     */
    String namePropertiesName();

    /**
     * Gets the functionAppId property: Function App ID.
     *
     * @return the functionAppId value.
     */
    String functionAppId();

    /**
     * Gets the scriptRootPathHref property: Script root path URI.
     *
     * @return the scriptRootPathHref value.
     */
    String scriptRootPathHref();

    /**
     * Gets the scriptHref property: Script URI.
     *
     * @return the scriptHref value.
     */
    String scriptHref();

    /**
     * Gets the configHref property: Config URI.
     *
     * @return the configHref value.
     */
    String configHref();

    /**
     * Gets the secretsFileHref property: Secrets file URI.
     *
     * @return the secretsFileHref value.
     */
    String secretsFileHref();

    /**
     * Gets the href property: Function URI.
     *
     * @return the href value.
     */
    String href();

    /**
     * Gets the config property: Config information.
     *
     * @return the config value.
     */
    Object config();

    /**
     * Gets the files property: File list.
     *
     * @return the files value.
     */
    Map<String, String> files();

    /**
     * Gets the testData property: Test data used when testing via the Azure Portal.
     *
     * @return the testData value.
     */
    String testData();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.FunctionEnvelopeInner object.
     *
     * @return the inner object.
     */
    FunctionEnvelopeInner innerModel();

    /** The entirety of the FunctionEnvelope definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The FunctionEnvelope definition stages. */
    interface DefinitionStages {
        /** The first stage of the FunctionEnvelope definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the FunctionEnvelope definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, name.
             *
             * @param resourceGroupName Name of the resource group to which the resource belongs.
             * @param name Site name.
             * @return the next definition stage.
             */
            WithCreate withExistingSite(String resourceGroupName, String name);
        }
        /**
         * The stage of the FunctionEnvelope definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithKind,
                DefinitionStages.WithScriptRootPathHref,
                DefinitionStages.WithScriptHref,
                DefinitionStages.WithConfigHref,
                DefinitionStages.WithSecretsFileHref,
                DefinitionStages.WithHref,
                DefinitionStages.WithConfig,
                DefinitionStages.WithFiles,
                DefinitionStages.WithTestData {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            FunctionEnvelope create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FunctionEnvelope create(Context context);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource..
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify scriptRootPathHref. */
        interface WithScriptRootPathHref {
            /**
             * Specifies the scriptRootPathHref property: Script root path URI..
             *
             * @param scriptRootPathHref Script root path URI.
             * @return the next definition stage.
             */
            WithCreate withScriptRootPathHref(String scriptRootPathHref);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify scriptHref. */
        interface WithScriptHref {
            /**
             * Specifies the scriptHref property: Script URI..
             *
             * @param scriptHref Script URI.
             * @return the next definition stage.
             */
            WithCreate withScriptHref(String scriptHref);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify configHref. */
        interface WithConfigHref {
            /**
             * Specifies the configHref property: Config URI..
             *
             * @param configHref Config URI.
             * @return the next definition stage.
             */
            WithCreate withConfigHref(String configHref);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify secretsFileHref. */
        interface WithSecretsFileHref {
            /**
             * Specifies the secretsFileHref property: Secrets file URI..
             *
             * @param secretsFileHref Secrets file URI.
             * @return the next definition stage.
             */
            WithCreate withSecretsFileHref(String secretsFileHref);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify href. */
        interface WithHref {
            /**
             * Specifies the href property: Function URI..
             *
             * @param href Function URI.
             * @return the next definition stage.
             */
            WithCreate withHref(String href);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify config. */
        interface WithConfig {
            /**
             * Specifies the config property: Config information..
             *
             * @param config Config information.
             * @return the next definition stage.
             */
            WithCreate withConfig(Object config);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify files. */
        interface WithFiles {
            /**
             * Specifies the files property: File list..
             *
             * @param files File list.
             * @return the next definition stage.
             */
            WithCreate withFiles(Map<String, String> files);
        }
        /** The stage of the FunctionEnvelope definition allowing to specify testData. */
        interface WithTestData {
            /**
             * Specifies the testData property: Test data used when testing via the Azure Portal..
             *
             * @param testData Test data used when testing via the Azure Portal.
             * @return the next definition stage.
             */
            WithCreate withTestData(String testData);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    FunctionEnvelope refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FunctionEnvelope refresh(Context context);

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return function secrets for a function in a web site, or a deployment slot.
     */
    FunctionSecrets listFunctionSecrets();

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return function secrets for a function in a web site, or a deployment slot.
     */
    Response<FunctionSecrets> listFunctionSecretsWithResponse(Context context);
}
