// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetRouteInner;
import java.util.Map;

/** An immutable client-side representation of VnetRoute. */
public interface VnetRoute {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the namePropertiesName property: The name of this route. This is only returned by the server and does not
     * need to be set by the client.
     *
     * @return the namePropertiesName value.
     */
    String namePropertiesName();

    /**
     * Gets the startAddress property: The starting address for this route. This may also include a CIDR notation, in
     * which case the end address must not be specified.
     *
     * @return the startAddress value.
     */
    String startAddress();

    /**
     * Gets the endAddress property: The ending address for this route. If the start address is specified in CIDR
     * notation, this must be omitted.
     *
     * @return the endAddress value.
     */
    String endAddress();

    /**
     * Gets the routeType property: The type of route this is: DEFAULT - By default, every web app has routes to the
     * local address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the web app only
     *
     * <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation
     * will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes.
     *
     * @return the routeType value.
     */
    String routeType();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.VnetRouteInner object.
     *
     * @return the inner object.
     */
    VnetRouteInner innerModel();

    /** The entirety of the VnetRoute definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The VnetRoute definition stages. */
    interface DefinitionStages {
        /** The first stage of the VnetRoute definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VnetRoute definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the VnetRoute definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, name, vnetName.
             *
             * @param resourceGroupName Name of resource group.
             * @param name Name of App Service Plan.
             * @param vnetName Name of virtual network.
             * @return the next definition stage.
             */
            WithCreate withExistingVirtualNetworkConnection(String resourceGroupName, String name, String vnetName);
        }
        /**
         * The stage of the VnetRoute definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithNamePropertiesName,
                DefinitionStages.WithStartAddress,
                DefinitionStages.WithEndAddress,
                DefinitionStages.WithRouteType,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VnetRoute create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VnetRoute create(Context context);
        }
        /** The stage of the VnetRoute definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VnetRoute definition allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: The name of this route. This is only returned by the server
             * and does not need to be set by the client..
             *
             * @param namePropertiesName The name of this route. This is only returned by the server and does not need
             *     to be set by the client.
             * @return the next definition stage.
             */
            WithCreate withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the VnetRoute definition allowing to specify startAddress. */
        interface WithStartAddress {
            /**
             * Specifies the startAddress property: The starting address for this route. This may also include a CIDR
             * notation, in which case the end address must not be specified..
             *
             * @param startAddress The starting address for this route. This may also include a CIDR notation, in which
             *     case the end address must not be specified.
             * @return the next definition stage.
             */
            WithCreate withStartAddress(String startAddress);
        }
        /** The stage of the VnetRoute definition allowing to specify endAddress. */
        interface WithEndAddress {
            /**
             * Specifies the endAddress property: The ending address for this route. If the start address is specified
             * in CIDR notation, this must be omitted..
             *
             * @param endAddress The ending address for this route. If the start address is specified in CIDR notation,
             *     this must be omitted.
             * @return the next definition stage.
             */
            WithCreate withEndAddress(String endAddress);
        }
        /** The stage of the VnetRoute definition allowing to specify routeType. */
        interface WithRouteType {
            /**
             * Specifies the routeType property: The type of route this is: DEFAULT - By default, every web app has
             * routes to the local address ranges specified by RFC1918 INHERITED - Routes inherited from the real
             * Virtual Network routes STATIC - Static route set on the web app only
             *
             * <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This
             * operation will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes..
             *
             * @param routeType The type of route this is: DEFAULT - By default, every web app has routes to the local
             *     address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes
             *     STATIC - Static route set on the web app only
             *     <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This
             *     operation will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes.
             * @return the next definition stage.
             */
            WithCreate withRouteType(String routeType);
        }
        /** The stage of the VnetRoute definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the VnetRoute definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the VnetRoute definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
    }
    /**
     * Begins update for the VnetRoute resource.
     *
     * @return the stage of resource update.
     */
    VnetRoute.Update update();

    /** The template for VnetRoute update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithNamePropertiesName,
            UpdateStages.WithStartAddress,
            UpdateStages.WithEndAddress,
            UpdateStages.WithRouteType,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VnetRoute apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VnetRoute apply(Context context);
    }
    /** The VnetRoute update stages. */
    interface UpdateStages {
        /** The stage of the VnetRoute update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the VnetRoute update allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: The name of this route. This is only returned by the server
             * and does not need to be set by the client..
             *
             * @param namePropertiesName The name of this route. This is only returned by the server and does not need
             *     to be set by the client.
             * @return the next definition stage.
             */
            Update withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the VnetRoute update allowing to specify startAddress. */
        interface WithStartAddress {
            /**
             * Specifies the startAddress property: The starting address for this route. This may also include a CIDR
             * notation, in which case the end address must not be specified..
             *
             * @param startAddress The starting address for this route. This may also include a CIDR notation, in which
             *     case the end address must not be specified.
             * @return the next definition stage.
             */
            Update withStartAddress(String startAddress);
        }
        /** The stage of the VnetRoute update allowing to specify endAddress. */
        interface WithEndAddress {
            /**
             * Specifies the endAddress property: The ending address for this route. If the start address is specified
             * in CIDR notation, this must be omitted..
             *
             * @param endAddress The ending address for this route. If the start address is specified in CIDR notation,
             *     this must be omitted.
             * @return the next definition stage.
             */
            Update withEndAddress(String endAddress);
        }
        /** The stage of the VnetRoute update allowing to specify routeType. */
        interface WithRouteType {
            /**
             * Specifies the routeType property: The type of route this is: DEFAULT - By default, every web app has
             * routes to the local address ranges specified by RFC1918 INHERITED - Routes inherited from the real
             * Virtual Network routes STATIC - Static route set on the web app only
             *
             * <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This
             * operation will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes..
             *
             * @param routeType The type of route this is: DEFAULT - By default, every web app has routes to the local
             *     address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes
             *     STATIC - Static route set on the web app only
             *     <p>These values will be used for syncing a Web App's routes with those from a Virtual Network. This
             *     operation will clear all DEFAULT and INHERITED routes and replace them with new INHERITED routes.
             * @return the next definition stage.
             */
            Update withRouteType(String routeType);
        }
        /** The stage of the VnetRoute update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the VnetRoute update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the VnetRoute update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
    }
}
