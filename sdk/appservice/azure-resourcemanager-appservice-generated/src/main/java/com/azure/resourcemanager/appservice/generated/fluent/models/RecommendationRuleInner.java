// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.Channels;
import com.azure.resourcemanager.appservice.generated.models.NotificationLevel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a recommendation rule that the recommendation engine can perform. */
@Fluent
public final class RecommendationRuleInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RecommendationRuleInner.class);

    /*
     * Unique name of the rule
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * UI friendly name of the rule
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Localized name of the rule (Good for UI)
     */
    @JsonProperty(value = "message")
    private String message;

    /*
     * Recommendation ID of an associated recommendation object tied to the
     * rule, if exists.
     * If such an object doesn't exist, it is set to null.
     */
    @JsonProperty(value = "recommendationId")
    private String recommendationId;

    /*
     * Localized detailed description of the rule
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Name of action that is recommended by this rule in string
     */
    @JsonProperty(value = "actionName")
    private String actionName;

    /*
     * On/off flag indicating the rule is currently enabled or disabled.
     */
    @JsonProperty(value = "enabled")
    private Integer enabled;

    /*
     * Level of impact indicating how critical this rule is.
     */
    @JsonProperty(value = "level", required = true)
    private NotificationLevel level;

    /*
     * List of available channels that this rule applies.
     */
    @JsonProperty(value = "channels", required = true)
    private Channels channels;

    /*
     * An array of category tags that the rule contains.
     */
    @JsonProperty(value = "tags")
    private List<String> tags;

    /**
     * Get the name property: Unique name of the rule.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Unique name of the rule.
     *
     * @param name the name value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: UI friendly name of the rule.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: UI friendly name of the rule.
     *
     * @param displayName the displayName value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the message property: Localized name of the rule (Good for UI).
     *
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Localized name of the rule (Good for UI).
     *
     * @param message the message value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the recommendationId property: Recommendation ID of an associated recommendation object tied to the rule, if
     * exists. If such an object doesn't exist, it is set to null.
     *
     * @return the recommendationId value.
     */
    public String recommendationId() {
        return this.recommendationId;
    }

    /**
     * Set the recommendationId property: Recommendation ID of an associated recommendation object tied to the rule, if
     * exists. If such an object doesn't exist, it is set to null.
     *
     * @param recommendationId the recommendationId value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
        return this;
    }

    /**
     * Get the description property: Localized detailed description of the rule.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Localized detailed description of the rule.
     *
     * @param description the description value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the actionName property: Name of action that is recommended by this rule in string.
     *
     * @return the actionName value.
     */
    public String actionName() {
        return this.actionName;
    }

    /**
     * Set the actionName property: Name of action that is recommended by this rule in string.
     *
     * @param actionName the actionName value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withActionName(String actionName) {
        this.actionName = actionName;
        return this;
    }

    /**
     * Get the enabled property: On/off flag indicating the rule is currently enabled or disabled.
     *
     * @return the enabled value.
     */
    public Integer enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: On/off flag indicating the rule is currently enabled or disabled.
     *
     * @param enabled the enabled value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withEnabled(Integer enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the level property: Level of impact indicating how critical this rule is.
     *
     * @return the level value.
     */
    public NotificationLevel level() {
        return this.level;
    }

    /**
     * Set the level property: Level of impact indicating how critical this rule is.
     *
     * @param level the level value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withLevel(NotificationLevel level) {
        this.level = level;
        return this;
    }

    /**
     * Get the channels property: List of available channels that this rule applies.
     *
     * @return the channels value.
     */
    public Channels channels() {
        return this.channels;
    }

    /**
     * Set the channels property: List of available channels that this rule applies.
     *
     * @param channels the channels value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withChannels(Channels channels) {
        this.channels = channels;
        return this;
    }

    /**
     * Get the tags property: An array of category tags that the rule contains.
     *
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of category tags that the rule contains.
     *
     * @param tags the tags value to set.
     * @return the RecommendationRuleInner object itself.
     */
    public RecommendationRuleInner withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (level() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property level in model RecommendationRuleInner"));
        }
        if (channels() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property channels in model RecommendationRuleInner"));
        }
    }
}
