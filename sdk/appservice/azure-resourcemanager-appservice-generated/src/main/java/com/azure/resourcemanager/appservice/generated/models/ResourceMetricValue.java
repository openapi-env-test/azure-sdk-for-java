// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Value of resource metric. */
@Fluent
public final class ResourceMetricValue {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceMetricValue.class);

    /*
     * Value timestamp
     */
    @JsonProperty(value = "timeStamp")
    private String timestamp;

    /*
     * Value average
     */
    @JsonProperty(value = "average")
    private Float average;

    /*
     * Value minimum
     */
    @JsonProperty(value = "minimum")
    private Float minimum;

    /*
     * Value maximum
     */
    @JsonProperty(value = "maximum")
    private Float maximum;

    /*
     * Value total
     */
    @JsonProperty(value = "total")
    private Float total;

    /*
     * Value count
     */
    @JsonProperty(value = "count")
    private Float count;

    /**
     * Get the timestamp property: Value timestamp.
     *
     * @return the timestamp value.
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Value timestamp.
     *
     * @param timestamp the timestamp value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the average property: Value average.
     *
     * @return the average value.
     */
    public Float average() {
        return this.average;
    }

    /**
     * Set the average property: Value average.
     *
     * @param average the average value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withAverage(Float average) {
        this.average = average;
        return this;
    }

    /**
     * Get the minimum property: Value minimum.
     *
     * @return the minimum value.
     */
    public Float minimum() {
        return this.minimum;
    }

    /**
     * Set the minimum property: Value minimum.
     *
     * @param minimum the minimum value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withMinimum(Float minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * Get the maximum property: Value maximum.
     *
     * @return the maximum value.
     */
    public Float maximum() {
        return this.maximum;
    }

    /**
     * Set the maximum property: Value maximum.
     *
     * @param maximum the maximum value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withMaximum(Float maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * Get the total property: Value total.
     *
     * @return the total value.
     */
    public Float total() {
        return this.total;
    }

    /**
     * Set the total property: Value total.
     *
     * @param total the total value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withTotal(Float total) {
        this.total = total;
        return this;
    }

    /**
     * Get the count property: Value count.
     *
     * @return the count value.
     */
    public Float count() {
        return this.count;
    }

    /**
     * Set the count property: Value count.
     *
     * @param count the count value to set.
     * @return the ResourceMetricValue object itself.
     */
    public ResourceMetricValue withCount(Float count) {
        this.count = count;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
