// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.ManagedHostingEnvironmentsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ManagedHostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.models.AddressResponse;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.ManagedHostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.ManagedHostingEnvironments;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmWithRichSku;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedHostingEnvironmentsImpl implements ManagedHostingEnvironments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedHostingEnvironmentsImpl.class);

    private final ManagedHostingEnvironmentsClient innerClient;

    private final WebSiteManager serviceManager;

    public ManagedHostingEnvironmentsImpl(ManagedHostingEnvironmentsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedHostingEnvironment getByResourceGroup(String resourceGroupName, String name) {
        ManagedHostingEnvironmentInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new ManagedHostingEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedHostingEnvironment> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<ManagedHostingEnvironmentInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedHostingEnvironmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HostingEnvironment createOrUpdateManagedHostingEnvironment(
        String resourceGroupName, String name, HostingEnvironmentInner managedHostingEnvironmentEnvelope) {
        HostingEnvironmentInner inner =
            this
                .serviceClient()
                .createOrUpdateManagedHostingEnvironment(resourceGroupName, name, managedHostingEnvironmentEnvelope);
        if (inner != null) {
            return new HostingEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public HostingEnvironment createOrUpdateManagedHostingEnvironment(
        String resourceGroupName,
        String name,
        HostingEnvironmentInner managedHostingEnvironmentEnvelope,
        Context context) {
        HostingEnvironmentInner inner =
            this
                .serviceClient()
                .createOrUpdateManagedHostingEnvironment(
                    resourceGroupName, name, managedHostingEnvironmentEnvelope, context);
        if (inner != null) {
            return new HostingEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object delete(String resourceGroupName, String name, Boolean forceDelete) {
        return this.serviceClient().delete(resourceGroupName, name, forceDelete);
    }

    public Object delete(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return this.serviceClient().delete(resourceGroupName, name, forceDelete, context);
    }

    public PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<HostingEnvironmentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<HostingEnvironmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public AddressResponse getManagedHostingEnvironmentVips(String resourceGroupName, String name) {
        AddressResponseInner inner = this.serviceClient().getManagedHostingEnvironmentVips(resourceGroupName, name);
        if (inner != null) {
            return new AddressResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AddressResponse> getManagedHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<AddressResponseInner> inner =
            this.serviceClient().getManagedHostingEnvironmentVipsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AddressResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getManagedHostingEnvironmentOperation(String resourceGroupName, String name, String operationId) {
        return this.serviceClient().getManagedHostingEnvironmentOperation(resourceGroupName, name, operationId);
    }

    public Response<Object> getManagedHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return this
            .serviceClient()
            .getManagedHostingEnvironmentOperationWithResponse(resourceGroupName, name, operationId, context);
    }

    public PagedIterable<Site> getManagedHostingEnvironmentSites(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().getManagedHostingEnvironmentSites(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getManagedHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        PagedIterable<SiteInner> inner =
            this
                .serviceClient()
                .getManagedHostingEnvironmentSites(resourceGroupName, name, propertiesToInclude, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getManagedHostingEnvironmentWebHostingPlans(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getManagedHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getManagedHostingEnvironmentWebHostingPlans(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getManagedHostingEnvironmentServerFarms(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getManagedHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getManagedHostingEnvironmentServerFarms(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    private ManagedHostingEnvironmentsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
