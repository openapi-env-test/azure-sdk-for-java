// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.Channels;
import com.azure.resourcemanager.appservice.generated.models.NotificationLevel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Represents a recommendation result generated by the recommendation engine. */
@Fluent
public final class RecommendationInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RecommendationInner.class);

    /*
     * Timestamp when this instance was created.
     */
    @JsonProperty(value = "creationTime")
    private OffsetDateTime creationTime;

    /*
     * A GUID value that each recommendation object is associated with.
     */
    @JsonProperty(value = "recommendationId")
    private String recommendationId;

    /*
     * Full ARM resource ID string that this recommendation object is
     * associated with.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * Name of a resource type this recommendation applies, e.g. Subscription,
     * ServerFarm, Site.
     */
    @JsonProperty(value = "resourceScope")
    private String resourceScope;

    /*
     * Unique name of the rule
     */
    @JsonProperty(value = "ruleName")
    private String ruleName;

    /*
     * UI friendly name of the rule (may not be unique)
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Localized text of recommendation, good for UI.
     */
    @JsonProperty(value = "message")
    private String message;

    /*
     * Level indicating how critical this recommendation can impact.
     */
    @JsonProperty(value = "level", required = true)
    private NotificationLevel level;

    /*
     * List of channels that this recommendation can apply.
     */
    @JsonProperty(value = "channels", required = true)
    private Channels channels;

    /*
     * The list of category tags that this recommendation belongs to.
     */
    @JsonProperty(value = "tags")
    private List<String> tags;

    /*
     * Name of action recommended by this object.
     */
    @JsonProperty(value = "actionName")
    private String actionName;

    /*
     * On/off flag indicating the rule is currently enabled or disabled.
     */
    @JsonProperty(value = "enabled")
    private Integer enabled;

    /*
     * The beginning time of a range that the recommendation refers to.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The end time of a range that the recommendation refers to.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * When to notify this recommendation next. Null means that this will never
     * be notified anymore.
     */
    @JsonProperty(value = "nextNotificationTime")
    private OffsetDateTime nextNotificationTime;

    /*
     * Date and time when this notification expires.
     */
    @JsonProperty(value = "notificationExpirationTime")
    private OffsetDateTime notificationExpirationTime;

    /*
     * Last timestamp this instance was actually notified. Null means that this
     * recommendation hasn't been notified yet.
     */
    @JsonProperty(value = "notifiedTime")
    private OffsetDateTime notifiedTime;

    /*
     * A metric value measured by the rule.
     */
    @JsonProperty(value = "score")
    private Double score;

    /**
     * Get the creationTime property: Timestamp when this instance was created.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Timestamp when this instance was created.
     *
     * @param creationTime the creationTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get the recommendationId property: A GUID value that each recommendation object is associated with.
     *
     * @return the recommendationId value.
     */
    public String recommendationId() {
        return this.recommendationId;
    }

    /**
     * Set the recommendationId property: A GUID value that each recommendation object is associated with.
     *
     * @param recommendationId the recommendationId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
        return this;
    }

    /**
     * Get the resourceId property: Full ARM resource ID string that this recommendation object is associated with.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Full ARM resource ID string that this recommendation object is associated with.
     *
     * @param resourceId the resourceId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the resourceScope property: Name of a resource type this recommendation applies, e.g. Subscription,
     * ServerFarm, Site.
     *
     * @return the resourceScope value.
     */
    public String resourceScope() {
        return this.resourceScope;
    }

    /**
     * Set the resourceScope property: Name of a resource type this recommendation applies, e.g. Subscription,
     * ServerFarm, Site.
     *
     * @param resourceScope the resourceScope value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withResourceScope(String resourceScope) {
        this.resourceScope = resourceScope;
        return this;
    }

    /**
     * Get the ruleName property: Unique name of the rule.
     *
     * @return the ruleName value.
     */
    public String ruleName() {
        return this.ruleName;
    }

    /**
     * Set the ruleName property: Unique name of the rule.
     *
     * @param ruleName the ruleName value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withRuleName(String ruleName) {
        this.ruleName = ruleName;
        return this;
    }

    /**
     * Get the displayName property: UI friendly name of the rule (may not be unique).
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: UI friendly name of the rule (may not be unique).
     *
     * @param displayName the displayName value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the message property: Localized text of recommendation, good for UI.
     *
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Localized text of recommendation, good for UI.
     *
     * @param message the message value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the level property: Level indicating how critical this recommendation can impact.
     *
     * @return the level value.
     */
    public NotificationLevel level() {
        return this.level;
    }

    /**
     * Set the level property: Level indicating how critical this recommendation can impact.
     *
     * @param level the level value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withLevel(NotificationLevel level) {
        this.level = level;
        return this;
    }

    /**
     * Get the channels property: List of channels that this recommendation can apply.
     *
     * @return the channels value.
     */
    public Channels channels() {
        return this.channels;
    }

    /**
     * Set the channels property: List of channels that this recommendation can apply.
     *
     * @param channels the channels value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withChannels(Channels channels) {
        this.channels = channels;
        return this;
    }

    /**
     * Get the tags property: The list of category tags that this recommendation belongs to.
     *
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The list of category tags that this recommendation belongs to.
     *
     * @param tags the tags value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the actionName property: Name of action recommended by this object.
     *
     * @return the actionName value.
     */
    public String actionName() {
        return this.actionName;
    }

    /**
     * Set the actionName property: Name of action recommended by this object.
     *
     * @param actionName the actionName value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withActionName(String actionName) {
        this.actionName = actionName;
        return this;
    }

    /**
     * Get the enabled property: On/off flag indicating the rule is currently enabled or disabled.
     *
     * @return the enabled value.
     */
    public Integer enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: On/off flag indicating the rule is currently enabled or disabled.
     *
     * @param enabled the enabled value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withEnabled(Integer enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the startTime property: The beginning time of a range that the recommendation refers to.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The beginning time of a range that the recommendation refers to.
     *
     * @param startTime the startTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of a range that the recommendation refers to.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of a range that the recommendation refers to.
     *
     * @param endTime the endTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the nextNotificationTime property: When to notify this recommendation next. Null means that this will never
     * be notified anymore.
     *
     * @return the nextNotificationTime value.
     */
    public OffsetDateTime nextNotificationTime() {
        return this.nextNotificationTime;
    }

    /**
     * Set the nextNotificationTime property: When to notify this recommendation next. Null means that this will never
     * be notified anymore.
     *
     * @param nextNotificationTime the nextNotificationTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withNextNotificationTime(OffsetDateTime nextNotificationTime) {
        this.nextNotificationTime = nextNotificationTime;
        return this;
    }

    /**
     * Get the notificationExpirationTime property: Date and time when this notification expires.
     *
     * @return the notificationExpirationTime value.
     */
    public OffsetDateTime notificationExpirationTime() {
        return this.notificationExpirationTime;
    }

    /**
     * Set the notificationExpirationTime property: Date and time when this notification expires.
     *
     * @param notificationExpirationTime the notificationExpirationTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withNotificationExpirationTime(OffsetDateTime notificationExpirationTime) {
        this.notificationExpirationTime = notificationExpirationTime;
        return this;
    }

    /**
     * Get the notifiedTime property: Last timestamp this instance was actually notified. Null means that this
     * recommendation hasn't been notified yet.
     *
     * @return the notifiedTime value.
     */
    public OffsetDateTime notifiedTime() {
        return this.notifiedTime;
    }

    /**
     * Set the notifiedTime property: Last timestamp this instance was actually notified. Null means that this
     * recommendation hasn't been notified yet.
     *
     * @param notifiedTime the notifiedTime value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withNotifiedTime(OffsetDateTime notifiedTime) {
        this.notifiedTime = notifiedTime;
        return this;
    }

    /**
     * Get the score property: A metric value measured by the rule.
     *
     * @return the score value.
     */
    public Double score() {
        return this.score;
    }

    /**
     * Set the score property: A metric value measured by the rule.
     *
     * @param score the score value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withScore(Double score) {
        this.score = score;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (level() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property level in model RecommendationInner"));
        }
        if (channels() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property channels in model RecommendationInner"));
        }
    }
}
