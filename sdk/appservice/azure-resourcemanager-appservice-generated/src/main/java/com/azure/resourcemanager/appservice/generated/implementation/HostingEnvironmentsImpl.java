// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.HostingEnvironmentsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentDiagnosticsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SkuInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UsageInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolInner;
import com.azure.resourcemanager.appservice.generated.models.AddressResponse;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuota;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentDiagnostics;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironments;
import com.azure.resourcemanager.appservice.generated.models.MetricDefinition;
import com.azure.resourcemanager.appservice.generated.models.ResourceMetric;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmWithRichSku;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.SkuInfo;
import com.azure.resourcemanager.appservice.generated.models.StampCapacity;
import com.azure.resourcemanager.appservice.generated.models.Usage;
import com.azure.resourcemanager.appservice.generated.models.WorkerPool;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class HostingEnvironmentsImpl implements HostingEnvironments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HostingEnvironmentsImpl.class);

    private final HostingEnvironmentsClient innerClient;

    private final WebSiteManager serviceManager;

    public HostingEnvironmentsImpl(HostingEnvironmentsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public HostingEnvironment getByResourceGroup(String resourceGroupName, String name) {
        HostingEnvironmentInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new HostingEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostingEnvironment> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<HostingEnvironmentInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostingEnvironmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object delete(String resourceGroupName, String name, Boolean forceDelete) {
        return this.serviceClient().delete(resourceGroupName, name, forceDelete);
    }

    public Object delete(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return this.serviceClient().delete(resourceGroupName, name, forceDelete, context);
    }

    public Object getHostingEnvironmentDiagnostics(String resourceGroupName, String name) {
        return this.serviceClient().getHostingEnvironmentDiagnostics(resourceGroupName, name);
    }

    public Response<Object> getHostingEnvironmentDiagnosticsWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().getHostingEnvironmentDiagnosticsWithResponse(resourceGroupName, name, context);
    }

    public HostingEnvironmentDiagnostics getHostingEnvironmentDiagnosticsItem(
        String resourceGroupName, String name, String diagnosticsName) {
        HostingEnvironmentDiagnosticsInner inner =
            this.serviceClient().getHostingEnvironmentDiagnosticsItem(resourceGroupName, name, diagnosticsName);
        if (inner != null) {
            return new HostingEnvironmentDiagnosticsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostingEnvironmentDiagnostics> getHostingEnvironmentDiagnosticsItemWithResponse(
        String resourceGroupName, String name, String diagnosticsName, Context context) {
        Response<HostingEnvironmentDiagnosticsInner> inner =
            this
                .serviceClient()
                .getHostingEnvironmentDiagnosticsItemWithResponse(resourceGroupName, name, diagnosticsName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostingEnvironmentDiagnosticsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<StampCapacity> getHostingEnvironmentCapacities(String resourceGroupName, String name) {
        PagedIterable<StampCapacityInner> inner =
            this.serviceClient().getHostingEnvironmentCapacities(resourceGroupName, name);
        return inner.mapPage(inner1 -> new StampCapacityImpl(inner1, this.manager()));
    }

    public PagedIterable<StampCapacity> getHostingEnvironmentCapacities(
        String resourceGroupName, String name, Context context) {
        PagedIterable<StampCapacityInner> inner =
            this.serviceClient().getHostingEnvironmentCapacities(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new StampCapacityImpl(inner1, this.manager()));
    }

    public AddressResponse getHostingEnvironmentVips(String resourceGroupName, String name) {
        AddressResponseInner inner = this.serviceClient().getHostingEnvironmentVips(resourceGroupName, name);
        if (inner != null) {
            return new AddressResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AddressResponse> getHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<AddressResponseInner> inner =
            this.serviceClient().getHostingEnvironmentVipsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AddressResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<HostingEnvironmentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<HostingEnvironmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public Object rebootHostingEnvironment(String resourceGroupName, String name) {
        return this.serviceClient().rebootHostingEnvironment(resourceGroupName, name);
    }

    public Response<Object> rebootHostingEnvironmentWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().rebootHostingEnvironmentWithResponse(resourceGroupName, name, context);
    }

    public Object getHostingEnvironmentOperations(String resourceGroupName, String name) {
        return this.serviceClient().getHostingEnvironmentOperations(resourceGroupName, name);
    }

    public Response<Object> getHostingEnvironmentOperationsWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().getHostingEnvironmentOperationsWithResponse(resourceGroupName, name, context);
    }

    public Object getHostingEnvironmentOperation(String resourceGroupName, String name, String operationId) {
        return this.serviceClient().getHostingEnvironmentOperation(resourceGroupName, name, operationId);
    }

    public Response<Object> getHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return this
            .serviceClient()
            .getHostingEnvironmentOperationWithResponse(resourceGroupName, name, operationId, context);
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentMetrics(String resourceGroupName, String name) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getHostingEnvironmentMetrics(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getHostingEnvironmentMetrics(resourceGroupName, name, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public MetricDefinition getHostingEnvironmentMetricDefinitions(String resourceGroupName, String name) {
        MetricDefinitionInner inner =
            this.serviceClient().getHostingEnvironmentMetricDefinitions(resourceGroupName, name);
        if (inner != null) {
            return new MetricDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MetricDefinition> getHostingEnvironmentMetricDefinitionsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<MetricDefinitionInner> inner =
            this.serviceClient().getHostingEnvironmentMetricDefinitionsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MetricDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<CsmUsageQuota> getHostingEnvironmentUsages(String resourceGroupName, String name) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().getHostingEnvironmentUsages(resourceGroupName, name);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> getHostingEnvironmentUsages(
        String resourceGroupName, String name, String filter, Context context) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().getHostingEnvironmentUsages(resourceGroupName, name, filter, context);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentMultiRoleMetrics(String resourceGroupName, String name) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getHostingEnvironmentMultiRoleMetrics(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentMultiRoleMetrics(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter,
        Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this
                .serviceClient()
                .getHostingEnvironmentMultiRoleMetrics(
                    resourceGroupName, name, startTime, endTime, timeGrain, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getHostingEnvironmentWebWorkerMetrics(resourceGroupName, name, workerPoolName);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter, Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this
                .serviceClient()
                .getHostingEnvironmentWebWorkerMetrics(
                    resourceGroupName, name, workerPoolName, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName, name);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name, Context context) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName) {
        PagedIterable<MetricDefinitionInner> inner =
            this
                .serviceClient()
                .getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        PagedIterable<MetricDefinitionInner> inner =
            this
                .serviceClient()
                .getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName, context);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<Usage> getHostingEnvironmentMultiRoleUsages(String resourceGroupName, String name) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().getHostingEnvironmentMultiRoleUsages(resourceGroupName, name);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public PagedIterable<Usage> getHostingEnvironmentMultiRoleUsages(
        String resourceGroupName, String name, Context context) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().getHostingEnvironmentMultiRoleUsages(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public PagedIterable<Usage> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().getHostingEnvironmentWebWorkerUsages(resourceGroupName, name, workerPoolName);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public PagedIterable<Usage> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().getHostingEnvironmentWebWorkerUsages(resourceGroupName, name, workerPoolName, context);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getHostingEnvironmentSites(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().getHostingEnvironmentSites(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().getHostingEnvironmentSites(resourceGroupName, name, propertiesToInclude, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getHostingEnvironmentWebHostingPlans(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getHostingEnvironmentWebHostingPlans(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentServerFarms(
        String resourceGroupName, String name) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getHostingEnvironmentServerFarms(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getHostingEnvironmentServerFarms(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkerPool> getMultiRolePools(String resourceGroupName, String name) {
        PagedIterable<WorkerPoolInner> inner = this.serviceClient().getMultiRolePools(resourceGroupName, name);
        return inner.mapPage(inner1 -> new WorkerPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkerPool> getMultiRolePools(String resourceGroupName, String name, Context context) {
        PagedIterable<WorkerPoolInner> inner = this.serviceClient().getMultiRolePools(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new WorkerPoolImpl(inner1, this.manager()));
    }

    public WorkerPool getMultiRolePool(String resourceGroupName, String name) {
        WorkerPoolInner inner = this.serviceClient().getMultiRolePool(resourceGroupName, name);
        if (inner != null) {
            return new WorkerPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WorkerPool> getMultiRolePoolWithResponse(String resourceGroupName, String name, Context context) {
        Response<WorkerPoolInner> inner =
            this.serviceClient().getMultiRolePoolWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkerPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkerPool createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        WorkerPoolInner inner =
            this.serviceClient().createOrUpdateMultiRolePool(resourceGroupName, name, multiRolePoolEnvelope);
        if (inner != null) {
            return new WorkerPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public WorkerPool createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        WorkerPoolInner inner =
            this.serviceClient().createOrUpdateMultiRolePool(resourceGroupName, name, multiRolePoolEnvelope, context);
        if (inner != null) {
            return new WorkerPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SkuInfo> getMultiRolePoolSkus(String resourceGroupName, String name) {
        PagedIterable<SkuInfoInner> inner = this.serviceClient().getMultiRolePoolSkus(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SkuInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SkuInfo> getMultiRolePoolSkus(String resourceGroupName, String name, Context context) {
        PagedIterable<SkuInfoInner> inner = this.serviceClient().getMultiRolePoolSkus(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new SkuInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkerPool> getWorkerPools(String resourceGroupName, String name) {
        PagedIterable<WorkerPoolInner> inner = this.serviceClient().getWorkerPools(resourceGroupName, name);
        return inner.mapPage(inner1 -> new WorkerPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkerPool> getWorkerPools(String resourceGroupName, String name, Context context) {
        PagedIterable<WorkerPoolInner> inner = this.serviceClient().getWorkerPools(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new WorkerPoolImpl(inner1, this.manager()));
    }

    public WorkerPool getWorkerPool(String resourceGroupName, String name, String workerPoolName) {
        WorkerPoolInner inner = this.serviceClient().getWorkerPool(resourceGroupName, name, workerPoolName);
        if (inner != null) {
            return new WorkerPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WorkerPool> getWorkerPoolWithResponse(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        Response<WorkerPoolInner> inner =
            this.serviceClient().getWorkerPoolWithResponse(resourceGroupName, name, workerPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkerPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SkuInfo> getWorkerPoolSkus(String resourceGroupName, String name, String workerPoolName) {
        PagedIterable<SkuInfoInner> inner =
            this.serviceClient().getWorkerPoolSkus(resourceGroupName, name, workerPoolName);
        return inner.mapPage(inner1 -> new SkuInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SkuInfo> getWorkerPoolSkus(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        PagedIterable<SkuInfoInner> inner =
            this.serviceClient().getWorkerPoolSkus(resourceGroupName, name, workerPoolName, context);
        return inner.mapPage(inner1 -> new SkuInfoImpl(inner1, this.manager()));
    }

    public Object getWorkerPoolInstanceMetrics(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        return this.serviceClient().getWorkerPoolInstanceMetrics(resourceGroupName, name, workerPoolName, instance);
    }

    public Response<Object> getWorkerPoolInstanceMetricsWithResponse(
        String resourceGroupName,
        String name,
        String workerPoolName,
        String instance,
        Boolean details,
        String filter,
        Context context) {
        return this
            .serviceClient()
            .getWorkerPoolInstanceMetricsWithResponse(
                resourceGroupName, name, workerPoolName, instance, details, filter, context);
    }

    public Object getWorkerPoolInstanceMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        return this
            .serviceClient()
            .getWorkerPoolInstanceMetricDefinitions(resourceGroupName, name, workerPoolName, instance);
    }

    public Response<Object> getWorkerPoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String workerPoolName, String instance, Context context) {
        return this
            .serviceClient()
            .getWorkerPoolInstanceMetricDefinitionsWithResponse(
                resourceGroupName, name, workerPoolName, instance, context);
    }

    public Object getMultiRolePoolInstanceMetrics(String resourceGroupName, String name, String instance) {
        return this.serviceClient().getMultiRolePoolInstanceMetrics(resourceGroupName, name, instance);
    }

    public Response<Object> getMultiRolePoolInstanceMetricsWithResponse(
        String resourceGroupName, String name, String instance, Boolean details, Context context) {
        return this
            .serviceClient()
            .getMultiRolePoolInstanceMetricsWithResponse(resourceGroupName, name, instance, details, context);
    }

    public Object getMultiRolePoolInstanceMetricDefinitions(String resourceGroupName, String name, String instance) {
        return this.serviceClient().getMultiRolePoolInstanceMetricDefinitions(resourceGroupName, name, instance);
    }

    public Response<Object> getMultiRolePoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String instance, Context context) {
        return this
            .serviceClient()
            .getMultiRolePoolInstanceMetricDefinitionsWithResponse(resourceGroupName, name, instance, context);
    }

    public PagedIterable<Site> suspendHostingEnvironment(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().suspendHostingEnvironment(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> suspendHostingEnvironment(String resourceGroupName, String name, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().suspendHostingEnvironment(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> resumeHostingEnvironment(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().resumeHostingEnvironment(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> resumeHostingEnvironment(String resourceGroupName, String name, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().resumeHostingEnvironment(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public HostingEnvironment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<HostingEnvironment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public WorkerPool getWorkerPoolById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        String workerPoolName = Utils.getValueFromIdByName(id, "workerPools");
        if (workerPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workerPools'.", id)));
        }
        return this.getWorkerPoolWithResponse(resourceGroupName, name, workerPoolName, Context.NONE).getValue();
    }

    public Response<WorkerPool> getWorkerPoolByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        String workerPoolName = Utils.getValueFromIdByName(id, "workerPools");
        if (workerPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workerPools'.", id)));
        }
        return this.getWorkerPoolWithResponse(resourceGroupName, name, workerPoolName, context);
    }

    public Object deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        Boolean localForceDelete = null;
        return this.delete(resourceGroupName, name, localForceDelete, Context.NONE);
    }

    public Object deleteByIdWithResponse(String id, Boolean forceDelete, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "hostingEnvironments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostingEnvironments'.", id)));
        }
        return this.delete(resourceGroupName, name, forceDelete, context);
    }

    private HostingEnvironmentsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    public HostingEnvironmentImpl defineHostingEnvironment(String name) {
        return new HostingEnvironmentImpl(name, this.manager());
    }

    public WorkerPoolImpl defineWorkerPool(String name) {
        return new WorkerPoolImpl(name, this.manager());
    }
}
