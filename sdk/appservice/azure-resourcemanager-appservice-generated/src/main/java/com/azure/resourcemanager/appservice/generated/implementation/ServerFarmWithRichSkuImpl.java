// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmWithRichSku;
import com.azure.resourcemanager.appservice.generated.models.SkuDescription;
import com.azure.resourcemanager.appservice.generated.models.StatusOptions;
import java.util.Collections;
import java.util.Map;

public final class ServerFarmWithRichSkuImpl
    implements ServerFarmWithRichSku, ServerFarmWithRichSku.Definition, ServerFarmWithRichSku.Update {
    private ServerFarmWithRichSkuInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SkuDescription sku() {
        return this.innerModel().sku();
    }

    public String namePropertiesName() {
        return this.innerModel().namePropertiesName();
    }

    public String workerTierName() {
        return this.innerModel().workerTierName();
    }

    public StatusOptions status() {
        return this.innerModel().status();
    }

    public String subscription() {
        return this.innerModel().subscription();
    }

    public String adminSiteName() {
        return this.innerModel().adminSiteName();
    }

    public HostingEnvironmentProfile hostingEnvironmentProfile() {
        return this.innerModel().hostingEnvironmentProfile();
    }

    public Integer maximumNumberOfWorkers() {
        return this.innerModel().maximumNumberOfWorkers();
    }

    public String geoRegion() {
        return this.innerModel().geoRegion();
    }

    public Boolean perSiteScaling() {
        return this.innerModel().perSiteScaling();
    }

    public Integer numberOfSites() {
        return this.innerModel().numberOfSites();
    }

    public String resourceGroup() {
        return this.innerModel().resourceGroup();
    }

    public Boolean reserved() {
        return this.innerModel().reserved();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ServerFarmWithRichSkuInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private Boolean createAllowPendingState;

    private Boolean updateAllowPendingState;

    public ServerFarmWithRichSkuImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ServerFarmWithRichSku create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .createOrUpdateServerFarm(
                    resourceGroupName, name, this.innerModel(), createAllowPendingState, Context.NONE);
        return this;
    }

    public ServerFarmWithRichSku create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .createOrUpdateServerFarm(resourceGroupName, name, this.innerModel(), createAllowPendingState, context);
        return this;
    }

    ServerFarmWithRichSkuImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new ServerFarmWithRichSkuInner();
        this.serviceManager = serviceManager;
        this.name = name;
        this.createAllowPendingState = null;
    }

    public ServerFarmWithRichSkuImpl update() {
        this.updateAllowPendingState = null;
        return this;
    }

    public ServerFarmWithRichSku apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .createOrUpdateServerFarm(
                    resourceGroupName, name, this.innerModel(), updateAllowPendingState, Context.NONE);
        return this;
    }

    public ServerFarmWithRichSku apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .createOrUpdateServerFarm(resourceGroupName, name, this.innerModel(), updateAllowPendingState, context);
        return this;
    }

    ServerFarmWithRichSkuImpl(ServerFarmWithRichSkuInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "serverfarms");
    }

    public ServerFarmWithRichSku refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public ServerFarmWithRichSku refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServerFarms()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public ServerFarmWithRichSkuImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ServerFarmWithRichSkuImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ServerFarmWithRichSkuImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ServerFarmWithRichSkuImpl withSku(SkuDescription sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ServerFarmWithRichSkuImpl withNamePropertiesName(String namePropertiesName) {
        this.innerModel().withNamePropertiesName(namePropertiesName);
        return this;
    }

    public ServerFarmWithRichSkuImpl withWorkerTierName(String workerTierName) {
        this.innerModel().withWorkerTierName(workerTierName);
        return this;
    }

    public ServerFarmWithRichSkuImpl withAdminSiteName(String adminSiteName) {
        this.innerModel().withAdminSiteName(adminSiteName);
        return this;
    }

    public ServerFarmWithRichSkuImpl withHostingEnvironmentProfile(
        HostingEnvironmentProfile hostingEnvironmentProfile) {
        this.innerModel().withHostingEnvironmentProfile(hostingEnvironmentProfile);
        return this;
    }

    public ServerFarmWithRichSkuImpl withMaximumNumberOfWorkers(Integer maximumNumberOfWorkers) {
        this.innerModel().withMaximumNumberOfWorkers(maximumNumberOfWorkers);
        return this;
    }

    public ServerFarmWithRichSkuImpl withPerSiteScaling(Boolean perSiteScaling) {
        this.innerModel().withPerSiteScaling(perSiteScaling);
        return this;
    }

    public ServerFarmWithRichSkuImpl withReserved(Boolean reserved) {
        this.innerModel().withReserved(reserved);
        return this;
    }

    public ServerFarmWithRichSkuImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ServerFarmWithRichSkuImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public ServerFarmWithRichSkuImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }

    public ServerFarmWithRichSkuImpl withAllowPendingState(Boolean allowPendingState) {
        if (isInCreateMode()) {
            this.createAllowPendingState = allowPendingState;
            return this;
        } else {
            this.updateAllowPendingState = allowPendingState;
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
