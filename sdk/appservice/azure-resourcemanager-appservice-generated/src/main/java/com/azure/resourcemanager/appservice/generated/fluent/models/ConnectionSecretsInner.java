// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The ConnectionSecrets model. */
@Fluent
public final class ConnectionSecretsInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectionSecretsInner.class);

    /*
     * Tokens/Claim
     */
    @JsonProperty(value = "parameterValues")
    private Map<String, Object> parameterValues;

    /*
     * Connection Key
     */
    @JsonProperty(value = "connectionKey")
    private String connectionKey;

    /**
     * Get the parameterValues property: Tokens/Claim.
     *
     * @return the parameterValues value.
     */
    public Map<String, Object> parameterValues() {
        return this.parameterValues;
    }

    /**
     * Set the parameterValues property: Tokens/Claim.
     *
     * @param parameterValues the parameterValues value to set.
     * @return the ConnectionSecretsInner object itself.
     */
    public ConnectionSecretsInner withParameterValues(Map<String, Object> parameterValues) {
        this.parameterValues = parameterValues;
        return this;
    }

    /**
     * Get the connectionKey property: Connection Key.
     *
     * @return the connectionKey value.
     */
    public String connectionKey() {
        return this.connectionKey;
    }

    /**
     * Set the connectionKey property: Connection Key.
     *
     * @param connectionKey the connectionKey value to set.
     * @return the ConnectionSecretsInner object itself.
     */
    public ConnectionSecretsInner withConnectionKey(String connectionKey) {
        this.connectionKey = connectionKey;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
