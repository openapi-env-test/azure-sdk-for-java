// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolInner;

/** Resource collection API of HostingEnvironments. */
public interface HostingEnvironments {
    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    HostingEnvironment getByResourceGroup(String resourceGroupName, String name);

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    Response<HostingEnvironment> getByResourceGroupWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object delete(String resourceGroupName, String name, Boolean forceDelete);

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object delete(String resourceGroupName, String name);

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context);

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    Object getHostingEnvironmentDiagnostics(String resourceGroupName, String name);

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    Response<Object> getHostingEnvironmentDiagnosticsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    HostingEnvironmentDiagnostics getHostingEnvironmentDiagnosticsItem(
        String resourceGroupName, String name, String diagnosticsName);

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    Response<HostingEnvironmentDiagnostics> getHostingEnvironmentDiagnosticsItemWithResponse(
        String resourceGroupName, String name, String diagnosticsName, Context context);

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    PagedIterable<StampCapacity> getHostingEnvironmentCapacities(String resourceGroupName, String name);

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    PagedIterable<StampCapacity> getHostingEnvironmentCapacities(
        String resourceGroupName, String name, Context context);

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    AddressResponse getHostingEnvironmentVips(String resourceGroupName, String name);

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    Response<AddressResponse> getHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName);

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    PagedIterable<HostingEnvironment> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object rebootHostingEnvironment(String resourceGroupName, String name);

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> rebootHostingEnvironmentWithResponse(String resourceGroupName, String name, Context context);

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object getHostingEnvironmentOperations(String resourceGroupName, String name);

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> getHostingEnvironmentOperationsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    Object getHostingEnvironmentOperation(String resourceGroupName, String name, String operationId);

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    Response<Object> getHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context);

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentMetrics(String resourceGroupName, String name);

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context);

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    MetricDefinition getHostingEnvironmentMetricDefinitions(String resourceGroupName, String name);

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    Response<MetricDefinition> getHostingEnvironmentMetricDefinitionsWithResponse(
        String resourceGroupName, String name, Context context);

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    PagedIterable<CsmUsageQuota> getHostingEnvironmentUsages(String resourceGroupName, String name);

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    PagedIterable<CsmUsageQuota> getHostingEnvironmentUsages(
        String resourceGroupName, String name, String filter, Context context);

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentMultiRoleMetrics(String resourceGroupName, String name);

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentMultiRoleMetrics(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter,
        Context context);

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName);

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<ResourceMetric> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter, Context context);

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<MetricDefinition> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name);

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<MetricDefinition> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name, Context context);

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<MetricDefinition> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName);

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<MetricDefinition> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, Context context);

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<Usage> getHostingEnvironmentMultiRoleUsages(String resourceGroupName, String name);

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<Usage> getHostingEnvironmentMultiRoleUsages(String resourceGroupName, String name, Context context);

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<Usage> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName);

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    PagedIterable<Usage> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName, Context context);

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<Site> getHostingEnvironmentSites(String resourceGroupName, String name);

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<Site> getHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context);

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentWebHostingPlans(String resourceGroupName, String name);

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context);

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentServerFarms(String resourceGroupName, String name);

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    PagedIterable<ServerFarmWithRichSku> getHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context);

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    PagedIterable<WorkerPool> getMultiRolePools(String resourceGroupName, String name);

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    PagedIterable<WorkerPool> getMultiRolePools(String resourceGroupName, String name, Context context);

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    WorkerPool getMultiRolePool(String resourceGroupName, String name);

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    Response<WorkerPool> getMultiRolePoolWithResponse(String resourceGroupName, String name, Context context);

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    WorkerPool createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope);

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    WorkerPool createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context);

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    PagedIterable<SkuInfo> getMultiRolePoolSkus(String resourceGroupName, String name);

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    PagedIterable<SkuInfo> getMultiRolePoolSkus(String resourceGroupName, String name, Context context);

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    PagedIterable<WorkerPool> getWorkerPools(String resourceGroupName, String name);

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    PagedIterable<WorkerPool> getWorkerPools(String resourceGroupName, String name, Context context);

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    WorkerPool getWorkerPool(String resourceGroupName, String name, String workerPoolName);

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    Response<WorkerPool> getWorkerPoolWithResponse(
        String resourceGroupName, String name, String workerPoolName, Context context);

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    PagedIterable<SkuInfo> getWorkerPoolSkus(String resourceGroupName, String name, String workerPoolName);

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    PagedIterable<SkuInfo> getWorkerPoolSkus(
        String resourceGroupName, String name, String workerPoolName, Context context);

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    Object getWorkerPoolInstanceMetrics(String resourceGroupName, String name, String workerPoolName, String instance);

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    Response<Object> getWorkerPoolInstanceMetricsWithResponse(
        String resourceGroupName,
        String name,
        String workerPoolName,
        String instance,
        Boolean details,
        String filter,
        Context context);

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    Object getWorkerPoolInstanceMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, String instance);

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    Response<Object> getWorkerPoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String workerPoolName, String instance, Context context);

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    Object getMultiRolePoolInstanceMetrics(String resourceGroupName, String name, String instance);

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @param details Include instance details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    Response<Object> getMultiRolePoolInstanceMetricsWithResponse(
        String resourceGroupName, String name, String instance, Boolean details, Context context);

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    Object getMultiRolePoolInstanceMetricDefinitions(String resourceGroupName, String name, String instance);

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    Response<Object> getMultiRolePoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String instance, Context context);

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    PagedIterable<Site> suspendHostingEnvironment(String resourceGroupName, String name);

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    PagedIterable<Site> suspendHostingEnvironment(String resourceGroupName, String name, Context context);

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    PagedIterable<Site> resumeHostingEnvironment(String resourceGroupName, String name);

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    PagedIterable<Site> resumeHostingEnvironment(String resourceGroupName, String name, Context context);

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    HostingEnvironment getById(String id);

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    Response<HostingEnvironment> getByIdWithResponse(String id, Context context);

    /**
     * Get properties of a worker pool.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    WorkerPool getWorkerPoolById(String id);

    /**
     * Get properties of a worker pool.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    Response<WorkerPool> getWorkerPoolByIdWithResponse(String id, Context context);

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteById(String id);

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param id the resource ID.
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object deleteByIdWithResponse(String id, Boolean forceDelete, Context context);

    /**
     * Begins definition for a new HostingEnvironment resource.
     *
     * @param name resource name.
     * @return the first stage of the new HostingEnvironment definition.
     */
    HostingEnvironment.DefinitionStages.Blank defineHostingEnvironment(String name);

    /**
     * Begins definition for a new WorkerPool resource.
     *
     * @param name resource name.
     * @return the first stage of the new WorkerPool definition.
     */
    WorkerPool.DefinitionStages.Blank defineWorkerPool(String name);
}
