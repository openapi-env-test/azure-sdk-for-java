// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.GlobalsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ClassicMobileServiceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.GeoRegionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ManagedHostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceNameAvailabilityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;
import com.azure.resourcemanager.appservice.generated.models.Certificate;
import com.azure.resourcemanager.appservice.generated.models.ClassicMobileService;
import com.azure.resourcemanager.appservice.generated.models.GeoRegion;
import com.azure.resourcemanager.appservice.generated.models.Globals;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.ManagedHostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.ResourceNameAvailability;
import com.azure.resourcemanager.appservice.generated.models.ResourceNameAvailabilityRequest;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmWithRichSku;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.User;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class GlobalsImpl implements Globals {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GlobalsImpl.class);

    private final GlobalsClient innerClient;

    private final WebSiteManager serviceManager;

    public GlobalsImpl(GlobalsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public User getSubscriptionPublishingCredentials() {
        UserInner inner = this.serviceClient().getSubscriptionPublishingCredentials();
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<User> getSubscriptionPublishingCredentialsWithResponse(Context context) {
        Response<UserInner> inner = this.serviceClient().getSubscriptionPublishingCredentialsWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User updateSubscriptionPublishingCredentials(UserInner requestMessage) {
        UserInner inner = this.serviceClient().updateSubscriptionPublishingCredentials(requestMessage);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<User> updateSubscriptionPublishingCredentialsWithResponse(
        UserInner requestMessage, Context context) {
        Response<UserInner> inner =
            this.serviceClient().updateSubscriptionPublishingCredentialsWithResponse(requestMessage, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<GeoRegion> list() {
        PagedIterable<GeoRegionInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new GeoRegionImpl(inner1, this.manager()));
    }

    public PagedIterable<GeoRegion> list(String sku, Boolean linuxWorkersEnabled, Context context) {
        PagedIterable<GeoRegionInner> inner = this.serviceClient().list(sku, linuxWorkersEnabled, context);
        return inner.mapPage(inner1 -> new GeoRegionImpl(inner1, this.manager()));
    }

    public PagedIterable<Certificate> getAllCertificates() {
        PagedIterable<CertificateInner> inner = this.serviceClient().getAllCertificates();
        return inner.mapPage(inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<Certificate> getAllCertificates(Context context) {
        PagedIterable<CertificateInner> inner = this.serviceClient().getAllCertificates(context);
        return inner.mapPage(inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getAllServerFarms() {
        PagedIterable<ServerFarmWithRichSkuInner> inner = this.serviceClient().getAllServerFarms();
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> getAllServerFarms(Boolean detailed, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner = this.serviceClient().getAllServerFarms(detailed, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getAllSites() {
        PagedIterable<SiteInner> inner = this.serviceClient().getAllSites();
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getAllSites(Context context) {
        PagedIterable<SiteInner> inner = this.serviceClient().getAllSites(context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<HostingEnvironment> getAllHostingEnvironments() {
        PagedIterable<HostingEnvironmentInner> inner = this.serviceClient().getAllHostingEnvironments();
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<HostingEnvironment> getAllHostingEnvironments(Context context) {
        PagedIterable<HostingEnvironmentInner> inner = this.serviceClient().getAllHostingEnvironments(context);
        return inner.mapPage(inner1 -> new HostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedHostingEnvironment> getAllManagedHostingEnvironments() {
        PagedIterable<ManagedHostingEnvironmentInner> inner = this.serviceClient().getAllManagedHostingEnvironments();
        return inner.mapPage(inner1 -> new ManagedHostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedHostingEnvironment> getAllManagedHostingEnvironments(Context context) {
        PagedIterable<ManagedHostingEnvironmentInner> inner =
            this.serviceClient().getAllManagedHostingEnvironments(context);
        return inner.mapPage(inner1 -> new ManagedHostingEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<ClassicMobileService> getAllClassicMobileServices() {
        PagedIterable<ClassicMobileServiceInner> inner = this.serviceClient().getAllClassicMobileServices();
        return inner.mapPage(inner1 -> new ClassicMobileServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<ClassicMobileService> getAllClassicMobileServices(Context context) {
        PagedIterable<ClassicMobileServiceInner> inner = this.serviceClient().getAllClassicMobileServices(context);
        return inner.mapPage(inner1 -> new ClassicMobileServiceImpl(inner1, this.manager()));
    }

    public Object listPremierAddOnOffers() {
        return this.serviceClient().listPremierAddOnOffers();
    }

    public Response<Object> listPremierAddOnOffersWithResponse(Context context) {
        return this.serviceClient().listPremierAddOnOffersWithResponse(context);
    }

    public Object isHostingEnvironmentNameAvailable(String name) {
        return this.serviceClient().isHostingEnvironmentNameAvailable(name);
    }

    public Response<Object> isHostingEnvironmentNameAvailableWithResponse(String name, Context context) {
        return this.serviceClient().isHostingEnvironmentNameAvailableWithResponse(name, context);
    }

    public Object isHostingEnvironmentWithLegacyNameAvailable(String name) {
        return this.serviceClient().isHostingEnvironmentWithLegacyNameAvailable(name);
    }

    public Response<Object> isHostingEnvironmentWithLegacyNameAvailableWithResponse(String name, Context context) {
        return this.serviceClient().isHostingEnvironmentWithLegacyNameAvailableWithResponse(name, context);
    }

    public ResourceNameAvailability checkNameAvailability(ResourceNameAvailabilityRequest request) {
        ResourceNameAvailabilityInner inner = this.serviceClient().checkNameAvailability(request);
        if (inner != null) {
            return new ResourceNameAvailabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceNameAvailability> checkNameAvailabilityWithResponse(
        ResourceNameAvailabilityRequest request, Context context) {
        Response<ResourceNameAvailabilityInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceNameAvailabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private GlobalsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
