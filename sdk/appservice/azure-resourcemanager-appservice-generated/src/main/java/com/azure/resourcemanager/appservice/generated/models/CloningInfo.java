// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Represents information needed for cloning operation. */
@Fluent
public final class CloningInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloningInfo.class);

    /*
     * Correlation Id of cloning operation. This id ties multiple cloning
     * operations
     * together to use the same snapshot
     */
    @JsonProperty(value = "correlationId")
    private String correlationId;

    /*
     * Overwrite destination web app
     */
    @JsonProperty(value = "overwrite")
    private Boolean overwrite;

    /*
     * If true, clone custom hostnames from source web app
     */
    @JsonProperty(value = "cloneCustomHostNames")
    private Boolean cloneCustomHostNames;

    /*
     * Clone source control from source web app
     */
    @JsonProperty(value = "cloneSourceControl")
    private Boolean cloneSourceControl;

    /*
     * ARM resource id of the source web app. Web app resource id is of the
     * form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots
     */
    @JsonProperty(value = "sourceWebAppId")
    private String sourceWebAppId;

    /*
     * Hosting environment
     */
    @JsonProperty(value = "hostingEnvironment")
    private String hostingEnvironment;

    /*
     * Application settings overrides for cloned web app. If specified these
     * settings will override the settings cloned
     * from source web app. If not specified, application settings from source
     * web app are retained.
     */
    @JsonProperty(value = "appSettingsOverrides")
    private Map<String, String> appSettingsOverrides;

    /*
     * If specified configure load balancing for source and clone site
     */
    @JsonProperty(value = "configureLoadBalancing")
    private Boolean configureLoadBalancing;

    /*
     * ARM resource id of the traffic manager profile to use if it exists.
     * Traffic manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
     */
    @JsonProperty(value = "trafficManagerProfileId")
    private String trafficManagerProfileId;

    /*
     * Name of traffic manager profile to create. This is only needed if
     * traffic manager profile does not already exist
     */
    @JsonProperty(value = "trafficManagerProfileName")
    private String trafficManagerProfileName;

    /**
     * Get the correlationId property: Correlation Id of cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Correlation Id of cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param correlationId the correlationId value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the overwrite property: Overwrite destination web app.
     *
     * @return the overwrite value.
     */
    public Boolean overwrite() {
        return this.overwrite;
    }

    /**
     * Set the overwrite property: Overwrite destination web app.
     *
     * @param overwrite the overwrite value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withOverwrite(Boolean overwrite) {
        this.overwrite = overwrite;
        return this;
    }

    /**
     * Get the cloneCustomHostNames property: If true, clone custom hostnames from source web app.
     *
     * @return the cloneCustomHostNames value.
     */
    public Boolean cloneCustomHostNames() {
        return this.cloneCustomHostNames;
    }

    /**
     * Set the cloneCustomHostNames property: If true, clone custom hostnames from source web app.
     *
     * @param cloneCustomHostNames the cloneCustomHostNames value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withCloneCustomHostNames(Boolean cloneCustomHostNames) {
        this.cloneCustomHostNames = cloneCustomHostNames;
        return this;
    }

    /**
     * Get the cloneSourceControl property: Clone source control from source web app.
     *
     * @return the cloneSourceControl value.
     */
    public Boolean cloneSourceControl() {
        return this.cloneSourceControl;
    }

    /**
     * Set the cloneSourceControl property: Clone source control from source web app.
     *
     * @param cloneSourceControl the cloneSourceControl value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withCloneSourceControl(Boolean cloneSourceControl) {
        this.cloneSourceControl = cloneSourceControl;
        return this;
    }

    /**
     * Get the sourceWebAppId property: ARM resource id of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production
     * slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @return the sourceWebAppId value.
     */
    public String sourceWebAppId() {
        return this.sourceWebAppId;
    }

    /**
     * Set the sourceWebAppId property: ARM resource id of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production
     * slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param sourceWebAppId the sourceWebAppId value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withSourceWebAppId(String sourceWebAppId) {
        this.sourceWebAppId = sourceWebAppId;
        return this;
    }

    /**
     * Get the hostingEnvironment property: Hosting environment.
     *
     * @return the hostingEnvironment value.
     */
    public String hostingEnvironment() {
        return this.hostingEnvironment;
    }

    /**
     * Set the hostingEnvironment property: Hosting environment.
     *
     * @param hostingEnvironment the hostingEnvironment value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withHostingEnvironment(String hostingEnvironment) {
        this.hostingEnvironment = hostingEnvironment;
        return this;
    }

    /**
     * Get the appSettingsOverrides property: Application settings overrides for cloned web app. If specified these
     * settings will override the settings cloned from source web app. If not specified, application settings from
     * source web app are retained.
     *
     * @return the appSettingsOverrides value.
     */
    public Map<String, String> appSettingsOverrides() {
        return this.appSettingsOverrides;
    }

    /**
     * Set the appSettingsOverrides property: Application settings overrides for cloned web app. If specified these
     * settings will override the settings cloned from source web app. If not specified, application settings from
     * source web app are retained.
     *
     * @param appSettingsOverrides the appSettingsOverrides value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withAppSettingsOverrides(Map<String, String> appSettingsOverrides) {
        this.appSettingsOverrides = appSettingsOverrides;
        return this;
    }

    /**
     * Get the configureLoadBalancing property: If specified configure load balancing for source and clone site.
     *
     * @return the configureLoadBalancing value.
     */
    public Boolean configureLoadBalancing() {
        return this.configureLoadBalancing;
    }

    /**
     * Set the configureLoadBalancing property: If specified configure load balancing for source and clone site.
     *
     * @param configureLoadBalancing the configureLoadBalancing value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withConfigureLoadBalancing(Boolean configureLoadBalancing) {
        this.configureLoadBalancing = configureLoadBalancing;
        return this;
    }

    /**
     * Get the trafficManagerProfileId property: ARM resource id of the traffic manager profile to use if it exists.
     * Traffic manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @return the trafficManagerProfileId value.
     */
    public String trafficManagerProfileId() {
        return this.trafficManagerProfileId;
    }

    /**
     * Set the trafficManagerProfileId property: ARM resource id of the traffic manager profile to use if it exists.
     * Traffic manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param trafficManagerProfileId the trafficManagerProfileId value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withTrafficManagerProfileId(String trafficManagerProfileId) {
        this.trafficManagerProfileId = trafficManagerProfileId;
        return this;
    }

    /**
     * Get the trafficManagerProfileName property: Name of traffic manager profile to create. This is only needed if
     * traffic manager profile does not already exist.
     *
     * @return the trafficManagerProfileName value.
     */
    public String trafficManagerProfileName() {
        return this.trafficManagerProfileName;
    }

    /**
     * Set the trafficManagerProfileName property: Name of traffic manager profile to create. This is only needed if
     * traffic manager profile does not already exist.
     *
     * @param trafficManagerProfileName the trafficManagerProfileName value to set.
     * @return the CloningInfo object itself.
     */
    public CloningInfo withTrafficManagerProfileName(String trafficManagerProfileName) {
        this.trafficManagerProfileName = trafficManagerProfileName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
