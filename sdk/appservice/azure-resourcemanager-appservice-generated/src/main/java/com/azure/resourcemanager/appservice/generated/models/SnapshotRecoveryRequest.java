// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Details about app recovery operation. */
@JsonFlatten
@Fluent
public class SnapshotRecoveryRequest extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SnapshotRecoveryRequest.class);

    /*
     * Point in time in which the app recovery should be attempted, formatted
     * as a DateTime string.
     */
    @JsonProperty(value = "properties.snapshotTime")
    private String snapshotTime;

    /*
     * Specifies the web app that snapshot contents will be written to.
     */
    @JsonProperty(value = "properties.recoveryTarget")
    private SnapshotRecoveryTarget recoveryTarget;

    /*
     * If <code>true</code> the recovery operation can overwrite source app;
     * otherwise, <code>false</code>.
     */
    @JsonProperty(value = "properties.overwrite")
    private Boolean overwrite;

    /*
     * If true, site configuration, in addition to content, will be reverted.
     */
    @JsonProperty(value = "properties.recoverConfiguration")
    private Boolean recoverConfiguration;

    /*
     * If true, custom hostname conflicts will be ignored when recovering to a
     * target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     */
    @JsonProperty(value = "properties.ignoreConflictingHostNames")
    private Boolean ignoreConflictingHostNames;

    /**
     * Get the snapshotTime property: Point in time in which the app recovery should be attempted, formatted as a
     * DateTime string.
     *
     * @return the snapshotTime value.
     */
    public String snapshotTime() {
        return this.snapshotTime;
    }

    /**
     * Set the snapshotTime property: Point in time in which the app recovery should be attempted, formatted as a
     * DateTime string.
     *
     * @param snapshotTime the snapshotTime value to set.
     * @return the SnapshotRecoveryRequest object itself.
     */
    public SnapshotRecoveryRequest withSnapshotTime(String snapshotTime) {
        this.snapshotTime = snapshotTime;
        return this;
    }

    /**
     * Get the recoveryTarget property: Specifies the web app that snapshot contents will be written to.
     *
     * @return the recoveryTarget value.
     */
    public SnapshotRecoveryTarget recoveryTarget() {
        return this.recoveryTarget;
    }

    /**
     * Set the recoveryTarget property: Specifies the web app that snapshot contents will be written to.
     *
     * @param recoveryTarget the recoveryTarget value to set.
     * @return the SnapshotRecoveryRequest object itself.
     */
    public SnapshotRecoveryRequest withRecoveryTarget(SnapshotRecoveryTarget recoveryTarget) {
        this.recoveryTarget = recoveryTarget;
        return this;
    }

    /**
     * Get the overwrite property: If &lt;code&gt;true&lt;/code&gt; the recovery operation can overwrite source app;
     * otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the overwrite value.
     */
    public Boolean overwrite() {
        return this.overwrite;
    }

    /**
     * Set the overwrite property: If &lt;code&gt;true&lt;/code&gt; the recovery operation can overwrite source app;
     * otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @param overwrite the overwrite value to set.
     * @return the SnapshotRecoveryRequest object itself.
     */
    public SnapshotRecoveryRequest withOverwrite(Boolean overwrite) {
        this.overwrite = overwrite;
        return this;
    }

    /**
     * Get the recoverConfiguration property: If true, site configuration, in addition to content, will be reverted.
     *
     * @return the recoverConfiguration value.
     */
    public Boolean recoverConfiguration() {
        return this.recoverConfiguration;
    }

    /**
     * Set the recoverConfiguration property: If true, site configuration, in addition to content, will be reverted.
     *
     * @param recoverConfiguration the recoverConfiguration value to set.
     * @return the SnapshotRecoveryRequest object itself.
     */
    public SnapshotRecoveryRequest withRecoverConfiguration(Boolean recoverConfiguration) {
        this.recoverConfiguration = recoverConfiguration;
        return this;
    }

    /**
     * Get the ignoreConflictingHostNames property: If true, custom hostname conflicts will be ignored when recovering
     * to a target web app. This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @return the ignoreConflictingHostNames value.
     */
    public Boolean ignoreConflictingHostNames() {
        return this.ignoreConflictingHostNames;
    }

    /**
     * Set the ignoreConflictingHostNames property: If true, custom hostname conflicts will be ignored when recovering
     * to a target web app. This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param ignoreConflictingHostNames the ignoreConflictingHostNames value to set.
     * @return the SnapshotRecoveryRequest object itself.
     */
    public SnapshotRecoveryRequest withIgnoreConflictingHostNames(Boolean ignoreConflictingHostNames) {
        this.ignoreConflictingHostNames = ignoreConflictingHostNames;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SnapshotRecoveryRequest withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (recoveryTarget() != null) {
            recoveryTarget().validate();
        }
    }
}
