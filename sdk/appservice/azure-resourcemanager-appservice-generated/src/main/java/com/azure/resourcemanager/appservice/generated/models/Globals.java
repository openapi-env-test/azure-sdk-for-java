// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;

/** Resource collection API of Globals. */
public interface Globals {
    /**
     * Gets publishing credentials for the subscription owner.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publishing credentials for the subscription owner.
     */
    User getSubscriptionPublishingCredentials();

    /**
     * Gets publishing credentials for the subscription owner.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publishing credentials for the subscription owner.
     */
    Response<User> getSubscriptionPublishingCredentialsWithResponse(Context context);

    /**
     * Updates publishing credentials for the subscription owner.
     *
     * @param requestMessage requestMessage with new publishing credentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    User updateSubscriptionPublishingCredentials(UserInner requestMessage);

    /**
     * Updates publishing credentials for the subscription owner.
     *
     * @param requestMessage requestMessage with new publishing credentials.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    Response<User> updateSubscriptionPublishingCredentialsWithResponse(UserInner requestMessage, Context context);

    /**
     * Gets list of available geo regions.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available geo regions.
     */
    PagedIterable<GeoRegion> list();

    /**
     * Gets list of available geo regions.
     *
     * @param sku Filter only to regions that support this sku.
     * @param linuxWorkersEnabled Filter only to regions that support linux workers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available geo regions.
     */
    PagedIterable<GeoRegion> list(String sku, Boolean linuxWorkersEnabled, Context context);

    /**
     * Get all certificates for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all certificates for a subscription.
     */
    PagedIterable<Certificate> getAllCertificates();

    /**
     * Get all certificates for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all certificates for a subscription.
     */
    PagedIterable<Certificate> getAllCertificates(Context context);

    /**
     * Gets all App Service Plans for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all App Service Plans for a subscription.
     */
    PagedIterable<ServerFarmWithRichSku> getAllServerFarms();

    /**
     * Gets all App Service Plans for a subscription.
     *
     * @param detailed False to return a subset of App Service Plan properties, true to return all of the properties.
     *     Retrieval of all properties may increase the API latency.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all App Service Plans for a subscription.
     */
    PagedIterable<ServerFarmWithRichSku> getAllServerFarms(Boolean detailed, Context context);

    /**
     * Gets all Web Apps for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Web Apps for a subscription.
     */
    PagedIterable<Site> getAllSites();

    /**
     * Gets all Web Apps for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Web Apps for a subscription.
     */
    PagedIterable<Site> getAllSites(Context context);

    /**
     * Gets all hostingEnvironments (App Service Environment) for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environment) for a subscription.
     */
    PagedIterable<HostingEnvironment> getAllHostingEnvironments();

    /**
     * Gets all hostingEnvironments (App Service Environment) for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environment) for a subscription.
     */
    PagedIterable<HostingEnvironment> getAllHostingEnvironments(Context context);

    /**
     * Gets all managed hosting environments for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments for a subscription.
     */
    PagedIterable<ManagedHostingEnvironment> getAllManagedHostingEnvironments();

    /**
     * Gets all managed hosting environments for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed hosting environments for a subscription.
     */
    PagedIterable<ManagedHostingEnvironment> getAllManagedHostingEnvironments(Context context);

    /**
     * Gets all mobile services for a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all mobile services for a subscription.
     */
    PagedIterable<ClassicMobileService> getAllClassicMobileServices();

    /**
     * Gets all mobile services for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all mobile services for a subscription.
     */
    PagedIterable<ClassicMobileService> getAllClassicMobileServices(Context context);

    /**
     * List premier add on offers.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object listPremierAddOnOffers();

    /**
     * List premier add on offers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> listPremierAddOnOffersWithResponse(Context context);

    /**
     * Whether hosting environment name is available.
     *
     * @param name Hosting environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object isHostingEnvironmentNameAvailable(String name);

    /**
     * Whether hosting environment name is available.
     *
     * @param name Hosting environment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> isHostingEnvironmentNameAvailableWithResponse(String name, Context context);

    /**
     * Whether hosting environment name is available.
     *
     * @param name Hosting environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Object isHostingEnvironmentWithLegacyNameAvailable(String name);

    /**
     * Whether hosting environment name is available.
     *
     * @param name Hosting environment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    Response<Object> isHostingEnvironmentWithLegacyNameAvailableWithResponse(String name, Context context);

    /**
     * Check if resource name is available.
     *
     * @param request Name availability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes if a resource name is available.
     */
    ResourceNameAvailability checkNameAvailability(ResourceNameAvailabilityRequest request);

    /**
     * Check if resource name is available.
     *
     * @param request Name availability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes if a resource name is available.
     */
    Response<ResourceNameAvailability> checkNameAvailabilityWithResponse(
        ResourceNameAvailabilityRequest request, Context context);
}
