// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.models.VnetGateway;
import java.util.Collections;
import java.util.Map;

public final class VnetGatewayImpl implements VnetGateway, VnetGateway.Definition, VnetGateway.Update {
    private VnetGatewayInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String vnetName() {
        return this.innerModel().vnetName();
    }

    public String vpnPackageUri() {
        return this.innerModel().vpnPackageUri();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public VnetGatewayInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private String vnetName;

    private String gatewayName;

    private String slot;

    public VnetGatewayImpl withExistingVirtualNetworkConnection(
        String resourceGroupName, String name, String vnetName, String slot) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        this.vnetName = vnetName;
        this.slot = slot;
        return this;
    }

    public VnetGateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSiteVnetConnectionGatewaySlotWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, slot, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public VnetGateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .createOrUpdateSiteVnetConnectionGatewaySlotWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, slot, this.innerModel(), context)
                .getValue();
        return this;
    }

    VnetGatewayImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new VnetGatewayInner();
        this.serviceManager = serviceManager;
        this.gatewayName = name;
    }

    public VnetGatewayImpl update() {
        return this;
    }

    public VnetGateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .updateSiteVnetConnectionGatewaySlotWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, slot, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public VnetGateway apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSites()
                .updateSiteVnetConnectionGatewaySlotWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, slot, this.innerModel(), context)
                .getValue();
        return this;
    }

    VnetGatewayImpl(VnetGatewayInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "sites");
        this.vnetName = Utils.getValueFromIdByName(innerObject.id(), "virtualNetworkConnections");
        this.gatewayName = Utils.getValueFromIdByName(innerObject.id(), "gateways");
        this.slot = Utils.getValueFromIdByName(innerObject.id(), "slots");
    }

    public VnetGatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VnetGatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VnetGatewayImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public VnetGatewayImpl withVnetName(String vnetName) {
        this.innerModel().withVnetName(vnetName);
        return this;
    }

    public VnetGatewayImpl withVpnPackageUri(String vpnPackageUri) {
        this.innerModel().withVpnPackageUri(vpnPackageUri);
        return this;
    }

    public VnetGatewayImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public VnetGatewayImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public VnetGatewayImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }
}
