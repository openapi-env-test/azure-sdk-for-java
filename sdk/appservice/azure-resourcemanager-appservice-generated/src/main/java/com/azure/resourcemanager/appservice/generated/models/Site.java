// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Site. */
public interface Site {
    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the namePropertiesName property: Name of web app.
     *
     * @return the namePropertiesName value.
     */
    String namePropertiesName();

    /**
     * Gets the state property: State of the web app.
     *
     * @return the state value.
     */
    String state();

    /**
     * Gets the hostNames property: Hostnames associated with web app.
     *
     * @return the hostNames value.
     */
    List<String> hostNames();

    /**
     * Gets the repositorySiteName property: Name of repository site.
     *
     * @return the repositorySiteName value.
     */
    String repositorySiteName();

    /**
     * Gets the usageState property: State indicating whether web app has exceeded its quota usage.
     *
     * @return the usageState value.
     */
    UsageState usageState();

    /**
     * Gets the enabled property: True if the site is enabled; otherwise, false. Setting this value to false disables
     * the site (takes the site off line).
     *
     * @return the enabled value.
     */
    Boolean enabled();

    /**
     * Gets the enabledHostNames property: Hostnames for the web app that are enabled. Hostnames need to be assigned and
     * enabled. If some hostnames are assigned but not enabled the app is not served on those hostnames.
     *
     * @return the enabledHostNames value.
     */
    List<String> enabledHostNames();

    /**
     * Gets the availabilityState property: Management information availability state for the web app. Possible values
     * are Normal or Limited. Normal means that the site is running correctly and that management information for the
     * site is available. Limited means that only partial management information for the site is available and that
     * detailed site information is unavailable.
     *
     * @return the availabilityState value.
     */
    SiteAvailabilityState availabilityState();

    /**
     * Gets the hostnameSslStates property: Hostname SSL states are used to manage the SSL bindings for site's
     * hostnames.
     *
     * @return the hostnameSslStates value.
     */
    List<HostnameSslState> hostnameSslStates();

    /**
     * Gets the serverFarmId property: The serverFarmId property.
     *
     * @return the serverFarmId value.
     */
    String serverFarmId();

    /**
     * Gets the lastModifiedTimeUtc property: Last time web app was modified in UTC.
     *
     * @return the lastModifiedTimeUtc value.
     */
    OffsetDateTime lastModifiedTimeUtc();

    /**
     * Gets the siteConfig property: Configuration of web app.
     *
     * @return the siteConfig value.
     */
    SiteConfig siteConfig();

    /**
     * Gets the trafficManagerHostNames property: Read-only list of Azure Traffic manager hostnames associated with web
     * app.
     *
     * @return the trafficManagerHostNames value.
     */
    List<String> trafficManagerHostNames();

    /**
     * Gets the premiumAppDeployed property: If set indicates whether web app is deployed as a premium app.
     *
     * @return the premiumAppDeployed value.
     */
    Boolean premiumAppDeployed();

    /**
     * Gets the scmSiteAlsoStopped property: If set indicates whether to stop SCM (KUDU) site when the web app is
     * stopped. Default is false.
     *
     * @return the scmSiteAlsoStopped value.
     */
    Boolean scmSiteAlsoStopped();

    /**
     * Gets the targetSwapSlot property: Read-only property that specifies which slot this app will swap into.
     *
     * @return the targetSwapSlot value.
     */
    String targetSwapSlot();

    /**
     * Gets the hostingEnvironmentProfile property: Specification for the hosting environment (App Service Environment)
     * to use for the web app.
     *
     * @return the hostingEnvironmentProfile value.
     */
    HostingEnvironmentProfile hostingEnvironmentProfile();

    /**
     * Gets the microService property: The microService property.
     *
     * @return the microService value.
     */
    String microService();

    /**
     * Gets the gatewaySiteName property: Name of gateway app associated with web app.
     *
     * @return the gatewaySiteName value.
     */
    String gatewaySiteName();

    /**
     * Gets the clientAffinityEnabled property: Specifies if the client affinity is enabled when load balancing http
     * request for multiple instances of the web app.
     *
     * @return the clientAffinityEnabled value.
     */
    Boolean clientAffinityEnabled();

    /**
     * Gets the clientCertEnabled property: Specifies if the client certificate is enabled for the web app.
     *
     * @return the clientCertEnabled value.
     */
    Boolean clientCertEnabled();

    /**
     * Gets the hostNamesDisabled property: Specifies if the public hostnames are disabled the web app. If set to true
     * the app is only accessible via API Management process.
     *
     * @return the hostNamesDisabled value.
     */
    Boolean hostNamesDisabled();

    /**
     * Gets the outboundIpAddresses property: List of comma separated IP addresses that this web app uses for outbound
     * connections. Those can be used when configuring firewall rules for databases accessed by this web app.
     *
     * @return the outboundIpAddresses value.
     */
    String outboundIpAddresses();

    /**
     * Gets the containerSize property: Size of a function container.
     *
     * @return the containerSize value.
     */
    Integer containerSize();

    /**
     * Gets the maxNumberOfWorkers property: Maximum number of workers This only applies to function container.
     *
     * @return the maxNumberOfWorkers value.
     */
    Integer maxNumberOfWorkers();

    /**
     * Gets the cloningInfo property: This is only valid for web app creation. If specified, web app is cloned from a
     * source web app.
     *
     * @return the cloningInfo value.
     */
    CloningInfo cloningInfo();

    /**
     * Gets the resourceGroup property: Resource group web app belongs to.
     *
     * @return the resourceGroup value.
     */
    String resourceGroup();

    /**
     * Gets the isDefaultContainer property: Site is a default container.
     *
     * @return the isDefaultContainer value.
     */
    Boolean isDefaultContainer();

    /**
     * Gets the defaultHostname property: Default hostname of the web app.
     *
     * @return the defaultHostname value.
     */
    String defaultHostname();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the id property: Resource Id.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: Resource Name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner object.
     *
     * @return the inner object.
     */
    SiteInner innerModel();

    /** The entirety of the Site definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The Site definition stages. */
    interface DefinitionStages {
        /** The first stage of the Site definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Site definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the Site definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the Site definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithNamePropertiesName,
                DefinitionStages.WithEnabled,
                DefinitionStages.WithHostnameSslStates,
                DefinitionStages.WithServerFarmId,
                DefinitionStages.WithSiteConfig,
                DefinitionStages.WithScmSiteAlsoStopped,
                DefinitionStages.WithHostingEnvironmentProfile,
                DefinitionStages.WithMicroService,
                DefinitionStages.WithGatewaySiteName,
                DefinitionStages.WithClientAffinityEnabled,
                DefinitionStages.WithClientCertEnabled,
                DefinitionStages.WithHostNamesDisabled,
                DefinitionStages.WithContainerSize,
                DefinitionStages.WithMaxNumberOfWorkers,
                DefinitionStages.WithCloningInfo,
                DefinitionStages.WithKind,
                DefinitionStages.WithName,
                DefinitionStages.WithType,
                DefinitionStages.WithSkipDnsRegistration,
                DefinitionStages.WithSkipCustomDomainVerification,
                DefinitionStages.WithForceDnsRegistration,
                DefinitionStages.WithTtlInSeconds {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Site create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Site create(Context context);
        }
        /** The stage of the Site definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Site definition allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: Name of web app.
             *
             * @param namePropertiesName Name of web app.
             * @return the next definition stage.
             */
            WithCreate withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the Site definition allowing to specify enabled. */
        interface WithEnabled {
            /**
             * Specifies the enabled property: True if the site is enabled; otherwise, false. Setting this value to
             * false disables the site (takes the site off line)..
             *
             * @param enabled True if the site is enabled; otherwise, false. Setting this value to false disables the
             *     site (takes the site off line).
             * @return the next definition stage.
             */
            WithCreate withEnabled(Boolean enabled);
        }
        /** The stage of the Site definition allowing to specify hostnameSslStates. */
        interface WithHostnameSslStates {
            /**
             * Specifies the hostnameSslStates property: Hostname SSL states are used to manage the SSL bindings for
             * site's hostnames..
             *
             * @param hostnameSslStates Hostname SSL states are used to manage the SSL bindings for site's hostnames.
             * @return the next definition stage.
             */
            WithCreate withHostnameSslStates(List<HostnameSslState> hostnameSslStates);
        }
        /** The stage of the Site definition allowing to specify serverFarmId. */
        interface WithServerFarmId {
            /**
             * Specifies the serverFarmId property: The serverFarmId property..
             *
             * @param serverFarmId The serverFarmId property.
             * @return the next definition stage.
             */
            WithCreate withServerFarmId(String serverFarmId);
        }
        /** The stage of the Site definition allowing to specify siteConfig. */
        interface WithSiteConfig {
            /**
             * Specifies the siteConfig property: Configuration of web app.
             *
             * @param siteConfig Configuration of web app.
             * @return the next definition stage.
             */
            WithCreate withSiteConfig(SiteConfigInner siteConfig);
        }
        /** The stage of the Site definition allowing to specify scmSiteAlsoStopped. */
        interface WithScmSiteAlsoStopped {
            /**
             * Specifies the scmSiteAlsoStopped property: If set indicates whether to stop SCM (KUDU) site when the web
             * app is stopped. Default is false..
             *
             * @param scmSiteAlsoStopped If set indicates whether to stop SCM (KUDU) site when the web app is stopped.
             *     Default is false.
             * @return the next definition stage.
             */
            WithCreate withScmSiteAlsoStopped(Boolean scmSiteAlsoStopped);
        }
        /** The stage of the Site definition allowing to specify hostingEnvironmentProfile. */
        interface WithHostingEnvironmentProfile {
            /**
             * Specifies the hostingEnvironmentProfile property: Specification for the hosting environment (App Service
             * Environment) to use for the web app.
             *
             * @param hostingEnvironmentProfile Specification for the hosting environment (App Service Environment) to
             *     use for the web app.
             * @return the next definition stage.
             */
            WithCreate withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile);
        }
        /** The stage of the Site definition allowing to specify microService. */
        interface WithMicroService {
            /**
             * Specifies the microService property: The microService property..
             *
             * @param microService The microService property.
             * @return the next definition stage.
             */
            WithCreate withMicroService(String microService);
        }
        /** The stage of the Site definition allowing to specify gatewaySiteName. */
        interface WithGatewaySiteName {
            /**
             * Specifies the gatewaySiteName property: Name of gateway app associated with web app.
             *
             * @param gatewaySiteName Name of gateway app associated with web app.
             * @return the next definition stage.
             */
            WithCreate withGatewaySiteName(String gatewaySiteName);
        }
        /** The stage of the Site definition allowing to specify clientAffinityEnabled. */
        interface WithClientAffinityEnabled {
            /**
             * Specifies the clientAffinityEnabled property: Specifies if the client affinity is enabled when load
             * balancing http request for multiple instances of the web app.
             *
             * @param clientAffinityEnabled Specifies if the client affinity is enabled when load balancing http request
             *     for multiple instances of the web app.
             * @return the next definition stage.
             */
            WithCreate withClientAffinityEnabled(Boolean clientAffinityEnabled);
        }
        /** The stage of the Site definition allowing to specify clientCertEnabled. */
        interface WithClientCertEnabled {
            /**
             * Specifies the clientCertEnabled property: Specifies if the client certificate is enabled for the web app.
             *
             * @param clientCertEnabled Specifies if the client certificate is enabled for the web app.
             * @return the next definition stage.
             */
            WithCreate withClientCertEnabled(Boolean clientCertEnabled);
        }
        /** The stage of the Site definition allowing to specify hostNamesDisabled. */
        interface WithHostNamesDisabled {
            /**
             * Specifies the hostNamesDisabled property: Specifies if the public hostnames are disabled the web app. If
             * set to true the app is only accessible via API Management process.
             *
             * @param hostNamesDisabled Specifies if the public hostnames are disabled the web app. If set to true the
             *     app is only accessible via API Management process.
             * @return the next definition stage.
             */
            WithCreate withHostNamesDisabled(Boolean hostNamesDisabled);
        }
        /** The stage of the Site definition allowing to specify containerSize. */
        interface WithContainerSize {
            /**
             * Specifies the containerSize property: Size of a function container.
             *
             * @param containerSize Size of a function container.
             * @return the next definition stage.
             */
            WithCreate withContainerSize(Integer containerSize);
        }
        /** The stage of the Site definition allowing to specify maxNumberOfWorkers. */
        interface WithMaxNumberOfWorkers {
            /**
             * Specifies the maxNumberOfWorkers property: Maximum number of workers This only applies to function
             * container.
             *
             * @param maxNumberOfWorkers Maximum number of workers This only applies to function container.
             * @return the next definition stage.
             */
            WithCreate withMaxNumberOfWorkers(Integer maxNumberOfWorkers);
        }
        /** The stage of the Site definition allowing to specify cloningInfo. */
        interface WithCloningInfo {
            /**
             * Specifies the cloningInfo property: This is only valid for web app creation. If specified, web app is
             * cloned from a source web app.
             *
             * @param cloningInfo This is only valid for web app creation. If specified, web app is cloned from a source
             *     web app.
             * @return the next definition stage.
             */
            WithCreate withCloningInfo(CloningInfo cloningInfo);
        }
        /** The stage of the Site definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
        /** The stage of the Site definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the Site definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
        /** The stage of the Site definition allowing to specify skipDnsRegistration. */
        interface WithSkipDnsRegistration {
            /**
             * Specifies the skipDnsRegistration property: If true web app hostname is not registered with DNS on
             * creation. This parameter is only used for app creation.
             *
             * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This
             *     parameter is only used for app creation.
             * @return the next definition stage.
             */
            WithCreate withSkipDnsRegistration(String skipDnsRegistration);
        }
        /** The stage of the Site definition allowing to specify skipCustomDomainVerification. */
        interface WithSkipCustomDomainVerification {
            /**
             * Specifies the skipCustomDomainVerification property: If true, custom (non *.azurewebsites.net) domains
             * associated with web app are not verified..
             *
             * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web
             *     app are not verified.
             * @return the next definition stage.
             */
            WithCreate withSkipCustomDomainVerification(String skipCustomDomainVerification);
        }
        /** The stage of the Site definition allowing to specify forceDnsRegistration. */
        interface WithForceDnsRegistration {
            /**
             * Specifies the forceDnsRegistration property: If true, web app hostname is force registered with DNS.
             *
             * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
             * @return the next definition stage.
             */
            WithCreate withForceDnsRegistration(String forceDnsRegistration);
        }
        /** The stage of the Site definition allowing to specify ttlInSeconds. */
        interface WithTtlInSeconds {
            /**
             * Specifies the ttlInSeconds property: Time to live in seconds for web app's default domain name.
             *
             * @param ttlInSeconds Time to live in seconds for web app's default domain name.
             * @return the next definition stage.
             */
            WithCreate withTtlInSeconds(String ttlInSeconds);
        }
    }
    /**
     * Begins update for the Site resource.
     *
     * @return the stage of resource update.
     */
    Site.Update update();

    /** The template for Site update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithNamePropertiesName,
            UpdateStages.WithEnabled,
            UpdateStages.WithHostnameSslStates,
            UpdateStages.WithServerFarmId,
            UpdateStages.WithSiteConfig,
            UpdateStages.WithScmSiteAlsoStopped,
            UpdateStages.WithHostingEnvironmentProfile,
            UpdateStages.WithMicroService,
            UpdateStages.WithGatewaySiteName,
            UpdateStages.WithClientAffinityEnabled,
            UpdateStages.WithClientCertEnabled,
            UpdateStages.WithHostNamesDisabled,
            UpdateStages.WithContainerSize,
            UpdateStages.WithMaxNumberOfWorkers,
            UpdateStages.WithCloningInfo,
            UpdateStages.WithKind,
            UpdateStages.WithName,
            UpdateStages.WithType,
            UpdateStages.WithSkipDnsRegistration,
            UpdateStages.WithSkipCustomDomainVerification,
            UpdateStages.WithForceDnsRegistration,
            UpdateStages.WithTtlInSeconds {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Site apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Site apply(Context context);
    }
    /** The Site update stages. */
    interface UpdateStages {
        /** The stage of the Site update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Site update allowing to specify namePropertiesName. */
        interface WithNamePropertiesName {
            /**
             * Specifies the namePropertiesName property: Name of web app.
             *
             * @param namePropertiesName Name of web app.
             * @return the next definition stage.
             */
            Update withNamePropertiesName(String namePropertiesName);
        }
        /** The stage of the Site update allowing to specify enabled. */
        interface WithEnabled {
            /**
             * Specifies the enabled property: True if the site is enabled; otherwise, false. Setting this value to
             * false disables the site (takes the site off line)..
             *
             * @param enabled True if the site is enabled; otherwise, false. Setting this value to false disables the
             *     site (takes the site off line).
             * @return the next definition stage.
             */
            Update withEnabled(Boolean enabled);
        }
        /** The stage of the Site update allowing to specify hostnameSslStates. */
        interface WithHostnameSslStates {
            /**
             * Specifies the hostnameSslStates property: Hostname SSL states are used to manage the SSL bindings for
             * site's hostnames..
             *
             * @param hostnameSslStates Hostname SSL states are used to manage the SSL bindings for site's hostnames.
             * @return the next definition stage.
             */
            Update withHostnameSslStates(List<HostnameSslState> hostnameSslStates);
        }
        /** The stage of the Site update allowing to specify serverFarmId. */
        interface WithServerFarmId {
            /**
             * Specifies the serverFarmId property: The serverFarmId property..
             *
             * @param serverFarmId The serverFarmId property.
             * @return the next definition stage.
             */
            Update withServerFarmId(String serverFarmId);
        }
        /** The stage of the Site update allowing to specify siteConfig. */
        interface WithSiteConfig {
            /**
             * Specifies the siteConfig property: Configuration of web app.
             *
             * @param siteConfig Configuration of web app.
             * @return the next definition stage.
             */
            Update withSiteConfig(SiteConfigInner siteConfig);
        }
        /** The stage of the Site update allowing to specify scmSiteAlsoStopped. */
        interface WithScmSiteAlsoStopped {
            /**
             * Specifies the scmSiteAlsoStopped property: If set indicates whether to stop SCM (KUDU) site when the web
             * app is stopped. Default is false..
             *
             * @param scmSiteAlsoStopped If set indicates whether to stop SCM (KUDU) site when the web app is stopped.
             *     Default is false.
             * @return the next definition stage.
             */
            Update withScmSiteAlsoStopped(Boolean scmSiteAlsoStopped);
        }
        /** The stage of the Site update allowing to specify hostingEnvironmentProfile. */
        interface WithHostingEnvironmentProfile {
            /**
             * Specifies the hostingEnvironmentProfile property: Specification for the hosting environment (App Service
             * Environment) to use for the web app.
             *
             * @param hostingEnvironmentProfile Specification for the hosting environment (App Service Environment) to
             *     use for the web app.
             * @return the next definition stage.
             */
            Update withHostingEnvironmentProfile(HostingEnvironmentProfile hostingEnvironmentProfile);
        }
        /** The stage of the Site update allowing to specify microService. */
        interface WithMicroService {
            /**
             * Specifies the microService property: The microService property..
             *
             * @param microService The microService property.
             * @return the next definition stage.
             */
            Update withMicroService(String microService);
        }
        /** The stage of the Site update allowing to specify gatewaySiteName. */
        interface WithGatewaySiteName {
            /**
             * Specifies the gatewaySiteName property: Name of gateway app associated with web app.
             *
             * @param gatewaySiteName Name of gateway app associated with web app.
             * @return the next definition stage.
             */
            Update withGatewaySiteName(String gatewaySiteName);
        }
        /** The stage of the Site update allowing to specify clientAffinityEnabled. */
        interface WithClientAffinityEnabled {
            /**
             * Specifies the clientAffinityEnabled property: Specifies if the client affinity is enabled when load
             * balancing http request for multiple instances of the web app.
             *
             * @param clientAffinityEnabled Specifies if the client affinity is enabled when load balancing http request
             *     for multiple instances of the web app.
             * @return the next definition stage.
             */
            Update withClientAffinityEnabled(Boolean clientAffinityEnabled);
        }
        /** The stage of the Site update allowing to specify clientCertEnabled. */
        interface WithClientCertEnabled {
            /**
             * Specifies the clientCertEnabled property: Specifies if the client certificate is enabled for the web app.
             *
             * @param clientCertEnabled Specifies if the client certificate is enabled for the web app.
             * @return the next definition stage.
             */
            Update withClientCertEnabled(Boolean clientCertEnabled);
        }
        /** The stage of the Site update allowing to specify hostNamesDisabled. */
        interface WithHostNamesDisabled {
            /**
             * Specifies the hostNamesDisabled property: Specifies if the public hostnames are disabled the web app. If
             * set to true the app is only accessible via API Management process.
             *
             * @param hostNamesDisabled Specifies if the public hostnames are disabled the web app. If set to true the
             *     app is only accessible via API Management process.
             * @return the next definition stage.
             */
            Update withHostNamesDisabled(Boolean hostNamesDisabled);
        }
        /** The stage of the Site update allowing to specify containerSize. */
        interface WithContainerSize {
            /**
             * Specifies the containerSize property: Size of a function container.
             *
             * @param containerSize Size of a function container.
             * @return the next definition stage.
             */
            Update withContainerSize(Integer containerSize);
        }
        /** The stage of the Site update allowing to specify maxNumberOfWorkers. */
        interface WithMaxNumberOfWorkers {
            /**
             * Specifies the maxNumberOfWorkers property: Maximum number of workers This only applies to function
             * container.
             *
             * @param maxNumberOfWorkers Maximum number of workers This only applies to function container.
             * @return the next definition stage.
             */
            Update withMaxNumberOfWorkers(Integer maxNumberOfWorkers);
        }
        /** The stage of the Site update allowing to specify cloningInfo. */
        interface WithCloningInfo {
            /**
             * Specifies the cloningInfo property: This is only valid for web app creation. If specified, web app is
             * cloned from a source web app.
             *
             * @param cloningInfo This is only valid for web app creation. If specified, web app is cloned from a source
             *     web app.
             * @return the next definition stage.
             */
            Update withCloningInfo(CloningInfo cloningInfo);
        }
        /** The stage of the Site update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource.
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the Site update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Resource Name.
             *
             * @param name Resource Name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the Site update allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: Resource type.
             *
             * @param type Resource type.
             * @return the next definition stage.
             */
            Update withType(String type);
        }
        /** The stage of the Site update allowing to specify skipDnsRegistration. */
        interface WithSkipDnsRegistration {
            /**
             * Specifies the skipDnsRegistration property: If true web app hostname is not registered with DNS on
             * creation. This parameter is only used for app creation.
             *
             * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This
             *     parameter is only used for app creation.
             * @return the next definition stage.
             */
            Update withSkipDnsRegistration(String skipDnsRegistration);
        }
        /** The stage of the Site update allowing to specify skipCustomDomainVerification. */
        interface WithSkipCustomDomainVerification {
            /**
             * Specifies the skipCustomDomainVerification property: If true, custom (non *.azurewebsites.net) domains
             * associated with web app are not verified..
             *
             * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web
             *     app are not verified.
             * @return the next definition stage.
             */
            Update withSkipCustomDomainVerification(String skipCustomDomainVerification);
        }
        /** The stage of the Site update allowing to specify forceDnsRegistration. */
        interface WithForceDnsRegistration {
            /**
             * Specifies the forceDnsRegistration property: If true, web app hostname is force registered with DNS.
             *
             * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
             * @return the next definition stage.
             */
            Update withForceDnsRegistration(String forceDnsRegistration);
        }
        /** The stage of the Site update allowing to specify ttlInSeconds. */
        interface WithTtlInSeconds {
            /**
             * Specifies the ttlInSeconds property: Time to live in seconds for web app's default domain name.
             *
             * @param ttlInSeconds Time to live in seconds for web app's default domain name.
             * @return the next definition stage.
             */
            Update withTtlInSeconds(String ttlInSeconds);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Site refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Site refresh(Context context);
}
