// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.ConnectionsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionSecretsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConsentLinkPayloadInner;
import com.azure.resourcemanager.appservice.generated.models.ConfirmConsentCodeInput;
import com.azure.resourcemanager.appservice.generated.models.Connection;
import com.azure.resourcemanager.appservice.generated.models.ConnectionSecrets;
import com.azure.resourcemanager.appservice.generated.models.Connections;
import com.azure.resourcemanager.appservice.generated.models.ConsentLinkInput;
import com.azure.resourcemanager.appservice.generated.models.ConsentLinkPayload;
import com.azure.resourcemanager.appservice.generated.models.ListConnectionKeysInput;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ConnectionsImpl implements Connections {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectionsImpl.class);

    private final ConnectionsClient innerClient;

    private final WebSiteManager serviceManager;

    public ConnectionsImpl(ConnectionsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Connection> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ConnectionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<Connection> listByResourceGroup(
        String resourceGroupName, Integer top, String filter, Context context) {
        PagedIterable<ConnectionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, top, filter, context);
        return inner.mapPage(inner1 -> new ConnectionImpl(inner1, this.manager()));
    }

    public Connection getByResourceGroup(String resourceGroupName, String connectionName) {
        ConnectionInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, connectionName);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Connection> getByResourceGroupWithResponse(
        String resourceGroupName, String connectionName, Context context) {
        Response<ConnectionInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, connectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String connectionName) {
        this.serviceClient().delete(resourceGroupName, connectionName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String connectionName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, connectionName, context);
    }

    public ConsentLinkPayload listConsentLinks(
        String resourceGroupName, String connectionName, ConsentLinkInput content) {
        ConsentLinkPayloadInner inner =
            this.serviceClient().listConsentLinks(resourceGroupName, connectionName, content);
        if (inner != null) {
            return new ConsentLinkPayloadImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConsentLinkPayload> listConsentLinksWithResponse(
        String resourceGroupName, String connectionName, ConsentLinkInput content, Context context) {
        Response<ConsentLinkPayloadInner> inner =
            this.serviceClient().listConsentLinksWithResponse(resourceGroupName, connectionName, content, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConsentLinkPayloadImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Connection confirmConsentCode(
        String resourceGroupName, String connectionName, ConfirmConsentCodeInput content) {
        ConnectionInner inner = this.serviceClient().confirmConsentCode(resourceGroupName, connectionName, content);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Connection> confirmConsentCodeWithResponse(
        String resourceGroupName, String connectionName, ConfirmConsentCodeInput content, Context context) {
        Response<ConnectionInner> inner =
            this.serviceClient().confirmConsentCodeWithResponse(resourceGroupName, connectionName, content, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionSecrets listConnectionKeys(
        String resourceGroupName, String connectionName, ListConnectionKeysInput content) {
        ConnectionSecretsInner inner =
            this.serviceClient().listConnectionKeys(resourceGroupName, connectionName, content);
        if (inner != null) {
            return new ConnectionSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionSecrets> listConnectionKeysWithResponse(
        String resourceGroupName, String connectionName, ListConnectionKeysInput content, Context context) {
        Response<ConnectionSecretsInner> inner =
            this.serviceClient().listConnectionKeysWithResponse(resourceGroupName, connectionName, content, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Connection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, connectionName, Context.NONE).getValue();
    }

    public Response<Connection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, connectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, connectionName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, connectionName, context);
    }

    private ConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    public ConnectionImpl define(String name) {
        return new ConnectionImpl(name, this.manager());
    }
}
