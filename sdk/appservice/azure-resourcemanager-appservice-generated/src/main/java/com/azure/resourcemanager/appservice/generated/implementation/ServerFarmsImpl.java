// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.ServerFarmsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.models.MetricDefinition;
import com.azure.resourcemanager.appservice.generated.models.ResourceMetric;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmWithRichSku;
import com.azure.resourcemanager.appservice.generated.models.ServerFarms;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.VnetGateway;
import com.azure.resourcemanager.appservice.generated.models.VnetInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerFarmsImpl implements ServerFarms {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerFarmsImpl.class);

    private final ServerFarmsClient innerClient;

    private final WebSiteManager serviceManager;

    public ServerFarmsImpl(ServerFarmsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServerFarmWithRichSku> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ServerFarmWithRichSkuInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerFarmWithRichSku> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new ServerFarmWithRichSkuImpl(inner1, this.manager()));
    }

    public ServerFarmWithRichSku getByResourceGroup(String resourceGroupName, String name) {
        ServerFarmWithRichSkuInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new ServerFarmWithRichSkuImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerFarmWithRichSku> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerFarmWithRichSkuImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteByResourceGroup(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Object> deleteWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, context);
    }

    public PagedIterable<ResourceMetric> getServerFarmMetrics(String resourceGroupName, String name) {
        PagedIterable<ResourceMetricInner> inner = this.serviceClient().getServerFarmMetrics(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getServerFarmMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getServerFarmMetrics(resourceGroupName, name, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getServerFarmMetricDefintions(String resourceGroupName, String name) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getServerFarmMetricDefintions(resourceGroupName, name);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getServerFarmMetricDefintions(
        String resourceGroupName, String name, Context context) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getServerFarmMetricDefintions(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public Object getVnetsForServerFarm(String resourceGroupName, String name) {
        return this.serviceClient().getVnetsForServerFarm(resourceGroupName, name);
    }

    public Response<Object> getVnetsForServerFarmWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getVnetsForServerFarmWithResponse(resourceGroupName, name, context);
    }

    public VnetInfo getVnetFromServerFarm(String resourceGroupName, String name, String vnetName) {
        VnetInfoInner inner = this.serviceClient().getVnetFromServerFarm(resourceGroupName, name, vnetName);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> getVnetFromServerFarmWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        Response<VnetInfoInner> inner =
            this.serviceClient().getVnetFromServerFarmWithResponse(resourceGroupName, name, vnetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getRoutesForVnet(String resourceGroupName, String name, String vnetName) {
        return this.serviceClient().getRoutesForVnet(resourceGroupName, name, vnetName);
    }

    public Response<Object> getRoutesForVnetWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        return this.serviceClient().getRoutesForVnetWithResponse(resourceGroupName, name, vnetName, context);
    }

    public Object getRouteForVnet(String resourceGroupName, String name, String vnetName, String routeName) {
        return this.serviceClient().getRouteForVnet(resourceGroupName, name, vnetName, routeName);
    }

    public Response<Object> getRouteForVnetWithResponse(
        String resourceGroupName, String name, String vnetName, String routeName, Context context) {
        return this.serviceClient().getRouteForVnetWithResponse(resourceGroupName, name, vnetName, routeName, context);
    }

    public Object deleteVnetRoute(String resourceGroupName, String name, String vnetName, String routeName) {
        return this.serviceClient().deleteVnetRoute(resourceGroupName, name, vnetName, routeName);
    }

    public Response<Object> deleteVnetRouteWithResponse(
        String resourceGroupName, String name, String vnetName, String routeName, Context context) {
        return this.serviceClient().deleteVnetRouteWithResponse(resourceGroupName, name, vnetName, routeName, context);
    }

    public VnetGateway getServerFarmVnetGateway(
        String resourceGroupName, String name, String vnetName, String gatewayName) {
        VnetGatewayInner inner =
            this.serviceClient().getServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> getServerFarmVnetGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .getServerFarmVnetGatewayWithResponse(resourceGroupName, name, vnetName, gatewayName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetGateway updateServerFarmVnetGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        VnetGatewayInner inner =
            this
                .serviceClient()
                .updateServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> updateServerFarmVnetGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .updateServerFarmVnetGatewayWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Site> getServerFarmSites(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().getServerFarmSites(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getServerFarmSites(
        String resourceGroupName, String name, String skipToken, String filter, String top, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().getServerFarmSites(resourceGroupName, name, skipToken, filter, top, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Object rebootWorkerForServerFarm(String resourceGroupName, String name, String workerName) {
        return this.serviceClient().rebootWorkerForServerFarm(resourceGroupName, name, workerName);
    }

    public Response<Object> rebootWorkerForServerFarmWithResponse(
        String resourceGroupName, String name, String workerName, Context context) {
        return this.serviceClient().rebootWorkerForServerFarmWithResponse(resourceGroupName, name, workerName, context);
    }

    public Object restartSitesForServerFarm(String resourceGroupName, String name) {
        return this.serviceClient().restartSitesForServerFarm(resourceGroupName, name);
    }

    public Response<Object> restartSitesForServerFarmWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Context context) {
        return this
            .serviceClient()
            .restartSitesForServerFarmWithResponse(resourceGroupName, name, softRestart, context);
    }

    public ServerFarmWithRichSku getServerFarmOperation(String resourceGroupName, String name, String operationId) {
        ServerFarmWithRichSkuInner inner =
            this.serviceClient().getServerFarmOperation(resourceGroupName, name, operationId);
        if (inner != null) {
            return new ServerFarmWithRichSkuImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerFarmWithRichSku> getServerFarmOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        Response<ServerFarmWithRichSkuInner> inner =
            this.serviceClient().getServerFarmOperationWithResponse(resourceGroupName, name, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerFarmWithRichSkuImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerFarmWithRichSku getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<ServerFarmWithRichSku> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public Object deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<Object> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, context);
    }

    public Object deleteVnetRouteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "routes");
        if (routeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routes'.", id)));
        }
        return this.deleteVnetRouteWithResponse(resourceGroupName, name, vnetName, routeName, Context.NONE).getValue();
    }

    public Response<Object> deleteVnetRouteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "serverfarms");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'serverfarms'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "routes");
        if (routeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routes'.", id)));
        }
        return this.deleteVnetRouteWithResponse(resourceGroupName, name, vnetName, routeName, context);
    }

    private ServerFarmsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    public ServerFarmWithRichSkuImpl defineServerFarm(String name) {
        return new ServerFarmWithRichSkuImpl(name, this.manager());
    }

    public VnetRouteImpl defineVnetRoute(String name) {
        return new VnetRouteImpl(name, this.manager());
    }
}
