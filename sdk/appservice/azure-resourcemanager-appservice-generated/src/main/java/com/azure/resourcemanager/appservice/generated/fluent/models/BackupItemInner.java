// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.BackupItemStatus;
import com.azure.resourcemanager.appservice.generated.models.DatabaseBackupSetting;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Backup description. */
@JsonFlatten
@Fluent
public class BackupItemInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BackupItemInner.class);

    /*
     * Id of the backup.
     */
    @JsonProperty(value = "properties.id")
    private Integer idPropertiesId;

    /*
     * SAS URL for the storage account container which contains this backup
     */
    @JsonProperty(value = "properties.storageAccountUrl")
    private String storageAccountUrl;

    /*
     * Name of the blob which contains data for this backup
     */
    @JsonProperty(value = "properties.blobName")
    private String blobName;

    /*
     * Name of this backup
     */
    @JsonProperty(value = "properties.name")
    private String namePropertiesName;

    /*
     * Backup status
     */
    @JsonProperty(value = "properties.status")
    private BackupItemStatus status;

    /*
     * Size of the backup in bytes
     */
    @JsonProperty(value = "properties.sizeInBytes")
    private Long sizeInBytes;

    /*
     * Timestamp of the backup creation
     */
    @JsonProperty(value = "properties.created")
    private OffsetDateTime created;

    /*
     * Details regarding this backup. Might contain an error message.
     */
    @JsonProperty(value = "properties.log")
    private String log;

    /*
     * List of databases included in the backup
     */
    @JsonProperty(value = "properties.databases")
    private List<DatabaseBackupSetting> databases;

    /*
     * True if this backup has been created due to a schedule being triggered.
     */
    @JsonProperty(value = "properties.scheduled")
    private Boolean scheduled;

    /*
     * Timestamp of a last restore operation which used this backup.
     */
    @JsonProperty(value = "properties.lastRestoreTimeStamp")
    private OffsetDateTime lastRestoreTimestamp;

    /*
     * Timestamp when this backup finished.
     */
    @JsonProperty(value = "properties.finishedTimeStamp")
    private OffsetDateTime finishedTimestamp;

    /*
     * Unique correlation identifier. Please use this along with the timestamp
     * while communicating with Azure support.
     */
    @JsonProperty(value = "properties.correlationId")
    private String correlationId;

    /*
     * Size of the original web app which has been backed up
     */
    @JsonProperty(value = "properties.websiteSizeInBytes")
    private Long websiteSizeInBytes;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the idPropertiesId property: Id of the backup.
     *
     * @return the idPropertiesId value.
     */
    public Integer idPropertiesId() {
        return this.idPropertiesId;
    }

    /**
     * Set the idPropertiesId property: Id of the backup.
     *
     * @param idPropertiesId the idPropertiesId value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withIdPropertiesId(Integer idPropertiesId) {
        this.idPropertiesId = idPropertiesId;
        return this;
    }

    /**
     * Get the storageAccountUrl property: SAS URL for the storage account container which contains this backup.
     *
     * @return the storageAccountUrl value.
     */
    public String storageAccountUrl() {
        return this.storageAccountUrl;
    }

    /**
     * Set the storageAccountUrl property: SAS URL for the storage account container which contains this backup.
     *
     * @param storageAccountUrl the storageAccountUrl value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withStorageAccountUrl(String storageAccountUrl) {
        this.storageAccountUrl = storageAccountUrl;
        return this;
    }

    /**
     * Get the blobName property: Name of the blob which contains data for this backup.
     *
     * @return the blobName value.
     */
    public String blobName() {
        return this.blobName;
    }

    /**
     * Set the blobName property: Name of the blob which contains data for this backup.
     *
     * @param blobName the blobName value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withBlobName(String blobName) {
        this.blobName = blobName;
        return this;
    }

    /**
     * Get the namePropertiesName property: Name of this backup.
     *
     * @return the namePropertiesName value.
     */
    public String namePropertiesName() {
        return this.namePropertiesName;
    }

    /**
     * Set the namePropertiesName property: Name of this backup.
     *
     * @param namePropertiesName the namePropertiesName value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withNamePropertiesName(String namePropertiesName) {
        this.namePropertiesName = namePropertiesName;
        return this;
    }

    /**
     * Get the status property: Backup status.
     *
     * @return the status value.
     */
    public BackupItemStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Backup status.
     *
     * @param status the status value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withStatus(BackupItemStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the sizeInBytes property: Size of the backup in bytes.
     *
     * @return the sizeInBytes value.
     */
    public Long sizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * Set the sizeInBytes property: Size of the backup in bytes.
     *
     * @param sizeInBytes the sizeInBytes value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withSizeInBytes(Long sizeInBytes) {
        this.sizeInBytes = sizeInBytes;
        return this;
    }

    /**
     * Get the created property: Timestamp of the backup creation.
     *
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Set the created property: Timestamp of the backup creation.
     *
     * @param created the created value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Get the log property: Details regarding this backup. Might contain an error message.
     *
     * @return the log value.
     */
    public String log() {
        return this.log;
    }

    /**
     * Set the log property: Details regarding this backup. Might contain an error message.
     *
     * @param log the log value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withLog(String log) {
        this.log = log;
        return this;
    }

    /**
     * Get the databases property: List of databases included in the backup.
     *
     * @return the databases value.
     */
    public List<DatabaseBackupSetting> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: List of databases included in the backup.
     *
     * @param databases the databases value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withDatabases(List<DatabaseBackupSetting> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the scheduled property: True if this backup has been created due to a schedule being triggered.
     *
     * @return the scheduled value.
     */
    public Boolean scheduled() {
        return this.scheduled;
    }

    /**
     * Set the scheduled property: True if this backup has been created due to a schedule being triggered.
     *
     * @param scheduled the scheduled value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withScheduled(Boolean scheduled) {
        this.scheduled = scheduled;
        return this;
    }

    /**
     * Get the lastRestoreTimestamp property: Timestamp of a last restore operation which used this backup.
     *
     * @return the lastRestoreTimestamp value.
     */
    public OffsetDateTime lastRestoreTimestamp() {
        return this.lastRestoreTimestamp;
    }

    /**
     * Set the lastRestoreTimestamp property: Timestamp of a last restore operation which used this backup.
     *
     * @param lastRestoreTimestamp the lastRestoreTimestamp value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withLastRestoreTimestamp(OffsetDateTime lastRestoreTimestamp) {
        this.lastRestoreTimestamp = lastRestoreTimestamp;
        return this;
    }

    /**
     * Get the finishedTimestamp property: Timestamp when this backup finished.
     *
     * @return the finishedTimestamp value.
     */
    public OffsetDateTime finishedTimestamp() {
        return this.finishedTimestamp;
    }

    /**
     * Set the finishedTimestamp property: Timestamp when this backup finished.
     *
     * @param finishedTimestamp the finishedTimestamp value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withFinishedTimestamp(OffsetDateTime finishedTimestamp) {
        this.finishedTimestamp = finishedTimestamp;
        return this;
    }

    /**
     * Get the correlationId property: Unique correlation identifier. Please use this along with the timestamp while
     * communicating with Azure support.
     *
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Unique correlation identifier. Please use this along with the timestamp while
     * communicating with Azure support.
     *
     * @param correlationId the correlationId value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the websiteSizeInBytes property: Size of the original web app which has been backed up.
     *
     * @return the websiteSizeInBytes value.
     */
    public Long websiteSizeInBytes() {
        return this.websiteSizeInBytes;
    }

    /**
     * Set the websiteSizeInBytes property: Size of the original web app which has been backed up.
     *
     * @param websiteSizeInBytes the websiteSizeInBytes value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withWebsiteSizeInBytes(Long websiteSizeInBytes) {
        this.websiteSizeInBytes = websiteSizeInBytes;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the BackupItemInner object itself.
     */
    public BackupItemInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BackupItemInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BackupItemInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() != null) {
            databases().forEach(e -> e.validate());
        }
    }
}
