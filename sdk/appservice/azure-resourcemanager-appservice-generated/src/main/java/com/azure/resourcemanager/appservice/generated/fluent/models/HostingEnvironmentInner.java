// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentStatus;
import com.azure.resourcemanager.appservice.generated.models.InternalLoadBalancingMode;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.NetworkAccessControlEntry;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import com.azure.resourcemanager.appservice.generated.models.VirtualIpMapping;
import com.azure.resourcemanager.appservice.generated.models.VirtualNetworkProfile;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Description of an hostingEnvironment (App Service Environment). */
@JsonFlatten
@Fluent
public class HostingEnvironmentInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HostingEnvironmentInner.class);

    /*
     * Name of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.name")
    private String namePropertiesName;

    /*
     * Location of the hostingEnvironment (App Service Environment), e.g. "West
     * US"
     */
    @JsonProperty(value = "properties.location")
    private String locationPropertiesLocation;

    /*
     * Provisioning state of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningState provisioningState;

    /*
     * Current status of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.status")
    private HostingEnvironmentStatus status;

    /*
     * Name of the hostingEnvironment's (App Service Environment) virtual
     * network
     */
    @JsonProperty(value = "properties.vnetName")
    private String vnetName;

    /*
     * Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network
     */
    @JsonProperty(value = "properties.vnetResourceGroupName")
    private String vnetResourceGroupName;

    /*
     * Subnet of the hostingEnvironment's (App Service Environment) virtual
     * network
     */
    @JsonProperty(value = "properties.vnetSubnetName")
    private String vnetSubnetName;

    /*
     * Description of the hostingEnvironment's (App Service Environment)
     * virtual network
     */
    @JsonProperty(value = "properties.virtualNetwork")
    private VirtualNetworkProfile virtualNetwork;

    /*
     * Specifies which endpoints to serve internally in the
     * hostingEnvironment's (App Service Environment) VNET
     */
    @JsonProperty(value = "properties.internalLoadBalancingMode")
    private InternalLoadBalancingMode internalLoadBalancingMode;

    /*
     * Front-end VM size, e.g. "Medium", "Large"
     */
    @JsonProperty(value = "properties.multiSize")
    private String multiSize;

    /*
     * Number of front-end instances
     */
    @JsonProperty(value = "properties.multiRoleCount")
    private Integer multiRoleCount;

    /*
     * Description of worker pools with worker size ids, VM sizes, and number
     * of workers in each pool
     */
    @JsonProperty(value = "properties.workerPools")
    private List<WorkerPoolInner> workerPools;

    /*
     * Number of IP SSL addresses reserved for this hostingEnvironment (App
     * Service Environment)
     */
    @JsonProperty(value = "properties.ipsslAddressCount")
    private Integer ipsslAddressCount;

    /*
     * Edition of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard"
     */
    @JsonProperty(value = "properties.databaseEdition")
    private String databaseEdition;

    /*
     * Service objective of the metadata database for the hostingEnvironment
     * (App Service Environment) e.g. "S0"
     */
    @JsonProperty(value = "properties.databaseServiceObjective")
    private String databaseServiceObjective;

    /*
     * Number of upgrade domains of this hostingEnvironment (App Service
     * Environment)
     */
    @JsonProperty(value = "properties.upgradeDomains")
    private Integer upgradeDomains;

    /*
     * Subscription of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.subscriptionId")
    private String subscriptionId;

    /*
     * DNS suffix of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.dnsSuffix")
    private String dnsSuffix;

    /*
     * Last deployment action on this hostingEnvironment (App Service
     * Environment)
     */
    @JsonProperty(value = "properties.lastAction")
    private String lastAction;

    /*
     * Result of the last deployment action on this hostingEnvironment (App
     * Service Environment)
     */
    @JsonProperty(value = "properties.lastActionResult")
    private String lastActionResult;

    /*
     * List of comma separated strings describing which VM sizes are allowed
     * for front-ends
     */
    @JsonProperty(value = "properties.allowedMultiSizes")
    private String allowedMultiSizes;

    /*
     * List of comma separated strings describing which VM sizes are allowed
     * for workers
     */
    @JsonProperty(value = "properties.allowedWorkerSizes")
    private String allowedWorkerSizes;

    /*
     * Maximum number of VMs in this hostingEnvironment (App Service
     * Environment)
     */
    @JsonProperty(value = "properties.maximumNumberOfMachines")
    private Integer maximumNumberOfMachines;

    /*
     * Description of IP SSL mapping for this hostingEnvironment (App Service
     * Environment)
     */
    @JsonProperty(value = "properties.vipMappings")
    private List<VirtualIpMapping> vipMappings;

    /*
     * Current total, used, and available worker capacities
     */
    @JsonProperty(value = "properties.environmentCapacities")
    private List<StampCapacityInner> environmentCapacities;

    /*
     * Access control list for controlling traffic to the hostingEnvironment
     * (App Service Environment)
     */
    @JsonProperty(value = "properties.networkAccessControlList")
    private List<NetworkAccessControlEntry> networkAccessControlList;

    /*
     * True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy
     */
    @JsonProperty(value = "properties.environmentIsHealthy")
    private Boolean environmentIsHealthy;

    /*
     * Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.environmentStatus")
    private String environmentStatus;

    /*
     * Resource group of the hostingEnvironment (App Service Environment)
     */
    @JsonProperty(value = "properties.resourceGroup")
    private String resourceGroup;

    /*
     * Api Management Account associated with this Hosting Environment
     */
    @JsonProperty(value = "properties.apiManagementAccountId")
    private String apiManagementAccountId;

    /*
     * True/false indicating whether the hostingEnvironment is suspended. The
     * environment can be suspended e.g. when the management endpoint is no
     * longer available
     * (most likely because NSG blocked the incoming traffic)
     */
    @JsonProperty(value = "properties.suspended")
    private Boolean suspended;

    /*
     * Custom settings for changing the behavior of the hosting environment
     */
    @JsonProperty(value = "properties.clusterSettings")
    private List<NameValuePair> clusterSettings;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the namePropertiesName property: Name of the hostingEnvironment (App Service Environment).
     *
     * @return the namePropertiesName value.
     */
    public String namePropertiesName() {
        return this.namePropertiesName;
    }

    /**
     * Set the namePropertiesName property: Name of the hostingEnvironment (App Service Environment).
     *
     * @param namePropertiesName the namePropertiesName value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withNamePropertiesName(String namePropertiesName) {
        this.namePropertiesName = namePropertiesName;
        return this;
    }

    /**
     * Get the locationPropertiesLocation property: Location of the hostingEnvironment (App Service Environment), e.g.
     * "West US".
     *
     * @return the locationPropertiesLocation value.
     */
    public String locationPropertiesLocation() {
        return this.locationPropertiesLocation;
    }

    /**
     * Set the locationPropertiesLocation property: Location of the hostingEnvironment (App Service Environment), e.g.
     * "West US".
     *
     * @param locationPropertiesLocation the locationPropertiesLocation value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withLocationPropertiesLocation(String locationPropertiesLocation) {
        this.locationPropertiesLocation = locationPropertiesLocation;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the hostingEnvironment (App Service Environment).
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the hostingEnvironment (App Service Environment).
     *
     * @param provisioningState the provisioningState value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the status property: Current status of the hostingEnvironment (App Service Environment).
     *
     * @return the status value.
     */
    public HostingEnvironmentStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of the hostingEnvironment (App Service Environment).
     *
     * @param status the status value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withStatus(HostingEnvironmentStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the vnetName property: Name of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @return the vnetName value.
     */
    public String vnetName() {
        return this.vnetName;
    }

    /**
     * Set the vnetName property: Name of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @param vnetName the vnetName value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withVnetName(String vnetName) {
        this.vnetName = vnetName;
        return this;
    }

    /**
     * Get the vnetResourceGroupName property: Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network.
     *
     * @return the vnetResourceGroupName value.
     */
    public String vnetResourceGroupName() {
        return this.vnetResourceGroupName;
    }

    /**
     * Set the vnetResourceGroupName property: Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network.
     *
     * @param vnetResourceGroupName the vnetResourceGroupName value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withVnetResourceGroupName(String vnetResourceGroupName) {
        this.vnetResourceGroupName = vnetResourceGroupName;
        return this;
    }

    /**
     * Get the vnetSubnetName property: Subnet of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @return the vnetSubnetName value.
     */
    public String vnetSubnetName() {
        return this.vnetSubnetName;
    }

    /**
     * Set the vnetSubnetName property: Subnet of the hostingEnvironment's (App Service Environment) virtual network.
     *
     * @param vnetSubnetName the vnetSubnetName value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withVnetSubnetName(String vnetSubnetName) {
        this.vnetSubnetName = vnetSubnetName;
        return this;
    }

    /**
     * Get the virtualNetwork property: Description of the hostingEnvironment's (App Service Environment) virtual
     * network.
     *
     * @return the virtualNetwork value.
     */
    public VirtualNetworkProfile virtualNetwork() {
        return this.virtualNetwork;
    }

    /**
     * Set the virtualNetwork property: Description of the hostingEnvironment's (App Service Environment) virtual
     * network.
     *
     * @param virtualNetwork the virtualNetwork value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withVirtualNetwork(VirtualNetworkProfile virtualNetwork) {
        this.virtualNetwork = virtualNetwork;
        return this;
    }

    /**
     * Get the internalLoadBalancingMode property: Specifies which endpoints to serve internally in the
     * hostingEnvironment's (App Service Environment) VNET.
     *
     * @return the internalLoadBalancingMode value.
     */
    public InternalLoadBalancingMode internalLoadBalancingMode() {
        return this.internalLoadBalancingMode;
    }

    /**
     * Set the internalLoadBalancingMode property: Specifies which endpoints to serve internally in the
     * hostingEnvironment's (App Service Environment) VNET.
     *
     * @param internalLoadBalancingMode the internalLoadBalancingMode value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withInternalLoadBalancingMode(InternalLoadBalancingMode internalLoadBalancingMode) {
        this.internalLoadBalancingMode = internalLoadBalancingMode;
        return this;
    }

    /**
     * Get the multiSize property: Front-end VM size, e.g. "Medium", "Large".
     *
     * @return the multiSize value.
     */
    public String multiSize() {
        return this.multiSize;
    }

    /**
     * Set the multiSize property: Front-end VM size, e.g. "Medium", "Large".
     *
     * @param multiSize the multiSize value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withMultiSize(String multiSize) {
        this.multiSize = multiSize;
        return this;
    }

    /**
     * Get the multiRoleCount property: Number of front-end instances.
     *
     * @return the multiRoleCount value.
     */
    public Integer multiRoleCount() {
        return this.multiRoleCount;
    }

    /**
     * Set the multiRoleCount property: Number of front-end instances.
     *
     * @param multiRoleCount the multiRoleCount value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withMultiRoleCount(Integer multiRoleCount) {
        this.multiRoleCount = multiRoleCount;
        return this;
    }

    /**
     * Get the workerPools property: Description of worker pools with worker size ids, VM sizes, and number of workers
     * in each pool.
     *
     * @return the workerPools value.
     */
    public List<WorkerPoolInner> workerPools() {
        return this.workerPools;
    }

    /**
     * Set the workerPools property: Description of worker pools with worker size ids, VM sizes, and number of workers
     * in each pool.
     *
     * @param workerPools the workerPools value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withWorkerPools(List<WorkerPoolInner> workerPools) {
        this.workerPools = workerPools;
        return this;
    }

    /**
     * Get the ipsslAddressCount property: Number of IP SSL addresses reserved for this hostingEnvironment (App Service
     * Environment).
     *
     * @return the ipsslAddressCount value.
     */
    public Integer ipsslAddressCount() {
        return this.ipsslAddressCount;
    }

    /**
     * Set the ipsslAddressCount property: Number of IP SSL addresses reserved for this hostingEnvironment (App Service
     * Environment).
     *
     * @param ipsslAddressCount the ipsslAddressCount value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withIpsslAddressCount(Integer ipsslAddressCount) {
        this.ipsslAddressCount = ipsslAddressCount;
        return this;
    }

    /**
     * Get the databaseEdition property: Edition of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard".
     *
     * @return the databaseEdition value.
     */
    public String databaseEdition() {
        return this.databaseEdition;
    }

    /**
     * Set the databaseEdition property: Edition of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard".
     *
     * @param databaseEdition the databaseEdition value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withDatabaseEdition(String databaseEdition) {
        this.databaseEdition = databaseEdition;
        return this;
    }

    /**
     * Get the databaseServiceObjective property: Service objective of the metadata database for the hostingEnvironment
     * (App Service Environment) e.g. "S0".
     *
     * @return the databaseServiceObjective value.
     */
    public String databaseServiceObjective() {
        return this.databaseServiceObjective;
    }

    /**
     * Set the databaseServiceObjective property: Service objective of the metadata database for the hostingEnvironment
     * (App Service Environment) e.g. "S0".
     *
     * @param databaseServiceObjective the databaseServiceObjective value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withDatabaseServiceObjective(String databaseServiceObjective) {
        this.databaseServiceObjective = databaseServiceObjective;
        return this;
    }

    /**
     * Get the upgradeDomains property: Number of upgrade domains of this hostingEnvironment (App Service Environment).
     *
     * @return the upgradeDomains value.
     */
    public Integer upgradeDomains() {
        return this.upgradeDomains;
    }

    /**
     * Set the upgradeDomains property: Number of upgrade domains of this hostingEnvironment (App Service Environment).
     *
     * @param upgradeDomains the upgradeDomains value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withUpgradeDomains(Integer upgradeDomains) {
        this.upgradeDomains = upgradeDomains;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription of the hostingEnvironment (App Service Environment).
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription of the hostingEnvironment (App Service Environment).
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the dnsSuffix property: DNS suffix of the hostingEnvironment (App Service Environment).
     *
     * @return the dnsSuffix value.
     */
    public String dnsSuffix() {
        return this.dnsSuffix;
    }

    /**
     * Set the dnsSuffix property: DNS suffix of the hostingEnvironment (App Service Environment).
     *
     * @param dnsSuffix the dnsSuffix value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withDnsSuffix(String dnsSuffix) {
        this.dnsSuffix = dnsSuffix;
        return this;
    }

    /**
     * Get the lastAction property: Last deployment action on this hostingEnvironment (App Service Environment).
     *
     * @return the lastAction value.
     */
    public String lastAction() {
        return this.lastAction;
    }

    /**
     * Set the lastAction property: Last deployment action on this hostingEnvironment (App Service Environment).
     *
     * @param lastAction the lastAction value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withLastAction(String lastAction) {
        this.lastAction = lastAction;
        return this;
    }

    /**
     * Get the lastActionResult property: Result of the last deployment action on this hostingEnvironment (App Service
     * Environment).
     *
     * @return the lastActionResult value.
     */
    public String lastActionResult() {
        return this.lastActionResult;
    }

    /**
     * Set the lastActionResult property: Result of the last deployment action on this hostingEnvironment (App Service
     * Environment).
     *
     * @param lastActionResult the lastActionResult value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withLastActionResult(String lastActionResult) {
        this.lastActionResult = lastActionResult;
        return this;
    }

    /**
     * Get the allowedMultiSizes property: List of comma separated strings describing which VM sizes are allowed for
     * front-ends.
     *
     * @return the allowedMultiSizes value.
     */
    public String allowedMultiSizes() {
        return this.allowedMultiSizes;
    }

    /**
     * Set the allowedMultiSizes property: List of comma separated strings describing which VM sizes are allowed for
     * front-ends.
     *
     * @param allowedMultiSizes the allowedMultiSizes value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withAllowedMultiSizes(String allowedMultiSizes) {
        this.allowedMultiSizes = allowedMultiSizes;
        return this;
    }

    /**
     * Get the allowedWorkerSizes property: List of comma separated strings describing which VM sizes are allowed for
     * workers.
     *
     * @return the allowedWorkerSizes value.
     */
    public String allowedWorkerSizes() {
        return this.allowedWorkerSizes;
    }

    /**
     * Set the allowedWorkerSizes property: List of comma separated strings describing which VM sizes are allowed for
     * workers.
     *
     * @param allowedWorkerSizes the allowedWorkerSizes value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withAllowedWorkerSizes(String allowedWorkerSizes) {
        this.allowedWorkerSizes = allowedWorkerSizes;
        return this;
    }

    /**
     * Get the maximumNumberOfMachines property: Maximum number of VMs in this hostingEnvironment (App Service
     * Environment).
     *
     * @return the maximumNumberOfMachines value.
     */
    public Integer maximumNumberOfMachines() {
        return this.maximumNumberOfMachines;
    }

    /**
     * Set the maximumNumberOfMachines property: Maximum number of VMs in this hostingEnvironment (App Service
     * Environment).
     *
     * @param maximumNumberOfMachines the maximumNumberOfMachines value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withMaximumNumberOfMachines(Integer maximumNumberOfMachines) {
        this.maximumNumberOfMachines = maximumNumberOfMachines;
        return this;
    }

    /**
     * Get the vipMappings property: Description of IP SSL mapping for this hostingEnvironment (App Service
     * Environment).
     *
     * @return the vipMappings value.
     */
    public List<VirtualIpMapping> vipMappings() {
        return this.vipMappings;
    }

    /**
     * Set the vipMappings property: Description of IP SSL mapping for this hostingEnvironment (App Service
     * Environment).
     *
     * @param vipMappings the vipMappings value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withVipMappings(List<VirtualIpMapping> vipMappings) {
        this.vipMappings = vipMappings;
        return this;
    }

    /**
     * Get the environmentCapacities property: Current total, used, and available worker capacities.
     *
     * @return the environmentCapacities value.
     */
    public List<StampCapacityInner> environmentCapacities() {
        return this.environmentCapacities;
    }

    /**
     * Set the environmentCapacities property: Current total, used, and available worker capacities.
     *
     * @param environmentCapacities the environmentCapacities value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withEnvironmentCapacities(List<StampCapacityInner> environmentCapacities) {
        this.environmentCapacities = environmentCapacities;
        return this;
    }

    /**
     * Get the networkAccessControlList property: Access control list for controlling traffic to the hostingEnvironment
     * (App Service Environment).
     *
     * @return the networkAccessControlList value.
     */
    public List<NetworkAccessControlEntry> networkAccessControlList() {
        return this.networkAccessControlList;
    }

    /**
     * Set the networkAccessControlList property: Access control list for controlling traffic to the hostingEnvironment
     * (App Service Environment).
     *
     * @param networkAccessControlList the networkAccessControlList value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withNetworkAccessControlList(
        List<NetworkAccessControlEntry> networkAccessControlList) {
        this.networkAccessControlList = networkAccessControlList;
        return this;
    }

    /**
     * Get the environmentIsHealthy property: True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy.
     *
     * @return the environmentIsHealthy value.
     */
    public Boolean environmentIsHealthy() {
        return this.environmentIsHealthy;
    }

    /**
     * Set the environmentIsHealthy property: True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy.
     *
     * @param environmentIsHealthy the environmentIsHealthy value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withEnvironmentIsHealthy(Boolean environmentIsHealthy) {
        this.environmentIsHealthy = environmentIsHealthy;
        return this;
    }

    /**
     * Get the environmentStatus property: Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment).
     *
     * @return the environmentStatus value.
     */
    public String environmentStatus() {
        return this.environmentStatus;
    }

    /**
     * Set the environmentStatus property: Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment).
     *
     * @param environmentStatus the environmentStatus value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withEnvironmentStatus(String environmentStatus) {
        this.environmentStatus = environmentStatus;
        return this;
    }

    /**
     * Get the resourceGroup property: Resource group of the hostingEnvironment (App Service Environment).
     *
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Resource group of the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroup the resourceGroup value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the apiManagementAccountId property: Api Management Account associated with this Hosting Environment.
     *
     * @return the apiManagementAccountId value.
     */
    public String apiManagementAccountId() {
        return this.apiManagementAccountId;
    }

    /**
     * Set the apiManagementAccountId property: Api Management Account associated with this Hosting Environment.
     *
     * @param apiManagementAccountId the apiManagementAccountId value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withApiManagementAccountId(String apiManagementAccountId) {
        this.apiManagementAccountId = apiManagementAccountId;
        return this;
    }

    /**
     * Get the suspended property: True/false indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the
     * incoming traffic).
     *
     * @return the suspended value.
     */
    public Boolean suspended() {
        return this.suspended;
    }

    /**
     * Set the suspended property: True/false indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the
     * incoming traffic).
     *
     * @param suspended the suspended value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }

    /**
     * Get the clusterSettings property: Custom settings for changing the behavior of the hosting environment.
     *
     * @return the clusterSettings value.
     */
    public List<NameValuePair> clusterSettings() {
        return this.clusterSettings;
    }

    /**
     * Set the clusterSettings property: Custom settings for changing the behavior of the hosting environment.
     *
     * @param clusterSettings the clusterSettings value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withClusterSettings(List<NameValuePair> clusterSettings) {
        this.clusterSettings = clusterSettings;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the HostingEnvironmentInner object itself.
     */
    public HostingEnvironmentInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HostingEnvironmentInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HostingEnvironmentInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualNetwork() != null) {
            virtualNetwork().validate();
        }
        if (workerPools() != null) {
            workerPools().forEach(e -> e.validate());
        }
        if (vipMappings() != null) {
            vipMappings().forEach(e -> e.validate());
        }
        if (environmentCapacities() != null) {
            environmentCapacities().forEach(e -> e.validate());
        }
        if (networkAccessControlList() != null) {
            networkAccessControlList().forEach(e -> e.validate());
        }
        if (clusterSettings() != null) {
            clusterSettings().forEach(e -> e.validate());
        }
    }
}
