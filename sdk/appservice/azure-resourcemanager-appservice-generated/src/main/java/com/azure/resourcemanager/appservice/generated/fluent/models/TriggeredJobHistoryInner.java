// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.ProxyOnlyResource;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobRun;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Triggered Web Job History. List of Triggered Web Job Run Information elements. */
@JsonFlatten
@Fluent
public class TriggeredJobHistoryInner extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TriggeredJobHistoryInner.class);

    /*
     * List of triggered web job runs.
     */
    @JsonProperty(value = "properties.triggeredJobRuns")
    private List<TriggeredJobRun> triggeredJobRuns;

    /**
     * Get the triggeredJobRuns property: List of triggered web job runs.
     *
     * @return the triggeredJobRuns value.
     */
    public List<TriggeredJobRun> triggeredJobRuns() {
        return this.triggeredJobRuns;
    }

    /**
     * Set the triggeredJobRuns property: List of triggered web job runs.
     *
     * @param triggeredJobRuns the triggeredJobRuns value to set.
     * @return the TriggeredJobHistoryInner object itself.
     */
    public TriggeredJobHistoryInner withTriggeredJobRuns(List<TriggeredJobRun> triggeredJobRuns) {
        this.triggeredJobRuns = triggeredJobRuns;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TriggeredJobHistoryInner withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (triggeredJobRuns() != null) {
            triggeredJobRuns().forEach(e -> e.validate());
        }
    }
}
