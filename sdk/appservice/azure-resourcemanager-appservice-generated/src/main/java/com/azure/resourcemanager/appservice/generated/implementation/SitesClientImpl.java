// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appservice.generated.fluent.SitesClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupItemInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionStringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeletedSiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeploymentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostnameBindingInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NetworkFeaturesInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RelayServiceConnectionEntityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteAuthSettingsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteCloneabilityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInstanceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteLogsConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteSourceControlInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotConfigNamesResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotDifferenceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.models.BackupItemCollection;
import com.azure.resourcemanager.appservice.generated.models.CsmPublishingProfileOptions;
import com.azure.resourcemanager.appservice.generated.models.CsmSiteRecoveryEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmSlotEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuotaCollection;
import com.azure.resourcemanager.appservice.generated.models.DeletedSiteCollection;
import com.azure.resourcemanager.appservice.generated.models.DeploymentCollection;
import com.azure.resourcemanager.appservice.generated.models.HostnameBindingCollection;
import com.azure.resourcemanager.appservice.generated.models.MetricDefinitionCollection;
import com.azure.resourcemanager.appservice.generated.models.PremierAddOnRequest;
import com.azure.resourcemanager.appservice.generated.models.ResourceMetricCollection;
import com.azure.resourcemanager.appservice.generated.models.SiteCollection;
import com.azure.resourcemanager.appservice.generated.models.SiteInstanceCollection;
import com.azure.resourcemanager.appservice.generated.models.SlotDifferenceCollection;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Iterator;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SitesClient. */
public final class SitesClientImpl implements SitesClient {
    private final ClientLogger logger = new ClientLogger(SitesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SitesService service;

    /** The service client containing this operation class. */
    private final WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of SitesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SitesClientImpl(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(SitesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WebSiteManagementClientSites to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementCli")
    private interface SitesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> getSiteVnetConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetInfoInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteVnetConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> updateSiteVnetConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetInfoInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> getSiteVnetConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetInfoInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteVnetConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetInfoInner>> updateSiteVnetConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetInfoInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/networkFeatures/{view}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeaturesSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("view") String view,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/networkFeatures/{view}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeatures(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("view") String view,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/operationresults/{operationId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteOperationSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("operationId") String operationId,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/operationresults/{operationId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteOperation(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("operationId") String operationId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slotsswap")
        @ExpectedResponses({200, 200, 202, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> swapSlotWithProduction(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/slotsswap")
        @ExpectedResponses({200, 200, 202, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> swapSlotsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slotsdiffs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotDifferenceCollection>> getSlotsDifferencesFromProduction(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/slotsdiffs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotDifferenceCollection>> getSlotsDifferencesSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/applySlotConfig")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> applySlotConfigToProduction(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/applySlotConfig")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> applySlotConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSlotEntity slotSwapEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/resetSlotConfig")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> resetProductionSlotConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/resetSlotConfig")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> resetSlotConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/slotConfigNames")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotConfigNamesResourceInner>> getSlotConfigNames(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/slotConfigNames")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotConfigNamesResourceInner>> updateSlotConfigNames(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SlotConfigNamesResourceInner slotConfigNames,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getSiteSlots(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @QueryParam("includeSiteTypes") String includeSiteTypes,
            @QueryParam("includeSlots") Boolean includeSlots,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 200, 202, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("skipDnsRegistration") String skipDnsRegistration,
            @QueryParam("skipCustomDomainVerification") String skipCustomDomainVerification,
            @QueryParam("forceDnsRegistration") String forceDnsRegistration,
            @QueryParam("ttlInSeconds") String ttlInSeconds,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteInner siteEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("deleteMetrics") String deleteMetrics,
            @QueryParam("deleteEmptyServerFarm") String deleteEmptyServerFarm,
            @QueryParam("skipDnsRegistration") String skipDnsRegistration,
            @QueryParam("deleteAllSlots") String deleteAllSlots,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInner>> getSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}")
        @ExpectedResponses({200, 200, 202, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("skipDnsRegistration") String skipDnsRegistration,
            @QueryParam("skipCustomDomainVerification") String skipCustomDomainVerification,
            @QueryParam("forceDnsRegistration") String forceDnsRegistration,
            @QueryParam("ttlInSeconds") String ttlInSeconds,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteInner siteEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("deleteMetrics") String deleteMetrics,
            @QueryParam("deleteEmptyServerFarm") String deleteEmptyServerFarm,
            @QueryParam("skipDnsRegistration") String skipDnsRegistration,
            @QueryParam("deleteAllSlots") String deleteAllSlots,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/iscloneable")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCloneabilityInner>> isSiteCloneable(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/iscloneable")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCloneabilityInner>> isSiteCloneableSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/recover")
        @ExpectedResponses({202, 202, 404})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> recoverSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSiteRecoveryEntity recoveryEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/recover")
        @ExpectedResponses({202, 202, 404})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> recoverSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmSiteRecoveryEntity recoveryEntity,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/snapshots")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteSnapshots(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/snapshots")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteSnapshotsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedSiteCollection>> getDeletedSites(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @QueryParam("includeSiteTypes") String includeSiteTypes,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getDeployments(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getDeploymentsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/instances/{instanceId}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getInstanceDeployments(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/instances/{instanceId}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getInstanceDeploymentsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> getInstanceDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> createInstanceDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeploymentInner deployment,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteInstanceDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> getDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> createDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeploymentInner deployment,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteDeployment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> getDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> createDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeploymentInner deployment,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> getInstanceDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> createInstanceDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeploymentInner deployment,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/instances/{instanceId}/deployments/{id}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteInstanceDeploymentSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("id") String id,
            @PathParam("slot") String slot,
            @PathParam("instanceId") String instanceId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInstanceCollection>> getSiteInstanceIdentifiers(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInstanceCollection>> getSiteInstanceIdentifiersSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hostNameBindings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingCollection>> getSiteHostnameBindings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hostNameBindings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingCollection>> getSiteHostnameBindingsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingInner>> getSiteHostnameBinding(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("hostName") String hostname,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBinding(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("hostName") String hostname,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HostnameBindingInner hostnameBinding,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteHostnameBinding(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("hostName") String hostname,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingInner>> getSiteHostnameBindingSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("hostName") String hostname,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBindingSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("hostName") String hostname,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HostnameBindingInner hostnameBinding,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteHostnameBindingSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("hostName") String hostname,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> getSiteConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> createOrUpdateSiteConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteConfigInner siteConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> updateSiteConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteConfigInner siteConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> getSiteConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> createOrUpdateSiteConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteConfigInner siteConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteConfigInner>> updateSiteConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteConfigInner siteConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> getSiteSourceControl(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/sourcecontrols/web")
        @ExpectedResponses({200, 200, 201, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControl(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteSourceControlInner siteSourceControl,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteSourceControl(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> updateSiteSourceControl(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteSourceControlInner siteSourceControl,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> getSiteSourceControlSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 200, 201, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControlSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteSourceControlInner siteSourceControl,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteSourceControlSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteSourceControlInner>> updateSiteSourceControlSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteSourceControlInner siteSourceControl,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/appsettings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> listSiteAppSettingsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/appsettings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> listSiteAppSettings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/appsettings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> updateSiteAppSettings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") StringDictionaryInner appSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/appsettings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> updateSiteAppSettingsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") StringDictionaryInner appSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/connectionstrings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStrings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/connectionstrings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStringsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/connectionstrings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStrings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConnectionStringDictionaryInner connectionStrings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/connectionstrings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStringsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConnectionStringDictionaryInner connectionStrings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/authsettings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/authsettings/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettingsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/authsettings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettings(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteAuthSettingsInner siteAuthSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/authsettings")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettingsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteAuthSettingsInner siteAuthSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/publishingcredentials/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentials(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/publishingcredentials/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentialsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/metadata/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> listSiteMetadata(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/metadata/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> listSiteMetadataSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/metadata")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> updateSiteMetadata(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") StringDictionaryInner metadata,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/metadata")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StringDictionaryInner>> updateSiteMetadataSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") StringDictionaryInner metadata,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/logs")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteLogsConfigInner>> getSiteLogsConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/logs")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfig(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteLogsConfigInner siteLogsConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/logs")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteLogsConfigInner>> getSiteLogsConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/logs")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfigSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SiteLogsConfigInner siteLogsConfig,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/premieraddons")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> listSitePremierAddOns(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/premieraddons")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> listSitePremierAddOnsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSitePremierAddOn(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> addSitePremierAddOn(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PremierAddOnRequest premierAddOn,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSitePremierAddOn(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSitePremierAddOnSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> addSitePremierAddOnSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PremierAddOnRequest premierAddOn,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSitePremierAddOnSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("premierAddOnName") String premierAddOnName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/backup/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupRequestInner>> getSiteBackupConfiguration(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/backup/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupRequestInner>> getSiteBackupConfigurationSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/config/backup")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupRequestInner>> updateSiteBackupConfiguration(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/config/backup")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupRequestInner>> updateSiteBackupConfigurationSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backup")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> backupSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backup")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> backupSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups/discover")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RestoreRequestInner>> discoverSiteRestore(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RestoreRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups/discover")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RestoreRequestInner>> discoverSiteRestoreSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RestoreRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemCollection>> listSiteBackups(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemCollection>> listSiteBackupsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups/{backupId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> getSiteBackupStatus(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups/{backupId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> deleteBackup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups/{backupId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> getSiteBackupStatusSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups/{backupId}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> deleteBackupSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups/{backupId}/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> getSiteBackupStatusSecretsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups/{backupId}/list")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemInner>> getSiteBackupStatusSecrets(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BackupRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/backups/{backupId}/restore")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restoreSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RestoreRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/backups/{backupId}/restore")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restoreSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("backupId") String backupId,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RestoreRequestInner request,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getSiteUsages(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("$filter") String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getSiteUsagesSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("$filter") String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/metrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getSiteMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/metrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getSiteMetricsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/metricdefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getSiteMetricDefinitionsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/metricdefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getSiteMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/publishxml")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> listSitePublishingProfileXml(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmPublishingProfileOptions options,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/publishxml")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> listSitePublishingProfileXmlSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CsmPublishingProfileOptions options,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/restart")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> restartSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @QueryParam("softRestart") Boolean softRestart,
            @QueryParam("synchronous") Boolean synchronous,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/restart")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> restartSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("softRestart") Boolean softRestart,
            @QueryParam("synchronous") Boolean synchronous,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/start")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> startSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/start")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> startSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/stop")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> stopSite(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/stop")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> stopSiteSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/sync")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> syncSiteRepository(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/sync")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> syncSiteRepositorySlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/newpassword")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> generateNewSitePublishingPasswordSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/newpassword")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> generateNewSitePublishingPassword(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> createOrUpdateSiteRelayServiceConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteRelayServiceConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnection(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> createOrUpdateSiteRelayServiceConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> deleteSiteRelayServiceConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnectionSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("entityName") String entityName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/hybridconnection")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnectionsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/hybridconnection")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnections(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteVnetGatewaySlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGatewaySlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetGatewayInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGatewaySlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetGatewayInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteVnetGateway(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGateway(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetGatewayInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGateway(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("vnetName") String vnetName,
            @PathParam("gatewayName") String gatewayName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") VnetGatewayInner connectionEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/virtualNetworkConnections")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteVnetConnections(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
                + "/slots/{slot}/virtualNetworkConnections")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getSiteVnetConnectionsSlot(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("slot") String slot,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotDifferenceCollection>> getSlotsDifferencesFromProductionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SlotDifferenceCollection>> getSlotsDifferencesSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getSiteSlotsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getSitesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedSiteCollection>> getDeletedSitesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getDeploymentsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getDeploymentsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getInstanceDeploymentsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentCollection>> getInstanceDeploymentsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInstanceCollection>> getSiteInstanceIdentifiersNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteInstanceCollection>> getSiteInstanceIdentifiersSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingCollection>> getSiteHostnameBindingsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostnameBindingCollection>> getSiteHostnameBindingsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemCollection>> listSiteBackupsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupItemCollection>> listSiteBackupsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getSiteUsagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getSiteUsagesSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getSiteMetricsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getSiteMetricsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getSiteMetricDefinitionsSlotNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getSiteMetricDefinitionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> getSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> getSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> getSiteVnetConnectionSlotAsync(
        String resourceGroupName, String name, String vnetName, String slot) {
        return getSiteVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner getSiteVnetConnectionSlot(
        String resourceGroupName, String name, String vnetName, String slot) {
        return getSiteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).block();
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> getSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        return getSiteVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot, context).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteVnetConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String slot,
        VnetInfoInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteVnetConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> createOrUpdateSiteVnetConnectionSlotAsync(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionSlotWithResponseAsync(
                resourceGroupName, name, vnetName, slot, connectionEnvelope)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner createOrUpdateSiteVnetConnectionSlot(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope)
            .block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> createOrUpdateSiteVnetConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String slot,
        VnetInfoInner connectionEnvelope,
        Context context) {
        return createOrUpdateSiteVnetConnectionSlotWithResponseAsync(
                resourceGroupName, name, vnetName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteVnetConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteVnetConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteVnetConnectionSlotAsync(
        String resourceGroupName, String name, String vnetName, String slot) {
        return deleteSiteVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        return deleteSiteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).block();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        return deleteSiteVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot, context).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> updateSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteVnetConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> updateSiteVnetConnectionSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String slot,
        VnetInfoInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteVnetConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> updateSiteVnetConnectionSlotAsync(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return updateSiteVnetConnectionSlotWithResponseAsync(
                resourceGroupName, name, vnetName, slot, connectionEnvelope)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner updateSiteVnetConnectionSlot(
        String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return updateSiteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> updateSiteVnetConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String slot,
        VnetInfoInner connectionEnvelope,
        Context context) {
        return updateSiteVnetConnectionSlotWithResponseAsync(
                resourceGroupName, name, vnetName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> getSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> getSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> getSiteVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        return getSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner getSiteVnetConnection(String resourceGroupName, String name, String vnetName) {
        return getSiteVnetConnectionAsync(resourceGroupName, name, vnetName).block();
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> getSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        return getSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, context).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteVnetConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> createOrUpdateSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteVnetConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> createOrUpdateSiteVnetConnectionAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, connectionEnvelope)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner createOrUpdateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> createOrUpdateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        return createOrUpdateSiteVnetConnectionWithResponseAsync(
                resourceGroupName, name, vnetName, connectionEnvelope, context)
            .block();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteVnetConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteVnetConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        return deleteSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteVnetConnection(String resourceGroupName, String name, String vnetName) {
        return deleteSiteVnetConnectionAsync(resourceGroupName, name, vnetName).block();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        return deleteSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, context).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> updateSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteVnetConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetInfoInner>> updateSiteVnetConnectionWithResponseAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteVnetConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetInfoInner> updateSiteVnetConnectionAsync(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return updateSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, connectionEnvelope)
            .flatMap(
                (Response<VnetInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner updateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return updateSiteVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).block();
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param connectionEnvelope The properties of this Virtual Network Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vNETInfo contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetInfoInner> updateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        return updateSiteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeaturesSlotWithResponseAsync(
        String resourceGroupName, String name, String view, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (view == null) {
            return Mono.error(new IllegalArgumentException("Parameter view is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteNetworkFeaturesSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            view,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeaturesSlotWithResponseAsync(
        String resourceGroupName, String name, String view, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (view == null) {
            return Mono.error(new IllegalArgumentException("Parameter view is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteNetworkFeaturesSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                view,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFeaturesInner> getSiteNetworkFeaturesSlotAsync(
        String resourceGroupName, String name, String view, String slot) {
        return getSiteNetworkFeaturesSlotWithResponseAsync(resourceGroupName, name, view, slot)
            .flatMap(
                (Response<NetworkFeaturesInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFeaturesInner getSiteNetworkFeaturesSlot(
        String resourceGroupName, String name, String view, String slot) {
        return getSiteNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot).block();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkFeaturesInner> getSiteNetworkFeaturesSlotWithResponse(
        String resourceGroupName, String name, String view, String slot, Context context) {
        return getSiteNetworkFeaturesSlotWithResponseAsync(resourceGroupName, name, view, slot, context).block();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeaturesWithResponseAsync(
        String resourceGroupName, String name, String view) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (view == null) {
            return Mono.error(new IllegalArgumentException("Parameter view is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteNetworkFeatures(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            view,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFeaturesInner>> getSiteNetworkFeaturesWithResponseAsync(
        String resourceGroupName, String name, String view, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (view == null) {
            return Mono.error(new IllegalArgumentException("Parameter view is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteNetworkFeatures(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                view,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFeaturesInner> getSiteNetworkFeaturesAsync(String resourceGroupName, String name, String view) {
        return getSiteNetworkFeaturesWithResponseAsync(resourceGroupName, name, view)
            .flatMap(
                (Response<NetworkFeaturesInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFeaturesInner getSiteNetworkFeatures(String resourceGroupName, String name, String view) {
        return getSiteNetworkFeaturesAsync(resourceGroupName, name, view).block();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is an object used to store a full view of network features (presently VNET integration and Hybrid
     *     Connections) for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkFeaturesInner> getSiteNetworkFeaturesWithResponse(
        String resourceGroupName, String name, String view, Context context) {
        return getSiteNetworkFeaturesWithResponseAsync(resourceGroupName, name, view, context).block();
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteOperationSlotWithResponseAsync(
        String resourceGroupName, String name, String operationId, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteOperationSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            operationId,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteOperationSlotWithResponseAsync(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteOperationSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                operationId,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteOperationSlotAsync(
        String resourceGroupName, String name, String operationId, String slot) {
        return getSiteOperationSlotWithResponseAsync(resourceGroupName, name, operationId, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteOperationSlot(String resourceGroupName, String name, String operationId, String slot) {
        return getSiteOperationSlotAsync(resourceGroupName, name, operationId, slot).block();
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteOperationSlotWithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        return getSiteOperationSlotWithResponseAsync(resourceGroupName, name, operationId, slot, context).block();
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteOperation(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            operationId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteOperation(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                operationId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteOperationAsync(String resourceGroupName, String name, String operationId) {
        return getSiteOperationWithResponseAsync(resourceGroupName, name, operationId)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteOperation(String resourceGroupName, String name, String operationId) {
        return getSiteOperationAsync(resourceGroupName, name, operationId).block();
    }

    /**
     * Gets the operation for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param operationId Id of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return getSiteOperationWithResponseAsync(resourceGroupName, name, operationId, context).block();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> swapSlotWithProductionWithResponseAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .swapSlotWithProduction(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> swapSlotWithProductionWithResponseAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .swapSlotWithProduction(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginSwapSlotWithProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            swapSlotWithProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity);
        return this
            .client
            .<Object, Object>getLroResult(
                mono, this.client.getHttpPipeline(), Object.class, Object.class, Context.NONE);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginSwapSlotWithProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            swapSlotWithProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity, context);
        return this
            .client
            .<Object, Object>getLroResult(mono, this.client.getHttpPipeline(), Object.class, Object.class, context);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginSwapSlotWithProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).getSyncPoller();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginSwapSlotWithProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return beginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity, context).getSyncPoller();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> swapSlotWithProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> swapSlotWithProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return beginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return swapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).block();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object swapSlotWithProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return swapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity, context).block();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> swapSlotsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .swapSlotsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> swapSlotsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .swapSlotsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginSwapSlotsSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            swapSlotsSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity);
        return this
            .client
            .<Object, Object>getLroResult(
                mono, this.client.getHttpPipeline(), Object.class, Object.class, Context.NONE);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginSwapSlotsSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            swapSlotsSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity, context);
        return this
            .client
            .<Object, Object>getLroResult(mono, this.client.getHttpPipeline(), Object.class, Object.class, context);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginSwapSlotsSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity).getSyncPoller();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginSwapSlotsSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return beginSwapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity, context).getSyncPoller();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> swapSlotsSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> swapSlotsSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return beginSwapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object swapSlotsSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return swapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity).block();
    }

    /**
     * Swaps web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of source slot for the swap.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object swapSlotsSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return swapSlotsSlotAsync(resourceGroupName, name, slot, slotSwapEntity, context).block();
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesFromProductionSinglePageAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSlotsDifferencesFromProduction(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .<PagedResponse<SlotDifferenceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesFromProductionSinglePageAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSlotsDifferencesFromProduction(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SlotDifferenceInner> getSlotsDifferencesFromProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return new PagedFlux<>(
            () -> getSlotsDifferencesFromProductionSinglePageAsync(resourceGroupName, name, slotSwapEntity),
            nextLink -> getSlotsDifferencesFromProductionNextSinglePageAsync(nextLink));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SlotDifferenceInner> getSlotsDifferencesFromProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return new PagedFlux<>(
            () -> getSlotsDifferencesFromProductionSinglePageAsync(resourceGroupName, name, slotSwapEntity, context),
            nextLink -> getSlotsDifferencesFromProductionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return new PagedIterable<>(getSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return new PagedIterable<>(
            getSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity, context));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSlotsDifferencesSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .<PagedResponse<SlotDifferenceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSlotsDifferencesSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SlotDifferenceInner> getSlotsDifferencesSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return new PagedFlux<>(
            () -> getSlotsDifferencesSlotSinglePageAsync(resourceGroupName, name, slot, slotSwapEntity),
            nextLink -> getSlotsDifferencesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SlotDifferenceInner> getSlotsDifferencesSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return new PagedFlux<>(
            () -> getSlotsDifferencesSlotSinglePageAsync(resourceGroupName, name, slot, slotSwapEntity, context),
            nextLink -> getSlotsDifferencesSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return new PagedIterable<>(getSlotsDifferencesSlotAsync(resourceGroupName, name, slot, slotSwapEntity));
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot.
     * @param slotSwapEntity Request body that contains the target slot name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the difference in configuration settings between two web app slots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return new PagedIterable<>(
            getSlotsDifferencesSlotAsync(resourceGroupName, name, slot, slotSwapEntity, context));
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> applySlotConfigToProductionWithResponseAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .applySlotConfigToProduction(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> applySlotConfigToProductionWithResponseAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .applySlotConfigToProduction(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> applySlotConfigToProductionAsync(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigToProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object applySlotConfigToProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity).block();
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> applySlotConfigToProductionWithResponse(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return applySlotConfigToProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity, context).block();
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> applySlotConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .applySlotConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotSwapEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> applySlotConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotSwapEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter slotSwapEntity is required and cannot be null."));
        } else {
            slotSwapEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .applySlotConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                slotSwapEntity,
                accept,
                context);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> applySlotConfigSlotAsync(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object applySlotConfigSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigSlotAsync(resourceGroupName, name, slot, slotSwapEntity).block();
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot.
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on
     *     the source slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> applySlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return applySlotConfigSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity, context).block();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> resetProductionSlotConfigWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resetProductionSlotConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> resetProductionSlotConfigWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .resetProductionSlotConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> resetProductionSlotConfigAsync(String resourceGroupName, String name) {
        return resetProductionSlotConfigWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object resetProductionSlotConfig(String resourceGroupName, String name) {
        return resetProductionSlotConfigAsync(resourceGroupName, name).block();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> resetProductionSlotConfigWithResponse(
        String resourceGroupName, String name, Context context) {
        return resetProductionSlotConfigWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> resetSlotConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resetSlotConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> resetSlotConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .resetSlotConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> resetSlotConfigSlotAsync(String resourceGroupName, String name, String slot) {
        return resetSlotConfigSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object resetSlotConfigSlot(String resourceGroupName, String name, String slot) {
        return resetSlotConfigSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig
     * API.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> resetSlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return resetSlotConfigSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SlotConfigNamesResourceInner>> getSlotConfigNamesWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSlotConfigNames(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SlotConfigNamesResourceInner>> getSlotConfigNamesWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSlotConfigNames(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SlotConfigNamesResourceInner> getSlotConfigNamesAsync(String resourceGroupName, String name) {
        return getSlotConfigNamesWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SlotConfigNamesResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SlotConfigNamesResourceInner getSlotConfigNames(String resourceGroupName, String name) {
        return getSlotConfigNamesAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the names of application settings and connection string that remain with the slot during swap operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SlotConfigNamesResourceInner> getSlotConfigNamesWithResponse(
        String resourceGroupName, String name, Context context) {
        return getSlotConfigNamesWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SlotConfigNamesResourceInner>> updateSlotConfigNamesWithResponseAsync(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotConfigNames == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter slotConfigNames is required and cannot be null."));
        } else {
            slotConfigNames.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSlotConfigNames(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            slotConfigNames,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SlotConfigNamesResourceInner>> updateSlotConfigNamesWithResponseAsync(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (slotConfigNames == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter slotConfigNames is required and cannot be null."));
        } else {
            slotConfigNames.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSlotConfigNames(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                slotConfigNames,
                accept,
                context);
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SlotConfigNamesResourceInner> updateSlotConfigNamesAsync(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        return updateSlotConfigNamesWithResponseAsync(resourceGroupName, name, slotConfigNames)
            .flatMap(
                (Response<SlotConfigNamesResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SlotConfigNamesResourceInner updateSlotConfigNames(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        return updateSlotConfigNamesAsync(resourceGroupName, name, slotConfigNames).block();
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slotConfigNames Request body containing the names of application settings and connection strings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return slot Config names azure resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SlotConfigNamesResourceInner> updateSlotConfigNamesWithResponse(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames, Context context) {
        return updateSlotConfigNamesWithResponseAsync(resourceGroupName, name, slotConfigNames, context).block();
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSiteSlotsSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSlots(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            propertiesToInclude,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSiteSlotsSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteSlots(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                propertiesToInclude,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getSiteSlotsAsync(String resourceGroupName, String name, String propertiesToInclude) {
        return new PagedFlux<>(
            () -> getSiteSlotsSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getSiteSlotsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getSiteSlotsAsync(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedFlux<>(
            () -> getSiteSlotsSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getSiteSlotsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getSiteSlotsAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedFlux<>(
            () -> getSiteSlotsSinglePageAsync(resourceGroupName, name, propertiesToInclude, context),
            nextLink -> getSiteSlotsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getSiteSlots(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedIterable<>(getSiteSlotsAsync(resourceGroupName, name, propertiesToInclude));
    }

    /**
     * Gets all the slots for a web apps.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude List of app properties to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the slots for a web apps.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getSiteSlots(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedIterable<>(getSiteSlotsAsync(resourceGroupName, name, propertiesToInclude, context));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            propertiesToInclude,
                            includeSiteTypes,
                            includeSlots,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName,
        String propertiesToInclude,
        String includeSiteTypes,
        Boolean includeSlots,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                propertiesToInclude,
                includeSiteTypes,
                includeSlots,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> listByResourceGroupAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots) {
        return new PagedFlux<>(
            () ->
                listByResourceGroupSinglePageAsync(
                    resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots),
            nextLink -> getSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> listByResourceGroupAsync(String resourceGroupName) {
        final String propertiesToInclude = null;
        final String includeSiteTypes = null;
        final Boolean includeSlots = null;
        return new PagedFlux<>(
            () ->
                listByResourceGroupSinglePageAsync(
                    resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots),
            nextLink -> getSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> listByResourceGroupAsync(
        String resourceGroupName,
        String propertiesToInclude,
        String includeSiteTypes,
        Boolean includeSlots,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByResourceGroupSinglePageAsync(
                    resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots, context),
            nextLink -> getSitesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> listByResourceGroup(String resourceGroupName) {
        final String propertiesToInclude = null;
        final String includeSiteTypes = null;
        final Boolean includeSlots = null;
        return new PagedIterable<>(
            listByResourceGroupAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots));
    }

    /**
     * Gets the web apps for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param includeSlots Whether or not to include deployments slots in results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web apps for a subscription in the specified resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> listByResourceGroup(
        String resourceGroupName,
        String propertiesToInclude,
        String includeSiteTypes,
        Boolean includeSlots,
        Context context) {
        return new PagedIterable<>(
            listByResourceGroupAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots, context));
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            propertiesToInclude,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                propertiesToInclude,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> getByResourceGroupAsync(String resourceGroupName, String name, String propertiesToInclude) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name, propertiesToInclude)
            .flatMap(
                (Response<SiteInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return getByResourceGroupWithResponseAsync(resourceGroupName, name, propertiesToInclude)
            .flatMap(
                (Response<SiteInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner getByResourceGroup(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return getByResourceGroupAsync(resourceGroupName, name, propertiesToInclude).block();
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name, propertiesToInclude, context).block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateSiteWithResponseAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteEnvelope == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteEnvelope is required and cannot be null."));
        } else {
            siteEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            skipDnsRegistration,
                            skipCustomDomainVerification,
                            forceDnsRegistration,
                            ttlInSeconds,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateSiteWithResponseAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteEnvelope == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteEnvelope is required and cannot be null."));
        } else {
            siteEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                this.client.getSubscriptionId(),
                apiVersion,
                siteEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateSiteWithResponseAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, Context.NONE);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateSiteWithResponseAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSite(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return beginCreateOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .getSyncPoller();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSite(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return beginCreateOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .getSyncPoller();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return beginCreateOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteAsync(String resourceGroupName, String name, SiteInner siteEnvelope) {
        final String skipDnsRegistration = null;
        final String skipCustomDomainVerification = null;
        final String forceDnsRegistration = null;
        final String ttlInSeconds = null;
        return beginCreateOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteAsync(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return beginCreateOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSite(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return createOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSite(String resourceGroupName, String name, SiteInner siteEnvelope) {
        final String skipDnsRegistration = null;
        final String skipCustomDomainVerification = null;
        final String forceDnsRegistration = null;
        final String ttlInSeconds = null;
        return createOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSite(
        String resourceGroupName,
        String name,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return createOrUpdateSiteAsync(
                resourceGroupName,
                name,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .block();
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteWithResponseAsync(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            deleteMetrics,
                            deleteEmptyServerFarm,
                            skipDnsRegistration,
                            deleteAllSlots,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteWithResponseAsync(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots) {
        return deleteWithResponseAsync(
                resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name) {
        final String deleteMetrics = null;
        final String deleteEmptyServerFarm = null;
        final String skipDnsRegistration = null;
        final String deleteAllSlots = null;
        return deleteWithResponseAsync(
                resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name) {
        final String deleteMetrics = null;
        final String deleteEmptyServerFarm = null;
        final String skipDnsRegistration = null;
        final String deleteAllSlots = null;
        return deleteAsync(
                resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots)
            .block();
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteWithResponse(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        return deleteWithResponseAsync(
                resourceGroupName,
                name,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                context)
            .block();
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteInner>> getSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String propertiesToInclude) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            propertiesToInclude,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteInner>> getSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String propertiesToInclude, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                propertiesToInclude,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> getSiteSlotAsync(
        String resourceGroupName, String name, String slot, String propertiesToInclude) {
        return getSiteSlotWithResponseAsync(resourceGroupName, name, slot, propertiesToInclude)
            .flatMap(
                (Response<SiteInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> getSiteSlotAsync(String resourceGroupName, String name, String slot) {
        final String propertiesToInclude = null;
        return getSiteSlotWithResponseAsync(resourceGroupName, name, slot, propertiesToInclude)
            .flatMap(
                (Response<SiteInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner getSiteSlot(String resourceGroupName, String name, String slot) {
        final String propertiesToInclude = null;
        return getSiteSlotAsync(resourceGroupName, name, slot, propertiesToInclude).block();
    }

    /**
     * Get details of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteInner> getSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, String propertiesToInclude, Context context) {
        return getSiteSlotWithResponseAsync(resourceGroupName, name, slot, propertiesToInclude, context).block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateSiteSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteEnvelope == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteEnvelope is required and cannot be null."));
        } else {
            siteEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            skipDnsRegistration,
                            skipCustomDomainVerification,
                            forceDnsRegistration,
                            ttlInSeconds,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateSiteSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteEnvelope == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteEnvelope is required and cannot be null."));
        } else {
            siteEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                this.client.getSubscriptionId(),
                apiVersion,
                siteEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteSlotAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateSiteSlotWithResponseAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, Context.NONE);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteSlotAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateSiteSlotWithResponseAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return beginCreateOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .getSyncPoller();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginCreateOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return beginCreateOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .getSyncPoller();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteSlotAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return beginCreateOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteSlotAsync(
        String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        final String skipDnsRegistration = null;
        final String skipCustomDomainVerification = null;
        final String forceDnsRegistration = null;
        final String ttlInSeconds = null;
        return beginCreateOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> createOrUpdateSiteSlotAsync(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return beginCreateOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        return createOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSiteSlot(
        String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        final String skipDnsRegistration = null;
        final String skipCustomDomainVerification = null;
        final String forceDnsRegistration = null;
        final String ttlInSeconds = null;
        return createOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds)
            .block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteEnvelope Details of web app if it exists already.
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is
     *     only used for app creation.
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are
     *     not verified.
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS.
     * @param ttlInSeconds Time to live in seconds for web app's default domain name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        return createOrUpdateSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                siteEnvelope,
                skipDnsRegistration,
                skipCustomDomainVerification,
                forceDnsRegistration,
                ttlInSeconds,
                context)
            .block();
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            deleteMetrics,
                            deleteEmptyServerFarm,
                            skipDnsRegistration,
                            deleteAllSlots,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteSlotAsync(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots) {
        return deleteSiteSlotWithResponseAsync(
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteSlotAsync(String resourceGroupName, String name, String slot) {
        final String deleteMetrics = null;
        final String deleteEmptyServerFarm = null;
        final String skipDnsRegistration = null;
        final String deleteAllSlots = null;
        return deleteSiteSlotWithResponseAsync(
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteSlot(String resourceGroupName, String name, String slot) {
        final String deleteMetrics = null;
        final String deleteEmptyServerFarm = null;
        final String skipDnsRegistration = null;
        final String deleteAllSlots = null;
        return deleteSiteSlotAsync(
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots)
            .block();
    }

    /**
     * Deletes a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deleteMetrics If true, web app metrics are also deleted.
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is
     *     also deleted.
     * @param skipDnsRegistration If true, DNS registration is skipped.
     * @param deleteAllSlots If true, all slots associated with web app are also deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        return deleteSiteSlotWithResponseAsync(
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                context)
            .block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteCloneabilityInner>> isSiteCloneableWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .isSiteCloneable(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteCloneabilityInner>> isSiteCloneableWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .isSiteCloneable(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteCloneabilityInner> isSiteCloneableAsync(String resourceGroupName, String name) {
        return isSiteCloneableWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SiteCloneabilityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteCloneabilityInner isSiteCloneable(String resourceGroupName, String name) {
        return isSiteCloneableAsync(resourceGroupName, name).block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteCloneabilityInner> isSiteCloneableWithResponse(
        String resourceGroupName, String name, Context context) {
        return isSiteCloneableWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteCloneabilityInner>> isSiteCloneableSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .isSiteCloneableSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteCloneabilityInner>> isSiteCloneableSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .isSiteCloneableSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteCloneabilityInner> isSiteCloneableSlotAsync(String resourceGroupName, String name, String slot) {
        return isSiteCloneableSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<SiteCloneabilityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteCloneabilityInner isSiteCloneableSlot(String resourceGroupName, String name, String slot) {
        return isSiteCloneableSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param resourceGroupName Name of the resource group.
     * @param name Name of the web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents whether or not a web app is cloneable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteCloneabilityInner> isSiteCloneableSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return isSiteCloneableSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recoverSiteWithResponseAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter recoveryEntity is required and cannot be null."));
        } else {
            recoveryEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .recoverSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            recoveryEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recoverSiteWithResponseAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter recoveryEntity is required and cannot be null."));
        } else {
            recoveryEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .recoverSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                recoveryEntity,
                accept,
                context);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginRecoverSiteAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        Mono<Response<Flux<ByteBuffer>>> mono = recoverSiteWithResponseAsync(resourceGroupName, name, recoveryEntity);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, Context.NONE);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginRecoverSiteAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            recoverSiteWithResponseAsync(resourceGroupName, name, recoveryEntity, context);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, context);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginRecoverSite(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        return beginRecoverSiteAsync(resourceGroupName, name, recoveryEntity).getSyncPoller();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginRecoverSite(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return beginRecoverSiteAsync(resourceGroupName, name, recoveryEntity, context).getSyncPoller();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> recoverSiteAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        return beginRecoverSiteAsync(resourceGroupName, name, recoveryEntity)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> recoverSiteAsync(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return beginRecoverSiteAsync(resourceGroupName, name, recoveryEntity, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner recoverSite(String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        return recoverSiteAsync(resourceGroupName, name, recoveryEntity).block();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner recoverSite(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return recoverSiteAsync(resourceGroupName, name, recoveryEntity, context).block();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recoverSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter recoveryEntity is required and cannot be null."));
        } else {
            recoveryEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .recoverSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            recoveryEntity,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recoverSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (recoveryEntity == null) {
            return Mono.error(new IllegalArgumentException("Parameter recoveryEntity is required and cannot be null."));
        } else {
            recoveryEntity.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .recoverSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                recoveryEntity,
                accept,
                context);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginRecoverSiteSlotAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            recoverSiteSlotWithResponseAsync(resourceGroupName, name, slot, recoveryEntity);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, Context.NONE);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SiteInner>, SiteInner> beginRecoverSiteSlotAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            recoverSiteSlotWithResponseAsync(resourceGroupName, name, slot, recoveryEntity, context);
        return this
            .client
            .<SiteInner, SiteInner>getLroResult(
                mono, this.client.getHttpPipeline(), SiteInner.class, SiteInner.class, context);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginRecoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        return beginRecoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity).getSyncPoller();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SiteInner>, SiteInner> beginRecoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return beginRecoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity, context).getSyncPoller();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> recoverSiteSlotAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        return beginRecoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteInner> recoverSiteSlotAsync(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return beginRecoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner recoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        return recoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity).block();
    }

    /**
     * Recovers a deleted web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling
     *     GetDeletedSites or GetSiteSnapshots API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner recoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        return recoverSiteSlotAsync(resourceGroupName, name, slot, recoveryEntity, context).block();
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteSnapshotsWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSnapshots(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteSnapshotsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteSnapshots(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteSnapshotsAsync(String resourceGroupName, String name) {
        return getSiteSnapshotsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteSnapshots(String resourceGroupName, String name) {
        return getSiteSnapshotsAsync(resourceGroupName, name).block();
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteSnapshotsWithResponse(String resourceGroupName, String name, Context context) {
        return getSiteSnapshotsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteSnapshotsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSnapshotsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteSnapshotsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteSnapshotsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteSnapshotsSlotAsync(String resourceGroupName, String name, String slot) {
        return getSiteSnapshotsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteSnapshotsSlot(String resourceGroupName, String name, String slot) {
        return getSiteSnapshotsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param resourceGroupName Webspace.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteSnapshotsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteSnapshotsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedSiteInner>> getDeletedSitesSinglePageAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDeletedSites(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            propertiesToInclude,
                            includeSiteTypes,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<DeletedSiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedSiteInner>> getDeletedSitesSinglePageAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeletedSites(
                this.client.getEndpoint(),
                resourceGroupName,
                propertiesToInclude,
                includeSiteTypes,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedSiteInner> getDeletedSitesAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes) {
        return new PagedFlux<>(
            () -> getDeletedSitesSinglePageAsync(resourceGroupName, propertiesToInclude, includeSiteTypes),
            nextLink -> getDeletedSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedSiteInner> getDeletedSitesAsync(String resourceGroupName) {
        final String propertiesToInclude = null;
        final String includeSiteTypes = null;
        return new PagedFlux<>(
            () -> getDeletedSitesSinglePageAsync(resourceGroupName, propertiesToInclude, includeSiteTypes),
            nextLink -> getDeletedSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedSiteInner> getDeletedSitesAsync(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Context context) {
        return new PagedFlux<>(
            () -> getDeletedSitesSinglePageAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, context),
            nextLink -> getDeletedSitesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedSiteInner> getDeletedSites(String resourceGroupName) {
        final String propertiesToInclude = null;
        final String includeSiteTypes = null;
        return new PagedIterable<>(getDeletedSitesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes));
    }

    /**
     * Gets deleted web apps in subscription.
     *
     * @param resourceGroupName Name of resource group.
     * @param propertiesToInclude Additional web app properties included in the response.
     * @param includeSiteTypes Types of apps included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted web apps in subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedSiteInner> getDeletedSites(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Context context) {
        return new PagedIterable<>(
            getDeletedSitesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSinglePageAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDeployments(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeployments(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getDeploymentsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getDeploymentsSinglePageAsync(resourceGroupName, name),
            nextLink -> getDeploymentsNextSinglePageAsync(nextLink));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getDeploymentsAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getDeploymentsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getDeploymentsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getDeployments(String resourceGroupName, String name) {
        return new PagedIterable<>(getDeploymentsAsync(resourceGroupName, name));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getDeployments(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getDeploymentsAsync(resourceGroupName, name, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDeploymentsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeploymentsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getDeploymentsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> getDeploymentsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> getDeploymentsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getDeploymentsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedFlux<>(
            () -> getDeploymentsSlotSinglePageAsync(resourceGroupName, name, slot, context),
            nextLink -> getDeploymentsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getDeploymentsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(getDeploymentsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getDeploymentsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedIterable<>(getDeploymentsSlotAsync(resourceGroupName, name, slot, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSinglePageAsync(
        String resourceGroupName, String name, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getInstanceDeployments(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSinglePageAsync(
        String resourceGroupName, String name, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeployments(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getInstanceDeploymentsAsync(
        String resourceGroupName, String name, String instanceId) {
        return new PagedFlux<>(
            () -> getInstanceDeploymentsSinglePageAsync(resourceGroupName, name, instanceId),
            nextLink -> getInstanceDeploymentsNextSinglePageAsync(nextLink));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getInstanceDeploymentsAsync(
        String resourceGroupName, String name, String instanceId, Context context) {
        return new PagedFlux<>(
            () -> getInstanceDeploymentsSinglePageAsync(resourceGroupName, name, instanceId, context),
            nextLink -> getInstanceDeploymentsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getInstanceDeployments(
        String resourceGroupName, String name, String instanceId) {
        return new PagedIterable<>(getInstanceDeploymentsAsync(resourceGroupName, name, instanceId));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getInstanceDeployments(
        String resourceGroupName, String name, String instanceId, Context context) {
        return new PagedIterable<>(getInstanceDeploymentsAsync(resourceGroupName, name, instanceId, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getInstanceDeploymentsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeploymentsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getInstanceDeploymentsSlotAsync(
        String resourceGroupName, String name, String slot, String instanceId) {
        return new PagedFlux<>(
            () -> getInstanceDeploymentsSlotSinglePageAsync(resourceGroupName, name, slot, instanceId),
            nextLink -> getInstanceDeploymentsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> getInstanceDeploymentsSlotAsync(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        return new PagedFlux<>(
            () -> getInstanceDeploymentsSlotSinglePageAsync(resourceGroupName, name, slot, instanceId, context),
            nextLink -> getInstanceDeploymentsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId) {
        return new PagedIterable<>(getInstanceDeploymentsSlotAsync(resourceGroupName, name, slot, instanceId));
    }

    /**
     * List deployments.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        return new PagedIterable<>(getInstanceDeploymentsSlotAsync(resourceGroupName, name, slot, instanceId, context));
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getInstanceDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getInstanceDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getInstanceDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> getInstanceDeploymentAsync(
        String resourceGroupName, String name, String id, String instanceId) {
        return getInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getInstanceDeployment(String resourceGroupName, String name, String id, String instanceId) {
        return getInstanceDeploymentAsync(resourceGroupName, name, id, instanceId).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> getInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        return getInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId, context).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createInstanceDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, String instanceId, DeploymentInner deployment) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createInstanceDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            deployment,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createInstanceDeploymentWithResponseAsync(
        String resourceGroupName,
        String name,
        String id,
        String instanceId,
        DeploymentInner deployment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createInstanceDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                deployment,
                accept,
                context);
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createInstanceDeploymentAsync(
        String resourceGroupName, String name, String id, String instanceId, DeploymentInner deployment) {
        return createInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId, deployment)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createInstanceDeployment(
        String resourceGroupName, String name, String id, String instanceId, DeploymentInner deployment) {
        return createInstanceDeploymentAsync(resourceGroupName, name, id, instanceId, deployment).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> createInstanceDeploymentWithResponse(
        String resourceGroupName,
        String name,
        String id,
        String instanceId,
        DeploymentInner deployment,
        Context context) {
        return createInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId, deployment, context)
            .block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteInstanceDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteInstanceDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteInstanceDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteInstanceDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteInstanceDeploymentAsync(
        String resourceGroupName, String name, String id, String instanceId) {
        return deleteInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteInstanceDeployment(String resourceGroupName, String name, String id, String instanceId) {
        return deleteInstanceDeploymentAsync(resourceGroupName, name, id, instanceId).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        return deleteInstanceDeploymentWithResponseAsync(resourceGroupName, name, id, instanceId, context).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> getDeploymentAsync(String resourceGroupName, String name, String id) {
        return getDeploymentWithResponseAsync(resourceGroupName, name, id)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getDeployment(String resourceGroupName, String name, String id) {
        return getDeploymentAsync(resourceGroupName, name, id).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> getDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        return getDeploymentWithResponseAsync(resourceGroupName, name, id, context).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, DeploymentInner deployment) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            deployment,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, DeploymentInner deployment, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                this.client.getSubscriptionId(),
                apiVersion,
                deployment,
                accept,
                context);
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createDeploymentAsync(
        String resourceGroupName, String name, String id, DeploymentInner deployment) {
        return createDeploymentWithResponseAsync(resourceGroupName, name, id, deployment)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createDeployment(
        String resourceGroupName, String name, String id, DeploymentInner deployment) {
        return createDeploymentAsync(resourceGroupName, name, id, deployment).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> createDeploymentWithResponse(
        String resourceGroupName, String name, String id, DeploymentInner deployment, Context context) {
        return createDeploymentWithResponseAsync(resourceGroupName, name, id, deployment, context).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteDeploymentWithResponseAsync(String resourceGroupName, String name, String id) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteDeployment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteDeploymentWithResponseAsync(
        String resourceGroupName, String name, String id, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteDeployment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteDeploymentAsync(String resourceGroupName, String name, String id) {
        return deleteDeploymentWithResponseAsync(resourceGroupName, name, id)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteDeployment(String resourceGroupName, String name, String id) {
        return deleteDeploymentAsync(resourceGroupName, name, id).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        return deleteDeploymentWithResponseAsync(resourceGroupName, name, id, context).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> getDeploymentSlotAsync(
        String resourceGroupName, String name, String id, String slot) {
        return getDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        return getDeploymentSlotAsync(resourceGroupName, name, id, slot).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> getDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        return getDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, context).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            deployment,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                deployment,
                accept,
                context);
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createDeploymentSlotAsync(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        return createDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, deployment)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        return createDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> createDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment, Context context) {
        return createDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, deployment, context).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot) {
        return deleteDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        return deleteDeploymentSlotAsync(resourceGroupName, name, id, slot).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        return deleteDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, context).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getInstanceDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> getInstanceDeploymentSlotAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        return getInstanceDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, instanceId)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        return getInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId).block();
    }

    /**
     * Get the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> getInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        return getInstanceDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, instanceId, context)
            .block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId, DeploymentInner deployment) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createInstanceDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            deployment,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> createInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String id,
        String slot,
        String instanceId,
        DeploymentInner deployment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deployment == null) {
            return Mono.error(new IllegalArgumentException("Parameter deployment is required and cannot be null."));
        } else {
            deployment.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createInstanceDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                deployment,
                accept,
                context);
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createInstanceDeploymentSlotAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId, DeploymentInner deployment) {
        return createInstanceDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, instanceId, deployment)
            .flatMap(
                (Response<DeploymentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId, DeploymentInner deployment) {
        return createInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId, deployment).block();
    }

    /**
     * Create a deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param deployment Details of deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents user credentials used for publishing activity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> createInstanceDeploymentSlotWithResponse(
        String resourceGroupName,
        String name,
        String id,
        String slot,
        String instanceId,
        DeploymentInner deployment,
        Context context) {
        return createInstanceDeploymentSlotWithResponseAsync(
                resourceGroupName, name, id, slot, instanceId, deployment, context)
            .block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteInstanceDeploymentSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            id,
                            slot,
                            instanceId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteInstanceDeploymentSlotWithResponseAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteInstanceDeploymentSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                id,
                slot,
                instanceId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteInstanceDeploymentSlotAsync(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        return deleteInstanceDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, instanceId)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        return deleteInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId).block();
    }

    /**
     * Delete the deployment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param id Id of the deployment.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId Id of web app instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        return deleteInstanceDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, instanceId, context)
            .block();
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteInstanceIdentifiers(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteInstanceIdentifiers(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInstanceInner> getSiteInstanceIdentifiersAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getSiteInstanceIdentifiersSinglePageAsync(resourceGroupName, name),
            nextLink -> getSiteInstanceIdentifiersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInstanceInner> getSiteInstanceIdentifiersAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getSiteInstanceIdentifiersSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getSiteInstanceIdentifiersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> getSiteInstanceIdentifiers(String resourceGroupName, String name) {
        return new PagedIterable<>(getSiteInstanceIdentifiersAsync(resourceGroupName, name));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> getSiteInstanceIdentifiers(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getSiteInstanceIdentifiersAsync(resourceGroupName, name, context));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSlotSinglePageAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteInstanceIdentifiersSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteInstanceIdentifiersSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInstanceInner> getSiteInstanceIdentifiersSlotAsync(
        String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> getSiteInstanceIdentifiersSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> getSiteInstanceIdentifiersSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInstanceInner> getSiteInstanceIdentifiersSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedFlux<>(
            () -> getSiteInstanceIdentifiersSlotSinglePageAsync(resourceGroupName, name, slot, context),
            nextLink -> getSiteInstanceIdentifiersSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> getSiteInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(getSiteInstanceIdentifiersSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Gets all instance of a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all instance of a web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> getSiteInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedIterable<>(getSiteInstanceIdentifiersSlotAsync(resourceGroupName, name, slot, context));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteHostnameBindings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<HostnameBindingInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBindings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostnameBindingInner> getSiteHostnameBindingsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getSiteHostnameBindingsSinglePageAsync(resourceGroupName, name),
            nextLink -> getSiteHostnameBindingsNextSinglePageAsync(nextLink));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostnameBindingInner> getSiteHostnameBindingsAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getSiteHostnameBindingsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getSiteHostnameBindingsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostnameBindingInner> getSiteHostnameBindings(String resourceGroupName, String name) {
        return new PagedIterable<>(getSiteHostnameBindingsAsync(resourceGroupName, name));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostnameBindingInner> getSiteHostnameBindings(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getSiteHostnameBindingsAsync(resourceGroupName, name, context));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteHostnameBindingsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<HostnameBindingInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBindingsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostnameBindingInner> getSiteHostnameBindingsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> getSiteHostnameBindingsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> getSiteHostnameBindingsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostnameBindingInner> getSiteHostnameBindingsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedFlux<>(
            () -> getSiteHostnameBindingsSlotSinglePageAsync(resourceGroupName, name, slot, context),
            nextLink -> getSiteHostnameBindingsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostnameBindingInner> getSiteHostnameBindingsSlot(
        String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(getSiteHostnameBindingsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Get web app hostname bindings.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app hostname bindings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostnameBindingInner> getSiteHostnameBindingsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedIterable<>(getSiteHostnameBindingsSlotAsync(resourceGroupName, name, slot, context));
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> getSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteHostnameBinding(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            hostname,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> getSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBinding(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                hostname,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostnameBindingInner> getSiteHostnameBindingAsync(
        String resourceGroupName, String name, String hostname) {
        return getSiteHostnameBindingWithResponseAsync(resourceGroupName, name, hostname)
            .flatMap(
                (Response<HostnameBindingInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostnameBindingInner getSiteHostnameBinding(String resourceGroupName, String name, String hostname) {
        return getSiteHostnameBindingAsync(resourceGroupName, name, hostname).block();
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostnameBindingInner> getSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        return getSiteHostnameBindingWithResponseAsync(resourceGroupName, name, hostname, context).block();
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname, HostnameBindingInner hostnameBinding) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostnameBinding == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hostnameBinding is required and cannot be null."));
        } else {
            hostnameBinding.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteHostnameBinding(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            hostname,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            hostnameBinding,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param hostnameBinding Host name binding information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname, HostnameBindingInner hostnameBinding, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostnameBinding == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hostnameBinding is required and cannot be null."));
        } else {
            hostnameBinding.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteHostnameBinding(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                hostname,
                this.client.getSubscriptionId(),
                apiVersion,
                hostnameBinding,
                accept,
                context);
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostnameBindingInner> createOrUpdateSiteHostnameBindingAsync(
        String resourceGroupName, String name, String hostname, HostnameBindingInner hostnameBinding) {
        return createOrUpdateSiteHostnameBindingWithResponseAsync(resourceGroupName, name, hostname, hostnameBinding)
            .flatMap(
                (Response<HostnameBindingInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostnameBindingInner createOrUpdateSiteHostnameBinding(
        String resourceGroupName, String name, String hostname, HostnameBindingInner hostnameBinding) {
        return createOrUpdateSiteHostnameBindingAsync(resourceGroupName, name, hostname, hostnameBinding).block();
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param hostnameBinding Host name binding information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostnameBindingInner> createOrUpdateSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, HostnameBindingInner hostnameBinding, Context context) {
        return createOrUpdateSiteHostnameBindingWithResponseAsync(
                resourceGroupName, name, hostname, hostnameBinding, context)
            .block();
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteHostnameBinding(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            hostname,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteHostnameBindingWithResponseAsync(
        String resourceGroupName, String name, String hostname, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteHostnameBinding(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                hostname,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteHostnameBindingAsync(String resourceGroupName, String name, String hostname) {
        return deleteSiteHostnameBindingWithResponseAsync(resourceGroupName, name, hostname)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteHostnameBinding(String resourceGroupName, String name, String hostname) {
        return deleteSiteHostnameBindingAsync(resourceGroupName, name, hostname).block();
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        return deleteSiteHostnameBindingWithResponseAsync(resourceGroupName, name, hostname, context).block();
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> getSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String hostname) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteHostnameBindingSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            hostname,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> getSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBindingSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                hostname,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostnameBindingInner> getSiteHostnameBindingSlotAsync(
        String resourceGroupName, String name, String slot, String hostname) {
        return getSiteHostnameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostname)
            .flatMap(
                (Response<HostnameBindingInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostnameBindingInner getSiteHostnameBindingSlot(
        String resourceGroupName, String name, String slot, String hostname) {
        return getSiteHostnameBindingSlotAsync(resourceGroupName, name, slot, hostname).block();
    }

    /**
     * Get web app binding for a hostname.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return web app binding for a hostname.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostnameBindingInner> getSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        return getSiteHostnameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostname, context).block();
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostnameBinding == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hostnameBinding is required and cannot be null."));
        } else {
            hostnameBinding.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteHostnameBindingSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            hostname,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            hostnameBinding,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostnameBindingInner>> createOrUpdateSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String hostname,
        String slot,
        HostnameBindingInner hostnameBinding,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostnameBinding == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hostnameBinding is required and cannot be null."));
        } else {
            hostnameBinding.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteHostnameBindingSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                hostname,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                hostnameBinding,
                accept,
                context);
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostnameBindingInner> createOrUpdateSiteHostnameBindingSlotAsync(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding) {
        return createOrUpdateSiteHostnameBindingSlotWithResponseAsync(
                resourceGroupName, name, hostname, slot, hostnameBinding)
            .flatMap(
                (Response<HostnameBindingInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostnameBindingInner createOrUpdateSiteHostnameBindingSlot(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding) {
        return createOrUpdateSiteHostnameBindingSlotAsync(resourceGroupName, name, hostname, slot, hostnameBinding)
            .block();
    }

    /**
     * Creates a web app hostname binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param hostname Name of host.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostnameBinding Host name binding information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host name binding object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostnameBindingInner> createOrUpdateSiteHostnameBindingSlotWithResponse(
        String resourceGroupName,
        String name,
        String hostname,
        String slot,
        HostnameBindingInner hostnameBinding,
        Context context) {
        return createOrUpdateSiteHostnameBindingSlotWithResponseAsync(
                resourceGroupName, name, hostname, slot, hostnameBinding, context)
            .block();
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String hostname) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteHostnameBindingSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            hostname,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteHostnameBindingSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (hostname == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostname is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteHostnameBindingSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                hostname,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteHostnameBindingSlotAsync(
        String resourceGroupName, String name, String slot, String hostname) {
        return deleteSiteHostnameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostname)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname) {
        return deleteSiteHostnameBindingSlotAsync(resourceGroupName, name, slot, hostname).block();
    }

    /**
     * Deletes a host name binding.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param hostname Name of host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        return deleteSiteHostnameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostname, context).block();
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> getSiteConfigWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> getSiteConfigWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> getSiteConfigAsync(String resourceGroupName, String name) {
        return getSiteConfigWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner getSiteConfig(String resourceGroupName, String name) {
        return getSiteConfigAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> getSiteConfigWithResponse(String resourceGroupName, String name, Context context) {
        return getSiteConfigWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> createOrUpdateSiteConfigWithResponseAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> createOrUpdateSiteConfigWithResponseAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteConfig,
                accept,
                context);
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> createOrUpdateSiteConfigAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig) {
        return createOrUpdateSiteConfigWithResponseAsync(resourceGroupName, name, siteConfig)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner createOrUpdateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig) {
        return createOrUpdateSiteConfigAsync(resourceGroupName, name, siteConfig).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> createOrUpdateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        return createOrUpdateSiteConfigWithResponseAsync(resourceGroupName, name, siteConfig, context).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> updateSiteConfigWithResponseAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> updateSiteConfigWithResponseAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteConfig,
                accept,
                context);
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> updateSiteConfigAsync(
        String resourceGroupName, String name, SiteConfigInner siteConfig) {
        return updateSiteConfigWithResponseAsync(resourceGroupName, name, siteConfig)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner updateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig) {
        return updateSiteConfigAsync(resourceGroupName, name, siteConfig).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> updateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        return updateSiteConfigWithResponseAsync(resourceGroupName, name, siteConfig, context).block();
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> getSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> getSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> getSiteConfigSlotAsync(String resourceGroupName, String name, String slot) {
        return getSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner getSiteConfigSlot(String resourceGroupName, String name, String slot) {
        return getSiteConfigSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the configuration of the web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> getSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> createOrUpdateSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> createOrUpdateSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteConfig,
                accept,
                context);
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> createOrUpdateSiteConfigSlotAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        return createOrUpdateSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner createOrUpdateSiteConfigSlot(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        return createOrUpdateSiteConfigSlotAsync(resourceGroupName, name, slot, siteConfig).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> createOrUpdateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        return createOrUpdateSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig, context)
            .block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> updateSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteConfigInner>> updateSiteConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteConfig is required and cannot be null."));
        } else {
            siteConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteConfig,
                accept,
                context);
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteConfigInner> updateSiteConfigSlotAsync(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        return updateSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig)
            .flatMap(
                (Response<SiteConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigInner updateSiteConfigSlot(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        return updateSiteConfigSlotAsync(resourceGroupName, name, slot, siteConfig).block();
    }

    /**
     * Update the configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteConfig Request body that contains the configuration setting for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteConfigInner> updateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        return updateSiteConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig, context).block();
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> getSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSourceControl(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> getSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteSourceControl(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> getSiteSourceControlAsync(String resourceGroupName, String name) {
        return getSiteSourceControlWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner getSiteSourceControl(String resourceGroupName, String name) {
        return getSiteSourceControlAsync(resourceGroupName, name).block();
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> getSiteSourceControlWithResponse(
        String resourceGroupName, String name, Context context) {
        return getSiteSourceControlWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteSourceControl(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteSourceControl,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteSourceControl(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteSourceControl,
                accept,
                context);
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> createOrUpdateSiteSourceControlAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSiteSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner createOrUpdateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSiteSourceControlAsync(resourceGroupName, name, siteSourceControl).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> createOrUpdateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        return createOrUpdateSiteSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl, context)
            .block();
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSourceControlWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteSourceControl(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteSourceControl(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteSourceControlAsync(String resourceGroupName, String name) {
        return deleteSiteSourceControlWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteSourceControl(String resourceGroupName, String name) {
        return deleteSiteSourceControlAsync(resourceGroupName, name).block();
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteSourceControlWithResponse(
        String resourceGroupName, String name, Context context) {
        return deleteSiteSourceControlWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> updateSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteSourceControl(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteSourceControl,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> updateSiteSourceControlWithResponseAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteSourceControl(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteSourceControl,
                accept,
                context);
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> updateSiteSourceControlAsync(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return updateSiteSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner updateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return updateSiteSourceControlAsync(resourceGroupName, name, siteSourceControl).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> updateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        return updateSiteSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl, context).block();
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> getSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteSourceControlSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> getSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteSourceControlSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> getSiteSourceControlSlotAsync(
        String resourceGroupName, String name, String slot) {
        return getSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner getSiteSourceControlSlot(String resourceGroupName, String name, String slot) {
        return getSiteSourceControlSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Get the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source control configuration of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> getSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteSourceControlSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteSourceControl,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> createOrUpdateSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteSourceControlSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteSourceControl,
                accept,
                context);
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> createOrUpdateSiteSourceControlSlotAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner createOrUpdateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSiteSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> createOrUpdateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        return createOrUpdateSiteSourceControlSlotWithResponseAsync(
                resourceGroupName, name, slot, siteSourceControl, context)
            .block();
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteSourceControlSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteSourceControlSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteSourceControlSlotAsync(String resourceGroupName, String name, String slot) {
        return deleteSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteSourceControlSlot(String resourceGroupName, String name, String slot) {
        return deleteSiteSourceControlSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Delete source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return deleteSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> updateSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteSourceControlSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteSourceControl,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteSourceControlInner>> updateSiteSourceControlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteSourceControl == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteSourceControl is required and cannot be null."));
        } else {
            siteSourceControl.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteSourceControlSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteSourceControl,
                accept,
                context);
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteSourceControlInner> updateSiteSourceControlSlotAsync(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return updateSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl)
            .flatMap(
                (Response<SiteSourceControlInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner updateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return updateSiteSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).block();
    }

    /**
     * Update the source control configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteSourceControl Request body that contains the source control parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the source control configuration for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteSourceControlInner> updateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        return updateSiteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl, context)
            .block();
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteAppSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteAppSettingsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteAppSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteAppSettingsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> listSiteAppSettingsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return listSiteAppSettingsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listSiteAppSettingsSlot(String resourceGroupName, String name, String slot) {
        return listSiteAppSettingsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> listSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSiteAppSettingsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteAppSettingsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteAppSettings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteAppSettingsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteAppSettings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> listSiteAppSettingsAsync(String resourceGroupName, String name) {
        return listSiteAppSettingsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listSiteAppSettings(String resourceGroupName, String name) {
        return listSiteAppSettingsAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application settings of web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> listSiteAppSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        return listSiteAppSettingsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteAppSettingsWithResponseAsync(
        String resourceGroupName, String name, StringDictionaryInner appSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (appSettings == null) {
            return Mono.error(new IllegalArgumentException("Parameter appSettings is required and cannot be null."));
        } else {
            appSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteAppSettings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            appSettings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteAppSettingsWithResponseAsync(
        String resourceGroupName, String name, StringDictionaryInner appSettings, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (appSettings == null) {
            return Mono.error(new IllegalArgumentException("Parameter appSettings is required and cannot be null."));
        } else {
            appSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteAppSettings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                appSettings,
                accept,
                context);
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> updateSiteAppSettingsAsync(
        String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return updateSiteAppSettingsWithResponseAsync(resourceGroupName, name, appSettings)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateSiteAppSettings(
        String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return updateSiteAppSettingsAsync(resourceGroupName, name, appSettings).block();
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> updateSiteAppSettingsWithResponse(
        String resourceGroupName, String name, StringDictionaryInner appSettings, Context context) {
        return updateSiteAppSettingsWithResponseAsync(resourceGroupName, name, appSettings, context).block();
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteAppSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (appSettings == null) {
            return Mono.error(new IllegalArgumentException("Parameter appSettings is required and cannot be null."));
        } else {
            appSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteAppSettingsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            appSettings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteAppSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (appSettings == null) {
            return Mono.error(new IllegalArgumentException("Parameter appSettings is required and cannot be null."));
        } else {
            appSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteAppSettingsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                appSettings,
                accept,
                context);
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> updateSiteAppSettingsSlotAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        return updateSiteAppSettingsSlotWithResponseAsync(resourceGroupName, name, slot, appSettings)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateSiteAppSettingsSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        return updateSiteAppSettingsSlotAsync(resourceGroupName, name, slot, appSettings).block();
    }

    /**
     * Updates the application settings of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param appSettings Application settings of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> updateSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings, Context context) {
        return updateSiteAppSettingsSlotWithResponseAsync(resourceGroupName, name, slot, appSettings, context).block();
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStringsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteConnectionStrings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStringsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteConnectionStrings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionStringDictionaryInner> listSiteConnectionStringsAsync(
        String resourceGroupName, String name) {
        return listSiteConnectionStringsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<ConnectionStringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner listSiteConnectionStrings(String resourceGroupName, String name) {
        return listSiteConnectionStringsAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionStringDictionaryInner> listSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, Context context) {
        return listSiteConnectionStringsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStringsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteConnectionStringsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> listSiteConnectionStringsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteConnectionStringsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionStringDictionaryInner> listSiteConnectionStringsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return listSiteConnectionStringsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<ConnectionStringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner listSiteConnectionStringsSlot(
        String resourceGroupName, String name, String slot) {
        return listSiteConnectionStringsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionStringDictionaryInner> listSiteConnectionStringsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSiteConnectionStringsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStringsWithResponseAsync(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionStrings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionStrings is required and cannot be null."));
        } else {
            connectionStrings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteConnectionStrings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionStrings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStringsWithResponseAsync(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionStrings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionStrings is required and cannot be null."));
        } else {
            connectionStrings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteConnectionStrings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionStrings,
                accept,
                context);
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionStringDictionaryInner> updateSiteConnectionStringsAsync(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        return updateSiteConnectionStringsWithResponseAsync(resourceGroupName, name, connectionStrings)
            .flatMap(
                (Response<ConnectionStringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner updateSiteConnectionStrings(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        return updateSiteConnectionStringsAsync(resourceGroupName, name, connectionStrings).block();
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionStringDictionaryInner> updateSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings, Context context) {
        return updateSiteConnectionStringsWithResponseAsync(resourceGroupName, name, connectionStrings, context)
            .block();
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStringsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionStrings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionStrings is required and cannot be null."));
        } else {
            connectionStrings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteConnectionStringsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionStrings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionStringDictionaryInner>> updateSiteConnectionStringsSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String slot,
        ConnectionStringDictionaryInner connectionStrings,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionStrings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionStrings is required and cannot be null."));
        } else {
            connectionStrings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteConnectionStringsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionStrings,
                accept,
                context);
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionStringDictionaryInner> updateSiteConnectionStringsSlotAsync(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        return updateSiteConnectionStringsSlotWithResponseAsync(resourceGroupName, name, slot, connectionStrings)
            .flatMap(
                (Response<ConnectionStringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner updateSiteConnectionStringsSlot(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        return updateSiteConnectionStringsSlotAsync(resourceGroupName, name, slot, connectionStrings).block();
    }

    /**
     * Updates the connection strings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param connectionStrings Connection strings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionStringDictionaryInner> updateSiteConnectionStringsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        ConnectionStringDictionaryInner connectionStrings,
        Context context) {
        return updateSiteConnectionStringsSlotWithResponseAsync(
                resourceGroupName, name, slot, connectionStrings, context)
            .block();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettingsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteAuthSettings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettingsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteAuthSettings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteAuthSettingsInner> listSiteAuthSettingsAsync(String resourceGroupName, String name) {
        return listSiteAuthSettingsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SiteAuthSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner listSiteAuthSettings(String resourceGroupName, String name) {
        return listSiteAuthSettingsAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteAuthSettingsInner> listSiteAuthSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        return listSiteAuthSettingsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteAuthSettingsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> listSiteAuthSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteAuthSettingsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteAuthSettingsInner> listSiteAuthSettingsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return listSiteAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<SiteAuthSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner listSiteAuthSettingsSlot(String resourceGroupName, String name, String slot) {
        return listSiteAuthSettingsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Authentication / Authorization settings associated with web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteAuthSettingsInner> listSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSiteAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettingsWithResponseAsync(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteAuthSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteAuthSettings is required and cannot be null."));
        } else {
            siteAuthSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteAuthSettings(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteAuthSettings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettingsWithResponseAsync(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteAuthSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteAuthSettings is required and cannot be null."));
        } else {
            siteAuthSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteAuthSettings(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteAuthSettings,
                accept,
                context);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteAuthSettingsInner> updateSiteAuthSettingsAsync(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        return updateSiteAuthSettingsWithResponseAsync(resourceGroupName, name, siteAuthSettings)
            .flatMap(
                (Response<SiteAuthSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner updateSiteAuthSettings(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        return updateSiteAuthSettingsAsync(resourceGroupName, name, siteAuthSettings).block();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteAuthSettingsInner> updateSiteAuthSettingsWithResponse(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings, Context context) {
        return updateSiteAuthSettingsWithResponseAsync(resourceGroupName, name, siteAuthSettings, context).block();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteAuthSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteAuthSettings is required and cannot be null."));
        } else {
            siteAuthSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteAuthSettingsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteAuthSettings,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteAuthSettingsInner>> updateSiteAuthSettingsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteAuthSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter siteAuthSettings is required and cannot be null."));
        } else {
            siteAuthSettings.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteAuthSettingsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteAuthSettings,
                accept,
                context);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteAuthSettingsInner> updateSiteAuthSettingsSlotAsync(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        return updateSiteAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot, siteAuthSettings)
            .flatMap(
                (Response<SiteAuthSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner updateSiteAuthSettingsSlot(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        return updateSiteAuthSettingsSlotAsync(resourceGroupName, name, slot, siteAuthSettings).block();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration settings for the Azure App Service Authentication / Authorization feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteAuthSettingsInner> updateSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings, Context context) {
        return updateSiteAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot, siteAuthSettings, context)
            .block();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentialsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePublishingCredentials(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentialsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePublishingCredentials(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsAsync(
        String resourceGroupName, String name) {
        Mono<Response<Flux<ByteBuffer>>> mono = listSitePublishingCredentialsWithResponseAsync(resourceGroupName, name);
        return this
            .client
            .<UserInner, UserInner>getLroResult(
                mono, this.client.getHttpPipeline(), UserInner.class, UserInner.class, Context.NONE);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsAsync(
        String resourceGroupName, String name, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            listSitePublishingCredentialsWithResponseAsync(resourceGroupName, name, context);
        return this
            .client
            .<UserInner, UserInner>getLroResult(
                mono, this.client.getHttpPipeline(), UserInner.class, UserInner.class, context);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UserInner>, UserInner> beginListSitePublishingCredentials(
        String resourceGroupName, String name) {
        return beginListSitePublishingCredentialsAsync(resourceGroupName, name).getSyncPoller();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UserInner>, UserInner> beginListSitePublishingCredentials(
        String resourceGroupName, String name, Context context) {
        return beginListSitePublishingCredentialsAsync(resourceGroupName, name, context).getSyncPoller();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserInner> listSitePublishingCredentialsAsync(String resourceGroupName, String name) {
        return beginListSitePublishingCredentialsAsync(resourceGroupName, name)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserInner> listSitePublishingCredentialsAsync(String resourceGroupName, String name, Context context) {
        return beginListSitePublishingCredentialsAsync(resourceGroupName, name, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listSitePublishingCredentials(String resourceGroupName, String name) {
        return listSitePublishingCredentialsAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listSitePublishingCredentials(String resourceGroupName, String name, Context context) {
        return listSitePublishingCredentialsAsync(resourceGroupName, name, context).block();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentialsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePublishingCredentialsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> listSitePublishingCredentialsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePublishingCredentialsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsSlotAsync(
        String resourceGroupName, String name, String slot) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            listSitePublishingCredentialsSlotWithResponseAsync(resourceGroupName, name, slot);
        return this
            .client
            .<UserInner, UserInner>getLroResult(
                mono, this.client.getHttpPipeline(), UserInner.class, UserInner.class, Context.NONE);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            listSitePublishingCredentialsSlotWithResponseAsync(resourceGroupName, name, slot, context);
        return this
            .client
            .<UserInner, UserInner>getLroResult(
                mono, this.client.getHttpPipeline(), UserInner.class, UserInner.class, context);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsSlot(
        String resourceGroupName, String name, String slot) {
        return beginListSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot).getSyncPoller();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<UserInner>, UserInner> beginListSitePublishingCredentialsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return beginListSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot, context).getSyncPoller();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserInner> listSitePublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot) {
        return beginListSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserInner> listSitePublishingCredentialsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return beginListSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot) {
        return listSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the web app publishing credentials.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app publishing credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listSitePublishingCredentialsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return listSitePublishingCredentialsSlotAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteMetadataWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteMetadata(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteMetadataWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteMetadata(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> listSiteMetadataAsync(String resourceGroupName, String name) {
        return listSiteMetadataWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listSiteMetadata(String resourceGroupName, String name) {
        return listSiteMetadataAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> listSiteMetadataWithResponse(
        String resourceGroupName, String name, Context context) {
        return listSiteMetadataWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteMetadataSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteMetadataSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> listSiteMetadataSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteMetadataSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> listSiteMetadataSlotAsync(String resourceGroupName, String name, String slot) {
        return listSiteMetadataSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listSiteMetadataSlot(String resourceGroupName, String name, String slot) {
        return listSiteMetadataSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the web app meta data.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app meta data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> listSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSiteMetadataSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteMetadataWithResponseAsync(
        String resourceGroupName, String name, StringDictionaryInner metadata) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (metadata == null) {
            return Mono.error(new IllegalArgumentException("Parameter metadata is required and cannot be null."));
        } else {
            metadata.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteMetadata(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            metadata,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteMetadataWithResponseAsync(
        String resourceGroupName, String name, StringDictionaryInner metadata, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (metadata == null) {
            return Mono.error(new IllegalArgumentException("Parameter metadata is required and cannot be null."));
        } else {
            metadata.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteMetadata(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                metadata,
                accept,
                context);
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> updateSiteMetadataAsync(
        String resourceGroupName, String name, StringDictionaryInner metadata) {
        return updateSiteMetadataWithResponseAsync(resourceGroupName, name, metadata)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateSiteMetadata(
        String resourceGroupName, String name, StringDictionaryInner metadata) {
        return updateSiteMetadataAsync(resourceGroupName, name, metadata).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> updateSiteMetadataWithResponse(
        String resourceGroupName, String name, StringDictionaryInner metadata, Context context) {
        return updateSiteMetadataWithResponseAsync(resourceGroupName, name, metadata, context).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteMetadataSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (metadata == null) {
            return Mono.error(new IllegalArgumentException("Parameter metadata is required and cannot be null."));
        } else {
            metadata.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteMetadataSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            metadata,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StringDictionaryInner>> updateSiteMetadataSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (metadata == null) {
            return Mono.error(new IllegalArgumentException("Parameter metadata is required and cannot be null."));
        } else {
            metadata.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteMetadataSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                metadata,
                accept,
                context);
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StringDictionaryInner> updateSiteMetadataSlotAsync(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        return updateSiteMetadataSlotWithResponseAsync(resourceGroupName, name, slot, metadata)
            .flatMap(
                (Response<StringDictionaryInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateSiteMetadataSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        return updateSiteMetadataSlotAsync(resourceGroupName, name, slot, metadata).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param metadata Meta data of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return string dictionary resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StringDictionaryInner> updateSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata, Context context) {
        return updateSiteMetadataSlotWithResponseAsync(resourceGroupName, name, slot, metadata, context).block();
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> getSiteLogsConfigWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteLogsConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> getSiteLogsConfigWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteLogsConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteLogsConfigInner> getSiteLogsConfigAsync(String resourceGroupName, String name) {
        return getSiteLogsConfigWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<SiteLogsConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner getSiteLogsConfig(String resourceGroupName, String name) {
        return getSiteLogsConfigAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteLogsConfigInner> getSiteLogsConfigWithResponse(
        String resourceGroupName, String name, Context context) {
        return getSiteLogsConfigWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfigWithResponseAsync(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteLogsConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteLogsConfig is required and cannot be null."));
        } else {
            siteLogsConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteLogsConfig(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteLogsConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfigWithResponseAsync(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteLogsConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteLogsConfig is required and cannot be null."));
        } else {
            siteLogsConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteLogsConfig(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                siteLogsConfig,
                accept,
                context);
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteLogsConfigInner> updateSiteLogsConfigAsync(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        return updateSiteLogsConfigWithResponseAsync(resourceGroupName, name, siteLogsConfig)
            .flatMap(
                (Response<SiteLogsConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner updateSiteLogsConfig(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        return updateSiteLogsConfigAsync(resourceGroupName, name, siteLogsConfig).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteLogsConfigInner> updateSiteLogsConfigWithResponse(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig, Context context) {
        return updateSiteLogsConfigWithResponseAsync(resourceGroupName, name, siteLogsConfig, context).block();
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> getSiteLogsConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteLogsConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> getSiteLogsConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteLogsConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteLogsConfigInner> getSiteLogsConfigSlotAsync(String resourceGroupName, String name, String slot) {
        return getSiteLogsConfigSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<SiteLogsConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner getSiteLogsConfigSlot(String resourceGroupName, String name, String slot) {
        return getSiteLogsConfigSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the web app logs configuration.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the web app logs configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteLogsConfigInner> getSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteLogsConfigSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteLogsConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteLogsConfig is required and cannot be null."));
        } else {
            siteLogsConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteLogsConfigSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            siteLogsConfig,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SiteLogsConfigInner>> updateSiteLogsConfigSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (siteLogsConfig == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteLogsConfig is required and cannot be null."));
        } else {
            siteLogsConfig.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteLogsConfigSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                siteLogsConfig,
                accept,
                context);
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SiteLogsConfigInner> updateSiteLogsConfigSlotAsync(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        return updateSiteLogsConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteLogsConfig)
            .flatMap(
                (Response<SiteLogsConfigInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner updateSiteLogsConfigSlot(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        return updateSiteLogsConfigSlotAsync(resourceGroupName, name, slot, siteLogsConfig).block();
    }

    /**
     * Updates the meta data for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteLogsConfig Site logs configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration of Azure web site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SiteLogsConfigInner> updateSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig, Context context) {
        return updateSiteLogsConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteLogsConfig, context)
            .block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> listSitePremierAddOnsWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePremierAddOns(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> listSitePremierAddOnsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePremierAddOns(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> listSitePremierAddOnsAsync(String resourceGroupName, String name) {
        return listSitePremierAddOnsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object listSitePremierAddOns(String resourceGroupName, String name) {
        return listSitePremierAddOnsAsync(resourceGroupName, name).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> listSitePremierAddOnsWithResponse(String resourceGroupName, String name, Context context) {
        return listSitePremierAddOnsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> listSitePremierAddOnsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePremierAddOnsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> listSitePremierAddOnsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePremierAddOnsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> listSitePremierAddOnsSlotAsync(String resourceGroupName, String name, String slot) {
        return listSitePremierAddOnsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object listSitePremierAddOnsSlot(String resourceGroupName, String name, String slot) {
        return listSitePremierAddOnsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> listSitePremierAddOnsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSitePremierAddOnsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSitePremierAddOnWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSitePremierAddOn(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSitePremierAddOnWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSitePremierAddOn(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSitePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        return getSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        return getSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        return getSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> addSitePremierAddOnWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, PremierAddOnRequest premierAddOn) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (premierAddOn == null) {
            return Mono.error(new IllegalArgumentException("Parameter premierAddOn is required and cannot be null."));
        } else {
            premierAddOn.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addSitePremierAddOn(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            premierAddOn,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> addSitePremierAddOnWithResponseAsync(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        PremierAddOnRequest premierAddOn,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (premierAddOn == null) {
            return Mono.error(new IllegalArgumentException("Parameter premierAddOn is required and cannot be null."));
        } else {
            premierAddOn.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .addSitePremierAddOn(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                this.client.getSubscriptionId(),
                apiVersion,
                premierAddOn,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> addSitePremierAddOnAsync(
        String resourceGroupName, String name, String premierAddOnName, PremierAddOnRequest premierAddOn) {
        return addSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, premierAddOn)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object addSitePremierAddOn(
        String resourceGroupName, String name, String premierAddOnName, PremierAddOnRequest premierAddOn) {
        return addSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> addSitePremierAddOnWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        PremierAddOnRequest premierAddOn,
        Context context) {
        return addSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, premierAddOn, context)
            .block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSitePremierAddOnWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSitePremierAddOn(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSitePremierAddOnWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSitePremierAddOn(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSitePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        return deleteSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        return deleteSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        return deleteSitePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSitePremierAddOnSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSitePremierAddOnSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSitePremierAddOnSlotAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        return getSitePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return getSitePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        return getSitePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot, context)
            .block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> addSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnRequest premierAddOn) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (premierAddOn == null) {
            return Mono.error(new IllegalArgumentException("Parameter premierAddOn is required and cannot be null."));
        } else {
            premierAddOn.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addSitePremierAddOnSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            premierAddOn,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> addSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnRequest premierAddOn,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (premierAddOn == null) {
            return Mono.error(new IllegalArgumentException("Parameter premierAddOn is required and cannot be null."));
        } else {
            premierAddOn.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .addSitePremierAddOnSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                premierAddOn,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> addSitePremierAddOnSlotAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnRequest premierAddOn) {
        return addSitePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object addSitePremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnRequest premierAddOn) {
        return addSitePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param premierAddOn The premierAddOn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> addSitePremierAddOnSlotWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnRequest premierAddOn,
        Context context) {
        return addSitePremierAddOnSlotWithResponseAsync(
                resourceGroupName, name, premierAddOnName, slot, premierAddOn, context)
            .block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSitePremierAddOnSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            premierAddOnName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSitePremierAddOnSlotWithResponseAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (premierAddOnName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter premierAddOnName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSitePremierAddOnSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                premierAddOnName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSitePremierAddOnSlotAsync(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        return deleteSitePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSitePremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        return deleteSitePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param premierAddOnName The premierAddOnName parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        return deleteSitePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot, context)
            .block();
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> getSiteBackupConfigurationWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupConfiguration(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> getSiteBackupConfigurationWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupConfiguration(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupRequestInner> getSiteBackupConfigurationAsync(String resourceGroupName, String name) {
        return getSiteBackupConfigurationWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<BackupRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner getSiteBackupConfiguration(String resourceGroupName, String name) {
        return getSiteBackupConfigurationAsync(resourceGroupName, name).block();
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupRequestInner> getSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        return getSiteBackupConfigurationWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> getSiteBackupConfigurationSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupConfigurationSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> getSiteBackupConfigurationSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupConfigurationSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupRequestInner> getSiteBackupConfigurationSlotAsync(
        String resourceGroupName, String name, String slot) {
        return getSiteBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<BackupRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner getSiteBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        return getSiteBackupConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Gets the backup configuration for a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup configuration for a web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupRequestInner> getSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> updateSiteBackupConfigurationWithResponseAsync(
        String resourceGroupName, String name, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteBackupConfiguration(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> updateSiteBackupConfigurationWithResponseAsync(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteBackupConfiguration(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupRequestInner> updateSiteBackupConfigurationAsync(
        String resourceGroupName, String name, BackupRequestInner request) {
        return updateSiteBackupConfigurationWithResponseAsync(resourceGroupName, name, request)
            .flatMap(
                (Response<BackupRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner updateSiteBackupConfiguration(
        String resourceGroupName, String name, BackupRequestInner request) {
        return updateSiteBackupConfigurationAsync(resourceGroupName, name, request).block();
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupRequestInner> updateSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        return updateSiteBackupConfigurationWithResponseAsync(resourceGroupName, name, request, context).block();
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> updateSiteBackupConfigurationSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteBackupConfigurationSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupRequestInner>> updateSiteBackupConfigurationSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteBackupConfigurationSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupRequestInner> updateSiteBackupConfigurationSlotAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return updateSiteBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap(
                (Response<BackupRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner updateSiteBackupConfigurationSlot(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return updateSiteBackupConfigurationSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Updates backup configuration of web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a backup which will be performed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupRequestInner> updateSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        return updateSiteBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, request, context)
            .block();
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> backupSiteWithResponseAsync(
        String resourceGroupName, String name, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .backupSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> backupSiteWithResponseAsync(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .backupSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> backupSiteAsync(String resourceGroupName, String name, BackupRequestInner request) {
        return backupSiteWithResponseAsync(resourceGroupName, name, request)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner backupSite(String resourceGroupName, String name, BackupRequestInner request) {
        return backupSiteAsync(resourceGroupName, name, request).block();
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> backupSiteWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        return backupSiteWithResponseAsync(resourceGroupName, name, request, context).block();
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> backupSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .backupSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> backupSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .backupSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> backupSiteSlotAsync(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return backupSiteSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner backupSiteSlot(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return backupSiteSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Creates web app backup.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> backupSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        return backupSiteSlotWithResponseAsync(resourceGroupName, name, slot, request, context).block();
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RestoreRequestInner>> discoverSiteRestoreWithResponseAsync(
        String resourceGroupName, String name, RestoreRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .discoverSiteRestore(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RestoreRequestInner>> discoverSiteRestoreWithResponseAsync(
        String resourceGroupName, String name, RestoreRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .discoverSiteRestore(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreRequestInner> discoverSiteRestoreAsync(
        String resourceGroupName, String name, RestoreRequestInner request) {
        return discoverSiteRestoreWithResponseAsync(resourceGroupName, name, request)
            .flatMap(
                (Response<RestoreRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreRequestInner discoverSiteRestore(String resourceGroupName, String name, RestoreRequestInner request) {
        return discoverSiteRestoreAsync(resourceGroupName, name, request).block();
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RestoreRequestInner> discoverSiteRestoreWithResponse(
        String resourceGroupName, String name, RestoreRequestInner request, Context context) {
        return discoverSiteRestoreWithResponseAsync(resourceGroupName, name, request, context).block();
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RestoreRequestInner>> discoverSiteRestoreSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .discoverSiteRestoreSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RestoreRequestInner>> discoverSiteRestoreSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .discoverSiteRestoreSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreRequestInner> discoverSiteRestoreSlotAsync(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return discoverSiteRestoreSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap(
                (Response<RestoreRequestInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreRequestInner discoverSiteRestoreSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return discoverSiteRestoreSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Discovers existing web app backups that can be restored.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of a restore request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RestoreRequestInner> discoverSiteRestoreSlotWithResponse(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context) {
        return discoverSiteRestoreSlotWithResponseAsync(resourceGroupName, name, slot, request, context).block();
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSinglePageAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteBackups(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<BackupItemInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listSiteBackups(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BackupItemInner> listSiteBackupsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSiteBackupsSinglePageAsync(resourceGroupName, name),
            nextLink -> listSiteBackupsNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BackupItemInner> listSiteBackupsAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> listSiteBackupsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> listSiteBackupsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackups(String resourceGroupName, String name) {
        return new PagedIterable<>(listSiteBackupsAsync(resourceGroupName, name));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackups(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(listSiteBackupsAsync(resourceGroupName, name, context));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteBackupsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<BackupItemInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listSiteBackupsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BackupItemInner> listSiteBackupsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listSiteBackupsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listSiteBackupsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BackupItemInner> listSiteBackupsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedFlux<>(
            () -> listSiteBackupsSlotSinglePageAsync(resourceGroupName, name, slot, context),
            nextLink -> listSiteBackupsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackupsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listSiteBackupsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Lists all available backups for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackupsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedIterable<>(listSiteBackupsSlotAsync(resourceGroupName, name, slot, context));
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusWithResponseAsync(
        String resourceGroupName, String name, String backupId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupStatus(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusWithResponseAsync(
        String resourceGroupName, String name, String backupId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupStatus(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> getSiteBackupStatusAsync(String resourceGroupName, String name, String backupId) {
        return getSiteBackupStatusWithResponseAsync(resourceGroupName, name, backupId)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getSiteBackupStatus(String resourceGroupName, String name, String backupId) {
        return getSiteBackupStatusAsync(resourceGroupName, name, backupId).block();
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> getSiteBackupStatusWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        return getSiteBackupStatusWithResponseAsync(resourceGroupName, name, backupId, context).block();
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> deleteBackupWithResponseAsync(
        String resourceGroupName, String name, String backupId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteBackup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> deleteBackupWithResponseAsync(
        String resourceGroupName, String name, String backupId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteBackup(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> deleteBackupAsync(String resourceGroupName, String name, String backupId) {
        return deleteBackupWithResponseAsync(resourceGroupName, name, backupId)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner deleteBackup(String resourceGroupName, String name, String backupId) {
        return deleteBackupAsync(resourceGroupName, name, backupId).block();
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> deleteBackupWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        return deleteBackupWithResponseAsync(resourceGroupName, name, backupId, context).block();
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupStatusSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupStatusSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> getSiteBackupStatusSlotAsync(
        String resourceGroupName, String name, String backupId, String slot) {
        return getSiteBackupStatusSlotWithResponseAsync(resourceGroupName, name, backupId, slot)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getSiteBackupStatusSlot(
        String resourceGroupName, String name, String backupId, String slot) {
        return getSiteBackupStatusSlotAsync(resourceGroupName, name, backupId, slot).block();
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> getSiteBackupStatusSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        return getSiteBackupStatusSlotWithResponseAsync(resourceGroupName, name, backupId, slot, context).block();
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> deleteBackupSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteBackupSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> deleteBackupSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteBackupSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> deleteBackupSlotAsync(
        String resourceGroupName, String name, String backupId, String slot) {
        return deleteBackupSlotWithResponseAsync(resourceGroupName, name, backupId, slot)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner deleteBackupSlot(String resourceGroupName, String name, String backupId, String slot) {
        return deleteBackupSlotAsync(resourceGroupName, name, backupId, slot).block();
    }

    /**
     * Deletes a backup from Azure Storage.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup description.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> deleteBackupSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        return deleteBackupSlotWithResponseAsync(resourceGroupName, name, backupId, slot, context).block();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSecretsSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupStatusSecretsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSecretsSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        BackupRequestInner request,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupStatusSecretsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> getSiteBackupStatusSecretsSlotAsync(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        return getSiteBackupStatusSecretsSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getSiteBackupStatusSecretsSlot(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        return getSiteBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, slot, request).block();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> getSiteBackupStatusSecretsSlotWithResponse(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        BackupRequestInner request,
        Context context) {
        return getSiteBackupStatusSecretsSlotWithResponseAsync(
                resourceGroupName, name, backupId, slot, request, context)
            .block();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSecretsWithResponseAsync(
        String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteBackupStatusSecrets(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BackupItemInner>> getSiteBackupStatusSecretsWithResponseAsync(
        String resourceGroupName, String name, String backupId, BackupRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteBackupStatusSecrets(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BackupItemInner> getSiteBackupStatusSecretsAsync(
        String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        return getSiteBackupStatusSecretsWithResponseAsync(resourceGroupName, name, backupId, request)
            .flatMap(
                (Response<BackupItemInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getSiteBackupStatusSecrets(
        String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        return getSiteBackupStatusSecretsAsync(resourceGroupName, name, backupId, request).block();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as
     * the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup.
     * @param request Information on backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a web app backup that may be in progress, including secrets associated with the backup, such as
     *     the Azure Storage SAS URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupItemInner> getSiteBackupStatusSecretsWithResponse(
        String resourceGroupName, String name, String backupId, BackupRequestInner request, Context context) {
        return getSiteBackupStatusSecretsWithResponseAsync(resourceGroupName, name, backupId, request, context).block();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreSiteWithResponseAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restoreSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreSiteWithResponseAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .restoreSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            restoreSiteWithResponseAsync(resourceGroupName, name, backupId, request);
        return this
            .client
            .<RestoreResponseInner, RestoreResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RestoreResponseInner.class,
                RestoreResponseInner.class,
                Context.NONE);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            restoreSiteWithResponseAsync(resourceGroupName, name, backupId, request, context);
        return this
            .client
            .<RestoreResponseInner, RestoreResponseInner>getLroResult(
                mono, this.client.getHttpPipeline(), RestoreResponseInner.class, RestoreResponseInner.class, context);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return beginRestoreSiteAsync(resourceGroupName, name, backupId, request).getSyncPoller();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        return beginRestoreSiteAsync(resourceGroupName, name, backupId, request, context).getSyncPoller();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreResponseInner> restoreSiteAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return beginRestoreSiteAsync(resourceGroupName, name, backupId, request)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreResponseInner> restoreSiteAsync(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        return beginRestoreSiteAsync(resourceGroupName, name, backupId, request, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreResponseInner restoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return restoreSiteAsync(resourceGroupName, name, backupId, request).block();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreResponseInner restoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        return restoreSiteAsync(resourceGroupName, name, backupId, request, context).block();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restoreSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            backupId,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            request,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreSiteSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (backupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupId is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .restoreSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                backupId,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                request,
                accept,
                context);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteSlotAsync(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            restoreSiteSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request);
        return this
            .client
            .<RestoreResponseInner, RestoreResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RestoreResponseInner.class,
                RestoreResponseInner.class,
                Context.NONE);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteSlotAsync(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            restoreSiteSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request, context);
        return this
            .client
            .<RestoreResponseInner, RestoreResponseInner>getLroResult(
                mono, this.client.getHttpPipeline(), RestoreResponseInner.class, RestoreResponseInner.class, context);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteSlot(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return beginRestoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request).getSyncPoller();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RestoreResponseInner>, RestoreResponseInner> beginRestoreSiteSlot(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        return beginRestoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request, context).getSyncPoller();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreResponseInner> restoreSiteSlotAsync(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return beginRestoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestoreResponseInner> restoreSiteSlotAsync(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        return beginRestoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreResponseInner restoreSiteSlot(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return restoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request).block();
    }

    /**
     * Restores a web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param backupId Id of backup to restore.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on restore request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a restore site request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreResponseInner restoreSiteSlot(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        return restoreSiteSlotAsync(resourceGroupName, name, backupId, slot, request, context).block();
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSinglePageAsync(
        String resourceGroupName, String name, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteUsages(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSinglePageAsync(
        String resourceGroupName, String name, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteUsages(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesAsync(String resourceGroupName, String name, String filter) {
        return new PagedFlux<>(
            () -> getSiteUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> getSiteUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesAsync(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedFlux<>(
            () -> getSiteUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> getSiteUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesAsync(
        String resourceGroupName, String name, String filter, Context context) {
        return new PagedFlux<>(
            () -> getSiteUsagesSinglePageAsync(resourceGroupName, name, filter, context),
            nextLink -> getSiteUsagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getSiteUsages(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedIterable<>(getSiteUsagesAsync(resourceGroupName, name, filter));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getSiteUsages(
        String resourceGroupName, String name, String filter, Context context) {
        return new PagedIterable<>(getSiteUsagesAsync(resourceGroupName, name, filter, context));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteUsagesSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteUsagesSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesSlotAsync(
        String resourceGroupName, String name, String slot, String filter) {
        return new PagedFlux<>(
            () -> getSiteUsagesSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> getSiteUsagesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesSlotAsync(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedFlux<>(
            () -> getSiteUsagesSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> getSiteUsagesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getSiteUsagesSlotAsync(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        return new PagedFlux<>(
            () -> getSiteUsagesSlotSinglePageAsync(resourceGroupName, name, slot, filter, context),
            nextLink -> getSiteUsagesSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getSiteUsagesSlot(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedIterable<>(getSiteUsagesSlotAsync(resourceGroupName, name, slot, filter));
    }

    /**
     * Gets the quota usage numbers for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota usage numbers for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getSiteUsagesSlot(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        return new PagedIterable<>(getSiteUsagesSlotAsync(resourceGroupName, name, slot, filter, context));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSinglePageAsync(
        String resourceGroupName, String name, Boolean details, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSinglePageAsync(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsAsync(
        String resourceGroupName, String name, Boolean details, String filter) {
        return new PagedFlux<>(
            () -> getSiteMetricsSinglePageAsync(resourceGroupName, name, details, filter),
            nextLink -> getSiteMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsAsync(String resourceGroupName, String name) {
        final Boolean details = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> getSiteMetricsSinglePageAsync(resourceGroupName, name, details, filter),
            nextLink -> getSiteMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsAsync(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        return new PagedFlux<>(
            () -> getSiteMetricsSinglePageAsync(resourceGroupName, name, details, filter, context),
            nextLink -> getSiteMetricsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getSiteMetrics(String resourceGroupName, String name) {
        final Boolean details = null;
        final String filter = null;
        return new PagedIterable<>(getSiteMetricsAsync(resourceGroupName, name, details, filter));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getSiteMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        return new PagedIterable<>(getSiteMetricsAsync(resourceGroupName, name, details, filter, context));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Boolean details, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteMetricsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Boolean details, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsSlotAsync(
        String resourceGroupName, String name, String slot, Boolean details, String filter) {
        return new PagedFlux<>(
            () -> getSiteMetricsSlotSinglePageAsync(resourceGroupName, name, slot, details, filter),
            nextLink -> getSiteMetricsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsSlotAsync(String resourceGroupName, String name, String slot) {
        final Boolean details = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> getSiteMetricsSlotSinglePageAsync(resourceGroupName, name, slot, details, filter),
            nextLink -> getSiteMetricsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getSiteMetricsSlotAsync(
        String resourceGroupName, String name, String slot, Boolean details, String filter, Context context) {
        return new PagedFlux<>(
            () -> getSiteMetricsSlotSinglePageAsync(resourceGroupName, name, slot, details, filter, context),
            nextLink -> getSiteMetricsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getSiteMetricsSlot(String resourceGroupName, String name, String slot) {
        final Boolean details = null;
        final String filter = null;
        return new PagedIterable<>(getSiteMetricsSlotAsync(resourceGroupName, name, slot, details, filter));
    }

    /**
     * Gets metrics for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param details If true, metric details are included in response.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getSiteMetricsSlot(
        String resourceGroupName, String name, String slot, Boolean details, String filter, Context context) {
        return new PagedIterable<>(getSiteMetricsSlotAsync(resourceGroupName, name, slot, details, filter, context));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteMetricDefinitionsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSlotSinglePageAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricDefinitionsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getSiteMetricDefinitionsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> getSiteMetricDefinitionsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> getSiteMetricDefinitionsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getSiteMetricDefinitionsSlotAsync(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedFlux<>(
            () -> getSiteMetricDefinitionsSlotSinglePageAsync(resourceGroupName, name, slot, context),
            nextLink -> getSiteMetricDefinitionsSlotNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getSiteMetricDefinitionsSlot(
        String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(getSiteMetricDefinitionsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getSiteMetricDefinitionsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        return new PagedIterable<>(getSiteMetricDefinitionsSlotAsync(resourceGroupName, name, slot, context));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getSiteMetricDefinitionsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getSiteMetricDefinitionsSinglePageAsync(resourceGroupName, name),
            nextLink -> getSiteMetricDefinitionsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getSiteMetricDefinitionsAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getSiteMetricDefinitionsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getSiteMetricDefinitionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getSiteMetricDefinitions(String resourceGroupName, String name) {
        return new PagedIterable<>(getSiteMetricDefinitionsAsync(resourceGroupName, name));
    }

    /**
     * Gets metric definitions for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for web app.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getSiteMetricDefinitions(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getSiteMetricDefinitionsAsync(resourceGroupName, name, context));
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> listSitePublishingProfileXmlWithResponseAsync(
        String resourceGroupName, String name, CsmPublishingProfileOptions options) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (options == null) {
            return Mono.error(new IllegalArgumentException("Parameter options is required and cannot be null."));
        } else {
            options.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePublishingProfileXml(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            options,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> listSitePublishingProfileXmlWithResponseAsync(
        String resourceGroupName, String name, CsmPublishingProfileOptions options, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (options == null) {
            return Mono.error(new IllegalArgumentException("Parameter options is required and cannot be null."));
        } else {
            options.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePublishingProfileXml(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                options,
                accept,
                context);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> listSitePublishingProfileXmlAsync(
        String resourceGroupName, String name, CsmPublishingProfileOptions options) {
        return listSitePublishingProfileXmlWithResponseAsync(resourceGroupName, name, options)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream listSitePublishingProfileXml(
        String resourceGroupName, String name, CsmPublishingProfileOptions options) {
        Iterator<ByteBufferBackedInputStream> iterator =
            listSitePublishingProfileXmlAsync(resourceGroupName, name, options)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse listSitePublishingProfileXmlWithResponse(
        String resourceGroupName, String name, CsmPublishingProfileOptions options, Context context) {
        return listSitePublishingProfileXmlWithResponseAsync(resourceGroupName, name, options, context).block();
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> listSitePublishingProfileXmlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (options == null) {
            return Mono.error(new IllegalArgumentException("Parameter options is required and cannot be null."));
        } else {
            options.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSitePublishingProfileXmlSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            options,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> listSitePublishingProfileXmlSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (options == null) {
            return Mono.error(new IllegalArgumentException("Parameter options is required and cannot be null."));
        } else {
            options.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSitePublishingProfileXmlSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                options,
                accept,
                context);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> listSitePublishingProfileXmlSlotAsync(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options) {
        return listSitePublishingProfileXmlSlotWithResponseAsync(resourceGroupName, name, slot, options)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream listSitePublishingProfileXmlSlot(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options) {
        Iterator<ByteBufferBackedInputStream> iterator =
            listSitePublishingProfileXmlSlotAsync(resourceGroupName, name, slot, options)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Gets the publishing profile for web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for
     *     FileZilla FTP format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the publishing profile for web app.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse listSitePublishingProfileXmlSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options, Context context) {
        return listSitePublishingProfileXmlSlotWithResponseAsync(resourceGroupName, name, slot, options, context)
            .block();
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> restartSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restartSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            softRestart,
                            synchronous,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> restartSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .restartSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                softRestart,
                synchronous,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> restartSiteSlotAsync(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous) {
        return restartSiteSlotWithResponseAsync(resourceGroupName, name, slot, softRestart, synchronous)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> restartSiteSlotAsync(String resourceGroupName, String name, String slot) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartSiteSlotWithResponseAsync(resourceGroupName, name, slot, softRestart, synchronous)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object restartSiteSlot(String resourceGroupName, String name, String slot) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartSiteSlotAsync(resourceGroupName, name, slot, softRestart, synchronous).block();
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> restartSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous, Context context) {
        return restartSiteSlotWithResponseAsync(resourceGroupName, name, slot, softRestart, synchronous, context)
            .block();
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> restartSiteWithResponseAsync(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restartSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            softRestart,
                            synchronous,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> restartSiteWithResponseAsync(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .restartSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                softRestart,
                synchronous,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> restartSiteAsync(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous) {
        return restartSiteWithResponseAsync(resourceGroupName, name, softRestart, synchronous)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> restartSiteAsync(String resourceGroupName, String name) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartSiteWithResponseAsync(resourceGroupName, name, softRestart, synchronous)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object restartSite(String resourceGroupName, String name) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartSiteAsync(resourceGroupName, name, softRestart, synchronous).block();
    }

    /**
     * Restarts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard
     *     restart always restarts and reprovisions the app.
     * @param synchronous If true then the API will block until the app has been restarted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> restartSiteWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous, Context context) {
        return restartSiteWithResponseAsync(resourceGroupName, name, softRestart, synchronous, context).block();
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> startSiteWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .startSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> startSiteWithResponseAsync(String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .startSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> startSiteAsync(String resourceGroupName, String name) {
        return startSiteWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object startSite(String resourceGroupName, String name) {
        return startSiteAsync(resourceGroupName, name).block();
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> startSiteWithResponse(String resourceGroupName, String name, Context context) {
        return startSiteWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> startSiteSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .startSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> startSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .startSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> startSiteSlotAsync(String resourceGroupName, String name, String slot) {
        return startSiteSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object startSiteSlot(String resourceGroupName, String name, String slot) {
        return startSiteSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Starts web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> startSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return startSiteSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> stopSiteWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .stopSite(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> stopSiteWithResponseAsync(String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .stopSite(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> stopSiteAsync(String resourceGroupName, String name) {
        return stopSiteWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object stopSite(String resourceGroupName, String name) {
        return stopSiteAsync(resourceGroupName, name).block();
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> stopSiteWithResponse(String resourceGroupName, String name, Context context) {
        return stopSiteWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> stopSiteSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .stopSiteSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> stopSiteSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .stopSiteSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> stopSiteSlotAsync(String resourceGroupName, String name, String slot) {
        return stopSiteSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object stopSiteSlot(String resourceGroupName, String name, String slot) {
        return stopSiteSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Stops web app.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> stopSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return stopSiteSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> syncSiteRepositoryWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .syncSiteRepository(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> syncSiteRepositoryWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .syncSiteRepository(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> syncSiteRepositoryAsync(String resourceGroupName, String name) {
        return syncSiteRepositoryWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object syncSiteRepository(String resourceGroupName, String name) {
        return syncSiteRepositoryAsync(resourceGroupName, name).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> syncSiteRepositoryWithResponse(String resourceGroupName, String name, Context context) {
        return syncSiteRepositoryWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> syncSiteRepositorySlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .syncSiteRepositorySlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> syncSiteRepositorySlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .syncSiteRepositorySlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> syncSiteRepositorySlotAsync(String resourceGroupName, String name, String slot) {
        return syncSiteRepositorySlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object syncSiteRepositorySlot(String resourceGroupName, String name, String slot) {
        return syncSiteRepositorySlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * @param resourceGroupName The resourceGroupName parameter.
     * @param name The name parameter.
     * @param slot The slot parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> syncSiteRepositorySlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return syncSiteRepositorySlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> generateNewSitePublishingPasswordSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .generateNewSitePublishingPasswordSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> generateNewSitePublishingPasswordSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .generateNewSitePublishingPasswordSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> generateNewSitePublishingPasswordSlotAsync(
        String resourceGroupName, String name, String slot) {
        return generateNewSitePublishingPasswordSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object generateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot) {
        return generateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> generateNewSitePublishingPasswordSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return generateNewSitePublishingPasswordSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> generateNewSitePublishingPasswordWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .generateNewSitePublishingPassword(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> generateNewSitePublishingPasswordWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .generateNewSitePublishingPassword(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> generateNewSitePublishingPasswordAsync(String resourceGroupName, String name) {
        return generateNewSitePublishingPasswordWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object generateNewSitePublishingPassword(String resourceGroupName, String name) {
        return generateNewSitePublishingPasswordAsync(resourceGroupName, name).block();
    }

    /**
     * Generates new random app publishing password.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> generateNewSitePublishingPasswordWithResponse(
        String resourceGroupName, String name, Context context) {
        return generateNewSitePublishingPasswordWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName, String name, String entityName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteRelayServiceConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName, String name, String entityName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteRelayServiceConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> getSiteRelayServiceConnectionAsync(
        String resourceGroupName, String name, String entityName) {
        return getSiteRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner getSiteRelayServiceConnection(
        String resourceGroupName, String name, String entityName) {
        return getSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName).block();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> getSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        return getSiteRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName, context).block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> createOrUpdateSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteRelayServiceConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> createOrUpdateSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteRelayServiceConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> createOrUpdateSiteRelayServiceConnectionAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateSiteRelayServiceConnectionWithResponseAsync(
                resourceGroupName, name, entityName, connectionEnvelope)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner createOrUpdateSiteRelayServiceConnection(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope)
            .block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> createOrUpdateSiteRelayServiceConnectionWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        return createOrUpdateSiteRelayServiceConnectionWithResponseAsync(
                resourceGroupName, name, entityName, connectionEnvelope, context)
            .block();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName, String name, String entityName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteRelayServiceConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName, String name, String entityName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteRelayServiceConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteRelayServiceConnectionAsync(
        String resourceGroupName, String name, String entityName) {
        return deleteSiteRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteRelayServiceConnection(String resourceGroupName, String name, String entityName) {
        return deleteSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName).block();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        return deleteSiteRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName, context).block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteRelayServiceConnection(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnectionWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteRelayServiceConnection(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> updateSiteRelayServiceConnectionAsync(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateSiteRelayServiceConnectionWithResponseAsync(
                resourceGroupName, name, entityName, connectionEnvelope)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner updateSiteRelayServiceConnection(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> updateSiteRelayServiceConnectionWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        return updateSiteRelayServiceConnectionWithResponseAsync(
                resourceGroupName, name, entityName, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String entityName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteRelayServiceConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> getSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteRelayServiceConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> getSiteRelayServiceConnectionSlotAsync(
        String resourceGroupName, String name, String entityName, String slot) {
        return getSiteRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner getSiteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        return getSiteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).block();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> getSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        return getSiteRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot, context)
            .block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>>
        createOrUpdateSiteRelayServiceConnectionSlotWithResponseAsync(
            String resourceGroupName,
            String name,
            String entityName,
            String slot,
            RelayServiceConnectionEntityInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteRelayServiceConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>>
        createOrUpdateSiteRelayServiceConnectionSlotWithResponseAsync(
            String resourceGroupName,
            String name,
            String entityName,
            String slot,
            RelayServiceConnectionEntityInner connectionEnvelope,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteRelayServiceConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> createOrUpdateSiteRelayServiceConnectionSlotAsync(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateSiteRelayServiceConnectionSlotWithResponseAsync(
                resourceGroupName, name, entityName, slot, connectionEnvelope)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner createOrUpdateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateSiteRelayServiceConnectionSlotAsync(
                resourceGroupName, name, entityName, slot, connectionEnvelope)
            .block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> createOrUpdateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        return createOrUpdateSiteRelayServiceConnectionSlotWithResponseAsync(
                resourceGroupName, name, entityName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String entityName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSiteRelayServiceConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> deleteSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .deleteSiteRelayServiceConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteSiteRelayServiceConnectionSlotAsync(
        String resourceGroupName, String name, String entityName, String slot) {
        return deleteSiteRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object deleteSiteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        return deleteSiteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).block();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> deleteSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        return deleteSiteRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot, context)
            .block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteRelayServiceConnectionSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            entityName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> updateSiteRelayServiceConnectionSlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (entityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter entityName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteRelayServiceConnectionSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                entityName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> updateSiteRelayServiceConnectionSlotAsync(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateSiteRelayServiceConnectionSlotWithResponseAsync(
                resourceGroupName, name, entityName, slot, connectionEnvelope)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner updateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateSiteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope)
            .block();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param entityName The name by which the Hybrid Connection is identified.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the Hybrid Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> updateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        return updateSiteRelayServiceConnectionSlotWithResponseAsync(
                resourceGroupName, name, entityName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnectionsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteRelayServiceConnectionsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnectionsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteRelayServiceConnectionsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> listSiteRelayServiceConnectionsSlotAsync(
        String resourceGroupName, String name, String slot) {
        return listSiteRelayServiceConnectionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner listSiteRelayServiceConnectionsSlot(
        String resourceGroupName, String name, String slot) {
        return listSiteRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> listSiteRelayServiceConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return listSiteRelayServiceConnectionsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnectionsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSiteRelayServiceConnections(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RelayServiceConnectionEntityInner>> listSiteRelayServiceConnectionsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .listSiteRelayServiceConnections(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RelayServiceConnectionEntityInner> listSiteRelayServiceConnectionsAsync(
        String resourceGroupName, String name) {
        return listSiteRelayServiceConnectionsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<RelayServiceConnectionEntityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner listSiteRelayServiceConnections(String resourceGroupName, String name) {
        return listSiteRelayServiceConnectionsAsync(resourceGroupName, name).block();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return class that represents a BizTalk Hybrid Connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RelayServiceConnectionEntityInner> listSiteRelayServiceConnectionsWithResponse(
        String resourceGroupName, String name, Context context) {
        return listSiteRelayServiceConnectionsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetGatewaySlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetGatewaySlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetGatewaySlotWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetGatewaySlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteVnetGatewaySlotAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return getSiteVnetGatewaySlotWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteVnetGatewaySlot(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return getSiteVnetGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot).block();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteVnetGatewaySlotWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot, Context context) {
        return getSiteVnetGatewaySlotWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, slot, context)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGatewaySlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteVnetConnectionGatewaySlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGatewaySlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteVnetConnectionGatewaySlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetGatewayInner> createOrUpdateSiteVnetConnectionGatewaySlotAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionGatewaySlotWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .flatMap(
                (Response<VnetGatewayInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner createOrUpdateSiteVnetConnectionGatewaySlot(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionGatewaySlotAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetGatewayInner> createOrUpdateSiteVnetConnectionGatewaySlotWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        return createOrUpdateSiteVnetConnectionGatewaySlotWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGatewaySlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteVnetConnectionGatewaySlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGatewaySlotWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteVnetConnectionGatewaySlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetGatewayInner> updateSiteVnetConnectionGatewaySlotAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        return updateSiteVnetConnectionGatewaySlotWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .flatMap(
                (Response<VnetGatewayInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner updateSiteVnetConnectionGatewaySlot(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope) {
        return updateSiteVnetConnectionGatewaySlotAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param slot The name of the slot for this web app.
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetGatewayInner> updateSiteVnetConnectionGatewaySlotWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        String slot,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        return updateSiteVnetConnectionGatewaySlotWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetGatewayWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetGateway(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetGatewayWithResponseAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetGateway(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteVnetGatewayAsync(
        String resourceGroupName, String name, String vnetName, String gatewayName) {
        return getSiteVnetGatewayWithResponseAsync(resourceGroupName, name, vnetName, gatewayName)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName) {
        return getSiteVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName).block();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteVnetGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context) {
        return getSiteVnetGatewayWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, context).block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGatewayWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateSiteVnetConnectionGateway(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> createOrUpdateSiteVnetConnectionGatewayWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateSiteVnetConnectionGateway(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetGatewayInner> createOrUpdateSiteVnetConnectionGatewayAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionGatewayWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .flatMap(
                (Response<VnetGatewayInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner createOrUpdateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        return createOrUpdateSiteVnetConnectionGatewayAsync(
                resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetGatewayInner> createOrUpdateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        return createOrUpdateSiteVnetConnectionGatewayWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGatewayWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSiteVnetConnectionGateway(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            vnetName,
                            gatewayName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            connectionEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VnetGatewayInner>> updateSiteVnetConnectionGatewayWithResponseAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (vnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vnetName is required and cannot be null."));
        }
        if (gatewayName == null) {
            return Mono.error(new IllegalArgumentException("Parameter gatewayName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionEnvelope is required and cannot be null."));
        } else {
            connectionEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .updateSiteVnetConnectionGateway(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                vnetName,
                gatewayName,
                this.client.getSubscriptionId(),
                apiVersion,
                connectionEnvelope,
                accept,
                context);
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VnetGatewayInner> updateSiteVnetConnectionGatewayAsync(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        return updateSiteVnetConnectionGatewayWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .flatMap(
                (Response<VnetGatewayInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner updateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        return updateSiteVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .block();
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param vnetName The name of the Virtual Network.
     * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VnetGateway contract.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VnetGatewayInner> updateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        return updateSiteVnetConnectionGatewayWithResponseAsync(
                resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context)
            .block();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetConnectionsWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetConnections(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetConnectionsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetConnections(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteVnetConnectionsAsync(String resourceGroupName, String name) {
        return getSiteVnetConnectionsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteVnetConnections(String resourceGroupName, String name) {
        return getSiteVnetConnectionsAsync(resourceGroupName, name).block();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteVnetConnectionsWithResponse(String resourceGroupName, String name, Context context) {
        return getSiteVnetConnectionsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetConnectionsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSiteVnetConnectionsSlot(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            slot,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getSiteVnetConnectionsSlotWithResponseAsync(
        String resourceGroupName, String name, String slot, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (slot == null) {
            return Mono.error(new IllegalArgumentException("Parameter slot is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getSiteVnetConnectionsSlot(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                slot,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getSiteVnetConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        return getSiteVnetConnectionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getSiteVnetConnectionsSlot(String resourceGroupName, String name, String slot) {
        return getSiteVnetConnectionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @param resourceGroupName The resource group name.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of VnetInfo.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getSiteVnetConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return getSiteVnetConnectionsSlotWithResponseAsync(resourceGroupName, name, slot, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Slot Differences.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesFromProductionNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getSlotsDifferencesFromProductionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SlotDifferenceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Slot Differences.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesFromProductionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSlotsDifferencesFromProductionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Slot Differences.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getSlotsDifferencesSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SlotDifferenceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Slot Differences.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SlotDifferenceInner>> getSlotsDifferencesSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSlotsDifferencesSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSiteSlotsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getSiteSlotsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSiteSlotsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteSlotsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSitesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getSitesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getSitesNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSitesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of deleted sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedSiteInner>> getDeletedSitesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getDeletedSitesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeletedSiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of deleted sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedSiteInner>> getDeletedSitesNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeletedSitesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getDeploymentsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeploymentsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getDeploymentsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getDeploymentsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getDeploymentsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getInstanceDeploymentsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeploymentsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getInstanceDeploymentsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of app deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> getInstanceDeploymentsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getInstanceDeploymentsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of site instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getSiteInstanceIdentifiersNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of site instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteInstanceIdentifiersNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of site instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getSiteInstanceIdentifiersSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of site instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInstanceInner>> getSiteInstanceIdentifiersSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteInstanceIdentifiersSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of host name bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getSiteHostnameBindingsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HostnameBindingInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of host name bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBindingsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of host name bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getSiteHostnameBindingsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HostnameBindingInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of host name bindings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostnameBindingInner>> getSiteHostnameBindingsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteHostnameBindingsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.listSiteBackupsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BackupItemInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listSiteBackupsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.listSiteBackupsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BackupItemInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Backup Items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listSiteBackupsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getSiteUsagesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteUsagesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getSiteUsagesSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getSiteUsagesSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteUsagesSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getSiteMetricsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSlotNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getSiteMetricsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getSiteMetricsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSlotNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getSiteMetricDefinitionsSlotNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsSlotNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricDefinitionsSlotNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getSiteMetricDefinitionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getSiteMetricDefinitionsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getSiteMetricDefinitionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
