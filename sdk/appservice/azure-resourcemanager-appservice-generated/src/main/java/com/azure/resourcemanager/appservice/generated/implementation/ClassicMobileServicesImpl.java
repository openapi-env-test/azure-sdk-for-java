// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.ClassicMobileServicesClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.ClassicMobileServiceInner;
import com.azure.resourcemanager.appservice.generated.models.ClassicMobileService;
import com.azure.resourcemanager.appservice.generated.models.ClassicMobileServices;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ClassicMobileServicesImpl implements ClassicMobileServices {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ClassicMobileServicesImpl.class);

    private final ClassicMobileServicesClient innerClient;

    private final WebSiteManager serviceManager;

    public ClassicMobileServicesImpl(ClassicMobileServicesClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ClassicMobileService> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ClassicMobileServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ClassicMobileServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<ClassicMobileService> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ClassicMobileServiceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new ClassicMobileServiceImpl(inner1, this.manager()));
    }

    public ClassicMobileService getByResourceGroup(String resourceGroupName, String name) {
        ClassicMobileServiceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new ClassicMobileServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ClassicMobileService> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<ClassicMobileServiceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ClassicMobileServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteByResourceGroup(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Object> deleteWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, context);
    }

    private ClassicMobileServicesClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
