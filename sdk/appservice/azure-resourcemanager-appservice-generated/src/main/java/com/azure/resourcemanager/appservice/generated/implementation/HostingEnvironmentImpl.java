// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolInner;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironment;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentStatus;
import com.azure.resourcemanager.appservice.generated.models.InternalLoadBalancingMode;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.NetworkAccessControlEntry;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import com.azure.resourcemanager.appservice.generated.models.StampCapacity;
import com.azure.resourcemanager.appservice.generated.models.VirtualIpMapping;
import com.azure.resourcemanager.appservice.generated.models.VirtualNetworkProfile;
import com.azure.resourcemanager.appservice.generated.models.WorkerPool;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class HostingEnvironmentImpl
    implements HostingEnvironment, HostingEnvironment.Definition, HostingEnvironment.Update {
    private HostingEnvironmentInner innerObject;

    private final WebSiteManager serviceManager;

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String namePropertiesName() {
        return this.innerModel().namePropertiesName();
    }

    public String locationPropertiesLocation() {
        return this.innerModel().locationPropertiesLocation();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public HostingEnvironmentStatus status() {
        return this.innerModel().status();
    }

    public String vnetName() {
        return this.innerModel().vnetName();
    }

    public String vnetResourceGroupName() {
        return this.innerModel().vnetResourceGroupName();
    }

    public String vnetSubnetName() {
        return this.innerModel().vnetSubnetName();
    }

    public VirtualNetworkProfile virtualNetwork() {
        return this.innerModel().virtualNetwork();
    }

    public InternalLoadBalancingMode internalLoadBalancingMode() {
        return this.innerModel().internalLoadBalancingMode();
    }

    public String multiSize() {
        return this.innerModel().multiSize();
    }

    public Integer multiRoleCount() {
        return this.innerModel().multiRoleCount();
    }

    public List<WorkerPool> workerPools() {
        List<WorkerPoolInner> inner = this.innerModel().workerPools();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new WorkerPoolImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Integer ipsslAddressCount() {
        return this.innerModel().ipsslAddressCount();
    }

    public String databaseEdition() {
        return this.innerModel().databaseEdition();
    }

    public String databaseServiceObjective() {
        return this.innerModel().databaseServiceObjective();
    }

    public Integer upgradeDomains() {
        return this.innerModel().upgradeDomains();
    }

    public String subscriptionId() {
        return this.innerModel().subscriptionId();
    }

    public String dnsSuffix() {
        return this.innerModel().dnsSuffix();
    }

    public String lastAction() {
        return this.innerModel().lastAction();
    }

    public String lastActionResult() {
        return this.innerModel().lastActionResult();
    }

    public String allowedMultiSizes() {
        return this.innerModel().allowedMultiSizes();
    }

    public String allowedWorkerSizes() {
        return this.innerModel().allowedWorkerSizes();
    }

    public Integer maximumNumberOfMachines() {
        return this.innerModel().maximumNumberOfMachines();
    }

    public List<VirtualIpMapping> vipMappings() {
        List<VirtualIpMapping> inner = this.innerModel().vipMappings();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<StampCapacity> environmentCapacities() {
        List<StampCapacityInner> inner = this.innerModel().environmentCapacities();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new StampCapacityImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<NetworkAccessControlEntry> networkAccessControlList() {
        List<NetworkAccessControlEntry> inner = this.innerModel().networkAccessControlList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean environmentIsHealthy() {
        return this.innerModel().environmentIsHealthy();
    }

    public String environmentStatus() {
        return this.innerModel().environmentStatus();
    }

    public String resourceGroup() {
        return this.innerModel().resourceGroup();
    }

    public String apiManagementAccountId() {
        return this.innerModel().apiManagementAccountId();
    }

    public Boolean suspended() {
        return this.innerModel().suspended();
    }

    public List<NameValuePair> clusterSettings() {
        List<NameValuePair> inner = this.innerModel().clusterSettings();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public HostingEnvironmentInner innerModel() {
        return this.innerObject;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    public HostingEnvironmentImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public HostingEnvironment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .createOrUpdateHostingEnvironment(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public HostingEnvironment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .createOrUpdateHostingEnvironment(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    HostingEnvironmentImpl(String name, WebSiteManager serviceManager) {
        this.innerObject = new HostingEnvironmentInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public HostingEnvironmentImpl update() {
        return this;
    }

    public HostingEnvironment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .createOrUpdateHostingEnvironment(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public HostingEnvironment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .createOrUpdateHostingEnvironment(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    HostingEnvironmentImpl(HostingEnvironmentInner innerObject, WebSiteManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "hostingEnvironments");
    }

    public HostingEnvironment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public HostingEnvironment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHostingEnvironments()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public HostingEnvironmentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public HostingEnvironmentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public HostingEnvironmentImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public HostingEnvironmentImpl withNamePropertiesName(String namePropertiesName) {
        this.innerModel().withNamePropertiesName(namePropertiesName);
        return this;
    }

    public HostingEnvironmentImpl withLocationPropertiesLocation(String locationPropertiesLocation) {
        this.innerModel().withLocationPropertiesLocation(locationPropertiesLocation);
        return this;
    }

    public HostingEnvironmentImpl withProvisioningState(ProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public HostingEnvironmentImpl withStatus(HostingEnvironmentStatus status) {
        this.innerModel().withStatus(status);
        return this;
    }

    public HostingEnvironmentImpl withVnetName(String vnetName) {
        this.innerModel().withVnetName(vnetName);
        return this;
    }

    public HostingEnvironmentImpl withVnetResourceGroupName(String vnetResourceGroupName) {
        this.innerModel().withVnetResourceGroupName(vnetResourceGroupName);
        return this;
    }

    public HostingEnvironmentImpl withVnetSubnetName(String vnetSubnetName) {
        this.innerModel().withVnetSubnetName(vnetSubnetName);
        return this;
    }

    public HostingEnvironmentImpl withVirtualNetwork(VirtualNetworkProfile virtualNetwork) {
        this.innerModel().withVirtualNetwork(virtualNetwork);
        return this;
    }

    public HostingEnvironmentImpl withInternalLoadBalancingMode(InternalLoadBalancingMode internalLoadBalancingMode) {
        this.innerModel().withInternalLoadBalancingMode(internalLoadBalancingMode);
        return this;
    }

    public HostingEnvironmentImpl withMultiSize(String multiSize) {
        this.innerModel().withMultiSize(multiSize);
        return this;
    }

    public HostingEnvironmentImpl withMultiRoleCount(Integer multiRoleCount) {
        this.innerModel().withMultiRoleCount(multiRoleCount);
        return this;
    }

    public HostingEnvironmentImpl withWorkerPools(List<WorkerPoolInner> workerPools) {
        this.innerModel().withWorkerPools(workerPools);
        return this;
    }

    public HostingEnvironmentImpl withIpsslAddressCount(Integer ipsslAddressCount) {
        this.innerModel().withIpsslAddressCount(ipsslAddressCount);
        return this;
    }

    public HostingEnvironmentImpl withDatabaseEdition(String databaseEdition) {
        this.innerModel().withDatabaseEdition(databaseEdition);
        return this;
    }

    public HostingEnvironmentImpl withDatabaseServiceObjective(String databaseServiceObjective) {
        this.innerModel().withDatabaseServiceObjective(databaseServiceObjective);
        return this;
    }

    public HostingEnvironmentImpl withUpgradeDomains(Integer upgradeDomains) {
        this.innerModel().withUpgradeDomains(upgradeDomains);
        return this;
    }

    public HostingEnvironmentImpl withSubscriptionId(String subscriptionId) {
        this.innerModel().withSubscriptionId(subscriptionId);
        return this;
    }

    public HostingEnvironmentImpl withDnsSuffix(String dnsSuffix) {
        this.innerModel().withDnsSuffix(dnsSuffix);
        return this;
    }

    public HostingEnvironmentImpl withLastAction(String lastAction) {
        this.innerModel().withLastAction(lastAction);
        return this;
    }

    public HostingEnvironmentImpl withLastActionResult(String lastActionResult) {
        this.innerModel().withLastActionResult(lastActionResult);
        return this;
    }

    public HostingEnvironmentImpl withAllowedMultiSizes(String allowedMultiSizes) {
        this.innerModel().withAllowedMultiSizes(allowedMultiSizes);
        return this;
    }

    public HostingEnvironmentImpl withAllowedWorkerSizes(String allowedWorkerSizes) {
        this.innerModel().withAllowedWorkerSizes(allowedWorkerSizes);
        return this;
    }

    public HostingEnvironmentImpl withMaximumNumberOfMachines(Integer maximumNumberOfMachines) {
        this.innerModel().withMaximumNumberOfMachines(maximumNumberOfMachines);
        return this;
    }

    public HostingEnvironmentImpl withVipMappings(List<VirtualIpMapping> vipMappings) {
        this.innerModel().withVipMappings(vipMappings);
        return this;
    }

    public HostingEnvironmentImpl withEnvironmentCapacities(List<StampCapacityInner> environmentCapacities) {
        this.innerModel().withEnvironmentCapacities(environmentCapacities);
        return this;
    }

    public HostingEnvironmentImpl withNetworkAccessControlList(
        List<NetworkAccessControlEntry> networkAccessControlList) {
        this.innerModel().withNetworkAccessControlList(networkAccessControlList);
        return this;
    }

    public HostingEnvironmentImpl withEnvironmentIsHealthy(Boolean environmentIsHealthy) {
        this.innerModel().withEnvironmentIsHealthy(environmentIsHealthy);
        return this;
    }

    public HostingEnvironmentImpl withEnvironmentStatus(String environmentStatus) {
        this.innerModel().withEnvironmentStatus(environmentStatus);
        return this;
    }

    public HostingEnvironmentImpl withResourceGroup(String resourceGroup) {
        this.innerModel().withResourceGroup(resourceGroup);
        return this;
    }

    public HostingEnvironmentImpl withApiManagementAccountId(String apiManagementAccountId) {
        this.innerModel().withApiManagementAccountId(apiManagementAccountId);
        return this;
    }

    public HostingEnvironmentImpl withSuspended(Boolean suspended) {
        this.innerModel().withSuspended(suspended);
        return this;
    }

    public HostingEnvironmentImpl withClusterSettings(List<NameValuePair> clusterSettings) {
        this.innerModel().withClusterSettings(clusterSettings);
        return this;
    }

    public HostingEnvironmentImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public HostingEnvironmentImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public HostingEnvironmentImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }
}
