// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change
 * routing % based on performance.
 */
@Fluent
public final class RampUpRule {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RampUpRule.class);

    /*
     * Hostname of a slot to which the traffic will be redirected if decided
     * to. E.g. mysite-stage.azurewebsites.net
     */
    @JsonProperty(value = "actionHostName")
    private String actionHostname;

    /*
     * Percentage of the traffic which will be redirected to
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}
     */
    @JsonProperty(value = "reroutePercentage")
    private Double reroutePercentage;

    /*
     * [Optional] In auto ramp up scenario this is the step to add/remove from
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage}
     * until it reaches
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage}
     * or
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}.
     * Site metrics are checked every N minutes specified in
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.
     * Custom decision algorithm can be provided in TiPCallback site extension
     * which Url can be specified in
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}
     */
    @JsonProperty(value = "changeStep")
    private Double changeStep;

    /*
     * [Optional] Specifies interval in minutes to reevaluate ReroutePercentage
     */
    @JsonProperty(value = "changeIntervalInMinutes")
    private Integer changeIntervalInMinutes;

    /*
     * [Optional] Specifies lower boundary above which ReroutePercentage will
     * stay.
     */
    @JsonProperty(value = "minReroutePercentage")
    private Double minReroutePercentage;

    /*
     * [Optional] Specifies upper boundary below which ReroutePercentage will
     * stay.
     */
    @JsonProperty(value = "maxReroutePercentage")
    private Double maxReroutePercentage;

    /*
     * Custom decision algorithm can be provided in TiPCallback site extension
     * which Url can be specified. See TiPCallback site extension for the
     * scaffold and contracts.
     * https://www.siteextensions.net/packages/TiPCallback/
     */
    @JsonProperty(value = "changeDecisionCallbackUrl")
    private String changeDecisionCallbackUrl;

    /*
     * Name of the routing rule. The recommended name would be to point to the
     * slot which will receive the traffic in the experiment.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Get the actionHostname property: Hostname of a slot to which the traffic will be redirected if decided to. E.g.
     * mysite-stage.azurewebsites.net.
     *
     * @return the actionHostname value.
     */
    public String actionHostname() {
        return this.actionHostname;
    }

    /**
     * Set the actionHostname property: Hostname of a slot to which the traffic will be redirected if decided to. E.g.
     * mysite-stage.azurewebsites.net.
     *
     * @param actionHostname the actionHostname value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withActionHostname(String actionHostname) {
        this.actionHostname = actionHostname;
        return this;
    }

    /**
     * Get the reroutePercentage property: Percentage of the traffic which will be redirected to
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}.
     *
     * @return the reroutePercentage value.
     */
    public Double reroutePercentage() {
        return this.reroutePercentage;
    }

    /**
     * Set the reroutePercentage property: Percentage of the traffic which will be redirected to
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}.
     *
     * @param reroutePercentage the reroutePercentage value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withReroutePercentage(Double reroutePercentage) {
        this.reroutePercentage = reroutePercentage;
        return this;
    }

    /**
     * Get the changeStep property: [Optional] In auto ramp up scenario this is the step to add/remove from
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes
     * specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}. Custom decision algorithm
     * can be provided in TiPCallback site extension which Url can be specified in
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}.
     *
     * @return the changeStep value.
     */
    public Double changeStep() {
        return this.changeStep;
    }

    /**
     * Set the changeStep property: [Optional] In auto ramp up scenario this is the step to add/remove from
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or
     * {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes
     * specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}. Custom decision algorithm
     * can be provided in TiPCallback site extension which Url can be specified in
     * {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}.
     *
     * @param changeStep the changeStep value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withChangeStep(Double changeStep) {
        this.changeStep = changeStep;
        return this;
    }

    /**
     * Get the changeIntervalInMinutes property: [Optional] Specifies interval in minutes to reevaluate
     * ReroutePercentage.
     *
     * @return the changeIntervalInMinutes value.
     */
    public Integer changeIntervalInMinutes() {
        return this.changeIntervalInMinutes;
    }

    /**
     * Set the changeIntervalInMinutes property: [Optional] Specifies interval in minutes to reevaluate
     * ReroutePercentage.
     *
     * @param changeIntervalInMinutes the changeIntervalInMinutes value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withChangeIntervalInMinutes(Integer changeIntervalInMinutes) {
        this.changeIntervalInMinutes = changeIntervalInMinutes;
        return this;
    }

    /**
     * Get the minReroutePercentage property: [Optional] Specifies lower boundary above which ReroutePercentage will
     * stay.
     *
     * @return the minReroutePercentage value.
     */
    public Double minReroutePercentage() {
        return this.minReroutePercentage;
    }

    /**
     * Set the minReroutePercentage property: [Optional] Specifies lower boundary above which ReroutePercentage will
     * stay.
     *
     * @param minReroutePercentage the minReroutePercentage value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withMinReroutePercentage(Double minReroutePercentage) {
        this.minReroutePercentage = minReroutePercentage;
        return this;
    }

    /**
     * Get the maxReroutePercentage property: [Optional] Specifies upper boundary below which ReroutePercentage will
     * stay.
     *
     * @return the maxReroutePercentage value.
     */
    public Double maxReroutePercentage() {
        return this.maxReroutePercentage;
    }

    /**
     * Set the maxReroutePercentage property: [Optional] Specifies upper boundary below which ReroutePercentage will
     * stay.
     *
     * @param maxReroutePercentage the maxReroutePercentage value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withMaxReroutePercentage(Double maxReroutePercentage) {
        this.maxReroutePercentage = maxReroutePercentage;
        return this;
    }

    /**
     * Get the changeDecisionCallbackUrl property: Custom decision algorithm can be provided in TiPCallback site
     * extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.
     * https://www.siteextensions.net/packages/TiPCallback/.
     *
     * @return the changeDecisionCallbackUrl value.
     */
    public String changeDecisionCallbackUrl() {
        return this.changeDecisionCallbackUrl;
    }

    /**
     * Set the changeDecisionCallbackUrl property: Custom decision algorithm can be provided in TiPCallback site
     * extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.
     * https://www.siteextensions.net/packages/TiPCallback/.
     *
     * @param changeDecisionCallbackUrl the changeDecisionCallbackUrl value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withChangeDecisionCallbackUrl(String changeDecisionCallbackUrl) {
        this.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
        return this;
    }

    /**
     * Get the name property: Name of the routing rule. The recommended name would be to point to the slot which will
     * receive the traffic in the experiment.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the routing rule. The recommended name would be to point to the slot which will
     * receive the traffic in the experiment.
     *
     * @param name the name value to set.
     * @return the RampUpRule object itself.
     */
    public RampUpRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
