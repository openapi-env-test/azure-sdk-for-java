// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appservice.generated.fluent.HostingEnvironmentsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentDiagnosticsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostingEnvironmentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ServerFarmWithRichSkuInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SkuInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UsageInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolInner;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuotaCollection;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentCollection;
import com.azure.resourcemanager.appservice.generated.models.MetricDefinitionCollection;
import com.azure.resourcemanager.appservice.generated.models.ResourceMetricCollection;
import com.azure.resourcemanager.appservice.generated.models.ServerFarmCollection;
import com.azure.resourcemanager.appservice.generated.models.SiteCollection;
import com.azure.resourcemanager.appservice.generated.models.SkuInfoCollection;
import com.azure.resourcemanager.appservice.generated.models.StampCapacityCollection;
import com.azure.resourcemanager.appservice.generated.models.UsageCollection;
import com.azure.resourcemanager.appservice.generated.models.WorkerPoolCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HostingEnvironmentsClient. */
public final class HostingEnvironmentsClientImpl implements HostingEnvironmentsClient {
    private final ClientLogger logger = new ClientLogger(HostingEnvironmentsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final HostingEnvironmentsService service;

    /** The service client containing this operation class. */
    private final WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of HostingEnvironmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HostingEnvironmentsClientImpl(WebSiteManagementClientImpl client) {
        this.service =
            RestProxy.create(HostingEnvironmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WebSiteManagementClientHostingEnvironments to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementCli")
    private interface HostingEnvironmentsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}")
        @ExpectedResponses({200, 200, 202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateHostingEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HostingEnvironmentInner hostingEnvironmentEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}")
        @ExpectedResponses({200, 200, 202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("forceDelete") Boolean forceDelete,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/diagnostics")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getHostingEnvironmentDiagnostics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/diagnostics/{diagnosticsName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentDiagnosticsInner>> getHostingEnvironmentDiagnosticsItem(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("diagnosticsName") String diagnosticsName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/capacities/compute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StampCapacityCollection>> getHostingEnvironmentCapacities(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/capacities/virtualip")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AddressResponseInner>> getHostingEnvironmentVips(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentCollection>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/reboot")
        @ExpectedResponses({202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> rebootHostingEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/operations")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getHostingEnvironmentOperations(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/operations/{operationId}")
        @ExpectedResponses({200, 200, 202, 202, 500})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getHostingEnvironmentOperation(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("operationId") String operationId,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/metrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/metricdefinitions")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionInner>> getHostingEnvironmentMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getHostingEnvironmentUsages(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/metrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentMultiRoleMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("startTime") String startTime,
            @QueryParam("endTime") String endTime,
            @QueryParam("timeGrain") String timeGrain,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentWebWorkerMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getHostingEnvironmentMultiRoleMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getHostingEnvironmentWebWorkerMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UsageCollection>> getHostingEnvironmentMultiRoleUsages(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UsageCollection>> getHostingEnvironmentWebWorkerUsages(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/sites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getHostingEnvironmentSites(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @QueryParam("propertiesToInclude") String propertiesToInclude,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/webhostingplans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getHostingEnvironmentWebHostingPlans(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/serverfarms")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getHostingEnvironmentServerFarms(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolCollection>> getMultiRolePools(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolInner>> getMultiRolePool(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default")
        @ExpectedResponses({200, 200, 202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateMultiRolePool(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") WorkerPoolInner multiRolePoolEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/skus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuInfoCollection>> getMultiRolePoolSkus(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolCollection>> getWorkerPools(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolInner>> getWorkerPool(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}")
        @ExpectedResponses({200, 200, 202, 202, 400, 404, 409})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdateWorkerPool(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") WorkerPoolInner workerPoolEnvelope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuInfoCollection>> getWorkerPoolSkus(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getWorkerPoolInstanceMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("instance") String instance,
            @QueryParam("details") Boolean details,
            @QueryParam(value = "$filter", encoded = true) String filter,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getWorkerPoolInstanceMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("workerPoolName") String workerPoolName,
            @PathParam("instance") String instance,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getMultiRolePoolInstanceMetrics(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("instance") String instance,
            @QueryParam("details") Boolean details,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Object>> getMultiRolePoolInstanceMetricDefinitions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("instance") String instance,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/suspend")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> suspendHostingEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web"
                + "/hostingEnvironments/{name}/resume")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> resumeHostingEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StampCapacityCollection>> getHostingEnvironmentCapacitiesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HostingEnvironmentCollection>> getHostingEnvironmentsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentMetricsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CsmUsageQuotaCollection>> getHostingEnvironmentUsagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentMultiRoleMetricsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceMetricCollection>> getHostingEnvironmentWebWorkerMetricsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getHostingEnvironmentMultiRoleMetricDefinitionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MetricDefinitionCollection>> getHostingEnvironmentWebWorkerMetricDefinitionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UsageCollection>> getHostingEnvironmentMultiRoleUsagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UsageCollection>> getHostingEnvironmentWebWorkerUsagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> getHostingEnvironmentSitesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getHostingEnvironmentWebHostingPlansNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerFarmCollection>> getHostingEnvironmentServerFarmsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolCollection>> getMultiRolePoolsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuInfoCollection>> getMultiRolePoolSkusNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkerPoolCollection>> getWorkerPoolsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuInfoCollection>> getWorkerPoolSkusNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> suspendHostingEnvironmentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SiteCollection>> resumeHostingEnvironmentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostingEnvironmentInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostingEnvironmentInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<HostingEnvironmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentInner getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).block();
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostingEnvironmentInner> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateHostingEnvironmentWithResponseAsync(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostingEnvironmentEnvelope == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hostingEnvironmentEnvelope is required and cannot be null."));
        } else {
            hostingEnvironmentEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateHostingEnvironment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            hostingEnvironmentEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateHostingEnvironmentWithResponseAsync(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (hostingEnvironmentEnvelope == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hostingEnvironmentEnvelope is required and cannot be null."));
        } else {
            hostingEnvironmentEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateHostingEnvironment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                hostingEnvironmentEnvelope,
                accept,
                context);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateHostingEnvironmentAsync(
            String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateHostingEnvironmentWithResponseAsync(resourceGroupName, name, hostingEnvironmentEnvelope);
        return this
            .client
            .<HostingEnvironmentInner, HostingEnvironmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                HostingEnvironmentInner.class,
                HostingEnvironmentInner.class,
                Context.NONE);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateHostingEnvironmentAsync(
            String resourceGroupName,
            String name,
            HostingEnvironmentInner hostingEnvironmentEnvelope,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateHostingEnvironmentWithResponseAsync(
                resourceGroupName, name, hostingEnvironmentEnvelope, context);
        return this
            .client
            .<HostingEnvironmentInner, HostingEnvironmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                HostingEnvironmentInner.class,
                HostingEnvironmentInner.class,
                context);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateHostingEnvironment(
            String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope) {
        return beginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope)
            .getSyncPoller();
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<HostingEnvironmentInner>, HostingEnvironmentInner>
        beginCreateOrUpdateHostingEnvironment(
            String resourceGroupName,
            String name,
            HostingEnvironmentInner hostingEnvironmentEnvelope,
            Context context) {
        return beginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentInner> createOrUpdateHostingEnvironmentAsync(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope) {
        return beginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentInner> createOrUpdateHostingEnvironmentAsync(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope, Context context) {
        return beginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentInner createOrUpdateHostingEnvironment(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope) {
        return createOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope).block();
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of an hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentInner createOrUpdateHostingEnvironment(
        String resourceGroupName, String name, HostingEnvironmentInner hostingEnvironmentEnvelope, Context context) {
        return createOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope, context)
            .block();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String name, Boolean forceDelete) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            forceDelete,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                forceDelete,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginDeleteAsync(
        String resourceGroupName, String name, Boolean forceDelete) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, name, forceDelete);
        return this
            .client
            .<Object, Object>getLroResult(
                mono, this.client.getHttpPipeline(), Object.class, Object.class, Context.NONE);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Object>, Object> beginDeleteAsync(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, name, forceDelete, context);
        return this
            .client
            .<Object, Object>getLroResult(mono, this.client.getHttpPipeline(), Object.class, Object.class, context);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String name, Boolean forceDelete) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete).getSyncPoller();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Object>, Object> beginDelete(
        String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete, context).getSyncPoller();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name, Boolean forceDelete) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name) {
        final Boolean forceDelete = null;
        return beginDeleteAsync(resourceGroupName, name, forceDelete)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> deleteAsync(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return beginDeleteAsync(resourceGroupName, name, forceDelete, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name, Boolean forceDelete) {
        return deleteAsync(resourceGroupName, name, forceDelete).block();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name) {
        final Boolean forceDelete = null;
        return deleteAsync(resourceGroupName, name, forceDelete).block();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object delete(String resourceGroupName, String name, Boolean forceDelete, Context context) {
        return deleteAsync(resourceGroupName, name, forceDelete, context).block();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentDiagnosticsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentDiagnostics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentDiagnosticsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentDiagnostics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getHostingEnvironmentDiagnosticsAsync(String resourceGroupName, String name) {
        return getHostingEnvironmentDiagnosticsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getHostingEnvironmentDiagnostics(String resourceGroupName, String name) {
        return getHostingEnvironmentDiagnosticsAsync(resourceGroupName, name).block();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getHostingEnvironmentDiagnosticsWithResponse(
        String resourceGroupName, String name, Context context) {
        return getHostingEnvironmentDiagnosticsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostingEnvironmentDiagnosticsInner>> getHostingEnvironmentDiagnosticsItemWithResponseAsync(
        String resourceGroupName, String name, String diagnosticsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (diagnosticsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentDiagnosticsItem(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            diagnosticsName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HostingEnvironmentDiagnosticsInner>> getHostingEnvironmentDiagnosticsItemWithResponseAsync(
        String resourceGroupName, String name, String diagnosticsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (diagnosticsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentDiagnosticsItem(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                diagnosticsName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HostingEnvironmentDiagnosticsInner> getHostingEnvironmentDiagnosticsItemAsync(
        String resourceGroupName, String name, String diagnosticsName) {
        return getHostingEnvironmentDiagnosticsItemWithResponseAsync(resourceGroupName, name, diagnosticsName)
            .flatMap(
                (Response<HostingEnvironmentDiagnosticsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostingEnvironmentDiagnosticsInner getHostingEnvironmentDiagnosticsItem(
        String resourceGroupName, String name, String diagnosticsName) {
        return getHostingEnvironmentDiagnosticsItemAsync(resourceGroupName, name, diagnosticsName).block();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param diagnosticsName Name of the diagnostics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic information for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HostingEnvironmentDiagnosticsInner> getHostingEnvironmentDiagnosticsItemWithResponse(
        String resourceGroupName, String name, String diagnosticsName, Context context) {
        return getHostingEnvironmentDiagnosticsItemWithResponseAsync(resourceGroupName, name, diagnosticsName, context)
            .block();
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StampCapacityInner>> getHostingEnvironmentCapacitiesSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentCapacities(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<StampCapacityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StampCapacityInner>> getHostingEnvironmentCapacitiesSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentCapacities(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StampCapacityInner> getHostingEnvironmentCapacitiesAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentCapacitiesSinglePageAsync(resourceGroupName, name),
            nextLink -> getHostingEnvironmentCapacitiesNextSinglePageAsync(nextLink));
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StampCapacityInner> getHostingEnvironmentCapacitiesAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentCapacitiesSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getHostingEnvironmentCapacitiesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StampCapacityInner> getHostingEnvironmentCapacities(String resourceGroupName, String name) {
        return new PagedIterable<>(getHostingEnvironmentCapacitiesAsync(resourceGroupName, name));
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StampCapacityInner> getHostingEnvironmentCapacities(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getHostingEnvironmentCapacitiesAsync(resourceGroupName, name, context));
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AddressResponseInner>> getHostingEnvironmentVipsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentVips(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AddressResponseInner>> getHostingEnvironmentVipsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentVips(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AddressResponseInner> getHostingEnvironmentVipsAsync(String resourceGroupName, String name) {
        return getHostingEnvironmentVipsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<AddressResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddressResponseInner getHostingEnvironmentVips(String resourceGroupName, String name) {
        return getHostingEnvironmentVipsAsync(resourceGroupName, name).block();
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return iP addresses assigned to the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddressResponseInner> getHostingEnvironmentVipsWithResponse(
        String resourceGroupName, String name, Context context) {
        return getHostingEnvironmentVipsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<HostingEnvironmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostingEnvironmentInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> getHostingEnvironmentsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HostingEnvironmentInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> getHostingEnvironmentsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param resourceGroupName Name of resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hostingEnvironments (App Service Environments) in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostingEnvironmentInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> rebootHostingEnvironmentWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .rebootHostingEnvironment(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> rebootHostingEnvironmentWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .rebootHostingEnvironment(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> rebootHostingEnvironmentAsync(String resourceGroupName, String name) {
        return rebootHostingEnvironmentWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object rebootHostingEnvironment(String resourceGroupName, String name) {
        return rebootHostingEnvironmentAsync(resourceGroupName, name).block();
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> rebootHostingEnvironmentWithResponse(
        String resourceGroupName, String name, Context context) {
        return rebootHostingEnvironmentWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentOperationsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentOperations(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentOperationsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentOperations(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getHostingEnvironmentOperationsAsync(String resourceGroupName, String name) {
        return getHostingEnvironmentOperationsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getHostingEnvironmentOperations(String resourceGroupName, String name) {
        return getHostingEnvironmentOperationsAsync(resourceGroupName, name).block();
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getHostingEnvironmentOperationsWithResponse(
        String resourceGroupName, String name, Context context) {
        return getHostingEnvironmentOperationsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentOperation(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            operationId,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getHostingEnvironmentOperationWithResponseAsync(
        String resourceGroupName, String name, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentOperation(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                operationId,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getHostingEnvironmentOperationAsync(
        String resourceGroupName, String name, String operationId) {
        return getHostingEnvironmentOperationWithResponseAsync(resourceGroupName, name, operationId)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getHostingEnvironmentOperation(String resourceGroupName, String name, String operationId) {
        return getHostingEnvironmentOperationAsync(resourceGroupName, name, operationId).block();
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param operationId operation identifier GUID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of an operation on a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getHostingEnvironmentOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return getHostingEnvironmentOperationWithResponseAsync(resourceGroupName, name, operationId, context).block();
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMetricsSinglePageAsync(
        String resourceGroupName, String name, Boolean details, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMetricsSinglePageAsync(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMetricsAsync(
        String resourceGroupName, String name, Boolean details, String filter) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMetricsSinglePageAsync(resourceGroupName, name, details, filter),
            nextLink -> getHostingEnvironmentMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMetricsAsync(String resourceGroupName, String name) {
        final Boolean details = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> getHostingEnvironmentMetricsSinglePageAsync(resourceGroupName, name, details, filter),
            nextLink -> getHostingEnvironmentMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMetricsAsync(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMetricsSinglePageAsync(resourceGroupName, name, details, filter, context),
            nextLink -> getHostingEnvironmentMetricsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentMetrics(String resourceGroupName, String name) {
        final Boolean details = null;
        final String filter = null;
        return new PagedIterable<>(getHostingEnvironmentMetricsAsync(resourceGroupName, name, details, filter));
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metrics of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentMetricsAsync(resourceGroupName, name, details, filter, context));
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MetricDefinitionInner>> getHostingEnvironmentMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MetricDefinitionInner>> getHostingEnvironmentMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MetricDefinitionInner> getHostingEnvironmentMetricDefinitionsAsync(
        String resourceGroupName, String name) {
        return getHostingEnvironmentMetricDefinitionsWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<MetricDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricDefinitionInner getHostingEnvironmentMetricDefinitions(String resourceGroupName, String name) {
        return getHostingEnvironmentMetricDefinitionsAsync(resourceGroupName, name).block();
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global metric definitions of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MetricDefinitionInner> getHostingEnvironmentMetricDefinitionsWithResponse(
        String resourceGroupName, String name, Context context) {
        return getHostingEnvironmentMetricDefinitionsWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getHostingEnvironmentUsagesSinglePageAsync(
        String resourceGroupName, String name, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentUsages(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getHostingEnvironmentUsagesSinglePageAsync(
        String resourceGroupName, String name, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentUsages(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getHostingEnvironmentUsagesAsync(
        String resourceGroupName, String name, String filter) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> getHostingEnvironmentUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getHostingEnvironmentUsagesAsync(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedFlux<>(
            () -> getHostingEnvironmentUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> getHostingEnvironmentUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CsmUsageQuotaInner> getHostingEnvironmentUsagesAsync(
        String resourceGroupName, String name, String filter, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentUsagesSinglePageAsync(resourceGroupName, name, filter, context),
            nextLink -> getHostingEnvironmentUsagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getHostingEnvironmentUsages(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedIterable<>(getHostingEnvironmentUsagesAsync(resourceGroupName, name, filter));
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return global usages of hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> getHostingEnvironmentUsages(
        String resourceGroupName, String name, String filter, Context context) {
        return new PagedIterable<>(getHostingEnvironmentUsagesAsync(resourceGroupName, name, filter, context));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMultiRoleMetricsSinglePageAsync(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            startTime,
                            endTime,
                            timeGrain,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMultiRoleMetricsSinglePageAsync(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                startTime,
                endTime,
                timeGrain,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMultiRoleMetricsAsync(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentMultiRoleMetricsSinglePageAsync(
                    resourceGroupName, name, startTime, endTime, timeGrain, details, filter),
            nextLink -> getHostingEnvironmentMultiRoleMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMultiRoleMetricsAsync(
        String resourceGroupName, String name) {
        final String startTime = null;
        final String endTime = null;
        final String timeGrain = null;
        final Boolean details = null;
        final String filter = null;
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentMultiRoleMetricsSinglePageAsync(
                    resourceGroupName, name, startTime, endTime, timeGrain, details, filter),
            nextLink -> getHostingEnvironmentMultiRoleMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentMultiRoleMetricsAsync(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter,
        Context context) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentMultiRoleMetricsSinglePageAsync(
                    resourceGroupName, name, startTime, endTime, timeGrain, details, filter, context),
            nextLink -> getHostingEnvironmentMultiRoleMetricsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentMultiRoleMetrics(
        String resourceGroupName, String name) {
        final String startTime = null;
        final String endTime = null;
        final String timeGrain = null;
        final Boolean details = null;
        final String filter = null;
        return new PagedIterable<>(
            getHostingEnvironmentMultiRoleMetricsAsync(
                resourceGroupName, name, startTime, endTime, timeGrain, details, filter));
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param startTime Beginning time of metrics query.
     * @param endTime End time of metrics query.
     * @param timeGrain Time granularity of metrics query.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentMultiRoleMetrics(
        String resourceGroupName,
        String name,
        String startTime,
        String endTime,
        String timeGrain,
        Boolean details,
        String filter,
        Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentMultiRoleMetricsAsync(
                resourceGroupName, name, startTime, endTime, timeGrain, details, filter, context));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentWebWorkerMetricsSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentWebWorkerMetricsSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentWebWorkerMetricsAsync(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentWebWorkerMetricsSinglePageAsync(
                    resourceGroupName, name, workerPoolName, details, filter),
            nextLink -> getHostingEnvironmentWebWorkerMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentWebWorkerMetricsAsync(
        String resourceGroupName, String name, String workerPoolName) {
        final Boolean details = null;
        final String filter = null;
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentWebWorkerMetricsSinglePageAsync(
                    resourceGroupName, name, workerPoolName, details, filter),
            nextLink -> getHostingEnvironmentWebWorkerMetricsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceMetricInner> getHostingEnvironmentWebWorkerMetricsAsync(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter, Context context) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentWebWorkerMetricsSinglePageAsync(
                    resourceGroupName, name, workerPoolName, details, filter, context),
            nextLink -> getHostingEnvironmentWebWorkerMetricsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName) {
        final Boolean details = null;
        final String filter = null;
        return new PagedIterable<>(
            getHostingEnvironmentWebWorkerMetricsAsync(resourceGroupName, name, workerPoolName, details, filter));
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceMetricInner> getHostingEnvironmentWebWorkerMetrics(
        String resourceGroupName, String name, String workerPoolName, Boolean details, String filter, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentWebWorkerMetricsAsync(
                resourceGroupName, name, workerPoolName, details, filter, context));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getHostingEnvironmentMultiRoleMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getHostingEnvironmentMultiRoleMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getHostingEnvironmentMultiRoleMetricDefinitionsAsync(
        String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMultiRoleMetricDefinitionsSinglePageAsync(resourceGroupName, name),
            nextLink -> getHostingEnvironmentMultiRoleMetricDefinitionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getHostingEnvironmentMultiRoleMetricDefinitionsAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMultiRoleMetricDefinitionsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getHostingEnvironmentMultiRoleMetricDefinitionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name) {
        return new PagedIterable<>(getHostingEnvironmentMultiRoleMetricDefinitionsAsync(resourceGroupName, name));
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getHostingEnvironmentMultiRoleMetricDefinitions(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentMultiRoleMetricDefinitionsAsync(resourceGroupName, name, context));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getHostingEnvironmentWebWorkerMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>> getHostingEnvironmentWebWorkerMetricDefinitionsSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getHostingEnvironmentWebWorkerMetricDefinitionsAsync(
        String resourceGroupName, String name, String workerPoolName) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentWebWorkerMetricDefinitionsSinglePageAsync(resourceGroupName, name, workerPoolName),
            nextLink -> getHostingEnvironmentWebWorkerMetricDefinitionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MetricDefinitionInner> getHostingEnvironmentWebWorkerMetricDefinitionsAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedFlux<>(
            () ->
                getHostingEnvironmentWebWorkerMetricDefinitionsSinglePageAsync(
                    resourceGroupName, name, workerPoolName, context),
            nextLink -> getHostingEnvironmentWebWorkerMetricDefinitionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName) {
        return new PagedIterable<>(
            getHostingEnvironmentWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName));
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MetricDefinitionInner> getHostingEnvironmentWebWorkerMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, context));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentMultiRoleUsagesSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleUsages(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<UsageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentMultiRoleUsagesSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleUsages(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UsageInner> getHostingEnvironmentMultiRoleUsagesAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMultiRoleUsagesSinglePageAsync(resourceGroupName, name),
            nextLink -> getHostingEnvironmentMultiRoleUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UsageInner> getHostingEnvironmentMultiRoleUsagesAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentMultiRoleUsagesSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getHostingEnvironmentMultiRoleUsagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UsageInner> getHostingEnvironmentMultiRoleUsages(String resourceGroupName, String name) {
        return new PagedIterable<>(getHostingEnvironmentMultiRoleUsagesAsync(resourceGroupName, name));
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UsageInner> getHostingEnvironmentMultiRoleUsages(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getHostingEnvironmentMultiRoleUsagesAsync(resourceGroupName, name, context));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentWebWorkerUsagesSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerUsages(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<UsageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentWebWorkerUsagesSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerUsages(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UsageInner> getHostingEnvironmentWebWorkerUsagesAsync(
        String resourceGroupName, String name, String workerPoolName) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentWebWorkerUsagesSinglePageAsync(resourceGroupName, name, workerPoolName),
            nextLink -> getHostingEnvironmentWebWorkerUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UsageInner> getHostingEnvironmentWebWorkerUsagesAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentWebWorkerUsagesSinglePageAsync(resourceGroupName, name, workerPoolName, context),
            nextLink -> getHostingEnvironmentWebWorkerUsagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UsageInner> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName) {
        return new PagedIterable<>(getHostingEnvironmentWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName));
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usages for a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UsageInner> getHostingEnvironmentWebWorkerUsages(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName, context));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getHostingEnvironmentSitesSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentSites(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            propertiesToInclude,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getHostingEnvironmentSitesSinglePageAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentSites(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                propertiesToInclude,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getHostingEnvironmentSitesAsync(
        String resourceGroupName, String name, String propertiesToInclude) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getHostingEnvironmentSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getHostingEnvironmentSitesAsync(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedFlux<>(
            () -> getHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude),
            nextLink -> getHostingEnvironmentSitesNextSinglePageAsync(nextLink));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> getHostingEnvironmentSitesAsync(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentSitesSinglePageAsync(resourceGroupName, name, propertiesToInclude, context),
            nextLink -> getHostingEnvironmentSitesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getHostingEnvironmentSites(String resourceGroupName, String name) {
        final String propertiesToInclude = null;
        return new PagedIterable<>(getHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude));
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param propertiesToInclude Comma separated list of site properties to include.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sites on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> getHostingEnvironmentSites(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        return new PagedIterable<>(
            getHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentWebHostingPlansSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebHostingPlans(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentWebHostingPlansSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebHostingPlans(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getHostingEnvironmentWebHostingPlansAsync(
        String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentWebHostingPlansSinglePageAsync(resourceGroupName, name),
            nextLink -> getHostingEnvironmentWebHostingPlansNextSinglePageAsync(nextLink));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getHostingEnvironmentWebHostingPlansAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentWebHostingPlansSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getHostingEnvironmentWebHostingPlansNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name) {
        return new PagedIterable<>(getHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getHostingEnvironmentWebHostingPlans(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentServerFarmsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentServerFarms(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentServerFarmsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentServerFarms(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getHostingEnvironmentServerFarmsAsync(
        String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentServerFarmsSinglePageAsync(resourceGroupName, name),
            nextLink -> getHostingEnvironmentServerFarmsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerFarmWithRichSkuInner> getHostingEnvironmentServerFarmsAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getHostingEnvironmentServerFarmsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getHostingEnvironmentServerFarmsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getHostingEnvironmentServerFarms(
        String resourceGroupName, String name) {
        return new PagedIterable<>(getHostingEnvironmentServerFarmsAsync(resourceGroupName, name));
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerFarmWithRichSkuInner> getHostingEnvironmentServerFarms(
        String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getHostingEnvironmentServerFarmsAsync(resourceGroupName, name, context));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getMultiRolePoolsSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiRolePools(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<WorkerPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getMultiRolePoolsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePools(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerPoolInner> getMultiRolePoolsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getMultiRolePoolsSinglePageAsync(resourceGroupName, name),
            nextLink -> getMultiRolePoolsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerPoolInner> getMultiRolePoolsAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getMultiRolePoolsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getMultiRolePoolsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerPoolInner> getMultiRolePools(String resourceGroupName, String name) {
        return new PagedIterable<>(getMultiRolePoolsAsync(resourceGroupName, name));
    }

    /**
     * Get all multi role pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all multi role pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerPoolInner> getMultiRolePools(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getMultiRolePoolsAsync(resourceGroupName, name, context));
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerPoolInner>> getMultiRolePoolWithResponseAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiRolePool(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerPoolInner>> getMultiRolePoolWithResponseAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePool(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> getMultiRolePoolAsync(String resourceGroupName, String name) {
        return getMultiRolePoolWithResponseAsync(resourceGroupName, name)
            .flatMap(
                (Response<WorkerPoolInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner getMultiRolePool(String resourceGroupName, String name) {
        return getMultiRolePoolAsync(resourceGroupName, name).block();
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WorkerPoolInner> getMultiRolePoolWithResponse(
        String resourceGroupName, String name, Context context) {
        return getMultiRolePoolWithResponseAsync(resourceGroupName, name, context).block();
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateMultiRolePoolWithResponseAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (multiRolePoolEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multiRolePoolEnvelope is required and cannot be null."));
        } else {
            multiRolePoolEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateMultiRolePool(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            multiRolePoolEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateMultiRolePoolWithResponseAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (multiRolePoolEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multiRolePoolEnvelope is required and cannot be null."));
        } else {
            multiRolePoolEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateMultiRolePool(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                multiRolePoolEnvelope,
                accept,
                context);
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateMultiRolePoolAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateMultiRolePoolWithResponseAsync(resourceGroupName, name, multiRolePoolEnvelope);
        return this
            .client
            .<WorkerPoolInner, WorkerPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), WorkerPoolInner.class, WorkerPoolInner.class, Context.NONE);
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateMultiRolePoolAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateMultiRolePoolWithResponseAsync(resourceGroupName, name, multiRolePoolEnvelope, context);
        return this
            .client
            .<WorkerPoolInner, WorkerPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), WorkerPoolInner.class, WorkerPoolInner.class, context);
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        return beginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).getSyncPoller();
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        return beginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> createOrUpdateMultiRolePoolAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        return beginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> createOrUpdateMultiRolePoolAsync(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        return beginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope) {
        return createOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).block();
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param multiRolePoolEnvelope Properties of multiRole pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner createOrUpdateMultiRolePool(
        String resourceGroupName, String name, WorkerPoolInner multiRolePoolEnvelope, Context context) {
        return createOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope, context).block();
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getMultiRolePoolSkusSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiRolePoolSkus(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SkuInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getMultiRolePoolSkusSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePoolSkus(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInfoInner> getMultiRolePoolSkusAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getMultiRolePoolSkusSinglePageAsync(resourceGroupName, name),
            nextLink -> getMultiRolePoolSkusNextSinglePageAsync(nextLink));
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInfoInner> getMultiRolePoolSkusAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getMultiRolePoolSkusSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getMultiRolePoolSkusNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInfoInner> getMultiRolePoolSkus(String resourceGroupName, String name) {
        return new PagedIterable<>(getMultiRolePoolSkusAsync(resourceGroupName, name));
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a multiRole pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInfoInner> getMultiRolePoolSkus(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getMultiRolePoolSkusAsync(resourceGroupName, name, context));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getWorkerPoolsSinglePageAsync(String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getWorkerPools(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<WorkerPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getWorkerPoolsSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPools(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerPoolInner> getWorkerPoolsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> getWorkerPoolsSinglePageAsync(resourceGroupName, name),
            nextLink -> getWorkerPoolsNextSinglePageAsync(nextLink));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerPoolInner> getWorkerPoolsAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> getWorkerPoolsSinglePageAsync(resourceGroupName, name, context),
            nextLink -> getWorkerPoolsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerPoolInner> getWorkerPools(String resourceGroupName, String name) {
        return new PagedIterable<>(getWorkerPoolsAsync(resourceGroupName, name));
    }

    /**
     * Get all worker pools.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all worker pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerPoolInner> getWorkerPools(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(getWorkerPoolsAsync(resourceGroupName, name, context));
    }

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerPoolInner>> getWorkerPoolWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getWorkerPool(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerPoolInner>> getWorkerPoolWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPool(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> getWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName) {
        return getWorkerPoolWithResponseAsync(resourceGroupName, name, workerPoolName)
            .flatMap(
                (Response<WorkerPoolInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner getWorkerPool(String resourceGroupName, String name, String workerPoolName) {
        return getWorkerPoolAsync(resourceGroupName, name, workerPoolName).block();
    }

    /**
     * Get properties of a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WorkerPoolInner> getWorkerPoolWithResponse(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return getWorkerPoolWithResponseAsync(resourceGroupName, name, workerPoolName, context).block();
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWorkerPoolWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName, WorkerPoolInner workerPoolEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (workerPoolEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter workerPoolEnvelope is required and cannot be null."));
        } else {
            workerPoolEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdateWorkerPool(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            workerPoolEnvelope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWorkerPoolWithResponseAsync(
        String resourceGroupName,
        String name,
        String workerPoolName,
        WorkerPoolInner workerPoolEnvelope,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (workerPoolEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter workerPoolEnvelope is required and cannot be null."));
        } else {
            workerPoolEnvelope.validate();
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdateWorkerPool(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                this.client.getSubscriptionId(),
                apiVersion,
                workerPoolEnvelope,
                accept,
                context);
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateWorkerPoolAsync(
        String resourceGroupName, String name, String workerPoolName, WorkerPoolInner workerPoolEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWorkerPoolWithResponseAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope);
        return this
            .client
            .<WorkerPoolInner, WorkerPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), WorkerPoolInner.class, WorkerPoolInner.class, Context.NONE);
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateWorkerPoolAsync(
        String resourceGroupName,
        String name,
        String workerPoolName,
        WorkerPoolInner workerPoolEnvelope,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWorkerPoolWithResponseAsync(
                resourceGroupName, name, workerPoolName, workerPoolEnvelope, context);
        return this
            .client
            .<WorkerPoolInner, WorkerPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), WorkerPoolInner.class, WorkerPoolInner.class, context);
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateWorkerPool(
        String resourceGroupName, String name, String workerPoolName, WorkerPoolInner workerPoolEnvelope) {
        return beginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope)
            .getSyncPoller();
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<WorkerPoolInner>, WorkerPoolInner> beginCreateOrUpdateWorkerPool(
        String resourceGroupName,
        String name,
        String workerPoolName,
        WorkerPoolInner workerPoolEnvelope,
        Context context) {
        return beginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> createOrUpdateWorkerPoolAsync(
        String resourceGroupName, String name, String workerPoolName, WorkerPoolInner workerPoolEnvelope) {
        return beginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerPoolInner> createOrUpdateWorkerPoolAsync(
        String resourceGroupName,
        String name,
        String workerPoolName,
        WorkerPoolInner workerPoolEnvelope,
        Context context) {
        return beginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner createOrUpdateWorkerPool(
        String resourceGroupName, String name, String workerPoolName, WorkerPoolInner workerPoolEnvelope) {
        return createOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).block();
    }

    /**
     * Create or update a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param workerPoolEnvelope Properties of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerPoolInner createOrUpdateWorkerPool(
        String resourceGroupName,
        String name,
        String workerPoolName,
        WorkerPoolInner workerPoolEnvelope,
        Context context) {
        return createOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, context)
            .block();
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getWorkerPoolSkusSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getWorkerPoolSkus(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<SkuInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getWorkerPoolSkusSinglePageAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPoolSkus(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInfoInner> getWorkerPoolSkusAsync(
        String resourceGroupName, String name, String workerPoolName) {
        return new PagedFlux<>(
            () -> getWorkerPoolSkusSinglePageAsync(resourceGroupName, name, workerPoolName),
            nextLink -> getWorkerPoolSkusNextSinglePageAsync(nextLink));
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInfoInner> getWorkerPoolSkusAsync(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedFlux<>(
            () -> getWorkerPoolSkusSinglePageAsync(resourceGroupName, name, workerPoolName, context),
            nextLink -> getWorkerPoolSkusNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInfoInner> getWorkerPoolSkus(String resourceGroupName, String name, String workerPoolName) {
        return new PagedIterable<>(getWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName));
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return available skus for scaling a worker pool.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInfoInner> getWorkerPoolSkus(
        String resourceGroupName, String name, String workerPoolName, Context context) {
        return new PagedIterable<>(getWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName, context));
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getWorkerPoolInstanceMetricsWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName, String instance, Boolean details, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getWorkerPoolInstanceMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            instance,
                            details,
                            filter,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getWorkerPoolInstanceMetricsWithResponseAsync(
        String resourceGroupName,
        String name,
        String workerPoolName,
        String instance,
        Boolean details,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPoolInstanceMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                instance,
                details,
                filter,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getWorkerPoolInstanceMetricsAsync(
        String resourceGroupName, String name, String workerPoolName, String instance, Boolean details, String filter) {
        return getWorkerPoolInstanceMetricsWithResponseAsync(
                resourceGroupName, name, workerPoolName, instance, details, filter)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getWorkerPoolInstanceMetricsAsync(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        final Boolean details = null;
        final String filter = null;
        return getWorkerPoolInstanceMetricsWithResponseAsync(
                resourceGroupName, name, workerPoolName, instance, details, filter)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getWorkerPoolInstanceMetrics(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        final Boolean details = null;
        final String filter = null;
        return getWorkerPoolInstanceMetricsAsync(resourceGroupName, name, workerPoolName, instance, details, filter)
            .block();
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param details Include instance details.
     * @param filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example:
     *     $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     *     endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getWorkerPoolInstanceMetricsWithResponse(
        String resourceGroupName,
        String name,
        String workerPoolName,
        String instance,
        Boolean details,
        String filter,
        Context context) {
        return getWorkerPoolInstanceMetricsWithResponseAsync(
                resourceGroupName, name, workerPoolName, instance, details, filter, context)
            .block();
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getWorkerPoolInstanceMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getWorkerPoolInstanceMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            workerPoolName,
                            instance,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getWorkerPoolInstanceMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name, String workerPoolName, String instance, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (workerPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerPoolName is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPoolInstanceMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                workerPoolName,
                instance,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getWorkerPoolInstanceMetricDefinitionsAsync(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        return getWorkerPoolInstanceMetricDefinitionsWithResponseAsync(
                resourceGroupName, name, workerPoolName, instance)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getWorkerPoolInstanceMetricDefinitions(
        String resourceGroupName, String name, String workerPoolName, String instance) {
        return getWorkerPoolInstanceMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, instance).block();
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param workerPoolName Name of worker pool.
     * @param instance Name of instance in the worker pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getWorkerPoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String workerPoolName, String instance, Context context) {
        return getWorkerPoolInstanceMetricDefinitionsWithResponseAsync(
                resourceGroupName, name, workerPoolName, instance, context)
            .block();
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @param details Include instance details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getMultiRolePoolInstanceMetricsWithResponseAsync(
        String resourceGroupName, String name, String instance, Boolean details) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiRolePoolInstanceMetrics(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            instance,
                            details,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @param details Include instance details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getMultiRolePoolInstanceMetricsWithResponseAsync(
        String resourceGroupName, String name, String instance, Boolean details, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePoolInstanceMetrics(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                instance,
                details,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @param details Include instance details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getMultiRolePoolInstanceMetricsAsync(
        String resourceGroupName, String name, String instance, Boolean details) {
        return getMultiRolePoolInstanceMetricsWithResponseAsync(resourceGroupName, name, instance, details)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getMultiRolePoolInstanceMetricsAsync(String resourceGroupName, String name, String instance) {
        final Boolean details = null;
        return getMultiRolePoolInstanceMetricsWithResponseAsync(resourceGroupName, name, instance, details)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getMultiRolePoolInstanceMetrics(String resourceGroupName, String name, String instance) {
        final Boolean details = null;
        return getMultiRolePoolInstanceMetricsAsync(resourceGroupName, name, instance, details).block();
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool.
     * @param details Include instance details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getMultiRolePoolInstanceMetricsWithResponse(
        String resourceGroupName, String name, String instance, Boolean details, Context context) {
        return getMultiRolePoolInstanceMetricsWithResponseAsync(resourceGroupName, name, instance, details, context)
            .block();
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getMultiRolePoolInstanceMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name, String instance) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiRolePoolInstanceMetricDefinitions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            name,
                            instance,
                            this.client.getSubscriptionId(),
                            apiVersion,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Object>> getMultiRolePoolInstanceMetricDefinitionsWithResponseAsync(
        String resourceGroupName, String name, String instance, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (instance == null) {
            return Mono.error(new IllegalArgumentException("Parameter instance is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json, application/xml, text/xml";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePoolInstanceMetricDefinitions(
                this.client.getEndpoint(),
                resourceGroupName,
                name,
                instance,
                this.client.getSubscriptionId(),
                apiVersion,
                accept,
                context);
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Object> getMultiRolePoolInstanceMetricDefinitionsAsync(
        String resourceGroupName, String name, String instance) {
        return getMultiRolePoolInstanceMetricDefinitionsWithResponseAsync(resourceGroupName, name, instance)
            .flatMap(
                (Response<Object> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object getMultiRolePoolInstanceMetricDefinitions(String resourceGroupName, String name, String instance) {
        return getMultiRolePoolInstanceMetricDefinitionsAsync(resourceGroupName, name, instance).block();
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param instance Name of instance in the multiRole pool&amp;gt;.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service
     *     Environment).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getMultiRolePoolInstanceMetricDefinitionsWithResponse(
        String resourceGroupName, String name, String instance, Context context) {
        return getMultiRolePoolInstanceMetricDefinitionsWithResponseAsync(resourceGroupName, name, instance, context)
            .block();
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> suspendHostingEnvironmentSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> {
                    Mono<Response<Flux<ByteBuffer>>> mono =
                        service
                            .suspendHostingEnvironment(
                                this.client.getEndpoint(),
                                resourceGroupName,
                                name,
                                this.client.getSubscriptionId(),
                                apiVersion,
                                accept,
                                context)
                            .cache();
                    return Mono
                        .zip(
                            mono,
                            this
                                .client
                                .<SiteCollection, SiteCollection>getLroResult(
                                    mono,
                                    this.client.getHttpPipeline(),
                                    SiteCollection.class,
                                    SiteCollection.class,
                                    Context.NONE)
                                .last()
                                .flatMap(this.client::getLroFinalResultOrError));
                })
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getT1().getRequest(),
                        res.getT1().getStatusCode(),
                        res.getT1().getHeaders(),
                        res.getT2().value(),
                        res.getT2().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> suspendHostingEnvironmentSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            service
                .suspendHostingEnvironment(
                    this.client.getEndpoint(),
                    resourceGroupName,
                    name,
                    this.client.getSubscriptionId(),
                    apiVersion,
                    accept,
                    context)
                .cache();
        return Mono
            .zip(
                mono,
                this
                    .client
                    .<SiteCollection, SiteCollection>getLroResult(
                        mono, this.client.getHttpPipeline(), SiteCollection.class, SiteCollection.class, context)
                    .last()
                    .flatMap(this.client::getLroFinalResultOrError))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getT1().getRequest(),
                        res.getT1().getStatusCode(),
                        res.getT1().getHeaders(),
                        res.getT2().value(),
                        res.getT2().nextLink(),
                        null));
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> suspendHostingEnvironmentAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> suspendHostingEnvironmentSinglePageAsync(resourceGroupName, name),
            nextLink -> suspendHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> suspendHostingEnvironmentAsync(
        String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> suspendHostingEnvironmentSinglePageAsync(resourceGroupName, name, context),
            nextLink -> suspendHostingEnvironmentNextSinglePageAsync(nextLink, context));
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> suspendHostingEnvironment(String resourceGroupName, String name) {
        return new PagedIterable<>(suspendHostingEnvironmentAsync(resourceGroupName, name));
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> suspendHostingEnvironment(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(suspendHostingEnvironmentAsync(resourceGroupName, name, context));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> resumeHostingEnvironmentSinglePageAsync(
        String resourceGroupName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> {
                    Mono<Response<Flux<ByteBuffer>>> mono =
                        service
                            .resumeHostingEnvironment(
                                this.client.getEndpoint(),
                                resourceGroupName,
                                name,
                                this.client.getSubscriptionId(),
                                apiVersion,
                                accept,
                                context)
                            .cache();
                    return Mono
                        .zip(
                            mono,
                            this
                                .client
                                .<SiteCollection, SiteCollection>getLroResult(
                                    mono,
                                    this.client.getHttpPipeline(),
                                    SiteCollection.class,
                                    SiteCollection.class,
                                    Context.NONE)
                                .last()
                                .flatMap(this.client::getLroFinalResultOrError));
                })
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getT1().getRequest(),
                        res.getT1().getStatusCode(),
                        res.getT1().getHeaders(),
                        res.getT2().value(),
                        res.getT2().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> resumeHostingEnvironmentSinglePageAsync(
        String resourceGroupName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2015-08-01";
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            service
                .resumeHostingEnvironment(
                    this.client.getEndpoint(),
                    resourceGroupName,
                    name,
                    this.client.getSubscriptionId(),
                    apiVersion,
                    accept,
                    context)
                .cache();
        return Mono
            .zip(
                mono,
                this
                    .client
                    .<SiteCollection, SiteCollection>getLroResult(
                        mono, this.client.getHttpPipeline(), SiteCollection.class, SiteCollection.class, context)
                    .last()
                    .flatMap(this.client::getLroFinalResultOrError))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getT1().getRequest(),
                        res.getT1().getStatusCode(),
                        res.getT1().getHeaders(),
                        res.getT2().value(),
                        res.getT2().nextLink(),
                        null));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> resumeHostingEnvironmentAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> resumeHostingEnvironmentSinglePageAsync(resourceGroupName, name),
            nextLink -> resumeHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SiteInner> resumeHostingEnvironmentAsync(String resourceGroupName, String name, Context context) {
        return new PagedFlux<>(
            () -> resumeHostingEnvironmentSinglePageAsync(resourceGroupName, name, context),
            nextLink -> resumeHostingEnvironmentNextSinglePageAsync(nextLink, context));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> resumeHostingEnvironment(String resourceGroupName, String name) {
        return new PagedIterable<>(resumeHostingEnvironmentAsync(resourceGroupName, name));
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param resourceGroupName Name of resource group.
     * @param name Name of hostingEnvironment (App Service Environment).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> resumeHostingEnvironment(String resourceGroupName, String name, Context context) {
        return new PagedIterable<>(resumeHostingEnvironmentAsync(resourceGroupName, name, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of stamp capacities.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StampCapacityInner>> getHostingEnvironmentCapacitiesNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getHostingEnvironmentCapacitiesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<StampCapacityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of stamp capacities.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StampCapacityInner>> getHostingEnvironmentCapacitiesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentCapacitiesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of hosting environments (App Service Environments).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> getHostingEnvironmentsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getHostingEnvironmentsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HostingEnvironmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of hosting environments (App Service Environments).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HostingEnvironmentInner>> getHostingEnvironmentsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMetricsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getHostingEnvironmentMetricsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMetricsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMetricsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getHostingEnvironmentUsagesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getHostingEnvironmentUsagesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CsmUsageQuotaInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of csm usage quotas.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CsmUsageQuotaInner>> getHostingEnvironmentUsagesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentUsagesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMultiRoleMetricsNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleMetricsNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentMultiRoleMetricsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleMetricsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentWebWorkerMetricsNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerMetricsNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceMetricInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric responses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceMetricInner>> getHostingEnvironmentWebWorkerMetricsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerMetricsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>>
        getHostingEnvironmentMultiRoleMetricDefinitionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleMetricDefinitionsNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>>
        getHostingEnvironmentMultiRoleMetricDefinitionsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>>
        getHostingEnvironmentWebWorkerMetricDefinitionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerMetricDefinitionsNext(
                            nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MetricDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of metric definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MetricDefinitionInner>>
        getHostingEnvironmentWebWorkerMetricDefinitionsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of usages.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentMultiRoleUsagesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentMultiRoleUsagesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<UsageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of usages.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentMultiRoleUsagesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentMultiRoleUsagesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of usages.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentWebWorkerUsagesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebWorkerUsagesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<UsageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of usages.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UsageInner>> getHostingEnvironmentWebWorkerUsagesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebWorkerUsagesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getHostingEnvironmentSitesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getHostingEnvironmentSitesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> getHostingEnvironmentSitesNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentSitesNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentWebHostingPlansNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getHostingEnvironmentWebHostingPlansNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentWebHostingPlansNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentWebHostingPlansNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentServerFarmsNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getHostingEnvironmentServerFarmsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ServerFarmWithRichSkuInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of serverfarms.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerFarmWithRichSkuInner>> getHostingEnvironmentServerFarmsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getHostingEnvironmentServerFarmsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getMultiRolePoolsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getMultiRolePoolsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WorkerPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getMultiRolePoolsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePoolsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SkuInfos.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getMultiRolePoolSkusNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.getMultiRolePoolSkusNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SkuInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SkuInfos.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getMultiRolePoolSkusNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getMultiRolePoolSkusNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getWorkerPoolsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getWorkerPoolsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WorkerPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of worker pools.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerPoolInner>> getWorkerPoolsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPoolsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SkuInfos.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getWorkerPoolSkusNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.getWorkerPoolSkusNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SkuInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SkuInfos.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInfoInner>> getWorkerPoolSkusNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .getWorkerPoolSkusNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> suspendHostingEnvironmentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.suspendHostingEnvironmentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> suspendHostingEnvironmentNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .suspendHostingEnvironmentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> resumeHostingEnvironmentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context -> service.resumeHostingEnvironmentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SiteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SiteInner>> resumeHostingEnvironmentNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .resumeHostingEnvironmentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
