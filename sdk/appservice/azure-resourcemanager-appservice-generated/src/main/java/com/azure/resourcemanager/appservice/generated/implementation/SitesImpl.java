// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.SitesClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupItemInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionStringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeletedSiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeploymentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostnameBindingInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MetricDefinitionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NetworkFeaturesInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RelayServiceConnectionEntityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ResourceMetricInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteAuthSettingsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteCloneabilityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInstanceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteLogsConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteSourceControlInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotConfigNamesResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotDifferenceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.models.BackupItem;
import com.azure.resourcemanager.appservice.generated.models.BackupRequest;
import com.azure.resourcemanager.appservice.generated.models.ConnectionStringDictionary;
import com.azure.resourcemanager.appservice.generated.models.CsmPublishingProfileOptions;
import com.azure.resourcemanager.appservice.generated.models.CsmSiteRecoveryEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmSlotEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuota;
import com.azure.resourcemanager.appservice.generated.models.DeletedSite;
import com.azure.resourcemanager.appservice.generated.models.Deployment;
import com.azure.resourcemanager.appservice.generated.models.HostnameBinding;
import com.azure.resourcemanager.appservice.generated.models.MetricDefinition;
import com.azure.resourcemanager.appservice.generated.models.NetworkFeatures;
import com.azure.resourcemanager.appservice.generated.models.PremierAddOnRequest;
import com.azure.resourcemanager.appservice.generated.models.RelayServiceConnectionEntity;
import com.azure.resourcemanager.appservice.generated.models.ResourceMetric;
import com.azure.resourcemanager.appservice.generated.models.RestoreRequest;
import com.azure.resourcemanager.appservice.generated.models.RestoreResponse;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.SiteAuthSettings;
import com.azure.resourcemanager.appservice.generated.models.SiteCloneability;
import com.azure.resourcemanager.appservice.generated.models.SiteConfig;
import com.azure.resourcemanager.appservice.generated.models.SiteInstance;
import com.azure.resourcemanager.appservice.generated.models.SiteLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.SiteSourceControl;
import com.azure.resourcemanager.appservice.generated.models.Sites;
import com.azure.resourcemanager.appservice.generated.models.SlotConfigNamesResource;
import com.azure.resourcemanager.appservice.generated.models.SlotDifference;
import com.azure.resourcemanager.appservice.generated.models.StringDictionary;
import com.azure.resourcemanager.appservice.generated.models.User;
import com.azure.resourcemanager.appservice.generated.models.VnetGateway;
import com.azure.resourcemanager.appservice.generated.models.VnetInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;

public final class SitesImpl implements Sites {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SitesImpl.class);

    private final SitesClient innerClient;

    private final WebSiteManager serviceManager;

    public SitesImpl(SitesClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public VnetInfo getSiteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        VnetInfoInner inner = this.serviceClient().getSiteVnetConnectionSlot(resourceGroupName, name, vnetName, slot);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> getSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        Response<VnetInfoInner> inner =
            this
                .serviceClient()
                .getSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        return this.serviceClient().deleteSiteVnetConnectionSlot(resourceGroupName, name, vnetName, slot);
    }

    public Response<Object> deleteSiteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    public VnetInfo getSiteVnetConnection(String resourceGroupName, String name, String vnetName) {
        VnetInfoInner inner = this.serviceClient().getSiteVnetConnection(resourceGroupName, name, vnetName);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> getSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        Response<VnetInfoInner> inner =
            this.serviceClient().getSiteVnetConnectionWithResponse(resourceGroupName, name, vnetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetInfo createOrUpdateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        VnetInfoInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteVnetConnection(resourceGroupName, name, vnetName, connectionEnvelope);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> createOrUpdateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        Response<VnetInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteVnetConnectionWithResponse(
                    resourceGroupName, name, vnetName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteVnetConnection(String resourceGroupName, String name, String vnetName) {
        return this.serviceClient().deleteSiteVnetConnection(resourceGroupName, name, vnetName);
    }

    public Response<Object> deleteSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        return this.serviceClient().deleteSiteVnetConnectionWithResponse(resourceGroupName, name, vnetName, context);
    }

    public VnetInfo updateSiteVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        VnetInfoInner inner =
            this.serviceClient().updateSiteVnetConnection(resourceGroupName, name, vnetName, connectionEnvelope);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> updateSiteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        Response<VnetInfoInner> inner =
            this
                .serviceClient()
                .updateSiteVnetConnectionWithResponse(resourceGroupName, name, vnetName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkFeatures getSiteNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot) {
        NetworkFeaturesInner inner =
            this.serviceClient().getSiteNetworkFeaturesSlot(resourceGroupName, name, view, slot);
        if (inner != null) {
            return new NetworkFeaturesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkFeatures> getSiteNetworkFeaturesSlotWithResponse(
        String resourceGroupName, String name, String view, String slot, Context context) {
        Response<NetworkFeaturesInner> inner =
            this.serviceClient().getSiteNetworkFeaturesSlotWithResponse(resourceGroupName, name, view, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkFeaturesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkFeatures getSiteNetworkFeatures(String resourceGroupName, String name, String view) {
        NetworkFeaturesInner inner = this.serviceClient().getSiteNetworkFeatures(resourceGroupName, name, view);
        if (inner != null) {
            return new NetworkFeaturesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkFeatures> getSiteNetworkFeaturesWithResponse(
        String resourceGroupName, String name, String view, Context context) {
        Response<NetworkFeaturesInner> inner =
            this.serviceClient().getSiteNetworkFeaturesWithResponse(resourceGroupName, name, view, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkFeaturesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getSiteOperationSlot(String resourceGroupName, String name, String operationId, String slot) {
        return this.serviceClient().getSiteOperationSlot(resourceGroupName, name, operationId, slot);
    }

    public Response<Object> getSiteOperationSlotWithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        return this
            .serviceClient()
            .getSiteOperationSlotWithResponse(resourceGroupName, name, operationId, slot, context);
    }

    public Object getSiteOperation(String resourceGroupName, String name, String operationId) {
        return this.serviceClient().getSiteOperation(resourceGroupName, name, operationId);
    }

    public Response<Object> getSiteOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return this.serviceClient().getSiteOperationWithResponse(resourceGroupName, name, operationId, context);
    }

    public Object swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return this.serviceClient().swapSlotWithProduction(resourceGroupName, name, slotSwapEntity);
    }

    public Object swapSlotWithProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return this.serviceClient().swapSlotWithProduction(resourceGroupName, name, slotSwapEntity, context);
    }

    public Object swapSlotsSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return this.serviceClient().swapSlotsSlot(resourceGroupName, name, slot, slotSwapEntity);
    }

    public Object swapSlotsSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return this.serviceClient().swapSlotsSlot(resourceGroupName, name, slot, slotSwapEntity, context);
    }

    public PagedIterable<SlotDifference> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().getSlotsDifferencesFromProduction(resourceGroupName, name, slotSwapEntity);
        return inner.mapPage(inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<SlotDifference> getSlotsDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().getSlotsDifferencesFromProduction(resourceGroupName, name, slotSwapEntity, context);
        return inner.mapPage(inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<SlotDifference> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().getSlotsDifferencesSlot(resourceGroupName, name, slot, slotSwapEntity);
        return inner.mapPage(inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<SlotDifference> getSlotsDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().getSlotsDifferencesSlot(resourceGroupName, name, slot, slotSwapEntity, context);
        return inner.mapPage(inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public Object applySlotConfigToProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return this.serviceClient().applySlotConfigToProduction(resourceGroupName, name, slotSwapEntity);
    }

    public Response<Object> applySlotConfigToProductionWithResponse(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return this
            .serviceClient()
            .applySlotConfigToProductionWithResponse(resourceGroupName, name, slotSwapEntity, context);
    }

    public Object applySlotConfigSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return this.serviceClient().applySlotConfigSlot(resourceGroupName, name, slot, slotSwapEntity);
    }

    public Response<Object> applySlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return this
            .serviceClient()
            .applySlotConfigSlotWithResponse(resourceGroupName, name, slot, slotSwapEntity, context);
    }

    public Object resetProductionSlotConfig(String resourceGroupName, String name) {
        return this.serviceClient().resetProductionSlotConfig(resourceGroupName, name);
    }

    public Response<Object> resetProductionSlotConfigWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().resetProductionSlotConfigWithResponse(resourceGroupName, name, context);
    }

    public Object resetSlotConfigSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().resetSlotConfigSlot(resourceGroupName, name, slot);
    }

    public Response<Object> resetSlotConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().resetSlotConfigSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public SlotConfigNamesResource getSlotConfigNames(String resourceGroupName, String name) {
        SlotConfigNamesResourceInner inner = this.serviceClient().getSlotConfigNames(resourceGroupName, name);
        if (inner != null) {
            return new SlotConfigNamesResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SlotConfigNamesResource> getSlotConfigNamesWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SlotConfigNamesResourceInner> inner =
            this.serviceClient().getSlotConfigNamesWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SlotConfigNamesResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SlotConfigNamesResource updateSlotConfigNames(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        SlotConfigNamesResourceInner inner =
            this.serviceClient().updateSlotConfigNames(resourceGroupName, name, slotConfigNames);
        if (inner != null) {
            return new SlotConfigNamesResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SlotConfigNamesResource> updateSlotConfigNamesWithResponse(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames, Context context) {
        Response<SlotConfigNamesResourceInner> inner =
            this.serviceClient().updateSlotConfigNamesWithResponse(resourceGroupName, name, slotConfigNames, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SlotConfigNamesResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Site> getSiteSlots(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().getSiteSlots(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> getSiteSlots(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().getSiteSlots(resourceGroupName, name, propertiesToInclude, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SiteInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listByResourceGroup(
        String resourceGroupName,
        String propertiesToInclude,
        String includeSiteTypes,
        Boolean includeSlots,
        Context context) {
        PagedIterable<SiteInner> inner =
            this
                .serviceClient()
                .listByResourceGroup(resourceGroupName, propertiesToInclude, includeSiteTypes, includeSlots, context);
        return inner.mapPage(inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Site getByResourceGroup(String resourceGroupName, String name) {
        SiteInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> getByResourceGroupWithResponse(
        String resourceGroupName, String name, String propertiesToInclude, Context context) {
        Response<SiteInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, propertiesToInclude, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object delete(String resourceGroupName, String name) {
        return this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Object> deleteWithResponse(
        String resourceGroupName,
        String name,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName,
                name,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                context);
    }

    public Site getSiteSlot(String resourceGroupName, String name, String slot) {
        SiteInner inner = this.serviceClient().getSiteSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> getSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, String propertiesToInclude, Context context) {
        Response<SiteInner> inner =
            this.serviceClient().getSiteSlotWithResponse(resourceGroupName, name, slot, propertiesToInclude, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds) {
        SiteInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteSlot(
                    resourceGroupName,
                    name,
                    slot,
                    siteEnvelope,
                    skipDnsRegistration,
                    skipCustomDomainVerification,
                    forceDnsRegistration,
                    ttlInSeconds);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site createOrUpdateSiteSlot(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        SiteInner inner = this.serviceClient().createOrUpdateSiteSlot(resourceGroupName, name, slot, siteEnvelope);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site createOrUpdateSiteSlot(
        String resourceGroupName,
        String name,
        String slot,
        SiteInner siteEnvelope,
        String skipDnsRegistration,
        String skipCustomDomainVerification,
        String forceDnsRegistration,
        String ttlInSeconds,
        Context context) {
        SiteInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteSlot(
                    resourceGroupName,
                    name,
                    slot,
                    siteEnvelope,
                    skipDnsRegistration,
                    skipCustomDomainVerification,
                    forceDnsRegistration,
                    ttlInSeconds,
                    context);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object deleteSiteSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().deleteSiteSlot(resourceGroupName, name, slot);
    }

    public Response<Object> deleteSiteSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        return this
            .serviceClient()
            .deleteSiteSlotWithResponse(
                resourceGroupName,
                name,
                slot,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                context);
    }

    public SiteCloneability isSiteCloneable(String resourceGroupName, String name) {
        SiteCloneabilityInner inner = this.serviceClient().isSiteCloneable(resourceGroupName, name);
        if (inner != null) {
            return new SiteCloneabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteCloneability> isSiteCloneableWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteCloneabilityInner> inner =
            this.serviceClient().isSiteCloneableWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteCloneabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteCloneability isSiteCloneableSlot(String resourceGroupName, String name, String slot) {
        SiteCloneabilityInner inner = this.serviceClient().isSiteCloneableSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteCloneabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteCloneability> isSiteCloneableSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteCloneabilityInner> inner =
            this.serviceClient().isSiteCloneableSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteCloneabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site recoverSite(String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity) {
        SiteInner inner = this.serviceClient().recoverSite(resourceGroupName, name, recoveryEntity);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site recoverSite(
        String resourceGroupName, String name, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        SiteInner inner = this.serviceClient().recoverSite(resourceGroupName, name, recoveryEntity, context);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site recoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity) {
        SiteInner inner = this.serviceClient().recoverSiteSlot(resourceGroupName, name, slot, recoveryEntity);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site recoverSiteSlot(
        String resourceGroupName, String name, String slot, CsmSiteRecoveryEntity recoveryEntity, Context context) {
        SiteInner inner = this.serviceClient().recoverSiteSlot(resourceGroupName, name, slot, recoveryEntity, context);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object getSiteSnapshots(String resourceGroupName, String name) {
        return this.serviceClient().getSiteSnapshots(resourceGroupName, name);
    }

    public Response<Object> getSiteSnapshotsWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getSiteSnapshotsWithResponse(resourceGroupName, name, context);
    }

    public Object getSiteSnapshotsSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().getSiteSnapshotsSlot(resourceGroupName, name, slot);
    }

    public Response<Object> getSiteSnapshotsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().getSiteSnapshotsSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public PagedIterable<DeletedSite> getDeletedSites(String resourceGroupName) {
        PagedIterable<DeletedSiteInner> inner = this.serviceClient().getDeletedSites(resourceGroupName);
        return inner.mapPage(inner1 -> new DeletedSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<DeletedSite> getDeletedSites(
        String resourceGroupName, String propertiesToInclude, String includeSiteTypes, Context context) {
        PagedIterable<DeletedSiteInner> inner =
            this.serviceClient().getDeletedSites(resourceGroupName, propertiesToInclude, includeSiteTypes, context);
        return inner.mapPage(inner1 -> new DeletedSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getDeployments(String resourceGroupName, String name) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().getDeployments(resourceGroupName, name);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getDeployments(String resourceGroupName, String name, Context context) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().getDeployments(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getDeploymentsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().getDeploymentsSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getDeploymentsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().getDeploymentsSlot(resourceGroupName, name, slot, context);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getInstanceDeployments(String resourceGroupName, String name, String instanceId) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().getInstanceDeployments(resourceGroupName, name, instanceId);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getInstanceDeployments(
        String resourceGroupName, String name, String instanceId, Context context) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().getInstanceDeployments(resourceGroupName, name, instanceId, context);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().getInstanceDeploymentsSlot(resourceGroupName, name, slot, instanceId);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> getInstanceDeploymentsSlot(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().getInstanceDeploymentsSlot(resourceGroupName, name, slot, instanceId, context);
        return inner.mapPage(inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public Deployment getInstanceDeployment(String resourceGroupName, String name, String id, String instanceId) {
        DeploymentInner inner = this.serviceClient().getInstanceDeployment(resourceGroupName, name, id, instanceId);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().getInstanceDeploymentWithResponse(resourceGroupName, name, id, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteInstanceDeployment(String resourceGroupName, String name, String id, String instanceId) {
        return this.serviceClient().deleteInstanceDeployment(resourceGroupName, name, id, instanceId);
    }

    public Response<Object> deleteInstanceDeploymentWithResponse(
        String resourceGroupName, String name, String id, String instanceId, Context context) {
        return this
            .serviceClient()
            .deleteInstanceDeploymentWithResponse(resourceGroupName, name, id, instanceId, context);
    }

    public Deployment getDeployment(String resourceGroupName, String name, String id) {
        DeploymentInner inner = this.serviceClient().getDeployment(resourceGroupName, name, id);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().getDeploymentWithResponse(resourceGroupName, name, id, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Deployment createDeployment(String resourceGroupName, String name, String id, DeploymentInner deployment) {
        DeploymentInner inner = this.serviceClient().createDeployment(resourceGroupName, name, id, deployment);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> createDeploymentWithResponse(
        String resourceGroupName, String name, String id, DeploymentInner deployment, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().createDeploymentWithResponse(resourceGroupName, name, id, deployment, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteDeployment(String resourceGroupName, String name, String id) {
        return this.serviceClient().deleteDeployment(resourceGroupName, name, id);
    }

    public Response<Object> deleteDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        return this.serviceClient().deleteDeploymentWithResponse(resourceGroupName, name, id, context);
    }

    public Deployment getDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        DeploymentInner inner = this.serviceClient().getDeploymentSlot(resourceGroupName, name, id, slot);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().getDeploymentSlotWithResponse(resourceGroupName, name, id, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Deployment createDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        DeploymentInner inner =
            this.serviceClient().createDeploymentSlot(resourceGroupName, name, id, slot, deployment);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> createDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment, Context context) {
        Response<DeploymentInner> inner =
            this
                .serviceClient()
                .createDeploymentSlotWithResponse(resourceGroupName, name, id, slot, deployment, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        return this.serviceClient().deleteDeploymentSlot(resourceGroupName, name, id, slot);
    }

    public Response<Object> deleteDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        return this.serviceClient().deleteDeploymentSlotWithResponse(resourceGroupName, name, id, slot, context);
    }

    public Deployment getInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        DeploymentInner inner =
            this.serviceClient().getInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        Response<DeploymentInner> inner =
            this
                .serviceClient()
                .getInstanceDeploymentSlotWithResponse(resourceGroupName, name, id, slot, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Deployment createInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId, DeploymentInner deployment) {
        DeploymentInner inner =
            this
                .serviceClient()
                .createInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, deployment);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> createInstanceDeploymentSlotWithResponse(
        String resourceGroupName,
        String name,
        String id,
        String slot,
        String instanceId,
        DeploymentInner deployment,
        Context context) {
        Response<DeploymentInner> inner =
            this
                .serviceClient()
                .createInstanceDeploymentSlotWithResponse(
                    resourceGroupName, name, id, slot, instanceId, deployment, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteInstanceDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, String instanceId) {
        return this.serviceClient().deleteInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId);
    }

    public Response<Object> deleteInstanceDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, String instanceId, Context context) {
        return this
            .serviceClient()
            .deleteInstanceDeploymentSlotWithResponse(resourceGroupName, name, id, slot, instanceId, context);
    }

    public PagedIterable<SiteInstance> getSiteInstanceIdentifiers(String resourceGroupName, String name) {
        PagedIterable<SiteInstanceInner> inner =
            this.serviceClient().getSiteInstanceIdentifiers(resourceGroupName, name);
        return inner.mapPage(inner1 -> new SiteInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteInstance> getSiteInstanceIdentifiers(
        String resourceGroupName, String name, Context context) {
        PagedIterable<SiteInstanceInner> inner =
            this.serviceClient().getSiteInstanceIdentifiers(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new SiteInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteInstance> getSiteInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<SiteInstanceInner> inner =
            this.serviceClient().getSiteInstanceIdentifiersSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new SiteInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteInstance> getSiteInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SiteInstanceInner> inner =
            this.serviceClient().getSiteInstanceIdentifiersSlot(resourceGroupName, name, slot, context);
        return inner.mapPage(inner1 -> new SiteInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> getSiteHostnameBindings(String resourceGroupName, String name) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().getSiteHostnameBindings(resourceGroupName, name);
        return inner.mapPage(inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> getSiteHostnameBindings(
        String resourceGroupName, String name, Context context) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().getSiteHostnameBindings(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> getSiteHostnameBindingsSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().getSiteHostnameBindingsSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> getSiteHostnameBindingsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().getSiteHostnameBindingsSlot(resourceGroupName, name, slot, context);
        return inner.mapPage(inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public HostnameBinding getSiteHostnameBinding(String resourceGroupName, String name, String hostname) {
        HostnameBindingInner inner = this.serviceClient().getSiteHostnameBinding(resourceGroupName, name, hostname);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> getSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        Response<HostnameBindingInner> inner =
            this.serviceClient().getSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteHostnameBinding(String resourceGroupName, String name, String hostname) {
        return this.serviceClient().deleteSiteHostnameBinding(resourceGroupName, name, hostname);
    }

    public Response<Object> deleteSiteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        return this.serviceClient().deleteSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public HostnameBinding getSiteHostnameBindingSlot(
        String resourceGroupName, String name, String slot, String hostname) {
        HostnameBindingInner inner =
            this.serviceClient().getSiteHostnameBindingSlot(resourceGroupName, name, slot, hostname);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> getSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        Response<HostnameBindingInner> inner =
            this
                .serviceClient()
                .getSiteHostnameBindingSlotWithResponse(resourceGroupName, name, slot, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HostnameBinding createOrUpdateSiteHostnameBindingSlot(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding) {
        HostnameBindingInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteHostnameBindingSlot(resourceGroupName, name, hostname, slot, hostnameBinding);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> createOrUpdateSiteHostnameBindingSlotWithResponse(
        String resourceGroupName,
        String name,
        String hostname,
        String slot,
        HostnameBindingInner hostnameBinding,
        Context context) {
        Response<HostnameBindingInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteHostnameBindingSlotWithResponse(
                    resourceGroupName, name, hostname, slot, hostnameBinding, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname) {
        return this.serviceClient().deleteSiteHostnameBindingSlot(resourceGroupName, name, slot, hostname);
    }

    public Response<Object> deleteSiteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        return this
            .serviceClient()
            .deleteSiteHostnameBindingSlotWithResponse(resourceGroupName, name, slot, hostname, context);
    }

    public SiteConfig getSiteConfig(String resourceGroupName, String name) {
        SiteConfigInner inner = this.serviceClient().getSiteConfig(resourceGroupName, name);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> getSiteConfigWithResponse(String resourceGroupName, String name, Context context) {
        Response<SiteConfigInner> inner =
            this.serviceClient().getSiteConfigWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfig createOrUpdateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig) {
        SiteConfigInner inner = this.serviceClient().createOrUpdateSiteConfig(resourceGroupName, name, siteConfig);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> createOrUpdateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        Response<SiteConfigInner> inner =
            this.serviceClient().createOrUpdateSiteConfigWithResponse(resourceGroupName, name, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfig updateSiteConfig(String resourceGroupName, String name, SiteConfigInner siteConfig) {
        SiteConfigInner inner = this.serviceClient().updateSiteConfig(resourceGroupName, name, siteConfig);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> updateSiteConfigWithResponse(
        String resourceGroupName, String name, SiteConfigInner siteConfig, Context context) {
        Response<SiteConfigInner> inner =
            this.serviceClient().updateSiteConfigWithResponse(resourceGroupName, name, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfig getSiteConfigSlot(String resourceGroupName, String name, String slot) {
        SiteConfigInner inner = this.serviceClient().getSiteConfigSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> getSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteConfigInner> inner =
            this.serviceClient().getSiteConfigSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfig createOrUpdateSiteConfigSlot(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        SiteConfigInner inner =
            this.serviceClient().createOrUpdateSiteConfigSlot(resourceGroupName, name, slot, siteConfig);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> createOrUpdateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        Response<SiteConfigInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteConfigSlotWithResponse(resourceGroupName, name, slot, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfig updateSiteConfigSlot(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig) {
        SiteConfigInner inner = this.serviceClient().updateSiteConfigSlot(resourceGroupName, name, slot, siteConfig);
        if (inner != null) {
            return new SiteConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfig> updateSiteConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigInner siteConfig, Context context) {
        Response<SiteConfigInner> inner =
            this.serviceClient().updateSiteConfigSlotWithResponse(resourceGroupName, name, slot, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl getSiteSourceControl(String resourceGroupName, String name) {
        SiteSourceControlInner inner = this.serviceClient().getSiteSourceControl(resourceGroupName, name);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> getSiteSourceControlWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteSourceControlInner> inner =
            this.serviceClient().getSiteSourceControlWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().createOrUpdateSiteSourceControl(resourceGroupName, name, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> createOrUpdateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteSourceControlWithResponse(resourceGroupName, name, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteSourceControl(String resourceGroupName, String name) {
        return this.serviceClient().deleteSiteSourceControl(resourceGroupName, name);
    }

    public Response<Object> deleteSiteSourceControlWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteSiteSourceControlWithResponse(resourceGroupName, name, context);
    }

    public SiteSourceControl updateSiteSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().updateSiteSourceControl(resourceGroupName, name, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> updateSiteSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this
                .serviceClient()
                .updateSiteSourceControlWithResponse(resourceGroupName, name, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl getSiteSourceControlSlot(String resourceGroupName, String name, String slot) {
        SiteSourceControlInner inner = this.serviceClient().getSiteSourceControlSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> getSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteSourceControlInner> inner =
            this.serviceClient().getSiteSourceControlSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().createOrUpdateSiteSourceControlSlot(resourceGroupName, name, slot, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> createOrUpdateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteSourceControlSlotWithResponse(
                    resourceGroupName, name, slot, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteSourceControlSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().deleteSiteSourceControlSlot(resourceGroupName, name, slot);
    }

    public Response<Object> deleteSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().deleteSiteSourceControlSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public SiteSourceControl updateSiteSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().updateSiteSourceControlSlot(resourceGroupName, name, slot, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> updateSiteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this
                .serviceClient()
                .updateSiteSourceControlSlotWithResponse(resourceGroupName, name, slot, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listSiteAppSettingsSlot(String resourceGroupName, String name, String slot) {
        StringDictionaryInner inner = this.serviceClient().listSiteAppSettingsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listSiteAppSettingsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listSiteAppSettings(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listSiteAppSettings(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listSiteAppSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listSiteAppSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateSiteAppSettings(
        String resourceGroupName, String name, StringDictionaryInner appSettings) {
        StringDictionaryInner inner = this.serviceClient().updateSiteAppSettings(resourceGroupName, name, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateSiteAppSettingsWithResponse(
        String resourceGroupName, String name, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateSiteAppSettingsWithResponse(resourceGroupName, name, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateSiteAppSettingsSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        StringDictionaryInner inner =
            this.serviceClient().updateSiteAppSettingsSlot(resourceGroupName, name, slot, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateSiteAppSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner =
            this
                .serviceClient()
                .updateSiteAppSettingsSlotWithResponse(resourceGroupName, name, slot, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary listSiteConnectionStrings(String resourceGroupName, String name) {
        ConnectionStringDictionaryInner inner = this.serviceClient().listSiteConnectionStrings(resourceGroupName, name);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> listSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this.serviceClient().listSiteConnectionStringsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary listSiteConnectionStringsSlot(
        String resourceGroupName, String name, String slot) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().listSiteConnectionStringsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> listSiteConnectionStringsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this.serviceClient().listSiteConnectionStringsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary updateSiteConnectionStrings(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().updateSiteConnectionStrings(resourceGroupName, name, connectionStrings);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> updateSiteConnectionStringsWithResponse(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this
                .serviceClient()
                .updateSiteConnectionStringsWithResponse(resourceGroupName, name, connectionStrings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary updateSiteConnectionStringsSlot(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().updateSiteConnectionStringsSlot(resourceGroupName, name, slot, connectionStrings);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> updateSiteConnectionStringsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        ConnectionStringDictionaryInner connectionStrings,
        Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this
                .serviceClient()
                .updateSiteConnectionStringsSlotWithResponse(resourceGroupName, name, slot, connectionStrings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings listSiteAuthSettings(String resourceGroupName, String name) {
        SiteAuthSettingsInner inner = this.serviceClient().listSiteAuthSettings(resourceGroupName, name);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> listSiteAuthSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().listSiteAuthSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings listSiteAuthSettingsSlot(String resourceGroupName, String name, String slot) {
        SiteAuthSettingsInner inner = this.serviceClient().listSiteAuthSettingsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> listSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().listSiteAuthSettingsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings updateSiteAuthSettings(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        SiteAuthSettingsInner inner =
            this.serviceClient().updateSiteAuthSettings(resourceGroupName, name, siteAuthSettings);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> updateSiteAuthSettingsWithResponse(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().updateSiteAuthSettingsWithResponse(resourceGroupName, name, siteAuthSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings updateSiteAuthSettingsSlot(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        SiteAuthSettingsInner inner =
            this.serviceClient().updateSiteAuthSettingsSlot(resourceGroupName, name, slot, siteAuthSettings);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> updateSiteAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this
                .serviceClient()
                .updateSiteAuthSettingsSlotWithResponse(resourceGroupName, name, slot, siteAuthSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User listSitePublishingCredentials(String resourceGroupName, String name) {
        UserInner inner = this.serviceClient().listSitePublishingCredentials(resourceGroupName, name);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public User listSitePublishingCredentials(String resourceGroupName, String name, Context context) {
        UserInner inner = this.serviceClient().listSitePublishingCredentials(resourceGroupName, name, context);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public User listSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot) {
        UserInner inner = this.serviceClient().listSitePublishingCredentialsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public User listSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot, Context context) {
        UserInner inner =
            this.serviceClient().listSitePublishingCredentialsSlot(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StringDictionary listSiteMetadata(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listSiteMetadata(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listSiteMetadataWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listSiteMetadataWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listSiteMetadataSlot(String resourceGroupName, String name, String slot) {
        StringDictionaryInner inner = this.serviceClient().listSiteMetadataSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listSiteMetadataSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateSiteMetadata(String resourceGroupName, String name, StringDictionaryInner metadata) {
        StringDictionaryInner inner = this.serviceClient().updateSiteMetadata(resourceGroupName, name, metadata);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateSiteMetadataWithResponse(
        String resourceGroupName, String name, StringDictionaryInner metadata, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateSiteMetadataWithResponse(resourceGroupName, name, metadata, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateSiteMetadataSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        StringDictionaryInner inner =
            this.serviceClient().updateSiteMetadataSlot(resourceGroupName, name, slot, metadata);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateSiteMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateSiteMetadataSlotWithResponse(resourceGroupName, name, slot, metadata, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig getSiteLogsConfig(String resourceGroupName, String name) {
        SiteLogsConfigInner inner = this.serviceClient().getSiteLogsConfig(resourceGroupName, name);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> getSiteLogsConfigWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteLogsConfigInner> inner =
            this.serviceClient().getSiteLogsConfigWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig updateSiteLogsConfig(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        SiteLogsConfigInner inner = this.serviceClient().updateSiteLogsConfig(resourceGroupName, name, siteLogsConfig);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> updateSiteLogsConfigWithResponse(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig, Context context) {
        Response<SiteLogsConfigInner> inner =
            this.serviceClient().updateSiteLogsConfigWithResponse(resourceGroupName, name, siteLogsConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig getSiteLogsConfigSlot(String resourceGroupName, String name, String slot) {
        SiteLogsConfigInner inner = this.serviceClient().getSiteLogsConfigSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> getSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteLogsConfigInner> inner =
            this.serviceClient().getSiteLogsConfigSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig updateSiteLogsConfigSlot(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        SiteLogsConfigInner inner =
            this.serviceClient().updateSiteLogsConfigSlot(resourceGroupName, name, slot, siteLogsConfig);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> updateSiteLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig, Context context) {
        Response<SiteLogsConfigInner> inner =
            this
                .serviceClient()
                .updateSiteLogsConfigSlotWithResponse(resourceGroupName, name, slot, siteLogsConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object listSitePremierAddOns(String resourceGroupName, String name) {
        return this.serviceClient().listSitePremierAddOns(resourceGroupName, name);
    }

    public Response<Object> listSitePremierAddOnsWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().listSitePremierAddOnsWithResponse(resourceGroupName, name, context);
    }

    public Object listSitePremierAddOnsSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().listSitePremierAddOnsSlot(resourceGroupName, name, slot);
    }

    public Response<Object> listSitePremierAddOnsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().listSitePremierAddOnsSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object getSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        return this.serviceClient().getSitePremierAddOn(resourceGroupName, name, premierAddOnName);
    }

    public Response<Object> getSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        return this.serviceClient().getSitePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
    }

    public Object addSitePremierAddOn(
        String resourceGroupName, String name, String premierAddOnName, PremierAddOnRequest premierAddOn) {
        return this.serviceClient().addSitePremierAddOn(resourceGroupName, name, premierAddOnName, premierAddOn);
    }

    public Response<Object> addSitePremierAddOnWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        PremierAddOnRequest premierAddOn,
        Context context) {
        return this
            .serviceClient()
            .addSitePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, premierAddOn, context);
    }

    public Object deleteSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        return this.serviceClient().deleteSitePremierAddOn(resourceGroupName, name, premierAddOnName);
    }

    public Response<Object> deleteSitePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        return this
            .serviceClient()
            .deleteSitePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
    }

    public Object getSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return this.serviceClient().getSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot);
    }

    public Response<Object> getSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        return this
            .serviceClient()
            .getSitePremierAddOnSlotWithResponse(resourceGroupName, name, premierAddOnName, slot, context);
    }

    public Object addSitePremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnRequest premierAddOn) {
        return this
            .serviceClient()
            .addSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, premierAddOn);
    }

    public Response<Object> addSitePremierAddOnSlotWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnRequest premierAddOn,
        Context context) {
        return this
            .serviceClient()
            .addSitePremierAddOnSlotWithResponse(
                resourceGroupName, name, premierAddOnName, slot, premierAddOn, context);
    }

    public Object deleteSitePremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        return this.serviceClient().deleteSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot);
    }

    public Response<Object> deleteSitePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteSitePremierAddOnSlotWithResponse(resourceGroupName, name, premierAddOnName, slot, context);
    }

    public BackupRequest getSiteBackupConfiguration(String resourceGroupName, String name) {
        BackupRequestInner inner = this.serviceClient().getSiteBackupConfiguration(resourceGroupName, name);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> getSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().getSiteBackupConfigurationWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupRequest getSiteBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        BackupRequestInner inner = this.serviceClient().getSiteBackupConfigurationSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> getSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().getSiteBackupConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupRequest updateSiteBackupConfiguration(
        String resourceGroupName, String name, BackupRequestInner request) {
        BackupRequestInner inner = this.serviceClient().updateSiteBackupConfiguration(resourceGroupName, name, request);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> updateSiteBackupConfigurationWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().updateSiteBackupConfigurationWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupRequest updateSiteBackupConfigurationSlot(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        BackupRequestInner inner =
            this.serviceClient().updateSiteBackupConfigurationSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> updateSiteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        Response<BackupRequestInner> inner =
            this
                .serviceClient()
                .updateSiteBackupConfigurationSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem backupSite(String resourceGroupName, String name, BackupRequestInner request) {
        BackupItemInner inner = this.serviceClient().backupSite(resourceGroupName, name, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> backupSiteWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().backupSiteWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem backupSiteSlot(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        BackupItemInner inner = this.serviceClient().backupSiteSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> backupSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().backupSiteSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestoreRequest discoverSiteRestore(String resourceGroupName, String name, RestoreRequestInner request) {
        RestoreRequestInner inner = this.serviceClient().discoverSiteRestore(resourceGroupName, name, request);
        if (inner != null) {
            return new RestoreRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RestoreRequest> discoverSiteRestoreWithResponse(
        String resourceGroupName, String name, RestoreRequestInner request, Context context) {
        Response<RestoreRequestInner> inner =
            this.serviceClient().discoverSiteRestoreWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RestoreRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestoreRequest discoverSiteRestoreSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        RestoreRequestInner inner =
            this.serviceClient().discoverSiteRestoreSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new RestoreRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RestoreRequest> discoverSiteRestoreSlotWithResponse(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context) {
        Response<RestoreRequestInner> inner =
            this.serviceClient().discoverSiteRestoreSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RestoreRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackups(resourceGroupName, name);
        return inner.mapPage(inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name, Context context) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackups(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listSiteBackupsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackupsSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listSiteBackupsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<BackupItemInner> inner =
            this.serviceClient().listSiteBackupsSlot(resourceGroupName, name, slot, context);
        return inner.mapPage(inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public BackupItem getSiteBackupStatus(String resourceGroupName, String name, String backupId) {
        BackupItemInner inner = this.serviceClient().getSiteBackupStatus(resourceGroupName, name, backupId);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getSiteBackupStatusWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().getSiteBackupStatusWithResponse(resourceGroupName, name, backupId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem deleteBackup(String resourceGroupName, String name, String backupId) {
        BackupItemInner inner = this.serviceClient().deleteBackup(resourceGroupName, name, backupId);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> deleteBackupWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().deleteBackupWithResponse(resourceGroupName, name, backupId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem getSiteBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot) {
        BackupItemInner inner = this.serviceClient().getSiteBackupStatusSlot(resourceGroupName, name, backupId, slot);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getSiteBackupStatusSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().getSiteBackupStatusSlotWithResponse(resourceGroupName, name, backupId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem deleteBackupSlot(String resourceGroupName, String name, String backupId, String slot) {
        BackupItemInner inner = this.serviceClient().deleteBackupSlot(resourceGroupName, name, backupId, slot);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> deleteBackupSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().deleteBackupSlotWithResponse(resourceGroupName, name, backupId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem getSiteBackupStatusSecretsSlot(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        BackupItemInner inner =
            this.serviceClient().getSiteBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getSiteBackupStatusSecretsSlotWithResponse(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        BackupRequestInner request,
        Context context) {
        Response<BackupItemInner> inner =
            this
                .serviceClient()
                .getSiteBackupStatusSecretsSlotWithResponse(resourceGroupName, name, backupId, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupItem getSiteBackupStatusSecrets(
        String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        BackupItemInner inner =
            this.serviceClient().getSiteBackupStatusSecrets(resourceGroupName, name, backupId, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getSiteBackupStatusSecretsWithResponse(
        String resourceGroupName, String name, String backupId, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this
                .serviceClient()
                .getSiteBackupStatusSecretsWithResponse(resourceGroupName, name, backupId, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestoreResponse restoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        RestoreResponseInner inner = this.serviceClient().restoreSite(resourceGroupName, name, backupId, request);
        if (inner != null) {
            return new RestoreResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RestoreResponse restoreSite(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        RestoreResponseInner inner =
            this.serviceClient().restoreSite(resourceGroupName, name, backupId, request, context);
        if (inner != null) {
            return new RestoreResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RestoreResponse restoreSiteSlot(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        RestoreResponseInner inner =
            this.serviceClient().restoreSiteSlot(resourceGroupName, name, backupId, slot, request);
        if (inner != null) {
            return new RestoreResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RestoreResponse restoreSiteSlot(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        RestoreResponseInner inner =
            this.serviceClient().restoreSiteSlot(resourceGroupName, name, backupId, slot, request, context);
        if (inner != null) {
            return new RestoreResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CsmUsageQuota> getSiteUsages(String resourceGroupName, String name) {
        PagedIterable<CsmUsageQuotaInner> inner = this.serviceClient().getSiteUsages(resourceGroupName, name);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> getSiteUsages(
        String resourceGroupName, String name, String filter, Context context) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().getSiteUsages(resourceGroupName, name, filter, context);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> getSiteUsagesSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<CsmUsageQuotaInner> inner = this.serviceClient().getSiteUsagesSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> getSiteUsagesSlot(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().getSiteUsagesSlot(resourceGroupName, name, slot, filter, context);
        return inner.mapPage(inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getSiteMetrics(String resourceGroupName, String name) {
        PagedIterable<ResourceMetricInner> inner = this.serviceClient().getSiteMetrics(resourceGroupName, name);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getSiteMetrics(
        String resourceGroupName, String name, Boolean details, String filter, Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getSiteMetrics(resourceGroupName, name, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getSiteMetricsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getSiteMetricsSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceMetric> getSiteMetricsSlot(
        String resourceGroupName, String name, String slot, Boolean details, String filter, Context context) {
        PagedIterable<ResourceMetricInner> inner =
            this.serviceClient().getSiteMetricsSlot(resourceGroupName, name, slot, details, filter, context);
        return inner.mapPage(inner1 -> new ResourceMetricImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getSiteMetricDefinitionsSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getSiteMetricDefinitionsSlot(resourceGroupName, name, slot);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getSiteMetricDefinitionsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getSiteMetricDefinitionsSlot(resourceGroupName, name, slot, context);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getSiteMetricDefinitions(String resourceGroupName, String name) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getSiteMetricDefinitions(resourceGroupName, name);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricDefinition> getSiteMetricDefinitions(
        String resourceGroupName, String name, Context context) {
        PagedIterable<MetricDefinitionInner> inner =
            this.serviceClient().getSiteMetricDefinitions(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new MetricDefinitionImpl(inner1, this.manager()));
    }

    public InputStream listSitePublishingProfileXml(
        String resourceGroupName, String name, CsmPublishingProfileOptions options) {
        return this.serviceClient().listSitePublishingProfileXml(resourceGroupName, name, options);
    }

    public StreamResponse listSitePublishingProfileXmlWithResponse(
        String resourceGroupName, String name, CsmPublishingProfileOptions options, Context context) {
        return this.serviceClient().listSitePublishingProfileXmlWithResponse(resourceGroupName, name, options, context);
    }

    public InputStream listSitePublishingProfileXmlSlot(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options) {
        return this.serviceClient().listSitePublishingProfileXmlSlot(resourceGroupName, name, slot, options);
    }

    public StreamResponse listSitePublishingProfileXmlSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions options, Context context) {
        return this
            .serviceClient()
            .listSitePublishingProfileXmlSlotWithResponse(resourceGroupName, name, slot, options, context);
    }

    public Object restartSiteSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().restartSiteSlot(resourceGroupName, name, slot);
    }

    public Response<Object> restartSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous, Context context) {
        return this
            .serviceClient()
            .restartSiteSlotWithResponse(resourceGroupName, name, slot, softRestart, synchronous, context);
    }

    public Object restartSite(String resourceGroupName, String name) {
        return this.serviceClient().restartSite(resourceGroupName, name);
    }

    public Response<Object> restartSiteWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous, Context context) {
        return this.serviceClient().restartSiteWithResponse(resourceGroupName, name, softRestart, synchronous, context);
    }

    public Object startSite(String resourceGroupName, String name) {
        return this.serviceClient().startSite(resourceGroupName, name);
    }

    public Response<Object> startSiteWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().startSiteWithResponse(resourceGroupName, name, context);
    }

    public Object startSiteSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().startSiteSlot(resourceGroupName, name, slot);
    }

    public Response<Object> startSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().startSiteSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object stopSite(String resourceGroupName, String name) {
        return this.serviceClient().stopSite(resourceGroupName, name);
    }

    public Response<Object> stopSiteWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().stopSiteWithResponse(resourceGroupName, name, context);
    }

    public Object stopSiteSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().stopSiteSlot(resourceGroupName, name, slot);
    }

    public Response<Object> stopSiteSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().stopSiteSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object syncSiteRepository(String resourceGroupName, String name) {
        return this.serviceClient().syncSiteRepository(resourceGroupName, name);
    }

    public Response<Object> syncSiteRepositoryWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().syncSiteRepositoryWithResponse(resourceGroupName, name, context);
    }

    public Object syncSiteRepositorySlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().syncSiteRepositorySlot(resourceGroupName, name, slot);
    }

    public Response<Object> syncSiteRepositorySlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().syncSiteRepositorySlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object generateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().generateNewSitePublishingPasswordSlot(resourceGroupName, name, slot);
    }

    public Response<Object> generateNewSitePublishingPasswordSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this
            .serviceClient()
            .generateNewSitePublishingPasswordSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object generateNewSitePublishingPassword(String resourceGroupName, String name) {
        return this.serviceClient().generateNewSitePublishingPassword(resourceGroupName, name);
    }

    public Response<Object> generateNewSitePublishingPasswordWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().generateNewSitePublishingPasswordWithResponse(resourceGroupName, name, context);
    }

    public RelayServiceConnectionEntity getSiteRelayServiceConnection(
        String resourceGroupName, String name, String entityName) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().getSiteRelayServiceConnection(resourceGroupName, name, entityName);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .getSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteRelayServiceConnection(String resourceGroupName, String name, String entityName) {
        return this.serviceClient().deleteSiteRelayServiceConnection(resourceGroupName, name, entityName);
    }

    public Response<Object> deleteSiteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        return this
            .serviceClient()
            .deleteSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    public RelayServiceConnectionEntity getSiteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().getSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .getSiteRelayServiceConnectionSlotWithResponse(resourceGroupName, name, entityName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity createOrUpdateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        RelayServiceConnectionEntityInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteRelayServiceConnectionSlot(
                    resourceGroupName, name, entityName, slot, connectionEnvelope);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> createOrUpdateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteRelayServiceConnectionSlotWithResponse(
                    resourceGroupName, name, entityName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object deleteSiteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        return this.serviceClient().deleteSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot);
    }

    public Response<Object> deleteSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteSiteRelayServiceConnectionSlotWithResponse(resourceGroupName, name, entityName, slot, context);
    }

    public RelayServiceConnectionEntity updateSiteRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        RelayServiceConnectionEntityInner inner =
            this
                .serviceClient()
                .updateSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, connectionEnvelope);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> updateSiteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .updateSiteRelayServiceConnectionSlotWithResponse(
                    resourceGroupName, name, entityName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity listSiteRelayServiceConnectionsSlot(
        String resourceGroupName, String name, String slot) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().listSiteRelayServiceConnectionsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> listSiteRelayServiceConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .listSiteRelayServiceConnectionsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity listSiteRelayServiceConnections(String resourceGroupName, String name) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().listSiteRelayServiceConnections(resourceGroupName, name);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> listSiteRelayServiceConnectionsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this.serviceClient().listSiteRelayServiceConnectionsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getSiteVnetGatewaySlot(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return this.serviceClient().getSiteVnetGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot);
    }

    public Response<Object> getSiteVnetGatewaySlotWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot, Context context) {
        return this
            .serviceClient()
            .getSiteVnetGatewaySlotWithResponse(resourceGroupName, name, vnetName, gatewayName, slot, context);
    }

    public Object getSiteVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName) {
        return this.serviceClient().getSiteVnetGateway(resourceGroupName, name, vnetName, gatewayName);
    }

    public Response<Object> getSiteVnetGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context) {
        return this
            .serviceClient()
            .getSiteVnetGatewayWithResponse(resourceGroupName, name, vnetName, gatewayName, context);
    }

    public VnetGateway createOrUpdateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        VnetGatewayInner inner =
            this
                .serviceClient()
                .createOrUpdateSiteVnetConnectionGateway(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> createOrUpdateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .createOrUpdateSiteVnetConnectionGatewayWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetGateway updateSiteVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        VnetGatewayInner inner =
            this
                .serviceClient()
                .updateSiteVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> updateSiteVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .updateSiteVnetConnectionGatewayWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getSiteVnetConnections(String resourceGroupName, String name) {
        return this.serviceClient().getSiteVnetConnections(resourceGroupName, name);
    }

    public Response<Object> getSiteVnetConnectionsWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getSiteVnetConnectionsWithResponse(resourceGroupName, name, context);
    }

    public Object getSiteVnetConnectionsSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().getSiteVnetConnectionsSlot(resourceGroupName, name, slot);
    }

    public Response<Object> getSiteVnetConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().getSiteVnetConnectionsSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Site getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String localPropertiesToInclude = null;
        return this
            .getByResourceGroupWithResponse(resourceGroupName, name, localPropertiesToInclude, Context.NONE)
            .getValue();
    }

    public Response<Site> getByIdWithResponse(String id, String propertiesToInclude, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, propertiesToInclude, context);
    }

    public VnetInfo getSiteVnetConnectionSlotById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this
            .getSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, Context.NONE)
            .getValue();
    }

    public Response<VnetInfo> getSiteVnetConnectionSlotByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this.getSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    public Deployment getInstanceDeploymentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        String instanceId = Utils.getValueFromIdByName(id, "instances");
        if (instanceId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this
            .getInstanceDeploymentWithResponse(resourceGroupName, name, varId, instanceId, Context.NONE)
            .getValue();
    }

    public Response<Deployment> getInstanceDeploymentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        String instanceId = Utils.getValueFromIdByName(id, "instances");
        if (instanceId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.getInstanceDeploymentWithResponse(resourceGroupName, name, varId, instanceId, context);
    }

    public HostnameBinding getSiteHostnameBindingById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.getSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, Context.NONE).getValue();
    }

    public Response<HostnameBinding> getSiteHostnameBindingByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.getSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public RelayServiceConnectionEntity getSiteRelayServiceConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this
            .getSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, Context.NONE)
            .getValue();
    }

    public Response<RelayServiceConnectionEntity> getSiteRelayServiceConnectionByIdWithResponse(
        String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this.getSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    public Object deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String localDeleteMetrics = null;
        String localDeleteEmptyServerFarm = null;
        String localSkipDnsRegistration = null;
        String localDeleteAllSlots = null;
        return this
            .deleteWithResponse(
                resourceGroupName,
                name,
                localDeleteMetrics,
                localDeleteEmptyServerFarm,
                localSkipDnsRegistration,
                localDeleteAllSlots,
                Context.NONE)
            .getValue();
    }

    public Response<Object> deleteByIdWithResponse(
        String id,
        String deleteMetrics,
        String deleteEmptyServerFarm,
        String skipDnsRegistration,
        String deleteAllSlots,
        Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this
            .deleteWithResponse(
                resourceGroupName,
                name,
                deleteMetrics,
                deleteEmptyServerFarm,
                skipDnsRegistration,
                deleteAllSlots,
                context);
    }

    public Object deleteSiteVnetConnectionSlotById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this
            .deleteSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, Context.NONE)
            .getValue();
    }

    public Response<Object> deleteSiteVnetConnectionSlotByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this.deleteSiteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    public Object deleteInstanceDeploymentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        String instanceId = Utils.getValueFromIdByName(id, "instances");
        if (instanceId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this
            .deleteInstanceDeploymentWithResponse(resourceGroupName, name, varId, instanceId, Context.NONE)
            .getValue();
    }

    public Response<Object> deleteInstanceDeploymentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        String instanceId = Utils.getValueFromIdByName(id, "instances");
        if (instanceId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.deleteInstanceDeploymentWithResponse(resourceGroupName, name, varId, instanceId, context);
    }

    public Object deleteSiteHostnameBindingById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.deleteSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, Context.NONE).getValue();
    }

    public Response<Object> deleteSiteHostnameBindingByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.deleteSiteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public Object deleteSiteRelayServiceConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this
            .deleteSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, Context.NONE)
            .getValue();
    }

    public Response<Object> deleteSiteRelayServiceConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this.deleteSiteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    private SitesClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }

    public SiteImpl defineSite(String name) {
        return new SiteImpl(name, this.manager());
    }

    public VnetInfoImpl defineSiteVnetConnectionSlot(String name) {
        return new VnetInfoImpl(name, this.manager());
    }

    public DeploymentImpl defineInstanceDeployment(String name) {
        return new DeploymentImpl(name, this.manager());
    }

    public HostnameBindingImpl defineSiteHostnameBinding(String name) {
        return new HostnameBindingImpl(name, this.manager());
    }

    public RelayServiceConnectionEntityImpl defineSiteRelayServiceConnection(String name) {
        return new RelayServiceConnectionEntityImpl(name, this.manager());
    }

    public VnetGatewayImpl defineSiteVnetConnectionGatewaySlot(String name) {
        return new VnetGatewayImpl(name, this.manager());
    }
}
