// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.RecommendationsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.RecommendationRuleInner;
import com.azure.resourcemanager.appservice.generated.models.RecommendationRule;
import com.azure.resourcemanager.appservice.generated.models.Recommendations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RecommendationsImpl implements Recommendations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RecommendationsImpl.class);

    private final RecommendationsClient innerClient;

    private final WebSiteManager serviceManager;

    public RecommendationsImpl(RecommendationsClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Object getRecommendationBySubscription() {
        return this.serviceClient().getRecommendationBySubscription();
    }

    public Response<Object> getRecommendationBySubscriptionWithResponse(
        Boolean featured, String filter, Context context) {
        return this.serviceClient().getRecommendationBySubscriptionWithResponse(featured, filter, context);
    }

    public RecommendationRule getRuleDetailsBySiteName(String resourceGroupName, String siteName, String name) {
        RecommendationRuleInner inner =
            this.serviceClient().getRuleDetailsBySiteName(resourceGroupName, siteName, name);
        if (inner != null) {
            return new RecommendationRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RecommendationRule> getRuleDetailsBySiteNameWithResponse(
        String resourceGroupName, String siteName, String name, Context context) {
        Response<RecommendationRuleInner> inner =
            this.serviceClient().getRuleDetailsBySiteNameWithResponse(resourceGroupName, siteName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RecommendationRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getRecommendedRulesForSite(String resourceGroupName, String siteName) {
        return this.serviceClient().getRecommendedRulesForSite(resourceGroupName, siteName);
    }

    public Response<Object> getRecommendedRulesForSiteWithResponse(
        String resourceGroupName,
        String siteName,
        Boolean featured,
        String siteSku,
        Integer numSlots,
        Context context) {
        return this
            .serviceClient()
            .getRecommendedRulesForSiteWithResponse(resourceGroupName, siteName, featured, siteSku, numSlots, context);
    }

    public Object getRecommendationHistoryForSite(String resourceGroupName, String siteName) {
        return this.serviceClient().getRecommendationHistoryForSite(resourceGroupName, siteName);
    }

    public Response<Object> getRecommendationHistoryForSiteWithResponse(
        String resourceGroupName, String siteName, String startTime, String endTime, Context context) {
        return this
            .serviceClient()
            .getRecommendationHistoryForSiteWithResponse(resourceGroupName, siteName, startTime, endTime, context);
    }

    private RecommendationsClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
