// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.WebSiteManager;
import com.azure.resourcemanager.appservice.generated.fluent.ProvidersClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.SourceControlInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;
import com.azure.resourcemanager.appservice.generated.models.Providers;
import com.azure.resourcemanager.appservice.generated.models.SourceControl;
import com.azure.resourcemanager.appservice.generated.models.User;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ProvidersImpl implements Providers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ProvidersImpl.class);

    private final ProvidersClient innerClient;

    private final WebSiteManager serviceManager;

    public ProvidersImpl(ProvidersClient innerClient, WebSiteManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SourceControl> getSourceControls() {
        PagedIterable<SourceControlInner> inner = this.serviceClient().getSourceControls();
        return inner.mapPage(inner1 -> new SourceControlImpl(inner1, this.manager()));
    }

    public PagedIterable<SourceControl> getSourceControls(Context context) {
        PagedIterable<SourceControlInner> inner = this.serviceClient().getSourceControls(context);
        return inner.mapPage(inner1 -> new SourceControlImpl(inner1, this.manager()));
    }

    public SourceControl getSourceControl(String sourceControlType) {
        SourceControlInner inner = this.serviceClient().getSourceControl(sourceControlType);
        if (inner != null) {
            return new SourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SourceControl> getSourceControlWithResponse(String sourceControlType, Context context) {
        Response<SourceControlInner> inner =
            this.serviceClient().getSourceControlWithResponse(sourceControlType, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SourceControl updateSourceControl(String sourceControlType, SourceControlInner requestMessage) {
        SourceControlInner inner = this.serviceClient().updateSourceControl(sourceControlType, requestMessage);
        if (inner != null) {
            return new SourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SourceControl> updateSourceControlWithResponse(
        String sourceControlType, SourceControlInner requestMessage, Context context) {
        Response<SourceControlInner> inner =
            this.serviceClient().updateSourceControlWithResponse(sourceControlType, requestMessage, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User getPublishingUser() {
        UserInner inner = this.serviceClient().getPublishingUser();
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<User> getPublishingUserWithResponse(Context context) {
        Response<UserInner> inner = this.serviceClient().getPublishingUserWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User updatePublishingUser(UserInner requestMessage) {
        UserInner inner = this.serviceClient().updatePublishingUser(requestMessage);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<User> updatePublishingUserWithResponse(UserInner requestMessage, Context context) {
        Response<UserInner> inner = this.serviceClient().updatePublishingUserWithResponse(requestMessage, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ProvidersClient serviceClient() {
        return this.innerClient;
    }

    private WebSiteManager manager() {
        return this.serviceManager;
    }
}
