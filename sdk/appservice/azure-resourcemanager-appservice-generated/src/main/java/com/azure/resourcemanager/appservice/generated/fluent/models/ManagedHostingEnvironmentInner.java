// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.ManagedHostingEnvironmentStatus;
import com.azure.resourcemanager.appservice.generated.models.VirtualNetworkProfile;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Description of a managed hosting environment. */
@JsonFlatten
@Fluent
public class ManagedHostingEnvironmentInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedHostingEnvironmentInner.class);

    /*
     * Name of the managed hosting environment
     */
    @JsonProperty(value = "properties.name")
    private String namePropertiesName;

    /*
     * Location of the managed hosting environment e.g. "West US"
     */
    @JsonProperty(value = "properties.location")
    private String locationPropertiesLocation;

    /*
     * Current status of the managed hosting environment
     */
    @JsonProperty(value = "properties.status")
    private ManagedHostingEnvironmentStatus status;

    /*
     * Description of the managed hosting environment's virtual network
     */
    @JsonProperty(value = "properties.virtualNetwork")
    private VirtualNetworkProfile virtualNetwork;

    /*
     * Number of ip ssl addresses reserved for the managed hosting environment
     */
    @JsonProperty(value = "properties.ipsslAddressCount")
    private Integer ipsslAddressCount;

    /*
     * DNS suffix of the managed hosting environment
     */
    @JsonProperty(value = "properties.dnsSuffix")
    private String dnsSuffix;

    /*
     * Subscription of the managed hosting environment (read only)
     */
    @JsonProperty(value = "properties.subscriptionId")
    private String subscriptionId;

    /*
     * Resource group of the managed hosting environment (read only)
     */
    @JsonProperty(value = "properties.resourceGroup")
    private String resourceGroup;

    /*
     * True/false indicating whether the managed hosting environment is healthy
     */
    @JsonProperty(value = "properties.environmentIsHealthy")
    private Boolean environmentIsHealthy;

    /*
     * Detailed message about with results of the last check of the managed
     * hosting environment
     */
    @JsonProperty(value = "properties.environmentStatus")
    private String environmentStatus;

    /*
     * True/false indicating whether the managed hosting environment is
     * suspended. The environment can be suspended e.g. when the management
     * endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic)
     */
    @JsonProperty(value = "properties.suspended")
    private Boolean suspended;

    /*
     * Resource id of the api management account associated with this managed
     * hosting environment (read only)
     */
    @JsonProperty(value = "properties.apiManagementAccount")
    private String apiManagementAccount;

    /*
     * Kind of resource
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Resource Id
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Resource Name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the namePropertiesName property: Name of the managed hosting environment.
     *
     * @return the namePropertiesName value.
     */
    public String namePropertiesName() {
        return this.namePropertiesName;
    }

    /**
     * Set the namePropertiesName property: Name of the managed hosting environment.
     *
     * @param namePropertiesName the namePropertiesName value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withNamePropertiesName(String namePropertiesName) {
        this.namePropertiesName = namePropertiesName;
        return this;
    }

    /**
     * Get the locationPropertiesLocation property: Location of the managed hosting environment e.g. "West US".
     *
     * @return the locationPropertiesLocation value.
     */
    public String locationPropertiesLocation() {
        return this.locationPropertiesLocation;
    }

    /**
     * Set the locationPropertiesLocation property: Location of the managed hosting environment e.g. "West US".
     *
     * @param locationPropertiesLocation the locationPropertiesLocation value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withLocationPropertiesLocation(String locationPropertiesLocation) {
        this.locationPropertiesLocation = locationPropertiesLocation;
        return this;
    }

    /**
     * Get the status property: Current status of the managed hosting environment.
     *
     * @return the status value.
     */
    public ManagedHostingEnvironmentStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of the managed hosting environment.
     *
     * @param status the status value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withStatus(ManagedHostingEnvironmentStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the virtualNetwork property: Description of the managed hosting environment's virtual network.
     *
     * @return the virtualNetwork value.
     */
    public VirtualNetworkProfile virtualNetwork() {
        return this.virtualNetwork;
    }

    /**
     * Set the virtualNetwork property: Description of the managed hosting environment's virtual network.
     *
     * @param virtualNetwork the virtualNetwork value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withVirtualNetwork(VirtualNetworkProfile virtualNetwork) {
        this.virtualNetwork = virtualNetwork;
        return this;
    }

    /**
     * Get the ipsslAddressCount property: Number of ip ssl addresses reserved for the managed hosting environment.
     *
     * @return the ipsslAddressCount value.
     */
    public Integer ipsslAddressCount() {
        return this.ipsslAddressCount;
    }

    /**
     * Set the ipsslAddressCount property: Number of ip ssl addresses reserved for the managed hosting environment.
     *
     * @param ipsslAddressCount the ipsslAddressCount value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withIpsslAddressCount(Integer ipsslAddressCount) {
        this.ipsslAddressCount = ipsslAddressCount;
        return this;
    }

    /**
     * Get the dnsSuffix property: DNS suffix of the managed hosting environment.
     *
     * @return the dnsSuffix value.
     */
    public String dnsSuffix() {
        return this.dnsSuffix;
    }

    /**
     * Set the dnsSuffix property: DNS suffix of the managed hosting environment.
     *
     * @param dnsSuffix the dnsSuffix value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withDnsSuffix(String dnsSuffix) {
        this.dnsSuffix = dnsSuffix;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription of the managed hosting environment (read only).
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription of the managed hosting environment (read only).
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroup property: Resource group of the managed hosting environment (read only).
     *
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Resource group of the managed hosting environment (read only).
     *
     * @param resourceGroup the resourceGroup value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the environmentIsHealthy property: True/false indicating whether the managed hosting environment is healthy.
     *
     * @return the environmentIsHealthy value.
     */
    public Boolean environmentIsHealthy() {
        return this.environmentIsHealthy;
    }

    /**
     * Set the environmentIsHealthy property: True/false indicating whether the managed hosting environment is healthy.
     *
     * @param environmentIsHealthy the environmentIsHealthy value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withEnvironmentIsHealthy(Boolean environmentIsHealthy) {
        this.environmentIsHealthy = environmentIsHealthy;
        return this;
    }

    /**
     * Get the environmentStatus property: Detailed message about with results of the last check of the managed hosting
     * environment.
     *
     * @return the environmentStatus value.
     */
    public String environmentStatus() {
        return this.environmentStatus;
    }

    /**
     * Set the environmentStatus property: Detailed message about with results of the last check of the managed hosting
     * environment.
     *
     * @param environmentStatus the environmentStatus value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withEnvironmentStatus(String environmentStatus) {
        this.environmentStatus = environmentStatus;
        return this;
    }

    /**
     * Get the suspended property: True/false indicating whether the managed hosting environment is suspended. The
     * environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG
     * blocked the incoming traffic).
     *
     * @return the suspended value.
     */
    public Boolean suspended() {
        return this.suspended;
    }

    /**
     * Set the suspended property: True/false indicating whether the managed hosting environment is suspended. The
     * environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG
     * blocked the incoming traffic).
     *
     * @param suspended the suspended value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }

    /**
     * Get the apiManagementAccount property: Resource id of the api management account associated with this managed
     * hosting environment (read only).
     *
     * @return the apiManagementAccount value.
     */
    public String apiManagementAccount() {
        return this.apiManagementAccount;
    }

    /**
     * Set the apiManagementAccount property: Resource id of the api management account associated with this managed
     * hosting environment (read only).
     *
     * @param apiManagementAccount the apiManagementAccount value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withApiManagementAccount(String apiManagementAccount) {
        this.apiManagementAccount = apiManagementAccount;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Resource Name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource Name.
     *
     * @param name the name value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Resource type.
     *
     * @param type the type value to set.
     * @return the ManagedHostingEnvironmentInner object itself.
     */
    public ManagedHostingEnvironmentInner withType(String type) {
        this.type = type;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedHostingEnvironmentInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedHostingEnvironmentInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualNetwork() != null) {
            virtualNetwork().validate();
        }
    }
}
