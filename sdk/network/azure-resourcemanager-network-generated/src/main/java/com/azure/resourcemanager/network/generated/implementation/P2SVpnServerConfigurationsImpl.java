// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.P2SVpnServerConfigurationsClient;
import com.azure.resourcemanager.network.generated.fluent.models.P2SVpnServerConfigurationInner;
import com.azure.resourcemanager.network.generated.models.P2SVpnServerConfiguration;
import com.azure.resourcemanager.network.generated.models.P2SVpnServerConfigurations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class P2SVpnServerConfigurationsImpl implements P2SVpnServerConfigurations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(P2SVpnServerConfigurationsImpl.class);

    private final P2SVpnServerConfigurationsClient innerClient;

    private final NetworkManager serviceManager;

    public P2SVpnServerConfigurationsImpl(P2SVpnServerConfigurationsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public P2SVpnServerConfiguration get(
        String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName) {
        P2SVpnServerConfigurationInner inner =
            this.serviceClient().get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName);
        if (inner != null) {
            return new P2SVpnServerConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<P2SVpnServerConfiguration> getWithResponse(
        String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, Context context) {
        Response<P2SVpnServerConfigurationInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new P2SVpnServerConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public P2SVpnServerConfiguration createOrUpdate(
        String resourceGroupName,
        String virtualWanName,
        String p2SVpnServerConfigurationName,
        P2SVpnServerConfigurationInner p2SVpnServerConfigurationParameters) {
        P2SVpnServerConfigurationInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName,
                    virtualWanName,
                    p2SVpnServerConfigurationName,
                    p2SVpnServerConfigurationParameters);
        if (inner != null) {
            return new P2SVpnServerConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public P2SVpnServerConfiguration createOrUpdate(
        String resourceGroupName,
        String virtualWanName,
        String p2SVpnServerConfigurationName,
        P2SVpnServerConfigurationInner p2SVpnServerConfigurationParameters,
        Context context) {
        P2SVpnServerConfigurationInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName,
                    virtualWanName,
                    p2SVpnServerConfigurationName,
                    p2SVpnServerConfigurationParameters,
                    context);
        if (inner != null) {
            return new P2SVpnServerConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName) {
        this.serviceClient().delete(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName);
    }

    public void delete(
        String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, context);
    }

    public PagedIterable<P2SVpnServerConfiguration> listByVirtualWan(String resourceGroupName, String virtualWanName) {
        PagedIterable<P2SVpnServerConfigurationInner> inner =
            this.serviceClient().listByVirtualWan(resourceGroupName, virtualWanName);
        return inner.mapPage(inner1 -> new P2SVpnServerConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<P2SVpnServerConfiguration> listByVirtualWan(
        String resourceGroupName, String virtualWanName, Context context) {
        PagedIterable<P2SVpnServerConfigurationInner> inner =
            this.serviceClient().listByVirtualWan(resourceGroupName, virtualWanName, context);
        return inner.mapPage(inner1 -> new P2SVpnServerConfigurationImpl(inner1, this.manager()));
    }

    private P2SVpnServerConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }
}
