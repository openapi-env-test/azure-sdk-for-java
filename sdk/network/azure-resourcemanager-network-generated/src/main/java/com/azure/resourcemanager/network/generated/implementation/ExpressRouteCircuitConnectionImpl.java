// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.SubResource;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitConnectionInner;
import com.azure.resourcemanager.network.generated.models.CircuitConnectionStatus;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitConnection;

public final class ExpressRouteCircuitConnectionImpl implements ExpressRouteCircuitConnection {
    private ExpressRouteCircuitConnectionInner innerObject;

    private final NetworkManager serviceManager;

    ExpressRouteCircuitConnectionImpl(ExpressRouteCircuitConnectionInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SubResource expressRouteCircuitPeering() {
        return this.innerModel().expressRouteCircuitPeering();
    }

    public SubResource peerExpressRouteCircuitPeering() {
        return this.innerModel().peerExpressRouteCircuitPeering();
    }

    public String addressPrefix() {
        return this.innerModel().addressPrefix();
    }

    public String authorizationKey() {
        return this.innerModel().authorizationKey();
    }

    public CircuitConnectionStatus circuitConnectionStatus() {
        return this.innerModel().circuitConnectionStatus();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ExpressRouteCircuitConnectionInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }
}
