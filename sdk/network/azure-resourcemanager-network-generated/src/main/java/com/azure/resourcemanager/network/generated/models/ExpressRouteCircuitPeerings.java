// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitPeeringInner;

/** Resource collection API of ExpressRouteCircuitPeerings. */
public interface ExpressRouteCircuitPeerings {
    /**
     * The delete peering operation deletes the specified peering from the ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String circuitName, String peeringName);

    /**
     * The delete peering operation deletes the specified peering from the ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String circuitName, String peeringName, Context context);

    /**
     * The GET peering operation retrieves the specified authorization from the ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering in a ExpressRouteCircuit resource.
     */
    ExpressRouteCircuitPeering get(String resourceGroupName, String circuitName, String peeringName);

    /**
     * The GET peering operation retrieves the specified authorization from the ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering in a ExpressRouteCircuit resource.
     */
    Response<ExpressRouteCircuitPeering> getWithResponse(
        String resourceGroupName, String circuitName, String peeringName, Context context);

    /**
     * The Put Peering operation creates/updates an peering in the specified ExpressRouteCircuits.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @param peeringParameters Parameters supplied to the create/update ExpressRouteCircuit Peering operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering in a ExpressRouteCircuit resource.
     */
    ExpressRouteCircuitPeering createOrUpdate(
        String resourceGroupName,
        String circuitName,
        String peeringName,
        ExpressRouteCircuitPeeringInner peeringParameters);

    /**
     * The Put Peering operation creates/updates an peering in the specified ExpressRouteCircuits.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the express route circuit.
     * @param peeringName The name of the peering.
     * @param peeringParameters Parameters supplied to the create/update ExpressRouteCircuit Peering operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering in a ExpressRouteCircuit resource.
     */
    ExpressRouteCircuitPeering createOrUpdate(
        String resourceGroupName,
        String circuitName,
        String peeringName,
        ExpressRouteCircuitPeeringInner peeringParameters,
        Context context);

    /**
     * The List peering operation retrieves all the peerings in an ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the circuit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListPeering Api service callRetrieves all Peerings that belongs to an ExpressRouteCircuit.
     */
    PagedIterable<ExpressRouteCircuitPeering> list(String resourceGroupName, String circuitName);

    /**
     * The List peering operation retrieves all the peerings in an ExpressRouteCircuit.
     *
     * @param resourceGroupName The name of the resource group.
     * @param circuitName The name of the circuit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListPeering Api service callRetrieves all Peerings that belongs to an ExpressRouteCircuit.
     */
    PagedIterable<ExpressRouteCircuitPeering> list(String resourceGroupName, String circuitName, Context context);
}
