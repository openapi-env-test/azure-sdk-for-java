// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Load balancer Probe. */
@JsonFlatten
@Fluent
public class Probe extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Probe.class);

    /*
     * Gets name of the resource that is unique within a resource group. This
     * name can be used to access the resource
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A unique read-only string that changes whenever the resource is updated
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Gets Load balancer rules that use this probe
     */
    @JsonProperty(value = "properties.loadBalancingRules")
    private List<SubResource> loadBalancingRules;

    /*
     * Gets or sets the protocol of the end point. Possible values are http pr
     * Tcp. If Tcp is specified, a received ACK is required for the probe to be
     * successful. If http is specified,a 200 OK response from the specifies
     * URI is required for the probe to be successful
     */
    @JsonProperty(value = "properties.protocol")
    private ProbeProtocol protocol;

    /*
     * Gets or sets Port for communicating the probe. Possible values range
     * from 1 to 65535, inclusive.
     */
    @JsonProperty(value = "properties.port")
    private Integer port;

    /*
     * Gets or sets the interval, in seconds, for how frequently to probe the
     * endpoint for health status. Typically, the interval is slightly less
     * than half the allocated timeout period (in seconds) which allows two
     * full probes before taking the instance out of rotation. The default
     * value is 15, the minimum value is 5
     */
    @JsonProperty(value = "properties.intervalInSeconds")
    private Integer intervalInSeconds;

    /*
     * Gets or sets the number of probes where if no response, will result in
     * stopping further traffic from being delivered to the endpoint. This
     * values allows endpoints to be taken out of rotation faster or slower
     * than the typical times used in Azure.
     */
    @JsonProperty(value = "properties.numberOfProbes")
    private Integer numberOfProbes;

    /*
     * Gets or sets the URI used for requesting health status from the VM. Path
     * is required if a protocol is set to http. Otherwise, it is not allowed.
     * There is no default value
     */
    @JsonProperty(value = "properties.requestPath")
    private String requestPath;

    /*
     * Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * Get the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param name the name value to set.
     * @return the Probe object itself.
     */
    public Probe withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @param etag the etag value to set.
     * @return the Probe object itself.
     */
    public Probe withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the loadBalancingRules property: Gets Load balancer rules that use this probe.
     *
     * @return the loadBalancingRules value.
     */
    public List<SubResource> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * Set the loadBalancingRules property: Gets Load balancer rules that use this probe.
     *
     * @param loadBalancingRules the loadBalancingRules value to set.
     * @return the Probe object itself.
     */
    public Probe withLoadBalancingRules(List<SubResource> loadBalancingRules) {
        this.loadBalancingRules = loadBalancingRules;
        return this;
    }

    /**
     * Get the protocol property: Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is
     * specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from
     * the specifies URI is required for the probe to be successful.
     *
     * @return the protocol value.
     */
    public ProbeProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is
     * specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from
     * the specifies URI is required for the probe to be successful.
     *
     * @param protocol the protocol value to set.
     * @return the Probe object itself.
     */
    public Probe withProtocol(ProbeProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the port property: Gets or sets Port for communicating the probe. Possible values range from 1 to 65535,
     * inclusive.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Gets or sets Port for communicating the probe. Possible values range from 1 to 65535,
     * inclusive.
     *
     * @param port the port value to set.
     * @return the Probe object itself.
     */
    public Probe withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the intervalInSeconds property: Gets or sets the interval, in seconds, for how frequently to probe the
     * endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in
     * seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the
     * minimum value is 5.
     *
     * @return the intervalInSeconds value.
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }

    /**
     * Set the intervalInSeconds property: Gets or sets the interval, in seconds, for how frequently to probe the
     * endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in
     * seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the
     * minimum value is 5.
     *
     * @param intervalInSeconds the intervalInSeconds value to set.
     * @return the Probe object itself.
     */
    public Probe withIntervalInSeconds(Integer intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }

    /**
     * Get the numberOfProbes property: Gets or sets the number of probes where if no response, will result in stopping
     * further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation
     * faster or slower than the typical times used in Azure.
     *
     * @return the numberOfProbes value.
     */
    public Integer numberOfProbes() {
        return this.numberOfProbes;
    }

    /**
     * Set the numberOfProbes property: Gets or sets the number of probes where if no response, will result in stopping
     * further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation
     * faster or slower than the typical times used in Azure.
     *
     * @param numberOfProbes the numberOfProbes value to set.
     * @return the Probe object itself.
     */
    public Probe withNumberOfProbes(Integer numberOfProbes) {
        this.numberOfProbes = numberOfProbes;
        return this;
    }

    /**
     * Get the requestPath property: Gets or sets the URI used for requesting health status from the VM. Path is
     * required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     *
     * @return the requestPath value.
     */
    public String requestPath() {
        return this.requestPath;
    }

    /**
     * Set the requestPath property: Gets or sets the URI used for requesting health status from the VM. Path is
     * required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     *
     * @param requestPath the requestPath value to set.
     * @return the Probe object itself.
     */
    public Probe withRequestPath(String requestPath) {
        this.requestPath = requestPath;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the Probe object itself.
     */
    public Probe withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Probe withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
