// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.network.generated.fluent.models.DnsNameAvailabilityResultInner;
import com.azure.resourcemanager.network.generated.models.DnsNameAvailabilityResult;
import com.azure.resourcemanager.network.generated.models.ResourceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ResourceProvidersImpl implements ResourceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final NetworkManager serviceManager;

    public ResourceProvidersImpl(ResourceProvidersClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DnsNameAvailabilityResult checkDnsNameAvailability(String location, String domainNameLabel) {
        DnsNameAvailabilityResultInner inner = this.serviceClient().checkDnsNameAvailability(location, domainNameLabel);
        if (inner != null) {
            return new DnsNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DnsNameAvailabilityResult> checkDnsNameAvailabilityWithResponse(
        String location, String domainNameLabel, Context context) {
        Response<DnsNameAvailabilityResultInner> inner =
            this.serviceClient().checkDnsNameAvailabilityWithResponse(location, domainNameLabel, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DnsNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }
}
