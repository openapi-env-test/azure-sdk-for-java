// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Inbound NAT pool of the loadbalancer. */
@JsonFlatten
@Fluent
public class InboundNatPool extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InboundNatPool.class);

    /*
     * Gets name of the resource that is unique within a resource group. This
     * name can be used to access the resource
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A unique read-only string that changes whenever the resource is updated
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Gets or sets a reference to frontend IP Addresses
     */
    @JsonProperty(value = "properties.frontendIPConfiguration")
    private SubResource frontendIpConfiguration;

    /*
     * Gets or sets the transport protocol for the external endpoint. Possible
     * values are Udp or Tcp
     */
    @JsonProperty(value = "properties.protocol")
    private TransportProtocol protocol;

    /*
     * Gets or sets the starting port range for the NAT pool. You can specify
     * any port number you choose, but the port numbers specified for each role
     * in the service must be unique. Possible values range between 1 and
     * 65535, inclusive
     */
    @JsonProperty(value = "properties.frontendPortRangeStart")
    private Integer frontendPortRangeStart;

    /*
     * Gets or sets the ending port range for the NAT pool. You can specify any
     * port number you choose, but the port numbers specified for each role in
     * the service must be unique. Possible values range between 1 and 65535,
     * inclusive
     */
    @JsonProperty(value = "properties.frontendPortRangeEnd")
    private Integer frontendPortRangeEnd;

    /*
     * Gets or sets a port used for internal connections on the endpoint. The
     * localPort attribute maps the eternal port of the endpoint to an internal
     * port on a role. This is useful in scenarios where a role must
     * communicate to an internal component on a port that is different from
     * the one that is exposed externally. If not specified, the value of
     * localPort is the same as the port attribute. Set the value of localPort
     * to '*' to automatically assign an unallocated port that is discoverable
     * using the runtime API
     */
    @JsonProperty(value = "properties.backendPort")
    private Integer backendPort;

    /*
     * Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * Get the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param name the name value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @param etag the etag value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the frontendIpConfiguration property: Gets or sets a reference to frontend IP Addresses.
     *
     * @return the frontendIpConfiguration value.
     */
    public SubResource frontendIpConfiguration() {
        return this.frontendIpConfiguration;
    }

    /**
     * Set the frontendIpConfiguration property: Gets or sets a reference to frontend IP Addresses.
     *
     * @param frontendIpConfiguration the frontendIpConfiguration value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withFrontendIpConfiguration(SubResource frontendIpConfiguration) {
        this.frontendIpConfiguration = frontendIpConfiguration;
        return this;
    }

    /**
     * Get the protocol property: Gets or sets the transport protocol for the external endpoint. Possible values are Udp
     * or Tcp.
     *
     * @return the protocol value.
     */
    public TransportProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Gets or sets the transport protocol for the external endpoint. Possible values are Udp
     * or Tcp.
     *
     * @param protocol the protocol value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withProtocol(TransportProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the frontendPortRangeStart property: Gets or sets the starting port range for the NAT pool. You can specify
     * any port number you choose, but the port numbers specified for each role in the service must be unique. Possible
     * values range between 1 and 65535, inclusive.
     *
     * @return the frontendPortRangeStart value.
     */
    public Integer frontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }

    /**
     * Set the frontendPortRangeStart property: Gets or sets the starting port range for the NAT pool. You can specify
     * any port number you choose, but the port numbers specified for each role in the service must be unique. Possible
     * values range between 1 and 65535, inclusive.
     *
     * @param frontendPortRangeStart the frontendPortRangeStart value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withFrontendPortRangeStart(Integer frontendPortRangeStart) {
        this.frontendPortRangeStart = frontendPortRangeStart;
        return this;
    }

    /**
     * Get the frontendPortRangeEnd property: Gets or sets the ending port range for the NAT pool. You can specify any
     * port number you choose, but the port numbers specified for each role in the service must be unique. Possible
     * values range between 1 and 65535, inclusive.
     *
     * @return the frontendPortRangeEnd value.
     */
    public Integer frontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }

    /**
     * Set the frontendPortRangeEnd property: Gets or sets the ending port range for the NAT pool. You can specify any
     * port number you choose, but the port numbers specified for each role in the service must be unique. Possible
     * values range between 1 and 65535, inclusive.
     *
     * @param frontendPortRangeEnd the frontendPortRangeEnd value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withFrontendPortRangeEnd(Integer frontendPortRangeEnd) {
        this.frontendPortRangeEnd = frontendPortRangeEnd;
        return this;
    }

    /**
     * Get the backendPort property: Gets or sets a port used for internal connections on the endpoint. The localPort
     * attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where
     * a role must communicate to an internal component on a port that is different from the one that is exposed
     * externally. If not specified, the value of localPort is the same as the port attribute. Set the value of
     * localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API.
     *
     * @return the backendPort value.
     */
    public Integer backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: Gets or sets a port used for internal connections on the endpoint. The localPort
     * attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where
     * a role must communicate to an internal component on a port that is different from the one that is exposed
     * externally. If not specified, the value of localPort is the same as the port attribute. Set the value of
     * localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API.
     *
     * @param backendPort the backendPort value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withBackendPort(Integer backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the InboundNatPool object itself.
     */
    public InboundNatPool withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public InboundNatPool withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
