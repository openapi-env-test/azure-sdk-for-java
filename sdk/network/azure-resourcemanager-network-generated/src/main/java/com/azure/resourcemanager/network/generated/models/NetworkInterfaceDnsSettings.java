// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Dns Settings of a network interface. */
@Fluent
public final class NetworkInterfaceDnsSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetworkInterfaceDnsSettings.class);

    /*
     * Gets or sets list of DNS servers IP addresses
     */
    @JsonProperty(value = "dnsServers")
    private List<String> dnsServers;

    /*
     * Gets or sets list of Applied DNS servers IP addresses
     */
    @JsonProperty(value = "appliedDnsServers")
    private List<String> appliedDnsServers;

    /*
     * Gets or sets the Internal DNS name
     */
    @JsonProperty(value = "internalDnsNameLabel")
    private String internalDnsNameLabel;

    /*
     * Gets or sets full IDNS name in the form,
     * DnsName.VnetId.ZoneId.TopLevelSuffix. This is set when the NIC is
     * associated to a VM
     */
    @JsonProperty(value = "internalFqdn")
    private String internalFqdn;

    /**
     * Get the dnsServers property: Gets or sets list of DNS servers IP addresses.
     *
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: Gets or sets list of DNS servers IP addresses.
     *
     * @param dnsServers the dnsServers value to set.
     * @return the NetworkInterfaceDnsSettings object itself.
     */
    public NetworkInterfaceDnsSettings withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the appliedDnsServers property: Gets or sets list of Applied DNS servers IP addresses.
     *
     * @return the appliedDnsServers value.
     */
    public List<String> appliedDnsServers() {
        return this.appliedDnsServers;
    }

    /**
     * Set the appliedDnsServers property: Gets or sets list of Applied DNS servers IP addresses.
     *
     * @param appliedDnsServers the appliedDnsServers value to set.
     * @return the NetworkInterfaceDnsSettings object itself.
     */
    public NetworkInterfaceDnsSettings withAppliedDnsServers(List<String> appliedDnsServers) {
        this.appliedDnsServers = appliedDnsServers;
        return this;
    }

    /**
     * Get the internalDnsNameLabel property: Gets or sets the Internal DNS name.
     *
     * @return the internalDnsNameLabel value.
     */
    public String internalDnsNameLabel() {
        return this.internalDnsNameLabel;
    }

    /**
     * Set the internalDnsNameLabel property: Gets or sets the Internal DNS name.
     *
     * @param internalDnsNameLabel the internalDnsNameLabel value to set.
     * @return the NetworkInterfaceDnsSettings object itself.
     */
    public NetworkInterfaceDnsSettings withInternalDnsNameLabel(String internalDnsNameLabel) {
        this.internalDnsNameLabel = internalDnsNameLabel;
        return this;
    }

    /**
     * Get the internalFqdn property: Gets or sets full IDNS name in the form, DnsName.VnetId.ZoneId.TopLevelSuffix.
     * This is set when the NIC is associated to a VM.
     *
     * @return the internalFqdn value.
     */
    public String internalFqdn() {
        return this.internalFqdn;
    }

    /**
     * Set the internalFqdn property: Gets or sets full IDNS name in the form, DnsName.VnetId.ZoneId.TopLevelSuffix.
     * This is set when the NIC is associated to a VM.
     *
     * @param internalFqdn the internalFqdn value to set.
     * @return the NetworkInterfaceDnsSettings object itself.
     */
    public NetworkInterfaceDnsSettings withInternalFqdn(String internalFqdn) {
        this.internalFqdn = internalFqdn;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
