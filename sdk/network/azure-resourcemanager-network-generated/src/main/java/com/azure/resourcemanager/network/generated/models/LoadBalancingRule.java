// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Rules of the load balancer. */
@JsonFlatten
@Fluent
public class LoadBalancingRule extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LoadBalancingRule.class);

    /*
     * Gets name of the resource that is unique within a resource group. This
     * name can be used to access the resource
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A unique read-only string that changes whenever the resource is updated
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Gets or sets a reference to frontend IP Addresses
     */
    @JsonProperty(value = "properties.frontendIPConfiguration")
    private SubResource frontendIpConfiguration;

    /*
     * Gets or sets  a reference to a pool of DIPs. Inbound traffic is randomly
     * load balanced across IPs in the backend IPs
     */
    @JsonProperty(value = "properties.backendAddressPool")
    private SubResource backendAddressPool;

    /*
     * Gets or sets the reference of the load balancer probe used by the Load
     * Balancing rule.
     */
    @JsonProperty(value = "properties.probe")
    private SubResource probe;

    /*
     * Gets or sets the transport protocol for the external endpoint. Possible
     * values are Udp or Tcp
     */
    @JsonProperty(value = "properties.protocol")
    private TransportProtocol protocol;

    /*
     * Gets or sets the load distribution policy for this rule
     */
    @JsonProperty(value = "properties.loadDistribution")
    private LoadDistribution loadDistribution;

    /*
     * Gets or sets the port for the external endpoint. You can specify any
     * port number you choose, but the port numbers specified for each role in
     * the service must be unique. Possible values range between 1 and 65535,
     * inclusive
     */
    @JsonProperty(value = "properties.frontendPort")
    private Integer frontendPort;

    /*
     * Gets or sets a port used for internal connections on the endpoint. The
     * localPort attribute maps the eternal port of the endpoint to an internal
     * port on a role. This is useful in scenarios where a role must
     * communicate to an internal component on a port that is different from
     * the one that is exposed externally. If not specified, the value of
     * localPort is the same as the port attribute. Set the value of localPort
     * to '*' to automatically assign an unallocated port that is discoverable
     * using the runtime API
     */
    @JsonProperty(value = "properties.backendPort")
    private Integer backendPort;

    /*
     * Gets or sets the timeout for the Tcp idle connection. The value can be
     * set between 4 and 30 minutes. The default value is 4 minutes. This
     * element is only used when the protocol is set to Tcp
     */
    @JsonProperty(value = "properties.idleTimeoutInMinutes")
    private Integer idleTimeoutInMinutes;

    /*
     * Configures a virtual machine's endpoint for the floating IP capability
     * required to configure a SQL AlwaysOn availability Group. This setting is
     * required when using the SQL Always ON availability Groups in SQL server.
     * This setting can't be changed after you create the endpoint
     */
    @JsonProperty(value = "properties.enableFloatingIP")
    private Boolean enableFloatingIp;

    /*
     * Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * Get the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param name the name value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @param etag the etag value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the frontendIpConfiguration property: Gets or sets a reference to frontend IP Addresses.
     *
     * @return the frontendIpConfiguration value.
     */
    public SubResource frontendIpConfiguration() {
        return this.frontendIpConfiguration;
    }

    /**
     * Set the frontendIpConfiguration property: Gets or sets a reference to frontend IP Addresses.
     *
     * @param frontendIpConfiguration the frontendIpConfiguration value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withFrontendIpConfiguration(SubResource frontendIpConfiguration) {
        this.frontendIpConfiguration = frontendIpConfiguration;
        return this;
    }

    /**
     * Get the backendAddressPool property: Gets or sets a reference to a pool of DIPs. Inbound traffic is randomly load
     * balanced across IPs in the backend IPs.
     *
     * @return the backendAddressPool value.
     */
    public SubResource backendAddressPool() {
        return this.backendAddressPool;
    }

    /**
     * Set the backendAddressPool property: Gets or sets a reference to a pool of DIPs. Inbound traffic is randomly load
     * balanced across IPs in the backend IPs.
     *
     * @param backendAddressPool the backendAddressPool value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withBackendAddressPool(SubResource backendAddressPool) {
        this.backendAddressPool = backendAddressPool;
        return this;
    }

    /**
     * Get the probe property: Gets or sets the reference of the load balancer probe used by the Load Balancing rule.
     *
     * @return the probe value.
     */
    public SubResource probe() {
        return this.probe;
    }

    /**
     * Set the probe property: Gets or sets the reference of the load balancer probe used by the Load Balancing rule.
     *
     * @param probe the probe value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbe(SubResource probe) {
        this.probe = probe;
        return this;
    }

    /**
     * Get the protocol property: Gets or sets the transport protocol for the external endpoint. Possible values are Udp
     * or Tcp.
     *
     * @return the protocol value.
     */
    public TransportProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Gets or sets the transport protocol for the external endpoint. Possible values are Udp
     * or Tcp.
     *
     * @param protocol the protocol value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProtocol(TransportProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the loadDistribution property: Gets or sets the load distribution policy for this rule.
     *
     * @return the loadDistribution value.
     */
    public LoadDistribution loadDistribution() {
        return this.loadDistribution;
    }

    /**
     * Set the loadDistribution property: Gets or sets the load distribution policy for this rule.
     *
     * @param loadDistribution the loadDistribution value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withLoadDistribution(LoadDistribution loadDistribution) {
        this.loadDistribution = loadDistribution;
        return this;
    }

    /**
     * Get the frontendPort property: Gets or sets the port for the external endpoint. You can specify any port number
     * you choose, but the port numbers specified for each role in the service must be unique. Possible values range
     * between 1 and 65535, inclusive.
     *
     * @return the frontendPort value.
     */
    public Integer frontendPort() {
        return this.frontendPort;
    }

    /**
     * Set the frontendPort property: Gets or sets the port for the external endpoint. You can specify any port number
     * you choose, but the port numbers specified for each role in the service must be unique. Possible values range
     * between 1 and 65535, inclusive.
     *
     * @param frontendPort the frontendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withFrontendPort(Integer frontendPort) {
        this.frontendPort = frontendPort;
        return this;
    }

    /**
     * Get the backendPort property: Gets or sets a port used for internal connections on the endpoint. The localPort
     * attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where
     * a role must communicate to an internal component on a port that is different from the one that is exposed
     * externally. If not specified, the value of localPort is the same as the port attribute. Set the value of
     * localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API.
     *
     * @return the backendPort value.
     */
    public Integer backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: Gets or sets a port used for internal connections on the endpoint. The localPort
     * attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where
     * a role must communicate to an internal component on a port that is different from the one that is exposed
     * externally. If not specified, the value of localPort is the same as the port attribute. Set the value of
     * localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API.
     *
     * @param backendPort the backendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withBackendPort(Integer backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Get the idleTimeoutInMinutes property: Gets or sets the timeout for the Tcp idle connection. The value can be set
     * between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to
     * Tcp.
     *
     * @return the idleTimeoutInMinutes value.
     */
    public Integer idleTimeoutInMinutes() {
        return this.idleTimeoutInMinutes;
    }

    /**
     * Set the idleTimeoutInMinutes property: Gets or sets the timeout for the Tcp idle connection. The value can be set
     * between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to
     * Tcp.
     *
     * @param idleTimeoutInMinutes the idleTimeoutInMinutes value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
        this.idleTimeoutInMinutes = idleTimeoutInMinutes;
        return this;
    }

    /**
     * Get the enableFloatingIp property: Configures a virtual machine's endpoint for the floating IP capability
     * required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON
     * availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     *
     * @return the enableFloatingIp value.
     */
    public Boolean enableFloatingIp() {
        return this.enableFloatingIp;
    }

    /**
     * Set the enableFloatingIp property: Configures a virtual machine's endpoint for the floating IP capability
     * required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON
     * availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     *
     * @param enableFloatingIp the enableFloatingIp value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withEnableFloatingIp(Boolean enableFloatingIp) {
        this.enableFloatingIp = enableFloatingIp;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets Provisioning state of the PublicIP resource
     * Updating/Deleting/Failed.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LoadBalancingRule withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
