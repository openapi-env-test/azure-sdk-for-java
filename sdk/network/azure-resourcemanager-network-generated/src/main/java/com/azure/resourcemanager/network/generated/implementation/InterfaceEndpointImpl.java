// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.InterfaceEndpointInner;
import com.azure.resourcemanager.network.generated.fluent.models.NetworkInterfaceInner;
import com.azure.resourcemanager.network.generated.fluent.models.SubnetInner;
import com.azure.resourcemanager.network.generated.models.EndpointService;
import com.azure.resourcemanager.network.generated.models.InterfaceEndpoint;
import com.azure.resourcemanager.network.generated.models.NetworkInterface;
import com.azure.resourcemanager.network.generated.models.Subnet;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class InterfaceEndpointImpl
    implements InterfaceEndpoint, InterfaceEndpoint.Definition, InterfaceEndpoint.Update {
    private InterfaceEndpointInner innerObject;

    private final NetworkManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String fqdn() {
        return this.innerModel().fqdn();
    }

    public EndpointService endpointService() {
        return this.innerModel().endpointService();
    }

    public Subnet subnet() {
        SubnetInner inner = this.innerModel().subnet();
        if (inner != null) {
            return new SubnetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public List<NetworkInterface> networkInterfaces() {
        List<NetworkInterfaceInner> inner = this.innerModel().networkInterfaces();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new NetworkInterfaceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public String owner() {
        return this.innerModel().owner();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String id() {
        return this.innerModel().id();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public InterfaceEndpointInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String interfaceEndpointName;

    public InterfaceEndpointImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public InterfaceEndpoint create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .createOrUpdate(resourceGroupName, interfaceEndpointName, this.innerModel(), Context.NONE);
        return this;
    }

    public InterfaceEndpoint create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .createOrUpdate(resourceGroupName, interfaceEndpointName, this.innerModel(), context);
        return this;
    }

    InterfaceEndpointImpl(String name, NetworkManager serviceManager) {
        this.innerObject = new InterfaceEndpointInner();
        this.serviceManager = serviceManager;
        this.interfaceEndpointName = name;
    }

    public InterfaceEndpointImpl update() {
        return this;
    }

    public InterfaceEndpoint apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .createOrUpdate(resourceGroupName, interfaceEndpointName, this.innerModel(), Context.NONE);
        return this;
    }

    public InterfaceEndpoint apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .createOrUpdate(resourceGroupName, interfaceEndpointName, this.innerModel(), context);
        return this;
    }

    InterfaceEndpointImpl(InterfaceEndpointInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.interfaceEndpointName = Utils.getValueFromIdByName(innerObject.id(), "interfaceEndpoints");
    }

    public InterfaceEndpoint refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .getByResourceGroupWithResponse(resourceGroupName, interfaceEndpointName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public InterfaceEndpoint refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInterfaceEndpoints()
                .getByResourceGroupWithResponse(resourceGroupName, interfaceEndpointName, localExpand, context)
                .getValue();
        return this;
    }

    public InterfaceEndpointImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public InterfaceEndpointImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public InterfaceEndpointImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public InterfaceEndpointImpl withEtag(String etag) {
        this.innerModel().withEtag(etag);
        return this;
    }

    public InterfaceEndpointImpl withFqdn(String fqdn) {
        this.innerModel().withFqdn(fqdn);
        return this;
    }

    public InterfaceEndpointImpl withEndpointService(EndpointService endpointService) {
        this.innerModel().withEndpointService(endpointService);
        return this;
    }

    public InterfaceEndpointImpl withSubnet(SubnetInner subnet) {
        this.innerModel().withSubnet(subnet);
        return this;
    }
}
