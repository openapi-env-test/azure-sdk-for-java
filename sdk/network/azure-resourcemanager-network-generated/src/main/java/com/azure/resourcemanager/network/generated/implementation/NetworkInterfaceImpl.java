// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.NetworkInterfaceInner;
import com.azure.resourcemanager.network.generated.models.NetworkInterface;
import com.azure.resourcemanager.network.generated.models.NetworkInterfaceDnsSettings;
import com.azure.resourcemanager.network.generated.models.NetworkInterfaceIpConfiguration;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NetworkInterfaceImpl
    implements NetworkInterface, NetworkInterface.Definition, NetworkInterface.Update {
    private NetworkInterfaceInner innerObject;

    private final NetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SubResource virtualMachine() {
        return this.innerModel().virtualMachine();
    }

    public SubResource networkSecurityGroup() {
        return this.innerModel().networkSecurityGroup();
    }

    public List<NetworkInterfaceIpConfiguration> ipConfigurations() {
        List<NetworkInterfaceIpConfiguration> inner = this.innerModel().ipConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public NetworkInterfaceDnsSettings dnsSettings() {
        return this.innerModel().dnsSettings();
    }

    public String macAddress() {
        return this.innerModel().macAddress();
    }

    public Boolean primary() {
        return this.innerModel().primary();
    }

    public Boolean enableIpForwarding() {
        return this.innerModel().enableIpForwarding();
    }

    public String resourceGuid() {
        return this.innerModel().resourceGuid();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public NetworkInterfaceInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String networkInterfaceName;

    public NetworkInterfaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NetworkInterface create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public NetworkInterface create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), context);
        return this;
    }

    NetworkInterfaceImpl(String name, NetworkManager serviceManager) {
        this.innerObject = new NetworkInterfaceInner();
        this.serviceManager = serviceManager;
        this.networkInterfaceName = name;
    }

    public NetworkInterfaceImpl update() {
        return this;
    }

    public NetworkInterface apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public NetworkInterface apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), context);
        return this;
    }

    NetworkInterfaceImpl(NetworkInterfaceInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.networkInterfaceName = Utils.getValueFromIdByName(innerObject.id(), "networkInterfaces");
    }

    public NetworkInterface refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .getByResourceGroupWithResponse(resourceGroupName, networkInterfaceName, Context.NONE)
                .getValue();
        return this;
    }

    public NetworkInterface refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfaces()
                .getByResourceGroupWithResponse(resourceGroupName, networkInterfaceName, context)
                .getValue();
        return this;
    }

    public NetworkInterfaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NetworkInterfaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NetworkInterfaceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public NetworkInterfaceImpl withEtag(String etag) {
        this.innerModel().withEtag(etag);
        return this;
    }

    public NetworkInterfaceImpl withVirtualMachine(SubResource virtualMachine) {
        this.innerModel().withVirtualMachine(virtualMachine);
        return this;
    }

    public NetworkInterfaceImpl withNetworkSecurityGroup(SubResource networkSecurityGroup) {
        this.innerModel().withNetworkSecurityGroup(networkSecurityGroup);
        return this;
    }

    public NetworkInterfaceImpl withIpConfigurations(List<NetworkInterfaceIpConfiguration> ipConfigurations) {
        this.innerModel().withIpConfigurations(ipConfigurations);
        return this;
    }

    public NetworkInterfaceImpl withDnsSettings(NetworkInterfaceDnsSettings dnsSettings) {
        this.innerModel().withDnsSettings(dnsSettings);
        return this;
    }

    public NetworkInterfaceImpl withMacAddress(String macAddress) {
        this.innerModel().withMacAddress(macAddress);
        return this;
    }

    public NetworkInterfaceImpl withPrimary(Boolean primary) {
        this.innerModel().withPrimary(primary);
        return this;
    }

    public NetworkInterfaceImpl withEnableIpForwarding(Boolean enableIpForwarding) {
        this.innerModel().withEnableIpForwarding(enableIpForwarding);
        return this;
    }

    public NetworkInterfaceImpl withResourceGuid(String resourceGuid) {
        this.innerModel().withResourceGuid(resourceGuid);
        return this;
    }

    public NetworkInterfaceImpl withProvisioningState(String provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }
}
