// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of LoadBalancers. */
public interface LoadBalancers {
    /**
     * The delete loadbalancer operation deletes the specified loadbalancer.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the loadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String loadBalancerName);

    /**
     * The delete loadbalancer operation deletes the specified loadbalancer.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the loadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String loadBalancerName, Context context);

    /**
     * The Get network interface operation retrieves information about the specified network interface.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the loadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadBalancer resource.
     */
    LoadBalancer getByResourceGroup(String resourceGroupName, String loadBalancerName);

    /**
     * The Get network interface operation retrieves information about the specified network interface.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the loadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadBalancer resource.
     */
    Response<LoadBalancer> getByResourceGroupWithResponse(
        String resourceGroupName, String loadBalancerName, Context context);

    /**
     * The List loadBalancer operation retrieves all the load balancers in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListLoadBalancers Api service call.
     */
    PagedIterable<LoadBalancer> list();

    /**
     * The List loadBalancer operation retrieves all the load balancers in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListLoadBalancers Api service call.
     */
    PagedIterable<LoadBalancer> list(Context context);

    /**
     * The List loadBalancer operation retrieves all the load balancers in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListLoadBalancers Api service call.
     */
    PagedIterable<LoadBalancer> listByResourceGroup(String resourceGroupName);

    /**
     * The List loadBalancer operation retrieves all the load balancers in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListLoadBalancers Api service call.
     */
    PagedIterable<LoadBalancer> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * The Get network interface operation retrieves information about the specified network interface.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadBalancer resource.
     */
    LoadBalancer getById(String id);

    /**
     * The Get network interface operation retrieves information about the specified network interface.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return loadBalancer resource.
     */
    Response<LoadBalancer> getByIdWithResponse(String id, Context context);

    /**
     * The delete loadbalancer operation deletes the specified loadbalancer.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * The delete loadbalancer operation deletes the specified loadbalancer.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new LoadBalancer resource.
     *
     * @param name resource name.
     * @return the first stage of the new LoadBalancer definition.
     */
    LoadBalancer.DefinitionStages.Blank define(String name);
}
