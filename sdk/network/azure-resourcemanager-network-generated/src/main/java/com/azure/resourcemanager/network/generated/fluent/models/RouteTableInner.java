// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** RouteTable resource. */
@JsonFlatten
@Fluent
public class RouteTableInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RouteTableInner.class);

    /*
     * Gets a unique read-only string that changes whenever the resource is
     * updated
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Gets or sets Routes in a Route Table
     */
    @JsonProperty(value = "properties.routes")
    private List<RouteInner> routes;

    /*
     * Gets collection of references to subnets
     */
    @JsonProperty(value = "properties.subnets")
    private List<SubResource> subnets;

    /*
     * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * Get the etag property: Gets a unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: Gets a unique read-only string that changes whenever the resource is updated.
     *
     * @param etag the etag value to set.
     * @return the RouteTableInner object itself.
     */
    public RouteTableInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the routes property: Gets or sets Routes in a Route Table.
     *
     * @return the routes value.
     */
    public List<RouteInner> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: Gets or sets Routes in a Route Table.
     *
     * @param routes the routes value to set.
     * @return the RouteTableInner object itself.
     */
    public RouteTableInner withRoutes(List<RouteInner> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Get the subnets property: Gets collection of references to subnets.
     *
     * @return the subnets value.
     */
    public List<SubResource> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: Gets collection of references to subnets.
     *
     * @param subnets the subnets value to set.
     * @return the RouteTableInner object itself.
     */
    public RouteTableInner withSubnets(List<SubResource> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets Provisioning state of the resource Updating/Deleting/Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets Provisioning state of the resource Updating/Deleting/Failed.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the RouteTableInner object itself.
     */
    public RouteTableInner withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RouteTableInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RouteTableInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }
}
