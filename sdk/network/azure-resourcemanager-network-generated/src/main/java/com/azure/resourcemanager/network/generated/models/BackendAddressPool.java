// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Pool of backend IP addresses. */
@JsonFlatten
@Fluent
public class BackendAddressPool extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BackendAddressPool.class);

    /*
     * Gets name of the resource that is unique within a resource group. This
     * name can be used to access the resource
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A unique read-only string that changes whenever the resource is updated
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Gets collection of references to IPs defined in NICs
     */
    @JsonProperty(value = "properties.backendIPConfigurations")
    private List<SubResource> backendIpConfigurations;

    /*
     * Gets Load Balancing rules that use this Backend Address Pool
     */
    @JsonProperty(value = "properties.loadBalancingRules")
    private List<SubResource> loadBalancingRules;

    /*
     * Gets outbound rules that use this Backend Address Pool
     */
    @JsonProperty(value = "properties.outboundNatRule")
    private SubResource outboundNatRule;

    /*
     * Provisioning state of the PublicIP resource Updating/Deleting/Failed
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /**
     * Get the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param name the name value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @param etag the etag value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the backendIpConfigurations property: Gets collection of references to IPs defined in NICs.
     *
     * @return the backendIpConfigurations value.
     */
    public List<SubResource> backendIpConfigurations() {
        return this.backendIpConfigurations;
    }

    /**
     * Set the backendIpConfigurations property: Gets collection of references to IPs defined in NICs.
     *
     * @param backendIpConfigurations the backendIpConfigurations value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withBackendIpConfigurations(List<SubResource> backendIpConfigurations) {
        this.backendIpConfigurations = backendIpConfigurations;
        return this;
    }

    /**
     * Get the loadBalancingRules property: Gets Load Balancing rules that use this Backend Address Pool.
     *
     * @return the loadBalancingRules value.
     */
    public List<SubResource> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * Set the loadBalancingRules property: Gets Load Balancing rules that use this Backend Address Pool.
     *
     * @param loadBalancingRules the loadBalancingRules value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withLoadBalancingRules(List<SubResource> loadBalancingRules) {
        this.loadBalancingRules = loadBalancingRules;
        return this;
    }

    /**
     * Get the outboundNatRule property: Gets outbound rules that use this Backend Address Pool.
     *
     * @return the outboundNatRule value.
     */
    public SubResource outboundNatRule() {
        return this.outboundNatRule;
    }

    /**
     * Set the outboundNatRule property: Gets outbound rules that use this Backend Address Pool.
     *
     * @param outboundNatRule the outboundNatRule value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withOutboundNatRule(SubResource outboundNatRule) {
        this.outboundNatRule = outboundNatRule;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the PublicIP resource Updating/Deleting/Failed.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the PublicIP resource Updating/Deleting/Failed.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the BackendAddressPool object itself.
     */
    public BackendAddressPool withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BackendAddressPool withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
