// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkManagementClient;
import com.azure.resourcemanager.network.generated.implementation.ApplicationGatewaysImpl;
import com.azure.resourcemanager.network.generated.implementation.BgpServiceCommunitiesImpl;
import com.azure.resourcemanager.network.generated.implementation.ExpressRouteCircuitAuthorizationsImpl;
import com.azure.resourcemanager.network.generated.implementation.ExpressRouteCircuitPeeringsImpl;
import com.azure.resourcemanager.network.generated.implementation.ExpressRouteCircuitsImpl;
import com.azure.resourcemanager.network.generated.implementation.ExpressRouteServiceProvidersImpl;
import com.azure.resourcemanager.network.generated.implementation.LoadBalancersImpl;
import com.azure.resourcemanager.network.generated.implementation.LocalNetworkGatewaysImpl;
import com.azure.resourcemanager.network.generated.implementation.NetworkInterfacesImpl;
import com.azure.resourcemanager.network.generated.implementation.NetworkManagementClientBuilder;
import com.azure.resourcemanager.network.generated.implementation.NetworkSecurityGroupsImpl;
import com.azure.resourcemanager.network.generated.implementation.NetworkWatchersImpl;
import com.azure.resourcemanager.network.generated.implementation.PacketCapturesImpl;
import com.azure.resourcemanager.network.generated.implementation.PublicIpAddressesImpl;
import com.azure.resourcemanager.network.generated.implementation.ResourceProvidersImpl;
import com.azure.resourcemanager.network.generated.implementation.RouteFilterRulesImpl;
import com.azure.resourcemanager.network.generated.implementation.RouteFiltersImpl;
import com.azure.resourcemanager.network.generated.implementation.RouteTablesImpl;
import com.azure.resourcemanager.network.generated.implementation.RoutesImpl;
import com.azure.resourcemanager.network.generated.implementation.SecurityRulesImpl;
import com.azure.resourcemanager.network.generated.implementation.SubnetsImpl;
import com.azure.resourcemanager.network.generated.implementation.UsagesImpl;
import com.azure.resourcemanager.network.generated.implementation.VirtualNetworkGatewayConnectionsImpl;
import com.azure.resourcemanager.network.generated.implementation.VirtualNetworkGatewaysImpl;
import com.azure.resourcemanager.network.generated.implementation.VirtualNetworkPeeringsImpl;
import com.azure.resourcemanager.network.generated.implementation.VirtualNetworksImpl;
import com.azure.resourcemanager.network.generated.models.ApplicationGateways;
import com.azure.resourcemanager.network.generated.models.BgpServiceCommunities;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitAuthorizations;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitPeerings;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuits;
import com.azure.resourcemanager.network.generated.models.ExpressRouteServiceProviders;
import com.azure.resourcemanager.network.generated.models.LoadBalancers;
import com.azure.resourcemanager.network.generated.models.LocalNetworkGateways;
import com.azure.resourcemanager.network.generated.models.NetworkInterfaces;
import com.azure.resourcemanager.network.generated.models.NetworkSecurityGroups;
import com.azure.resourcemanager.network.generated.models.NetworkWatchers;
import com.azure.resourcemanager.network.generated.models.PacketCaptures;
import com.azure.resourcemanager.network.generated.models.PublicIpAddresses;
import com.azure.resourcemanager.network.generated.models.ResourceProviders;
import com.azure.resourcemanager.network.generated.models.RouteFilterRules;
import com.azure.resourcemanager.network.generated.models.RouteFilters;
import com.azure.resourcemanager.network.generated.models.RouteTables;
import com.azure.resourcemanager.network.generated.models.Routes;
import com.azure.resourcemanager.network.generated.models.SecurityRules;
import com.azure.resourcemanager.network.generated.models.Subnets;
import com.azure.resourcemanager.network.generated.models.Usages;
import com.azure.resourcemanager.network.generated.models.VirtualNetworkGatewayConnections;
import com.azure.resourcemanager.network.generated.models.VirtualNetworkGateways;
import com.azure.resourcemanager.network.generated.models.VirtualNetworkPeerings;
import com.azure.resourcemanager.network.generated.models.VirtualNetworks;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to NetworkManager. Network Client. */
public final class NetworkManager {
    private ApplicationGateways applicationGateways;

    private ResourceProviders resourceProviders;

    private ExpressRouteCircuitAuthorizations expressRouteCircuitAuthorizations;

    private ExpressRouteCircuitPeerings expressRouteCircuitPeerings;

    private ExpressRouteCircuits expressRouteCircuits;

    private ExpressRouteServiceProviders expressRouteServiceProviders;

    private LoadBalancers loadBalancers;

    private NetworkInterfaces networkInterfaces;

    private NetworkSecurityGroups networkSecurityGroups;

    private SecurityRules securityRules;

    private NetworkWatchers networkWatchers;

    private PacketCaptures packetCaptures;

    private PublicIpAddresses publicIpAddresses;

    private RouteFilters routeFilters;

    private RouteFilterRules routeFilterRules;

    private RouteTables routeTables;

    private Routes routes;

    private BgpServiceCommunities bgpServiceCommunities;

    private Usages usages;

    private VirtualNetworks virtualNetworks;

    private Subnets subnets;

    private VirtualNetworkPeerings virtualNetworkPeerings;

    private VirtualNetworkGateways virtualNetworkGateways;

    private VirtualNetworkGatewayConnections virtualNetworkGatewayConnections;

    private LocalNetworkGateways localNetworkGateways;

    private final NetworkManagementClient clientObject;

    private NetworkManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new NetworkManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Network service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Network service API instance.
     */
    public static NetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create NetworkManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new NetworkManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Network service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Network service API instance.
         */
        public NetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.network.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new NetworkManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ApplicationGateways. */
    public ApplicationGateways applicationGateways() {
        if (this.applicationGateways == null) {
            this.applicationGateways = new ApplicationGatewaysImpl(clientObject.getApplicationGateways(), this);
        }
        return applicationGateways;
    }

    /** @return Resource collection API of ResourceProviders. */
    public ResourceProviders resourceProviders() {
        if (this.resourceProviders == null) {
            this.resourceProviders = new ResourceProvidersImpl(clientObject.getResourceProviders(), this);
        }
        return resourceProviders;
    }

    /** @return Resource collection API of ExpressRouteCircuitAuthorizations. */
    public ExpressRouteCircuitAuthorizations expressRouteCircuitAuthorizations() {
        if (this.expressRouteCircuitAuthorizations == null) {
            this.expressRouteCircuitAuthorizations =
                new ExpressRouteCircuitAuthorizationsImpl(clientObject.getExpressRouteCircuitAuthorizations(), this);
        }
        return expressRouteCircuitAuthorizations;
    }

    /** @return Resource collection API of ExpressRouteCircuitPeerings. */
    public ExpressRouteCircuitPeerings expressRouteCircuitPeerings() {
        if (this.expressRouteCircuitPeerings == null) {
            this.expressRouteCircuitPeerings =
                new ExpressRouteCircuitPeeringsImpl(clientObject.getExpressRouteCircuitPeerings(), this);
        }
        return expressRouteCircuitPeerings;
    }

    /** @return Resource collection API of ExpressRouteCircuits. */
    public ExpressRouteCircuits expressRouteCircuits() {
        if (this.expressRouteCircuits == null) {
            this.expressRouteCircuits = new ExpressRouteCircuitsImpl(clientObject.getExpressRouteCircuits(), this);
        }
        return expressRouteCircuits;
    }

    /** @return Resource collection API of ExpressRouteServiceProviders. */
    public ExpressRouteServiceProviders expressRouteServiceProviders() {
        if (this.expressRouteServiceProviders == null) {
            this.expressRouteServiceProviders =
                new ExpressRouteServiceProvidersImpl(clientObject.getExpressRouteServiceProviders(), this);
        }
        return expressRouteServiceProviders;
    }

    /** @return Resource collection API of LoadBalancers. */
    public LoadBalancers loadBalancers() {
        if (this.loadBalancers == null) {
            this.loadBalancers = new LoadBalancersImpl(clientObject.getLoadBalancers(), this);
        }
        return loadBalancers;
    }

    /** @return Resource collection API of NetworkInterfaces. */
    public NetworkInterfaces networkInterfaces() {
        if (this.networkInterfaces == null) {
            this.networkInterfaces = new NetworkInterfacesImpl(clientObject.getNetworkInterfaces(), this);
        }
        return networkInterfaces;
    }

    /** @return Resource collection API of NetworkSecurityGroups. */
    public NetworkSecurityGroups networkSecurityGroups() {
        if (this.networkSecurityGroups == null) {
            this.networkSecurityGroups = new NetworkSecurityGroupsImpl(clientObject.getNetworkSecurityGroups(), this);
        }
        return networkSecurityGroups;
    }

    /** @return Resource collection API of SecurityRules. */
    public SecurityRules securityRules() {
        if (this.securityRules == null) {
            this.securityRules = new SecurityRulesImpl(clientObject.getSecurityRules(), this);
        }
        return securityRules;
    }

    /** @return Resource collection API of NetworkWatchers. */
    public NetworkWatchers networkWatchers() {
        if (this.networkWatchers == null) {
            this.networkWatchers = new NetworkWatchersImpl(clientObject.getNetworkWatchers(), this);
        }
        return networkWatchers;
    }

    /** @return Resource collection API of PacketCaptures. */
    public PacketCaptures packetCaptures() {
        if (this.packetCaptures == null) {
            this.packetCaptures = new PacketCapturesImpl(clientObject.getPacketCaptures(), this);
        }
        return packetCaptures;
    }

    /** @return Resource collection API of PublicIpAddresses. */
    public PublicIpAddresses publicIpAddresses() {
        if (this.publicIpAddresses == null) {
            this.publicIpAddresses = new PublicIpAddressesImpl(clientObject.getPublicIpAddresses(), this);
        }
        return publicIpAddresses;
    }

    /** @return Resource collection API of RouteFilters. */
    public RouteFilters routeFilters() {
        if (this.routeFilters == null) {
            this.routeFilters = new RouteFiltersImpl(clientObject.getRouteFilters(), this);
        }
        return routeFilters;
    }

    /** @return Resource collection API of RouteFilterRules. */
    public RouteFilterRules routeFilterRules() {
        if (this.routeFilterRules == null) {
            this.routeFilterRules = new RouteFilterRulesImpl(clientObject.getRouteFilterRules(), this);
        }
        return routeFilterRules;
    }

    /** @return Resource collection API of RouteTables. */
    public RouteTables routeTables() {
        if (this.routeTables == null) {
            this.routeTables = new RouteTablesImpl(clientObject.getRouteTables(), this);
        }
        return routeTables;
    }

    /** @return Resource collection API of Routes. */
    public Routes routes() {
        if (this.routes == null) {
            this.routes = new RoutesImpl(clientObject.getRoutes(), this);
        }
        return routes;
    }

    /** @return Resource collection API of BgpServiceCommunities. */
    public BgpServiceCommunities bgpServiceCommunities() {
        if (this.bgpServiceCommunities == null) {
            this.bgpServiceCommunities = new BgpServiceCommunitiesImpl(clientObject.getBgpServiceCommunities(), this);
        }
        return bgpServiceCommunities;
    }

    /** @return Resource collection API of Usages. */
    public Usages usages() {
        if (this.usages == null) {
            this.usages = new UsagesImpl(clientObject.getUsages(), this);
        }
        return usages;
    }

    /** @return Resource collection API of VirtualNetworks. */
    public VirtualNetworks virtualNetworks() {
        if (this.virtualNetworks == null) {
            this.virtualNetworks = new VirtualNetworksImpl(clientObject.getVirtualNetworks(), this);
        }
        return virtualNetworks;
    }

    /** @return Resource collection API of Subnets. */
    public Subnets subnets() {
        if (this.subnets == null) {
            this.subnets = new SubnetsImpl(clientObject.getSubnets(), this);
        }
        return subnets;
    }

    /** @return Resource collection API of VirtualNetworkPeerings. */
    public VirtualNetworkPeerings virtualNetworkPeerings() {
        if (this.virtualNetworkPeerings == null) {
            this.virtualNetworkPeerings =
                new VirtualNetworkPeeringsImpl(clientObject.getVirtualNetworkPeerings(), this);
        }
        return virtualNetworkPeerings;
    }

    /** @return Resource collection API of VirtualNetworkGateways. */
    public VirtualNetworkGateways virtualNetworkGateways() {
        if (this.virtualNetworkGateways == null) {
            this.virtualNetworkGateways =
                new VirtualNetworkGatewaysImpl(clientObject.getVirtualNetworkGateways(), this);
        }
        return virtualNetworkGateways;
    }

    /** @return Resource collection API of VirtualNetworkGatewayConnections. */
    public VirtualNetworkGatewayConnections virtualNetworkGatewayConnections() {
        if (this.virtualNetworkGatewayConnections == null) {
            this.virtualNetworkGatewayConnections =
                new VirtualNetworkGatewayConnectionsImpl(clientObject.getVirtualNetworkGatewayConnections(), this);
        }
        return virtualNetworkGatewayConnections;
    }

    /** @return Resource collection API of LocalNetworkGateways. */
    public LocalNetworkGateways localNetworkGateways() {
        if (this.localNetworkGateways == null) {
            this.localNetworkGateways = new LocalNetworkGatewaysImpl(clientObject.getLocalNetworkGateways(), this);
        }
        return localNetworkGateways;
    }

    /**
     * @return Wrapped service client NetworkManagementClient providing direct access to the underlying auto-generated
     *     API implementation, based on Azure REST API.
     */
    public NetworkManagementClient serviceClient() {
        return this.clientObject;
    }
}
