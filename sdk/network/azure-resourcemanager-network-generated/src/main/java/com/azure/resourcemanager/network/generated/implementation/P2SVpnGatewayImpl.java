// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.P2SVpnGatewayInner;
import com.azure.resourcemanager.network.generated.models.AddressSpace;
import com.azure.resourcemanager.network.generated.models.P2SVpnGateway;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.TagsObject;
import com.azure.resourcemanager.network.generated.models.VpnClientConnectionHealth;
import java.util.Collections;
import java.util.Map;

public final class P2SVpnGatewayImpl implements P2SVpnGateway, P2SVpnGateway.Definition, P2SVpnGateway.Update {
    private P2SVpnGatewayInner innerObject;

    private final NetworkManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SubResource virtualHub() {
        return this.innerModel().virtualHub();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Integer vpnGatewayScaleUnit() {
        return this.innerModel().vpnGatewayScaleUnit();
    }

    public SubResource p2SVpnServerConfiguration() {
        return this.innerModel().p2SVpnServerConfiguration();
    }

    public AddressSpace vpnClientAddressPool() {
        return this.innerModel().vpnClientAddressPool();
    }

    public VpnClientConnectionHealth vpnClientConnectionHealth() {
        return this.innerModel().vpnClientConnectionHealth();
    }

    public String id() {
        return this.innerModel().id();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public P2SVpnGatewayInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String gatewayName;

    private TagsObject updateP2SVpnGatewayParameters;

    public P2SVpnGatewayImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public P2SVpnGateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .createOrUpdate(resourceGroupName, gatewayName, this.innerModel(), Context.NONE);
        return this;
    }

    public P2SVpnGateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .createOrUpdate(resourceGroupName, gatewayName, this.innerModel(), context);
        return this;
    }

    P2SVpnGatewayImpl(String name, NetworkManager serviceManager) {
        this.innerObject = new P2SVpnGatewayInner();
        this.serviceManager = serviceManager;
        this.gatewayName = name;
    }

    public P2SVpnGatewayImpl update() {
        this.updateP2SVpnGatewayParameters = new TagsObject();
        return this;
    }

    public P2SVpnGateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .updateTags(resourceGroupName, gatewayName, updateP2SVpnGatewayParameters, Context.NONE);
        return this;
    }

    public P2SVpnGateway apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .updateTags(resourceGroupName, gatewayName, updateP2SVpnGatewayParameters, context);
        return this;
    }

    P2SVpnGatewayImpl(P2SVpnGatewayInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.gatewayName = Utils.getValueFromIdByName(innerObject.id(), "p2svpnGateways");
    }

    public P2SVpnGateway refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .getByResourceGroupWithResponse(resourceGroupName, gatewayName, Context.NONE)
                .getValue();
        return this;
    }

    public P2SVpnGateway refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getP2SVpnGateways()
                .getByResourceGroupWithResponse(resourceGroupName, gatewayName, context)
                .getValue();
        return this;
    }

    public P2SVpnGatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public P2SVpnGatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public P2SVpnGatewayImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateP2SVpnGatewayParameters.withTags(tags);
            return this;
        }
    }

    public P2SVpnGatewayImpl withVirtualHub(SubResource virtualHub) {
        this.innerModel().withVirtualHub(virtualHub);
        return this;
    }

    public P2SVpnGatewayImpl withProvisioningState(ProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public P2SVpnGatewayImpl withVpnGatewayScaleUnit(Integer vpnGatewayScaleUnit) {
        this.innerModel().withVpnGatewayScaleUnit(vpnGatewayScaleUnit);
        return this;
    }

    public P2SVpnGatewayImpl withP2SVpnServerConfiguration(SubResource p2SVpnServerConfiguration) {
        this.innerModel().withP2SVpnServerConfiguration(p2SVpnServerConfiguration);
        return this;
    }

    public P2SVpnGatewayImpl withVpnClientAddressPool(AddressSpace vpnClientAddressPool) {
        this.innerModel().withVpnClientAddressPool(vpnClientAddressPool);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
