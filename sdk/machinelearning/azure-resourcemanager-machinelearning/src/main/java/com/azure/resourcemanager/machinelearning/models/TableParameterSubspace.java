// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The TableParameterSubspace model. */
@Fluent
public final class TableParameterSubspace {
    /*
     * Specify the boosting type, e.g gbdt for XGBoost.
     */
    @JsonProperty(value = "booster")
    private String booster;

    /*
     * Specify the boosting type, e.g gbdt for LightGBM.
     */
    @JsonProperty(value = "boostingType")
    private String boostingType;

    /*
     * Specify the grow policy, which controls the way new nodes are added to the tree.
     */
    @JsonProperty(value = "growPolicy")
    private String growPolicy;

    /*
     * The learning rate for the training procedure.
     */
    @JsonProperty(value = "learningRate")
    private String learningRate;

    /*
     * Specify the Maximum number of discrete bins to bucket continuous features .
     */
    @JsonProperty(value = "maxBin")
    private String maxBin;

    /*
     * Specify the max depth to limit the tree depth explicitly.
     */
    @JsonProperty(value = "maxDepth")
    private String maxDepth;

    /*
     * Specify the max leaves to limit the tree leaves explicitly.
     */
    @JsonProperty(value = "maxLeaves")
    private String maxLeaves;

    /*
     * The minimum number of data per leaf.
     */
    @JsonProperty(value = "minDataInLeaf")
    private String minDataInLeaf;

    /*
     * Minimum loss reduction required to make a further partition on a leaf node of the tree.
     */
    @JsonProperty(value = "minSplitGain")
    private String minSplitGain;

    /*
     * The name of the model to train.
     */
    @JsonProperty(value = "modelName")
    private String modelName;

    /*
     * Specify the number of trees (or rounds) in an model.
     */
    @JsonProperty(value = "nEstimators")
    private String nEstimators;

    /*
     * Specify the number of leaves.
     */
    @JsonProperty(value = "numLeaves")
    private String numLeaves;

    /*
     * The name of the preprocessor to use.
     */
    @JsonProperty(value = "preprocessorName")
    private String preprocessorName;

    /*
     * L1 regularization term on weights.
     */
    @JsonProperty(value = "regAlpha")
    private String regAlpha;

    /*
     * L2 regularization term on weights.
     */
    @JsonProperty(value = "regLambda")
    private String regLambda;

    /*
     * Subsample ratio of the training instance.
     */
    @JsonProperty(value = "subsample")
    private String subsample;

    /*
     * Frequency of subsample
     */
    @JsonProperty(value = "subsampleFreq")
    private String subsampleFreq;

    /*
     * Specify the tree method.
     */
    @JsonProperty(value = "treeMethod")
    private String treeMethod;

    /*
     * If true, center before scaling the data with StandardScalar.
     */
    @JsonProperty(value = "withMean")
    private String withMean;

    /*
     * If true, scaling the data with Unit Variance with StandardScalar.
     */
    @JsonProperty(value = "withStd")
    private String withStd;

    /** Creates an instance of TableParameterSubspace class. */
    public TableParameterSubspace() {
    }

    /**
     * Get the booster property: Specify the boosting type, e.g gbdt for XGBoost.
     *
     * @return the booster value.
     */
    public String booster() {
        return this.booster;
    }

    /**
     * Set the booster property: Specify the boosting type, e.g gbdt for XGBoost.
     *
     * @param booster the booster value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withBooster(String booster) {
        this.booster = booster;
        return this;
    }

    /**
     * Get the boostingType property: Specify the boosting type, e.g gbdt for LightGBM.
     *
     * @return the boostingType value.
     */
    public String boostingType() {
        return this.boostingType;
    }

    /**
     * Set the boostingType property: Specify the boosting type, e.g gbdt for LightGBM.
     *
     * @param boostingType the boostingType value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withBoostingType(String boostingType) {
        this.boostingType = boostingType;
        return this;
    }

    /**
     * Get the growPolicy property: Specify the grow policy, which controls the way new nodes are added to the tree.
     *
     * @return the growPolicy value.
     */
    public String growPolicy() {
        return this.growPolicy;
    }

    /**
     * Set the growPolicy property: Specify the grow policy, which controls the way new nodes are added to the tree.
     *
     * @param growPolicy the growPolicy value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withGrowPolicy(String growPolicy) {
        this.growPolicy = growPolicy;
        return this;
    }

    /**
     * Get the learningRate property: The learning rate for the training procedure.
     *
     * @return the learningRate value.
     */
    public String learningRate() {
        return this.learningRate;
    }

    /**
     * Set the learningRate property: The learning rate for the training procedure.
     *
     * @param learningRate the learningRate value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withLearningRate(String learningRate) {
        this.learningRate = learningRate;
        return this;
    }

    /**
     * Get the maxBin property: Specify the Maximum number of discrete bins to bucket continuous features .
     *
     * @return the maxBin value.
     */
    public String maxBin() {
        return this.maxBin;
    }

    /**
     * Set the maxBin property: Specify the Maximum number of discrete bins to bucket continuous features .
     *
     * @param maxBin the maxBin value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withMaxBin(String maxBin) {
        this.maxBin = maxBin;
        return this;
    }

    /**
     * Get the maxDepth property: Specify the max depth to limit the tree depth explicitly.
     *
     * @return the maxDepth value.
     */
    public String maxDepth() {
        return this.maxDepth;
    }

    /**
     * Set the maxDepth property: Specify the max depth to limit the tree depth explicitly.
     *
     * @param maxDepth the maxDepth value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withMaxDepth(String maxDepth) {
        this.maxDepth = maxDepth;
        return this;
    }

    /**
     * Get the maxLeaves property: Specify the max leaves to limit the tree leaves explicitly.
     *
     * @return the maxLeaves value.
     */
    public String maxLeaves() {
        return this.maxLeaves;
    }

    /**
     * Set the maxLeaves property: Specify the max leaves to limit the tree leaves explicitly.
     *
     * @param maxLeaves the maxLeaves value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withMaxLeaves(String maxLeaves) {
        this.maxLeaves = maxLeaves;
        return this;
    }

    /**
     * Get the minDataInLeaf property: The minimum number of data per leaf.
     *
     * @return the minDataInLeaf value.
     */
    public String minDataInLeaf() {
        return this.minDataInLeaf;
    }

    /**
     * Set the minDataInLeaf property: The minimum number of data per leaf.
     *
     * @param minDataInLeaf the minDataInLeaf value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withMinDataInLeaf(String minDataInLeaf) {
        this.minDataInLeaf = minDataInLeaf;
        return this;
    }

    /**
     * Get the minSplitGain property: Minimum loss reduction required to make a further partition on a leaf node of the
     * tree.
     *
     * @return the minSplitGain value.
     */
    public String minSplitGain() {
        return this.minSplitGain;
    }

    /**
     * Set the minSplitGain property: Minimum loss reduction required to make a further partition on a leaf node of the
     * tree.
     *
     * @param minSplitGain the minSplitGain value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withMinSplitGain(String minSplitGain) {
        this.minSplitGain = minSplitGain;
        return this;
    }

    /**
     * Get the modelName property: The name of the model to train.
     *
     * @return the modelName value.
     */
    public String modelName() {
        return this.modelName;
    }

    /**
     * Set the modelName property: The name of the model to train.
     *
     * @param modelName the modelName value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withModelName(String modelName) {
        this.modelName = modelName;
        return this;
    }

    /**
     * Get the nEstimators property: Specify the number of trees (or rounds) in an model.
     *
     * @return the nEstimators value.
     */
    public String nEstimators() {
        return this.nEstimators;
    }

    /**
     * Set the nEstimators property: Specify the number of trees (or rounds) in an model.
     *
     * @param nEstimators the nEstimators value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withNEstimators(String nEstimators) {
        this.nEstimators = nEstimators;
        return this;
    }

    /**
     * Get the numLeaves property: Specify the number of leaves.
     *
     * @return the numLeaves value.
     */
    public String numLeaves() {
        return this.numLeaves;
    }

    /**
     * Set the numLeaves property: Specify the number of leaves.
     *
     * @param numLeaves the numLeaves value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withNumLeaves(String numLeaves) {
        this.numLeaves = numLeaves;
        return this;
    }

    /**
     * Get the preprocessorName property: The name of the preprocessor to use.
     *
     * @return the preprocessorName value.
     */
    public String preprocessorName() {
        return this.preprocessorName;
    }

    /**
     * Set the preprocessorName property: The name of the preprocessor to use.
     *
     * @param preprocessorName the preprocessorName value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withPreprocessorName(String preprocessorName) {
        this.preprocessorName = preprocessorName;
        return this;
    }

    /**
     * Get the regAlpha property: L1 regularization term on weights.
     *
     * @return the regAlpha value.
     */
    public String regAlpha() {
        return this.regAlpha;
    }

    /**
     * Set the regAlpha property: L1 regularization term on weights.
     *
     * @param regAlpha the regAlpha value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withRegAlpha(String regAlpha) {
        this.regAlpha = regAlpha;
        return this;
    }

    /**
     * Get the regLambda property: L2 regularization term on weights.
     *
     * @return the regLambda value.
     */
    public String regLambda() {
        return this.regLambda;
    }

    /**
     * Set the regLambda property: L2 regularization term on weights.
     *
     * @param regLambda the regLambda value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withRegLambda(String regLambda) {
        this.regLambda = regLambda;
        return this;
    }

    /**
     * Get the subsample property: Subsample ratio of the training instance.
     *
     * @return the subsample value.
     */
    public String subsample() {
        return this.subsample;
    }

    /**
     * Set the subsample property: Subsample ratio of the training instance.
     *
     * @param subsample the subsample value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withSubsample(String subsample) {
        this.subsample = subsample;
        return this;
    }

    /**
     * Get the subsampleFreq property: Frequency of subsample.
     *
     * @return the subsampleFreq value.
     */
    public String subsampleFreq() {
        return this.subsampleFreq;
    }

    /**
     * Set the subsampleFreq property: Frequency of subsample.
     *
     * @param subsampleFreq the subsampleFreq value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withSubsampleFreq(String subsampleFreq) {
        this.subsampleFreq = subsampleFreq;
        return this;
    }

    /**
     * Get the treeMethod property: Specify the tree method.
     *
     * @return the treeMethod value.
     */
    public String treeMethod() {
        return this.treeMethod;
    }

    /**
     * Set the treeMethod property: Specify the tree method.
     *
     * @param treeMethod the treeMethod value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withTreeMethod(String treeMethod) {
        this.treeMethod = treeMethod;
        return this;
    }

    /**
     * Get the withMean property: If true, center before scaling the data with StandardScalar.
     *
     * @return the withMean value.
     */
    public String withMean() {
        return this.withMean;
    }

    /**
     * Set the withMean property: If true, center before scaling the data with StandardScalar.
     *
     * @param withMean the withMean value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withWithMean(String withMean) {
        this.withMean = withMean;
        return this;
    }

    /**
     * Get the withStd property: If true, scaling the data with Unit Variance with StandardScalar.
     *
     * @return the withStd value.
     */
    public String withStd() {
        return this.withStd;
    }

    /**
     * Set the withStd property: If true, scaling the data with Unit Variance with StandardScalar.
     *
     * @param withStd the withStd value to set.
     * @return the TableParameterSubspace object itself.
     */
    public TableParameterSubspace withWithStd(String withStd) {
        this.withStd = withStd;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
