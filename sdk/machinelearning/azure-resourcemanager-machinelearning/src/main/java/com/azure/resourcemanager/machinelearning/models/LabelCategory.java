// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Label category definition. */
@Fluent
public final class LabelCategory {
    /*
     * Dictionary of label classes in this category.
     */
    @JsonProperty(value = "classes")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, LabelClass> classes;

    /*
     * Display name of the label category.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Indicates whether it is allowed to select multiple classes in this
     * category.
     */
    @JsonProperty(value = "multiSelectEnabled")
    private Boolean multiSelectEnabled;

    /**
     * Get the classes property: Dictionary of label classes in this category.
     *
     * @return the classes value.
     */
    public Map<String, LabelClass> classes() {
        return this.classes;
    }

    /**
     * Set the classes property: Dictionary of label classes in this category.
     *
     * @param classes the classes value to set.
     * @return the LabelCategory object itself.
     */
    public LabelCategory withClasses(Map<String, LabelClass> classes) {
        this.classes = classes;
        return this;
    }

    /**
     * Get the displayName property: Display name of the label category.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the label category.
     *
     * @param displayName the displayName value to set.
     * @return the LabelCategory object itself.
     */
    public LabelCategory withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the multiSelectEnabled property: Indicates whether it is allowed to select multiple classes in this category.
     *
     * @return the multiSelectEnabled value.
     */
    public Boolean multiSelectEnabled() {
        return this.multiSelectEnabled;
    }

    /**
     * Set the multiSelectEnabled property: Indicates whether it is allowed to select multiple classes in this category.
     *
     * @param multiSelectEnabled the multiSelectEnabled value to set.
     * @return the LabelCategory object itself.
     */
    public LabelCategory withMultiSelectEnabled(Boolean multiSelectEnabled) {
        this.multiSelectEnabled = multiSelectEnabled;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (classes() != null) {
            classes()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
