// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Fixed training parameters that won't be swept over during AutoML NLP training. */
@Fluent
public final class NlpFixedParameters {
    /*
     * Number of steps to accumulate gradients over before running a backward pass.
     */
    @JsonProperty(value = "gradientAccumulationSteps")
    private Integer gradientAccumulationSteps;

    /*
     * The learning rate for the training procedure.
     */
    @JsonProperty(value = "learningRate")
    private Float learningRate;

    /*
     * The type of learning rate schedule to use during the training procedure.
     */
    @JsonProperty(value = "learningRateScheduler")
    private NlpLearningRateScheduler learningRateScheduler;

    /*
     * The name of the model to train.
     */
    @JsonProperty(value = "modelName")
    private String modelName;

    /*
     * Number of training epochs.
     */
    @JsonProperty(value = "numberOfEpochs")
    private Integer numberOfEpochs;

    /*
     * The batch size for the training procedure.
     */
    @JsonProperty(value = "trainingBatchSize")
    private Integer trainingBatchSize;

    /*
     * The batch size to be used during evaluation.
     */
    @JsonProperty(value = "validationBatchSize")
    private Integer validationBatchSize;

    /*
     * The warmup ratio, used alongside LrSchedulerType.
     */
    @JsonProperty(value = "warmupRatio")
    private Float warmupRatio;

    /*
     * The weight decay for the training procedure.
     */
    @JsonProperty(value = "weightDecay")
    private Float weightDecay;

    /** Creates an instance of NlpFixedParameters class. */
    public NlpFixedParameters() {
    }

    /**
     * Get the gradientAccumulationSteps property: Number of steps to accumulate gradients over before running a
     * backward pass.
     *
     * @return the gradientAccumulationSteps value.
     */
    public Integer gradientAccumulationSteps() {
        return this.gradientAccumulationSteps;
    }

    /**
     * Set the gradientAccumulationSteps property: Number of steps to accumulate gradients over before running a
     * backward pass.
     *
     * @param gradientAccumulationSteps the gradientAccumulationSteps value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withGradientAccumulationSteps(Integer gradientAccumulationSteps) {
        this.gradientAccumulationSteps = gradientAccumulationSteps;
        return this;
    }

    /**
     * Get the learningRate property: The learning rate for the training procedure.
     *
     * @return the learningRate value.
     */
    public Float learningRate() {
        return this.learningRate;
    }

    /**
     * Set the learningRate property: The learning rate for the training procedure.
     *
     * @param learningRate the learningRate value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withLearningRate(Float learningRate) {
        this.learningRate = learningRate;
        return this;
    }

    /**
     * Get the learningRateScheduler property: The type of learning rate schedule to use during the training procedure.
     *
     * @return the learningRateScheduler value.
     */
    public NlpLearningRateScheduler learningRateScheduler() {
        return this.learningRateScheduler;
    }

    /**
     * Set the learningRateScheduler property: The type of learning rate schedule to use during the training procedure.
     *
     * @param learningRateScheduler the learningRateScheduler value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withLearningRateScheduler(NlpLearningRateScheduler learningRateScheduler) {
        this.learningRateScheduler = learningRateScheduler;
        return this;
    }

    /**
     * Get the modelName property: The name of the model to train.
     *
     * @return the modelName value.
     */
    public String modelName() {
        return this.modelName;
    }

    /**
     * Set the modelName property: The name of the model to train.
     *
     * @param modelName the modelName value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withModelName(String modelName) {
        this.modelName = modelName;
        return this;
    }

    /**
     * Get the numberOfEpochs property: Number of training epochs.
     *
     * @return the numberOfEpochs value.
     */
    public Integer numberOfEpochs() {
        return this.numberOfEpochs;
    }

    /**
     * Set the numberOfEpochs property: Number of training epochs.
     *
     * @param numberOfEpochs the numberOfEpochs value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withNumberOfEpochs(Integer numberOfEpochs) {
        this.numberOfEpochs = numberOfEpochs;
        return this;
    }

    /**
     * Get the trainingBatchSize property: The batch size for the training procedure.
     *
     * @return the trainingBatchSize value.
     */
    public Integer trainingBatchSize() {
        return this.trainingBatchSize;
    }

    /**
     * Set the trainingBatchSize property: The batch size for the training procedure.
     *
     * @param trainingBatchSize the trainingBatchSize value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withTrainingBatchSize(Integer trainingBatchSize) {
        this.trainingBatchSize = trainingBatchSize;
        return this;
    }

    /**
     * Get the validationBatchSize property: The batch size to be used during evaluation.
     *
     * @return the validationBatchSize value.
     */
    public Integer validationBatchSize() {
        return this.validationBatchSize;
    }

    /**
     * Set the validationBatchSize property: The batch size to be used during evaluation.
     *
     * @param validationBatchSize the validationBatchSize value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withValidationBatchSize(Integer validationBatchSize) {
        this.validationBatchSize = validationBatchSize;
        return this;
    }

    /**
     * Get the warmupRatio property: The warmup ratio, used alongside LrSchedulerType.
     *
     * @return the warmupRatio value.
     */
    public Float warmupRatio() {
        return this.warmupRatio;
    }

    /**
     * Set the warmupRatio property: The warmup ratio, used alongside LrSchedulerType.
     *
     * @param warmupRatio the warmupRatio value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withWarmupRatio(Float warmupRatio) {
        this.warmupRatio = warmupRatio;
        return this;
    }

    /**
     * Get the weightDecay property: The weight decay for the training procedure.
     *
     * @return the weightDecay value.
     */
    public Float weightDecay() {
        return this.weightDecay;
    }

    /**
     * Set the weightDecay property: The weight decay for the training procedure.
     *
     * @param weightDecay the weightDecay value to set.
     * @return the NlpFixedParameters object itself.
     */
    public NlpFixedParameters withWeightDecay(Float weightDecay) {
        this.weightDecay = weightDecay;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
