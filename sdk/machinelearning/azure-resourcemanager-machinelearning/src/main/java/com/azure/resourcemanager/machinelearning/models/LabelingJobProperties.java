// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** Labeling job definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "jobType")
@JsonTypeName("Labeling")
@Fluent
public final class LabelingJobProperties extends JobBaseProperties {
    /*
     * Created time of the job in UTC timezone.
     */
    @JsonProperty(value = "createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * Configuration of data used in the job.
     */
    @JsonProperty(value = "dataConfiguration")
    private LabelingDataConfiguration dataConfiguration;

    /*
     * Labeling instructions of the job.
     */
    @JsonProperty(value = "jobInstructions")
    private LabelingJobInstructions jobInstructions;

    /*
     * Label categories of the job.
     */
    @JsonProperty(value = "labelCategories")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, LabelCategory> labelCategories;

    /*
     * Media type specific properties in the job.
     */
    @JsonProperty(value = "labelingJobMediaProperties")
    private LabelingJobMediaProperties labelingJobMediaProperties;

    /*
     * Configuration of MLAssist feature in the job.
     */
    @JsonProperty(value = "mlAssistConfiguration")
    private MLAssistConfiguration mlAssistConfiguration;

    /*
     * Progress metrics of the job.
     */
    @JsonProperty(value = "progressMetrics", access = JsonProperty.Access.WRITE_ONLY)
    private ProgressMetrics progressMetrics;

    /*
     * Internal id of the job(Previously called project).
     */
    @JsonProperty(value = "projectId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID projectId;

    /*
     * Specifies the labeling job provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private JobProvisioningState provisioningState;

    /*
     * Status messages of the job.
     */
    @JsonProperty(value = "statusMessages", access = JsonProperty.Access.WRITE_ONLY)
    private List<StatusMessage> statusMessages;

    /** Creates an instance of LabelingJobProperties class. */
    public LabelingJobProperties() {
    }

    /**
     * Get the createdDateTime property: Created time of the job in UTC timezone.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the dataConfiguration property: Configuration of data used in the job.
     *
     * @return the dataConfiguration value.
     */
    public LabelingDataConfiguration dataConfiguration() {
        return this.dataConfiguration;
    }

    /**
     * Set the dataConfiguration property: Configuration of data used in the job.
     *
     * @param dataConfiguration the dataConfiguration value to set.
     * @return the LabelingJobProperties object itself.
     */
    public LabelingJobProperties withDataConfiguration(LabelingDataConfiguration dataConfiguration) {
        this.dataConfiguration = dataConfiguration;
        return this;
    }

    /**
     * Get the jobInstructions property: Labeling instructions of the job.
     *
     * @return the jobInstructions value.
     */
    public LabelingJobInstructions jobInstructions() {
        return this.jobInstructions;
    }

    /**
     * Set the jobInstructions property: Labeling instructions of the job.
     *
     * @param jobInstructions the jobInstructions value to set.
     * @return the LabelingJobProperties object itself.
     */
    public LabelingJobProperties withJobInstructions(LabelingJobInstructions jobInstructions) {
        this.jobInstructions = jobInstructions;
        return this;
    }

    /**
     * Get the labelCategories property: Label categories of the job.
     *
     * @return the labelCategories value.
     */
    public Map<String, LabelCategory> labelCategories() {
        return this.labelCategories;
    }

    /**
     * Set the labelCategories property: Label categories of the job.
     *
     * @param labelCategories the labelCategories value to set.
     * @return the LabelingJobProperties object itself.
     */
    public LabelingJobProperties withLabelCategories(Map<String, LabelCategory> labelCategories) {
        this.labelCategories = labelCategories;
        return this;
    }

    /**
     * Get the labelingJobMediaProperties property: Media type specific properties in the job.
     *
     * @return the labelingJobMediaProperties value.
     */
    public LabelingJobMediaProperties labelingJobMediaProperties() {
        return this.labelingJobMediaProperties;
    }

    /**
     * Set the labelingJobMediaProperties property: Media type specific properties in the job.
     *
     * @param labelingJobMediaProperties the labelingJobMediaProperties value to set.
     * @return the LabelingJobProperties object itself.
     */
    public LabelingJobProperties withLabelingJobMediaProperties(LabelingJobMediaProperties labelingJobMediaProperties) {
        this.labelingJobMediaProperties = labelingJobMediaProperties;
        return this;
    }

    /**
     * Get the mlAssistConfiguration property: Configuration of MLAssist feature in the job.
     *
     * @return the mlAssistConfiguration value.
     */
    public MLAssistConfiguration mlAssistConfiguration() {
        return this.mlAssistConfiguration;
    }

    /**
     * Set the mlAssistConfiguration property: Configuration of MLAssist feature in the job.
     *
     * @param mlAssistConfiguration the mlAssistConfiguration value to set.
     * @return the LabelingJobProperties object itself.
     */
    public LabelingJobProperties withMlAssistConfiguration(MLAssistConfiguration mlAssistConfiguration) {
        this.mlAssistConfiguration = mlAssistConfiguration;
        return this;
    }

    /**
     * Get the progressMetrics property: Progress metrics of the job.
     *
     * @return the progressMetrics value.
     */
    public ProgressMetrics progressMetrics() {
        return this.progressMetrics;
    }

    /**
     * Get the projectId property: Internal id of the job(Previously called project).
     *
     * @return the projectId value.
     */
    public UUID projectId() {
        return this.projectId;
    }

    /**
     * Get the provisioningState property: Specifies the labeling job provisioning state.
     *
     * @return the provisioningState value.
     */
    public JobProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the statusMessages property: Status messages of the job.
     *
     * @return the statusMessages value.
     */
    public List<StatusMessage> statusMessages() {
        return this.statusMessages;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withComponentId(String componentId) {
        super.withComponentId(componentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withComputeId(String computeId) {
        super.withComputeId(computeId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withExperimentName(String experimentName) {
        super.withExperimentName(experimentName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withIdentity(IdentityConfiguration identity) {
        super.withIdentity(identity);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withServices(Map<String, JobService> services) {
        super.withServices(services);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabelingJobProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataConfiguration() != null) {
            dataConfiguration().validate();
        }
        if (jobInstructions() != null) {
            jobInstructions().validate();
        }
        if (labelCategories() != null) {
            labelCategories()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (labelingJobMediaProperties() != null) {
            labelingJobMediaProperties().validate();
        }
        if (mlAssistConfiguration() != null) {
            mlAssistConfiguration().validate();
        }
        if (progressMetrics() != null) {
            progressMetrics().validate();
        }
        if (statusMessages() != null) {
            statusMessages().forEach(e -> e.validate());
        }
    }
}
