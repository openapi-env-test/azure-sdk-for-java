// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Specifies the custom service configuration. */
@Fluent
public final class CustomService {
    /*
     * Name of the Custom Service
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Describes the Image Specifications
     */
    @JsonProperty(value = "image")
    private Image image;

    /*
     * Environment Variable for the container
     */
    @JsonProperty(value = "environmentVariables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, EnvironmentVariable> environmentVariables;

    /*
     * Describes the docker settings for the image
     */
    @JsonProperty(value = "docker")
    private Docker docker;

    /*
     * Configuring the endpoints for the container
     */
    @JsonProperty(value = "endpoints")
    private List<Endpoint> endpoints;

    /*
     * Configuring the volumes for the container
     */
    @JsonProperty(value = "volumes")
    private List<VolumeDefinition> volumes;

    /*
     * Specifies the custom service configuration
     */
    @JsonIgnore private Map<String, Object> additionalProperties;

    /**
     * Get the name property: Name of the Custom Service.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the Custom Service.
     *
     * @param name the name value to set.
     * @return the CustomService object itself.
     */
    public CustomService withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the image property: Describes the Image Specifications.
     *
     * @return the image value.
     */
    public Image image() {
        return this.image;
    }

    /**
     * Set the image property: Describes the Image Specifications.
     *
     * @param image the image value to set.
     * @return the CustomService object itself.
     */
    public CustomService withImage(Image image) {
        this.image = image;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment Variable for the container.
     *
     * @return the environmentVariables value.
     */
    public Map<String, EnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment Variable for the container.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the CustomService object itself.
     */
    public CustomService withEnvironmentVariables(Map<String, EnvironmentVariable> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the docker property: Describes the docker settings for the image.
     *
     * @return the docker value.
     */
    public Docker docker() {
        return this.docker;
    }

    /**
     * Set the docker property: Describes the docker settings for the image.
     *
     * @param docker the docker value to set.
     * @return the CustomService object itself.
     */
    public CustomService withDocker(Docker docker) {
        this.docker = docker;
        return this;
    }

    /**
     * Get the endpoints property: Configuring the endpoints for the container.
     *
     * @return the endpoints value.
     */
    public List<Endpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Configuring the endpoints for the container.
     *
     * @param endpoints the endpoints value to set.
     * @return the CustomService object itself.
     */
    public CustomService withEndpoints(List<Endpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the volumes property: Configuring the volumes for the container.
     *
     * @return the volumes value.
     */
    public List<VolumeDefinition> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes property: Configuring the volumes for the container.
     *
     * @param volumes the volumes value to set.
     * @return the CustomService object itself.
     */
    public CustomService withVolumes(List<VolumeDefinition> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * Get the additionalProperties property: Specifies the custom service configuration.
     *
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Specifies the custom service configuration.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the CustomService object itself.
     */
    public CustomService withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, Object value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (image() != null) {
            image().validate();
        }
        if (environmentVariables() != null) {
            environmentVariables()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (docker() != null) {
            docker().validate();
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (volumes() != null) {
            volumes().forEach(e -> e.validate());
        }
    }
}
