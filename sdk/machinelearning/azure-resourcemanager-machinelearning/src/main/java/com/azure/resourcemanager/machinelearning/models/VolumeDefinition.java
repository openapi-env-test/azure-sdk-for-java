// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The VolumeDefinition model. */
@Fluent
public final class VolumeDefinition {
    /*
     * Type of Volume Definition Type of Volume Definition. Possible Values:
     * bind,volume,tmpfs,npipe
     */
    @JsonProperty(value = "type")
    private VolumeDefinitionType type;

    /*
     * Indicate whether to mount volume as readOnly
     */
    @JsonProperty(value = "readOnly")
    private Boolean readOnly;

    /*
     * Source of the mount
     */
    @JsonProperty(value = "source")
    private String source;

    /*
     * Target of the mount
     */
    @JsonProperty(value = "target")
    private String target;

    /*
     * Consistency of the volume
     */
    @JsonProperty(value = "consistency")
    private String consistency;

    /*
     * Bind Options of the mount
     */
    @JsonProperty(value = "bind")
    private BindOptions bind;

    /*
     * Volume Options of the mount
     */
    @JsonProperty(value = "volume")
    private VolumeOptions volume;

    /*
     * tmpfs option of the mount
     */
    @JsonProperty(value = "tmpfs")
    private TmpfsOptions tmpfs;

    /**
     * Get the type property: Type of Volume Definition Type of Volume Definition. Possible Values:
     * bind,volume,tmpfs,npipe.
     *
     * @return the type value.
     */
    public VolumeDefinitionType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of Volume Definition Type of Volume Definition. Possible Values:
     * bind,volume,tmpfs,npipe.
     *
     * @param type the type value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withType(VolumeDefinitionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the readOnly property: Indicate whether to mount volume as readOnly.
     *
     * @return the readOnly value.
     */
    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * Set the readOnly property: Indicate whether to mount volume as readOnly.
     *
     * @param readOnly the readOnly value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get the source property: Source of the mount.
     *
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Source of the mount.
     *
     * @param source the source value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the target property: Target of the mount.
     *
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: Target of the mount.
     *
     * @param target the target value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the consistency property: Consistency of the volume.
     *
     * @return the consistency value.
     */
    public String consistency() {
        return this.consistency;
    }

    /**
     * Set the consistency property: Consistency of the volume.
     *
     * @param consistency the consistency value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withConsistency(String consistency) {
        this.consistency = consistency;
        return this;
    }

    /**
     * Get the bind property: Bind Options of the mount.
     *
     * @return the bind value.
     */
    public BindOptions bind() {
        return this.bind;
    }

    /**
     * Set the bind property: Bind Options of the mount.
     *
     * @param bind the bind value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withBind(BindOptions bind) {
        this.bind = bind;
        return this;
    }

    /**
     * Get the volume property: Volume Options of the mount.
     *
     * @return the volume value.
     */
    public VolumeOptions volume() {
        return this.volume;
    }

    /**
     * Set the volume property: Volume Options of the mount.
     *
     * @param volume the volume value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withVolume(VolumeOptions volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Get the tmpfs property: tmpfs option of the mount.
     *
     * @return the tmpfs value.
     */
    public TmpfsOptions tmpfs() {
        return this.tmpfs;
    }

    /**
     * Set the tmpfs property: tmpfs option of the mount.
     *
     * @param tmpfs the tmpfs value to set.
     * @return the VolumeDefinition object itself.
     */
    public VolumeDefinition withTmpfs(TmpfsOptions tmpfs) {
        this.tmpfs = tmpfs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bind() != null) {
            bind().validate();
        }
        if (volume() != null) {
            volume().validate();
        }
        if (tmpfs() != null) {
            tmpfs().validate();
        }
    }
}
