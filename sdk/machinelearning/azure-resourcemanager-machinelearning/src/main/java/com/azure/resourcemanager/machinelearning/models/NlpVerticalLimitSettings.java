// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;

/** Job execution constraints. */
@Fluent
public final class NlpVerticalLimitSettings {
    /*
     * Maximum Concurrent AutoML iterations.
     */
    @JsonProperty(value = "maxConcurrentTrials")
    private Integer maxConcurrentTrials;

    /*
     * Maximum nodes to use for the experiment.
     */
    @JsonProperty(value = "maxNodes")
    private Integer maxNodes;

    /*
     * Number of AutoML iterations.
     */
    @JsonProperty(value = "maxTrials")
    private Integer maxTrials;

    /*
     * AutoML job timeout.
     */
    @JsonProperty(value = "timeout")
    private Duration timeout;

    /*
     * Timeout for individual HD trials.
     */
    @JsonProperty(value = "trialTimeout")
    private Duration trialTimeout;

    /** Creates an instance of NlpVerticalLimitSettings class. */
    public NlpVerticalLimitSettings() {
    }

    /**
     * Get the maxConcurrentTrials property: Maximum Concurrent AutoML iterations.
     *
     * @return the maxConcurrentTrials value.
     */
    public Integer maxConcurrentTrials() {
        return this.maxConcurrentTrials;
    }

    /**
     * Set the maxConcurrentTrials property: Maximum Concurrent AutoML iterations.
     *
     * @param maxConcurrentTrials the maxConcurrentTrials value to set.
     * @return the NlpVerticalLimitSettings object itself.
     */
    public NlpVerticalLimitSettings withMaxConcurrentTrials(Integer maxConcurrentTrials) {
        this.maxConcurrentTrials = maxConcurrentTrials;
        return this;
    }

    /**
     * Get the maxNodes property: Maximum nodes to use for the experiment.
     *
     * @return the maxNodes value.
     */
    public Integer maxNodes() {
        return this.maxNodes;
    }

    /**
     * Set the maxNodes property: Maximum nodes to use for the experiment.
     *
     * @param maxNodes the maxNodes value to set.
     * @return the NlpVerticalLimitSettings object itself.
     */
    public NlpVerticalLimitSettings withMaxNodes(Integer maxNodes) {
        this.maxNodes = maxNodes;
        return this;
    }

    /**
     * Get the maxTrials property: Number of AutoML iterations.
     *
     * @return the maxTrials value.
     */
    public Integer maxTrials() {
        return this.maxTrials;
    }

    /**
     * Set the maxTrials property: Number of AutoML iterations.
     *
     * @param maxTrials the maxTrials value to set.
     * @return the NlpVerticalLimitSettings object itself.
     */
    public NlpVerticalLimitSettings withMaxTrials(Integer maxTrials) {
        this.maxTrials = maxTrials;
        return this;
    }

    /**
     * Get the timeout property: AutoML job timeout.
     *
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: AutoML job timeout.
     *
     * @param timeout the timeout value to set.
     * @return the NlpVerticalLimitSettings object itself.
     */
    public NlpVerticalLimitSettings withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the trialTimeout property: Timeout for individual HD trials.
     *
     * @return the trialTimeout value.
     */
    public Duration trialTimeout() {
        return this.trialTimeout;
    }

    /**
     * Set the trialTimeout property: Timeout for individual HD trials.
     *
     * @param trialTimeout the trialTimeout value to set.
     * @return the NlpVerticalLimitSettings object itself.
     */
    public NlpVerticalLimitSettings withTrialTimeout(Duration trialTimeout) {
        this.trialTimeout = trialTimeout;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
