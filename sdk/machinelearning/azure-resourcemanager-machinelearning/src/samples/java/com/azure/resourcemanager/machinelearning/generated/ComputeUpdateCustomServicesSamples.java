// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.models.CustomService;
import com.azure.resourcemanager.machinelearning.models.Docker;
import com.azure.resourcemanager.machinelearning.models.Endpoint;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVariable;
import com.azure.resourcemanager.machinelearning.models.EnvironmentVariableType;
import com.azure.resourcemanager.machinelearning.models.Image;
import com.azure.resourcemanager.machinelearning.models.ImageType;
import com.azure.resourcemanager.machinelearning.models.Protocol;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinition;
import com.azure.resourcemanager.machinelearning.models.VolumeDefinitionType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Compute UpdateCustomServices. */
public final class ComputeUpdateCustomServicesSamples {
    /*
     * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-06-01-preview/examples/Compute/updateCustomServices.json
     */
    /**
     * Sample code: Update Custom Services.
     *
     * @param manager Entry point to MachineLearningManager.
     */
    public static void updateCustomServices(com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager
            .computes()
            .updateCustomServicesWithResponse(
                "testrg123",
                "workspaces123",
                "compute123",
                Arrays
                    .asList(
                        new CustomService()
                            .withName("rstudio-workbench")
                            .withImage(
                                new Image()
                                    .withType(ImageType.DOCKER)
                                    .withReference("ghcr.io/azure/rstudio-workbench:latest")
                                    .withAdditionalProperties(mapOf()))
                            .withEnvironmentVariables(
                                mapOf(
                                    "RSP_LICENSE",
                                    new EnvironmentVariable()
                                        .withType(EnvironmentVariableType.LOCAL)
                                        .withValue("XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX")
                                        .withAdditionalProperties(mapOf())))
                            .withDocker(new Docker().withPrivileged(true).withAdditionalProperties(mapOf()))
                            .withEndpoints(
                                Arrays
                                    .asList(
                                        new Endpoint()
                                            .withProtocol(Protocol.HTTP)
                                            .withName("connect")
                                            .withTarget(8787)
                                            .withPublished(4444)))
                            .withVolumes(
                                Arrays
                                    .asList(
                                        new VolumeDefinition()
                                            .withType(VolumeDefinitionType.BIND)
                                            .withReadOnly(true)
                                            .withSource("/mnt/azureuser/")
                                            .withTarget("/home/testuser/")))
                            .withAdditionalProperties(mapOf())),
                Context.NONE);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
