// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnectorDataDestination;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnectorDataSource;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnectorMapping;
import com.azure.resourcemanager.healthcareapis.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Analytics Connector Properties. */
@Fluent
public final class AnalyticsConnectorProperties {
    /*
     * The provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Data source for Analytics Connector.
     */
    @JsonProperty(value = "dataSourceConfiguration", required = true)
    private AnalyticsConnectorDataSource dataSourceConfiguration;

    /*
     * Data mapping configuration for Analytics Connector.
     */
    @JsonProperty(value = "dataMappingConfiguration", required = true)
    private AnalyticsConnectorMapping dataMappingConfiguration;

    /*
     * Data destination configuration for Analytics Connector.
     */
    @JsonProperty(value = "dataDestinationConfiguration", required = true)
    private AnalyticsConnectorDataDestination dataDestinationConfiguration;

    /**
     * Get the provisioningState property: The provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dataSourceConfiguration property: Data source for Analytics Connector.
     *
     * @return the dataSourceConfiguration value.
     */
    public AnalyticsConnectorDataSource dataSourceConfiguration() {
        return this.dataSourceConfiguration;
    }

    /**
     * Set the dataSourceConfiguration property: Data source for Analytics Connector.
     *
     * @param dataSourceConfiguration the dataSourceConfiguration value to set.
     * @return the AnalyticsConnectorProperties object itself.
     */
    public AnalyticsConnectorProperties withDataSourceConfiguration(
        AnalyticsConnectorDataSource dataSourceConfiguration) {
        this.dataSourceConfiguration = dataSourceConfiguration;
        return this;
    }

    /**
     * Get the dataMappingConfiguration property: Data mapping configuration for Analytics Connector.
     *
     * @return the dataMappingConfiguration value.
     */
    public AnalyticsConnectorMapping dataMappingConfiguration() {
        return this.dataMappingConfiguration;
    }

    /**
     * Set the dataMappingConfiguration property: Data mapping configuration for Analytics Connector.
     *
     * @param dataMappingConfiguration the dataMappingConfiguration value to set.
     * @return the AnalyticsConnectorProperties object itself.
     */
    public AnalyticsConnectorProperties withDataMappingConfiguration(
        AnalyticsConnectorMapping dataMappingConfiguration) {
        this.dataMappingConfiguration = dataMappingConfiguration;
        return this;
    }

    /**
     * Get the dataDestinationConfiguration property: Data destination configuration for Analytics Connector.
     *
     * @return the dataDestinationConfiguration value.
     */
    public AnalyticsConnectorDataDestination dataDestinationConfiguration() {
        return this.dataDestinationConfiguration;
    }

    /**
     * Set the dataDestinationConfiguration property: Data destination configuration for Analytics Connector.
     *
     * @param dataDestinationConfiguration the dataDestinationConfiguration value to set.
     * @return the AnalyticsConnectorProperties object itself.
     */
    public AnalyticsConnectorProperties withDataDestinationConfiguration(
        AnalyticsConnectorDataDestination dataDestinationConfiguration) {
        this.dataDestinationConfiguration = dataDestinationConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSourceConfiguration() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataSourceConfiguration in model AnalyticsConnectorProperties"));
        } else {
            dataSourceConfiguration().validate();
        }
        if (dataMappingConfiguration() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataMappingConfiguration in model AnalyticsConnectorProperties"));
        } else {
            dataMappingConfiguration().validate();
        }
        if (dataDestinationConfiguration() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataDestinationConfiguration in model"
                            + " AnalyticsConnectorProperties"));
        } else {
            dataDestinationConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalyticsConnectorProperties.class);
}
