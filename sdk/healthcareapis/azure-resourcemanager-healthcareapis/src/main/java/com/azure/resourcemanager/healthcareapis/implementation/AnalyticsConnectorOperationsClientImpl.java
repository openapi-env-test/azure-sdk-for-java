// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.healthcareapis.fluent.AnalyticsConnectorOperationsClient;
import com.azure.resourcemanager.healthcareapis.fluent.models.AnalyticsConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnectorPatchResource;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AnalyticsConnectorOperationsClient. */
public final class AnalyticsConnectorOperationsClientImpl implements AnalyticsConnectorOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final AnalyticsConnectorOperationsService service;

    /** The service client containing this operation class. */
    private final HealthcareApisManagementClientImpl client;

    /**
     * Initializes an instance of AnalyticsConnectorOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AnalyticsConnectorOperationsClientImpl(HealthcareApisManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    AnalyticsConnectorOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HealthcareApisManagementClientAnalyticsConnectorOperations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HealthcareApisManage")
    private interface AnalyticsConnectorOperationsService {
        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis"
                + "/workspaces/{workspaceName}/analyticsconnectors/{analyticsConnectorName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("analyticsConnectorName") String analyticsConnectorName,
            @BodyParam("application/json") AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (analyticsConnectorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter analyticsConnectorName is required and cannot be null."));
        }
        if (analyticsConnectorPatchResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter analyticsConnectorPatchResource is required and cannot be null."));
        } else {
            analyticsConnectorPatchResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            workspaceName,
                            analyticsConnectorName,
                            analyticsConnectorPatchResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (analyticsConnectorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter analyticsConnectorName is required and cannot be null."));
        }
        if (analyticsConnectorPatchResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter analyticsConnectorPatchResource is required and cannot be null."));
        } else {
            analyticsConnectorPatchResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                workspaceName,
                analyticsConnectorName,
                analyticsConnectorPatchResource,
                accept,
                context);
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalyticsConnectorInner>, AnalyticsConnectorInner> beginUpdateAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource);
        return this
            .client
            .<AnalyticsConnectorInner, AnalyticsConnectorInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AnalyticsConnectorInner.class,
                AnalyticsConnectorInner.class,
                this.client.getContext());
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalyticsConnectorInner>, AnalyticsConnectorInner> beginUpdateAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource, context);
        return this
            .client
            .<AnalyticsConnectorInner, AnalyticsConnectorInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AnalyticsConnectorInner.class,
                AnalyticsConnectorInner.class,
                context);
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalyticsConnectorInner>, AnalyticsConnectorInner> beginUpdate(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource) {
        return beginUpdateAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource)
            .getSyncPoller();
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalyticsConnectorInner>, AnalyticsConnectorInner> beginUpdate(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource, context)
            .getSyncPoller();
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalyticsConnectorInner> updateAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource) {
        return beginUpdateAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalyticsConnectorInner> updateAsync(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyticsConnectorInner update(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource) {
        return updateAsync(resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource)
            .block();
    }

    /**
     * Patch Analytics Connector Service details.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param analyticsConnectorName The name of Analytics Connector resource.
     * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return analytics Connector definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyticsConnectorInner update(
        String resourceGroupName,
        String workspaceName,
        String analyticsConnectorName,
        AnalyticsConnectorPatchResource analyticsConnectorPatchResource,
        Context context) {
        return updateAsync(
                resourceGroupName, workspaceName, analyticsConnectorName, analyticsConnectorPatchResource, context)
            .block();
    }
}
