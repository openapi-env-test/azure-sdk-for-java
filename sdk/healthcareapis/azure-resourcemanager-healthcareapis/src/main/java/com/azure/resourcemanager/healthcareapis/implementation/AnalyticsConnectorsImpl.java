// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.healthcareapis.fluent.AnalyticsConnectorsClient;
import com.azure.resourcemanager.healthcareapis.fluent.models.AnalyticsConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnector;
import com.azure.resourcemanager.healthcareapis.models.AnalyticsConnectors;

public final class AnalyticsConnectorsImpl implements AnalyticsConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(AnalyticsConnectorsImpl.class);

    private final AnalyticsConnectorsClient innerClient;

    private final com.azure.resourcemanager.healthcareapis.HealthcareApisManager serviceManager;

    public AnalyticsConnectorsImpl(
        AnalyticsConnectorsClient innerClient,
        com.azure.resourcemanager.healthcareapis.HealthcareApisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AnalyticsConnector> listByWorkspace(String resourceGroupName, String workspaceName) {
        PagedIterable<AnalyticsConnectorInner> inner =
            this.serviceClient().listByWorkspace(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new AnalyticsConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<AnalyticsConnector> listByWorkspace(
        String resourceGroupName, String workspaceName, Context context) {
        PagedIterable<AnalyticsConnectorInner> inner =
            this.serviceClient().listByWorkspace(resourceGroupName, workspaceName, context);
        return Utils.mapPage(inner, inner1 -> new AnalyticsConnectorImpl(inner1, this.manager()));
    }

    public AnalyticsConnector get(String resourceGroupName, String workspaceName, String analyticsConnectorName) {
        AnalyticsConnectorInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, analyticsConnectorName);
        if (inner != null) {
            return new AnalyticsConnectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AnalyticsConnector> getWithResponse(
        String resourceGroupName, String workspaceName, String analyticsConnectorName, Context context) {
        Response<AnalyticsConnectorInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, analyticsConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AnalyticsConnectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String analyticsConnectorName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, analyticsConnectorName);
    }

    public void delete(String resourceGroupName, String workspaceName, String analyticsConnectorName, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, analyticsConnectorName, context);
    }

    public AnalyticsConnector getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String analyticsConnectorName = Utils.getValueFromIdByName(id, "analyticsconnectors");
        if (analyticsConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'analyticsconnectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, analyticsConnectorName, Context.NONE).getValue();
    }

    public Response<AnalyticsConnector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String analyticsConnectorName = Utils.getValueFromIdByName(id, "analyticsconnectors");
        if (analyticsConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'analyticsconnectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, analyticsConnectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String analyticsConnectorName = Utils.getValueFromIdByName(id, "analyticsconnectors");
        if (analyticsConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'analyticsconnectors'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, analyticsConnectorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String analyticsConnectorName = Utils.getValueFromIdByName(id, "analyticsconnectors");
        if (analyticsConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'analyticsconnectors'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, analyticsConnectorName, context);
    }

    private AnalyticsConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.healthcareapis.HealthcareApisManager manager() {
        return this.serviceManager;
    }

    public AnalyticsConnectorImpl define(String name) {
        return new AnalyticsConnectorImpl(name, this.manager());
    }
}
